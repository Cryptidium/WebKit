// This file was generated by KeywordLookupGenerator.py.  Do not edit.

#include <wtf/StdLibExtras.h>
#include <wtf/text/FastCharacterComparison.h>


WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN

namespace JSC {

static ALWAYS_INLINE bool cannotBeIdentPartOrEscapeStart(LChar);
static ALWAYS_INLINE bool cannotBeIdentPartOrEscapeStart(char16_t);
static constexpr int maxTokenLength = 11;

template <>
template <bool shouldCreateIdentifier> ALWAYS_INLINE JSTokenType Lexer<char16_t>::parseKeyword(JSTokenData* data)
{
    ASSERT(m_codeEnd - m_code >= maxTokenLength);

    const char16_t* code = m_code;
    if (code[0] == 't') {
        if (code[1] == 'h') {
            if (compareCharacters(code + 2, 'i', 's')) {
                if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                    internalShift<4>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->thisKeyword;
                    return THISTOKEN;
                }
            } else if (compareCharacters(code + 1, 'h', 'r', 'o', 'w')) {
                if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                    internalShift<5>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->throwKeyword;
                    return THROW;
                }
            }
        } else if (code[1] == 'r') {
            if (compareCharacters(code + 2, 'u', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                    internalShift<4>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->trueKeyword;
                    return TRUETOKEN;
                }
            } else if (code[2] == 'y') {
                if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                    internalShift<3>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->tryKeyword;
                    return TRY;
                }
            }
        } else if (compareCharacters(code + 1, 'y', 'p', 'e', 'o', 'f')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->typeofKeyword;
                return TYPEOF;
            }
        }
    } else if (code[0] == 'f') {
        if (compareCharacters(code + 1, 'u', 'n', 'c', 't', 'i', 'o', 'n')) {
            if (cannotBeIdentPartOrEscapeStart(code[8])) [[likely]] {
                internalShift<8>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->functionKeyword;
                return FUNCTION;
            }
        } else if (compareCharacters(code + 1, 'o', 'r')) {
            if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                internalShift<3>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->forKeyword;
                return FOR;
            }
        } else if (compareCharacters(code + 1, 'a', 'l', 's', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->falseKeyword;
                return FALSETOKEN;
            }
        } else if (compareCharacters(code + 1, 'i', 'n', 'a', 'l', 'l', 'y')) {
            if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                internalShift<7>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->finallyKeyword;
                return FINALLY;
            }
        }
    } else if (code[0] == 'i') {
        if (code[1] == 'f') {
            if (cannotBeIdentPartOrEscapeStart(code[2])) [[likely]] {
                internalShift<2>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->ifKeyword;
                return IF;
            }
        } else if (code[1] == 'n') {
            if (cannotBeIdentPartOrEscapeStart(code[2])) [[likely]] {
                internalShift<2>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->inKeyword;
                return INTOKEN;
            }
            if (compareCharacters(code + 2, 's', 't', 'a', 'n', 'c', 'e', 'o', 'f')) {
                if (cannotBeIdentPartOrEscapeStart(code[10])) [[likely]] {
                    internalShift<10>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->instanceofKeyword;
                    return INSTANCEOF;
                }
            } else if (compareCharacters(code + 2, 't', 'e', 'r', 'f', 'a', 'c', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[9])) [[likely]] {
                    internalShift<9>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->interfaceKeyword;
                    return RESERVED_IF_STRICT;
                }
            }
        } else if (compareCharacters(code + 1, 'm', 'p')) {
            if (compareCharacters(code + 2, 'p', 'o', 'r', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                    internalShift<6>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->importKeyword;
                    return IMPORT;
                }
            } else if (compareCharacters(code + 3, 'l', 'e', 'm', 'e', 'n', 't', 's')) {
                if (cannotBeIdentPartOrEscapeStart(code[10])) [[likely]] {
                    internalShift<10>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->implementsKeyword;
                    return RESERVED_IF_STRICT;
                }
            }
        }
    } else if (code[0] == 'v') {
        if (compareCharacters(code + 1, 'a', 'r')) {
            if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                internalShift<3>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->varKeyword;
                return VAR;
            }
        } else if (compareCharacters(code, 'v', 'o', 'i', 'd')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->voidKeyword;
                return VOIDTOKEN;
            }
        }
    } else if (compareCharacters(code, 'r', 'e', 't', 'u', 'r', 'n')) {
        if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
            internalShift<6>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->returnKeyword;
            return RETURN;
        }
    } else if (code[0] == 'n') {
        if (compareCharacters(code, 'n', 'u', 'l', 'l')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->nullKeyword;
                return NULLTOKEN;
            }
        } else if (compareCharacters(code + 1, 'e', 'w')) {
            if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                internalShift<3>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->newKeyword;
                return NEW;
            }
        }
    } else if (code[0] == 'e') {
        if (compareCharacters(code, 'e', 'l', 's', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->elseKeyword;
                return ELSE;
            }
        } else if (code[1] == 'x') {
            if (compareCharacters(code + 2, 't', 'e', 'n', 'd', 's')) {
                if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                    internalShift<7>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->extendsKeyword;
                    return EXTENDS;
                }
            } else if (compareCharacters(code + 2, 'p', 'o', 'r', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                    internalShift<6>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->exportKeyword;
                    return EXPORT_;
                }
            }
        } else if (compareCharacters(code, 'e', 'n', 'u', 'm')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->enumKeyword;
                return RESERVED;
            }
        }
    } else if (code[0] == 'c') {
        if (code[1] == 'a') {
            if (compareCharacters(code + 2, 's', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                    internalShift<4>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->caseKeyword;
                    return CASE;
                }
            } else if (compareCharacters(code + 1, 'a', 't', 'c', 'h')) {
                if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                    internalShift<5>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->catchKeyword;
                    return CATCH;
                }
            }
        } else if (compareCharacters(code + 1, 'l', 'a', 's', 's')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->classKeyword;
                return CLASSTOKEN;
            }
        } else if (compareCharacters(code + 1, 'o', 'n')) {
            if (compareCharacters(code + 3, 's', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                    internalShift<5>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->constKeyword;
                    return CONSTTOKEN;
                }
            } else if (compareCharacters(code + 3, 't', 'i', 'n', 'u', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[8])) [[likely]] {
                    internalShift<8>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->continueKeyword;
                    return CONTINUE;
                }
            }
        }
    } else if (compareCharacters(code, 'b', 'r', 'e', 'a', 'k')) {
        if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
            internalShift<5>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->breakKeyword;
            return BREAK;
        }
    } else if (code[0] == 'w') {
        if (compareCharacters(code + 1, 'h', 'i', 'l', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->whileKeyword;
                return WHILE;
            }
        } else if (compareCharacters(code, 'w', 'i', 't', 'h')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->withKeyword;
                return WITH;
            }
        }
    } else if (compareCharacters(code, 'a', 'w', 'a', 'i', 't')) {
        if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
            internalShift<5>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->awaitKeyword;
            return AWAIT;
        }
    } else if (code[0] == 'd') {
        if (code[1] == 'e') {
            if (compareCharacters(code + 2, 'f', 'a', 'u', 'l', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                    internalShift<7>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->defaultKeyword;
                    return DEFAULT;
                }
            } else if (compareCharacters(code + 2, 'l', 'e', 't', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                    internalShift<6>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->deleteKeyword;
                    return DELETETOKEN;
                }
            } else if (compareCharacters(code + 2, 'b', 'u', 'g', 'g', 'e', 'r')) {
                if (cannotBeIdentPartOrEscapeStart(code[8])) [[likely]] {
                    internalShift<8>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->debuggerKeyword;
                    return DEBUGGER;
                }
            }
        } else if (code[1] == 'o') {
            if (cannotBeIdentPartOrEscapeStart(code[2])) [[likely]] {
                internalShift<2>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->doKeyword;
                return DO;
            }
        }
    } else if (compareCharacters(code, 'l', 'e', 't')) {
        if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
            internalShift<3>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->letKeyword;
            return LET;
        }
    } else if (code[0] == 's') {
        if (compareCharacters(code + 1, 'u', 'p', 'e', 'r')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->superKeyword;
                return SUPER;
            }
        } else if (compareCharacters(code + 1, 'w', 'i', 't', 'c', 'h')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->switchKeyword;
                return SWITCH;
            }
        } else if (compareCharacters(code + 1, 't', 'a', 't', 'i', 'c')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->staticKeyword;
                return RESERVED_IF_STRICT;
            }
        }
    } else if (compareCharacters(code, 'y', 'i', 'e', 'l', 'd')) {
        if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
            internalShift<5>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->yieldKeyword;
            return YIELD;
        }
    } else if (code[0] == 'p') {
        if (compareCharacters(code + 1, 'a', 'c', 'k', 'a', 'g', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                internalShift<7>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->packageKeyword;
                return RESERVED_IF_STRICT;
            }
        } else if (code[1] == 'r') {
            if (compareCharacters(code + 2, 'i', 'v', 'a', 't', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                    internalShift<7>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->privateKeyword;
                    return RESERVED_IF_STRICT;
                }
            } else if (compareCharacters(code + 2, 'o', 't', 'e', 'c', 't', 'e', 'd')) {
                if (cannotBeIdentPartOrEscapeStart(code[9])) [[likely]] {
                    internalShift<9>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->protectedKeyword;
                    return RESERVED_IF_STRICT;
                }
            }
        } else if (compareCharacters(code + 1, 'u', 'b', 'l', 'i', 'c')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->publicKeyword;
                return RESERVED_IF_STRICT;
            }
        }
    }
    return IDENT;
}

template <>
template <bool shouldCreateIdentifier> ALWAYS_INLINE JSTokenType Lexer<LChar>::parseKeyword(JSTokenData* data)
{
    ASSERT(m_codeEnd - m_code >= maxTokenLength);

    const LChar* code = m_code;
    if (code[0] == 't') {
        if (code[1] == 'h') {
            if (compareCharacters(code + 2, 'i', 's')) {
                if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                    internalShift<4>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->thisKeyword;
                    return THISTOKEN;
                }
            } else if (compareCharacters(code + 1, 'h', 'r', 'o', 'w')) {
                if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                    internalShift<5>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->throwKeyword;
                    return THROW;
                }
            }
        } else if (code[1] == 'r') {
            if (compareCharacters(code + 2, 'u', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                    internalShift<4>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->trueKeyword;
                    return TRUETOKEN;
                }
            } else if (code[2] == 'y') {
                if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                    internalShift<3>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->tryKeyword;
                    return TRY;
                }
            }
        } else if (compareCharacters(code + 1, 'y', 'p', 'e', 'o', 'f')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->typeofKeyword;
                return TYPEOF;
            }
        }
    } else if (code[0] == 'f') {
        if (compareCharacters(code + 1, 'u', 'n', 'c', 't', 'i', 'o', 'n')) {
            if (cannotBeIdentPartOrEscapeStart(code[8])) [[likely]] {
                internalShift<8>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->functionKeyword;
                return FUNCTION;
            }
        } else if (compareCharacters(code + 1, 'o', 'r')) {
            if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                internalShift<3>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->forKeyword;
                return FOR;
            }
        } else if (compareCharacters(code + 1, 'a', 'l', 's', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->falseKeyword;
                return FALSETOKEN;
            }
        } else if (compareCharacters(code + 1, 'i', 'n', 'a', 'l', 'l', 'y')) {
            if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                internalShift<7>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->finallyKeyword;
                return FINALLY;
            }
        }
    } else if (code[0] == 'i') {
        if (code[1] == 'f') {
            if (cannotBeIdentPartOrEscapeStart(code[2])) [[likely]] {
                internalShift<2>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->ifKeyword;
                return IF;
            }
        } else if (code[1] == 'n') {
            if (cannotBeIdentPartOrEscapeStart(code[2])) [[likely]] {
                internalShift<2>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->inKeyword;
                return INTOKEN;
            }
            if (compareCharacters(code + 2, 's', 't', 'a', 'n', 'c', 'e', 'o', 'f')) {
                if (cannotBeIdentPartOrEscapeStart(code[10])) [[likely]] {
                    internalShift<10>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->instanceofKeyword;
                    return INSTANCEOF;
                }
            } else if (compareCharacters(code + 2, 't', 'e', 'r', 'f', 'a', 'c', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[9])) [[likely]] {
                    internalShift<9>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->interfaceKeyword;
                    return RESERVED_IF_STRICT;
                }
            }
        } else if (compareCharacters(code + 1, 'm', 'p')) {
            if (compareCharacters(code + 2, 'p', 'o', 'r', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                    internalShift<6>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->importKeyword;
                    return IMPORT;
                }
            } else if (compareCharacters(code + 3, 'l', 'e', 'm', 'e', 'n', 't', 's')) {
                if (cannotBeIdentPartOrEscapeStart(code[10])) [[likely]] {
                    internalShift<10>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->implementsKeyword;
                    return RESERVED_IF_STRICT;
                }
            }
        }
    } else if (code[0] == 'v') {
        if (compareCharacters(code + 1, 'a', 'r')) {
            if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                internalShift<3>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->varKeyword;
                return VAR;
            }
        } else if (compareCharacters(code, 'v', 'o', 'i', 'd')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->voidKeyword;
                return VOIDTOKEN;
            }
        }
    } else if (compareCharacters(code, 'r', 'e', 't', 'u', 'r', 'n')) {
        if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
            internalShift<6>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->returnKeyword;
            return RETURN;
        }
    } else if (code[0] == 'n') {
        if (compareCharacters(code, 'n', 'u', 'l', 'l')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->nullKeyword;
                return NULLTOKEN;
            }
        } else if (compareCharacters(code + 1, 'e', 'w')) {
            if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
                internalShift<3>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->newKeyword;
                return NEW;
            }
        }
    } else if (code[0] == 'e') {
        if (compareCharacters(code, 'e', 'l', 's', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->elseKeyword;
                return ELSE;
            }
        } else if (code[1] == 'x') {
            if (compareCharacters(code + 2, 't', 'e', 'n', 'd', 's')) {
                if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                    internalShift<7>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->extendsKeyword;
                    return EXTENDS;
                }
            } else if (compareCharacters(code + 2, 'p', 'o', 'r', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                    internalShift<6>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->exportKeyword;
                    return EXPORT_;
                }
            }
        } else if (compareCharacters(code, 'e', 'n', 'u', 'm')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->enumKeyword;
                return RESERVED;
            }
        }
    } else if (code[0] == 'c') {
        if (code[1] == 'a') {
            if (compareCharacters(code + 2, 's', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                    internalShift<4>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->caseKeyword;
                    return CASE;
                }
            } else if (compareCharacters(code + 1, 'a', 't', 'c', 'h')) {
                if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                    internalShift<5>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->catchKeyword;
                    return CATCH;
                }
            }
        } else if (compareCharacters(code + 1, 'l', 'a', 's', 's')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->classKeyword;
                return CLASSTOKEN;
            }
        } else if (compareCharacters(code + 1, 'o', 'n')) {
            if (compareCharacters(code + 3, 's', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                    internalShift<5>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->constKeyword;
                    return CONSTTOKEN;
                }
            } else if (compareCharacters(code + 3, 't', 'i', 'n', 'u', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[8])) [[likely]] {
                    internalShift<8>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->continueKeyword;
                    return CONTINUE;
                }
            }
        }
    } else if (compareCharacters(code, 'b', 'r', 'e', 'a', 'k')) {
        if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
            internalShift<5>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->breakKeyword;
            return BREAK;
        }
    } else if (code[0] == 'w') {
        if (compareCharacters(code + 1, 'h', 'i', 'l', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->whileKeyword;
                return WHILE;
            }
        } else if (compareCharacters(code, 'w', 'i', 't', 'h')) {
            if (cannotBeIdentPartOrEscapeStart(code[4])) [[likely]] {
                internalShift<4>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->withKeyword;
                return WITH;
            }
        }
    } else if (compareCharacters(code, 'a', 'w', 'a', 'i', 't')) {
        if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
            internalShift<5>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->awaitKeyword;
            return AWAIT;
        }
    } else if (code[0] == 'd') {
        if (code[1] == 'e') {
            if (compareCharacters(code + 2, 'f', 'a', 'u', 'l', 't')) {
                if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                    internalShift<7>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->defaultKeyword;
                    return DEFAULT;
                }
            } else if (compareCharacters(code + 2, 'l', 'e', 't', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                    internalShift<6>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->deleteKeyword;
                    return DELETETOKEN;
                }
            } else if (compareCharacters(code + 2, 'b', 'u', 'g', 'g', 'e', 'r')) {
                if (cannotBeIdentPartOrEscapeStart(code[8])) [[likely]] {
                    internalShift<8>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->debuggerKeyword;
                    return DEBUGGER;
                }
            }
        } else if (code[1] == 'o') {
            if (cannotBeIdentPartOrEscapeStart(code[2])) [[likely]] {
                internalShift<2>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->doKeyword;
                return DO;
            }
        }
    } else if (compareCharacters(code, 'l', 'e', 't')) {
        if (cannotBeIdentPartOrEscapeStart(code[3])) [[likely]] {
            internalShift<3>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->letKeyword;
            return LET;
        }
    } else if (code[0] == 's') {
        if (compareCharacters(code + 1, 'u', 'p', 'e', 'r')) {
            if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
                internalShift<5>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->superKeyword;
                return SUPER;
            }
        } else if (compareCharacters(code + 1, 'w', 'i', 't', 'c', 'h')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->switchKeyword;
                return SWITCH;
            }
        } else if (compareCharacters(code + 1, 't', 'a', 't', 'i', 'c')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->staticKeyword;
                return RESERVED_IF_STRICT;
            }
        }
    } else if (compareCharacters(code, 'y', 'i', 'e', 'l', 'd')) {
        if (cannotBeIdentPartOrEscapeStart(code[5])) [[likely]] {
            internalShift<5>();
            if (shouldCreateIdentifier)
                data->ident = &m_vm.propertyNames->yieldKeyword;
            return YIELD;
        }
    } else if (code[0] == 'p') {
        if (compareCharacters(code + 1, 'a', 'c', 'k', 'a', 'g', 'e')) {
            if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                internalShift<7>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->packageKeyword;
                return RESERVED_IF_STRICT;
            }
        } else if (code[1] == 'r') {
            if (compareCharacters(code + 2, 'i', 'v', 'a', 't', 'e')) {
                if (cannotBeIdentPartOrEscapeStart(code[7])) [[likely]] {
                    internalShift<7>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->privateKeyword;
                    return RESERVED_IF_STRICT;
                }
            } else if (compareCharacters(code + 2, 'o', 't', 'e', 'c', 't', 'e', 'd')) {
                if (cannotBeIdentPartOrEscapeStart(code[9])) [[likely]] {
                    internalShift<9>();
                    if (shouldCreateIdentifier)
                        data->ident = &m_vm.propertyNames->protectedKeyword;
                    return RESERVED_IF_STRICT;
                }
            }
        } else if (compareCharacters(code + 1, 'u', 'b', 'l', 'i', 'c')) {
            if (cannotBeIdentPartOrEscapeStart(code[6])) [[likely]] {
                internalShift<6>();
                if (shouldCreateIdentifier)
                    data->ident = &m_vm.propertyNames->publicKeyword;
                return RESERVED_IF_STRICT;
            }
        }
    }
    return IDENT;
}

} // namespace JSC

WTF_ALLOW_UNSAFE_BUFFER_USAGE_END
