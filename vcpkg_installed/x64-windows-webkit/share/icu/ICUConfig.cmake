
####### Expanded from @PACKAGE_INIT@ by configure_package_config_file() #######
####### Any changes to this file will be overwritten by the next CMake run ####
####### The input file was Config.in.cmake                            ########

get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/../../" ABSOLUTE)

macro(set_and_check _var _file)
  set(${_var} "${_file}")
  if(NOT EXISTS "${_file}")
    message(FATAL_ERROR "File or directory ${_file} referenced by variable ${_var} does not exist !")
  endif()
endmacro()

macro(check_required_components _NAME)
  foreach(comp ${${_NAME}_FIND_COMPONENTS})
    if(NOT ${_NAME}_${comp}_FOUND)
      if(${_NAME}_FIND_REQUIRED_${comp})
        set(${_NAME}_FOUND FALSE)
      endif()
    endif()
  endforeach()
endmacro()

####################################################################################

# set_and_check() generated by configure_package_config_file(). check_required_components() generated by
# configure_package_config_file().

function(__icu_set_pkgdata_path)
    if(EXISTS "${ICU_PKGDATA_EXECUTABLE}")
        return()
    endif()

    if(NOT TARGET ICU::pkgdata)
        message(FATAL_ERROR "Internal error")
    endif()

    get_target_property(configurations ICU::pkgdata IMPORTED_CONFIGURATIONS)
    if(NOT configurations)
        message(FATAL_ERROR "Internal error")
    endif()
    list(LENGTH configurations len)
    if(len EQUAL "0")
        message(FATAL_ERROR "Internal error")
    endif()

    list(FIND configurations "RELEASE" release_index)
    if(release_index EQUAL "-1")
        list(GET configurations 0 use_config)
    else()
        set(use_config RELEASE)
    endif()

    get_target_property(ICU_PKGDATA_EXECUTABLE ICU::pkgdata IMPORTED_LOCATION_${use_config})

    if(NOT EXISTS "${ICU_PKGDATA_EXECUTABLE}")
        message(FATAL_ERROR "Internal error")
    endif()

    set(ICU_PKGDATA_EXECUTABLE
        "${ICU_PKGDATA_EXECUTABLE}"
        PARENT_SCOPE
    )
endfunction()

function(__icu_set_icupkg_path)
    if(EXISTS "${ICU_ICUPKG_EXECUTABLE}")
        return()
    endif()

    if(NOT TARGET ICU::icupkg)
        message(FATAL_ERROR "Internal error")
    endif()

    get_target_property(configurations ICU::icupkg IMPORTED_CONFIGURATIONS)
    if(NOT configurations)
        message(FATAL_ERROR "Internal error")
    endif()
    list(LENGTH configurations len)
    if(len EQUAL "0")
        message(FATAL_ERROR "Internal error")
    endif()

    list(FIND configurations "RELEASE" release_index)
    if(release_index EQUAL "-1")
        list(GET configurations 0 use_config)
    else()
        set(use_config RELEASE)
    endif()

    get_target_property(ICU_ICUPKG_EXECUTABLE ICU::icupkg IMPORTED_LOCATION_${use_config})

    if(NOT EXISTS "${ICU_ICUPKG_EXECUTABLE}")
        message(FATAL_ERROR "Internal error")
    endif()

    set(ICU_ICUPKG_EXECUTABLE
        "${ICU_ICUPKG_EXECUTABLE}"
        PARENT_SCOPE
    )
endfunction()

# Find the required libraries
if(ON AND NOT TARGET Threads::Threads)
    message(
        FATAL_ERROR "Target 'Threads::Threads' is NOT defined, use find_package(Threads) to define it."
    )
    # find_package(Threads REQUIRED)
endif()
if(OFF)
    find_library(LIB_M_LOCATION NAMES m)
    if(NOT LIB_M_LOCATION)
        message(FATAL_ERROR "'m' library is not found.")
    endif()
    # set(LIB_M_TARGET ) add_library(${LIB_M_TARGET} SHARED IMPORTED)
    # set_target_properties(${LIB_M_TARGET} PROPERTIES IMPORTED_LOCATION "${LIB_M_LOCATION}" )
endif()
if(OFF)
    find_library(LIB_DL_LOCATION NAMES ${CMAKE_DL_LIBS})
    if(NOT LIB_DL_LOCATION)
        message(FATAL_ERROR "'${CMAKE_DL_LIBS}' library is not found.")
    endif()
    # set(LIB_DL_TARGET ) add_library(${LIB_DL_TARGET} SHARED IMPORTED)
    # set_target_properties(${LIB_DL_TARGET} PROPERTIES IMPORTED_LOCATION "${LIB_DL_LOCATION}" )
endif()

# Include all libraries targets
include("${CMAKE_CURRENT_LIST_DIR}/ICUTargets.cmake")

# Various checks
check_required_components("ICU")

if(ON)
    __icu_set_pkgdata_path()
    __icu_set_icupkg_path()
endif()

if(dll STREQUAL "common")
    get_filename_component(
        ICU_DATA_FILE "${PACKAGE_PREFIX_DIR}/lib/icudt77l.dat" ABSOLUTE
    )

    if(NOT EXISTS ${ICU_DATA_FILE})
        message(FATAL_ERROR "File not exists: ${ICU_DATA_FILE}")
    endif()

    if(IS_DIRECTORY ${ICU_DATA_FILE})
        message(FATAL_ERROR "Is directory: ${ICU_DATA_FILE}")
    endif()
endif()
