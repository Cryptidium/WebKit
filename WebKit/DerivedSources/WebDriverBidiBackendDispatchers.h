/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 * Copyright (C) 2013-2016 Apple Inc. All rights reserved.
 * Copyright (C) 2014 University of Washington. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// DO NOT EDIT THIS FILE. It is automatically generated from CombinedWebDriverBidiDomains.json by the script: Source/JavaScriptCore/inspector/scripts/generate-inspector-protocol-bindings.py

#pragma once

#include "WebDriverBidiProtocolObjects.h"
#include <JavaScriptCore/InspectorBackendDispatcher.h>
#include <tuple>
#include <wtf/Expected.h>
#include <wtf/text/MakeString.h>
#include <wtf/text/WTFString.h>

namespace Inspector {



#if ENABLE(WEBDRIVER_BIDI)
class BidiBrowserBackendDispatcherHandler {
public:
    virtual Inspector::CommandResult<void> close() = 0;
    virtual Inspector::CommandResult<String /* userContext */> createUserContext() = 0;
    virtual Inspector::CommandResult<Ref<JSON::ArrayOf<Protocol::BidiBrowser::UserContextInfo>> /* userContexts */> getUserContexts() = 0;
    virtual void removeUserContext(const String& userContext, CommandCallback<void>&&) = 0;
protected:
    virtual ~BidiBrowserBackendDispatcherHandler();
};
#endif // ENABLE(WEBDRIVER_BIDI)

#if ENABLE(WEBDRIVER_BIDI)
class BidiBrowsingContextBackendDispatcherHandler {
public:
    virtual void activate(const String& context, CommandCallback<void>&&) = 0;
    virtual void close(const String& context, std::optional<bool>&& opt_promptUnload, CommandCallback<void>&&) = 0;
    virtual void create(Protocol::BidiBrowsingContext::CreateType type, const String& opt_referenceContext, std::optional<bool>&& opt_background, const String& opt_userContext, CommandCallback<String>&&) = 0;
    virtual void handleUserPrompt(const String& context, std::optional<bool>&& opt_accept, const String& opt_userText, CommandCallback<void>&&) = 0;
    virtual void getTree(const String& opt_root, std::optional<double>&& opt_maxDepth, CommandCallback<Ref<JSON::ArrayOf<Protocol::BidiBrowsingContext::Info>>>&&) = 0;
    virtual void navigate(const String& context, const String& url, std::optional<Protocol::BidiBrowsingContext::ReadinessState>&& opt_wait, CommandCallbackOf<String, String>&&) = 0;
    virtual void reload(const String& context, std::optional<bool>&& opt_ignoreCache, std::optional<Protocol::BidiBrowsingContext::ReadinessState>&& opt_wait, CommandCallbackOf<String, String>&&) = 0;
protected:
    virtual ~BidiBrowsingContextBackendDispatcherHandler();
};
#endif // ENABLE(WEBDRIVER_BIDI)

#if ENABLE(WEBDRIVER_BIDI)
class BidiScriptBackendDispatcherHandler {
public:
    virtual void callFunction(const String& functionDeclaration, bool awaitPromise, Ref<JSON::Object>&& target, RefPtr<JSON::Array>&& opt_arguments, std::optional<Protocol::BidiScript::ResultOwnership>&& opt_resultOwnership, RefPtr<JSON::Object>&& opt_serializationOptions, RefPtr<JSON::Object>&& opt_this, std::optional<bool>&& opt_userActivation, CommandCallbackOf<Protocol::BidiScript::EvaluateResultType, String, RefPtr<Protocol::BidiScript::RemoteValue>, RefPtr<Protocol::BidiScript::ExceptionDetails>>&&) = 0;
    virtual void evaluate(const String& expression, bool awaitPromise, Ref<JSON::Object>&& target, std::optional<Protocol::BidiScript::ResultOwnership>&& opt_resultOwnership, RefPtr<JSON::Object>&& opt_serializationOptions, std::optional<bool>&& opt_userActivation, CommandCallbackOf<Protocol::BidiScript::EvaluateResultType, String, RefPtr<Protocol::BidiScript::RemoteValue>, RefPtr<Protocol::BidiScript::ExceptionDetails>>&&) = 0;
protected:
    virtual ~BidiScriptBackendDispatcherHandler();
};
#endif // ENABLE(WEBDRIVER_BIDI)

#if ENABLE(WEBDRIVER_BIDI)
class BidiStorageBackendDispatcherHandler {
public:
    virtual void getCookies(RefPtr<JSON::Object>&& opt_filter, RefPtr<JSON::Object>&& opt_partition, CommandCallbackOf<Ref<JSON::ArrayOf<Protocol::BidiStorage::PartialCookie>>, Ref<Protocol::BidiStorage::PartitionKey>>&&) = 0;
    virtual void setCookie(Ref<JSON::Object>&& cookie, RefPtr<JSON::Object>&& opt_partition, CommandCallback<Ref<Protocol::BidiStorage::PartitionKey>>&&) = 0;
    virtual void deleteCookies(RefPtr<JSON::Object>&& opt_filter, RefPtr<JSON::Object>&& opt_partition, CommandCallback<Ref<Protocol::BidiStorage::PartitionKey>>&&) = 0;
protected:
    virtual ~BidiStorageBackendDispatcherHandler();
};
#endif // ENABLE(WEBDRIVER_BIDI)

#if ENABLE(WEBDRIVER_BIDI)
class BidiBrowserBackendDispatcher final : public SupplementalBackendDispatcher {
public:
    static Ref<BidiBrowserBackendDispatcher> create(BackendDispatcher&, BidiBrowserBackendDispatcherHandler*);
    void dispatch(long protocol_requestId, const String& protocol_method, Ref<JSON::Object>&& protocol_message) final;
private:
    void close(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void createUserContext(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void getUserContexts(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void removeUserContext(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
private:
    BidiBrowserBackendDispatcher(BackendDispatcher&, BidiBrowserBackendDispatcherHandler*);
    BidiBrowserBackendDispatcherHandler* m_agent { nullptr };
};
#endif // ENABLE(WEBDRIVER_BIDI)

#if ENABLE(WEBDRIVER_BIDI)
class BidiBrowsingContextBackendDispatcher final : public SupplementalBackendDispatcher {
public:
    static Ref<BidiBrowsingContextBackendDispatcher> create(BackendDispatcher&, BidiBrowsingContextBackendDispatcherHandler*);
    void dispatch(long protocol_requestId, const String& protocol_method, Ref<JSON::Object>&& protocol_message) final;
private:
    void activate(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void close(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void create(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void handleUserPrompt(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void getTree(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void navigate(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void reload(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
private:
    BidiBrowsingContextBackendDispatcher(BackendDispatcher&, BidiBrowsingContextBackendDispatcherHandler*);
    BidiBrowsingContextBackendDispatcherHandler* m_agent { nullptr };
};
#endif // ENABLE(WEBDRIVER_BIDI)

#if ENABLE(WEBDRIVER_BIDI)
class BidiScriptBackendDispatcher final : public SupplementalBackendDispatcher {
public:
    static Ref<BidiScriptBackendDispatcher> create(BackendDispatcher&, BidiScriptBackendDispatcherHandler*);
    void dispatch(long protocol_requestId, const String& protocol_method, Ref<JSON::Object>&& protocol_message) final;
private:
    void callFunction(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void evaluate(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
private:
    BidiScriptBackendDispatcher(BackendDispatcher&, BidiScriptBackendDispatcherHandler*);
    BidiScriptBackendDispatcherHandler* m_agent { nullptr };
};
#endif // ENABLE(WEBDRIVER_BIDI)

#if ENABLE(WEBDRIVER_BIDI)
class BidiStorageBackendDispatcher final : public SupplementalBackendDispatcher {
public:
    static Ref<BidiStorageBackendDispatcher> create(BackendDispatcher&, BidiStorageBackendDispatcherHandler*);
    void dispatch(long protocol_requestId, const String& protocol_method, Ref<JSON::Object>&& protocol_message) final;
private:
    void getCookies(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void setCookie(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
    void deleteCookies(long protocol_requestId, RefPtr<JSON::Object>&& protocol_parameters);
private:
    BidiStorageBackendDispatcher(BackendDispatcher&, BidiStorageBackendDispatcherHandler*);
    BidiStorageBackendDispatcherHandler* m_agent { nullptr };
};
#endif // ENABLE(WEBDRIVER_BIDI)

} // namespace Inspector
