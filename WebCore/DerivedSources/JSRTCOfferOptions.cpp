/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCOfferOptions.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertOptional.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCOfferOptions>> convertDictionary<RTCOfferOptions>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCOfferOptions result;
    JSValue voiceActivityDetectionValue;
    if (isNullOrUndefined)
        voiceActivityDetectionValue = jsUndefined();
    else {
        voiceActivityDetectionValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "voiceActivityDetection"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto voiceActivityDetectionConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, voiceActivityDetectionValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { true }; });
    if (voiceActivityDetectionConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.voiceActivityDetection = voiceActivityDetectionConversionResult.releaseReturnValue();
    JSValue iceRestartValue;
    if (isNullOrUndefined)
        iceRestartValue = jsUndefined();
    else {
        iceRestartValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "iceRestart"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto iceRestartConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, iceRestartValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (iceRestartConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.iceRestart = iceRestartConversionResult.releaseReturnValue();
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().legacyWebRTCOfferOptionsEnabled) {
        JSValue offerToReceiveAudioValue;
        if (isNullOrUndefined)
            offerToReceiveAudioValue = jsUndefined();
        else {
            offerToReceiveAudioValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "offerToReceiveAudio"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        if (!offerToReceiveAudioValue.isUndefined()) {
            auto offerToReceiveAudioConversionResult = convert<IDLNullable<IDLBoolean>>(lexicalGlobalObject, offerToReceiveAudioValue);
            if (offerToReceiveAudioConversionResult.hasException(throwScope)) [[unlikely]]
                return ConversionResultException { };
            result.offerToReceiveAudio = offerToReceiveAudioConversionResult.releaseReturnValue();
        }
    }
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().legacyWebRTCOfferOptionsEnabled) {
        JSValue offerToReceiveVideoValue;
        if (isNullOrUndefined)
            offerToReceiveVideoValue = jsUndefined();
        else {
            offerToReceiveVideoValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "offerToReceiveVideo"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        if (!offerToReceiveVideoValue.isUndefined()) {
            auto offerToReceiveVideoConversionResult = convert<IDLNullable<IDLBoolean>>(lexicalGlobalObject, offerToReceiveVideoValue);
            if (offerToReceiveVideoConversionResult.hasException(throwScope)) [[unlikely]]
                return ConversionResultException { };
            result.offerToReceiveVideo = offerToReceiveVideoConversionResult.releaseReturnValue();
        }
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_RTC)
