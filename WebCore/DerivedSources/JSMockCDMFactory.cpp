/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA)

#include "JSMockCDMFactory.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSMediaKeyEncryptionScheme.h"
#include "JSMediaKeySessionType.h"
#include "JSMediaKeysRequirement.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsMockCDMFactoryPrototypeFunction_unregister);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_supportedDataTypes);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_supportedDataTypes);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_supportedRobustness);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_supportedRobustness);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_supportedSessionTypes);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_supportedSessionTypes);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_distinctiveIdentifiersRequirement);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_distinctiveIdentifiersRequirement);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_persistentStateRequirement);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_persistentStateRequirement);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_canCreateInstances);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_canCreateInstances);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_supportsServerCertificates);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_supportsServerCertificates);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_supportsSessions);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_supportsSessions);
static JSC_DECLARE_CUSTOM_GETTER(jsMockCDMFactory_supportedEncryptionSchemes);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockCDMFactory_supportedEncryptionSchemes);

class JSMockCDMFactoryPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMockCDMFactoryPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMockCDMFactoryPrototype* ptr = new (NotNull, JSC::allocateCell<JSMockCDMFactoryPrototype>(vm)) JSMockCDMFactoryPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMockCDMFactoryPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMockCDMFactoryPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMockCDMFactoryPrototype, JSMockCDMFactoryPrototype::Base);

/* Hash table for prototype */

static const std::array<HashTableValue, 10> JSMockCDMFactoryPrototypeTableValues {
    HashTableValue { "supportedDataTypes"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_supportedDataTypes, setJSMockCDMFactory_supportedDataTypes } },
    HashTableValue { "supportedRobustness"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_supportedRobustness, setJSMockCDMFactory_supportedRobustness } },
    HashTableValue { "supportedSessionTypes"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_supportedSessionTypes, setJSMockCDMFactory_supportedSessionTypes } },
    HashTableValue { "distinctiveIdentifiersRequirement"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_distinctiveIdentifiersRequirement, setJSMockCDMFactory_distinctiveIdentifiersRequirement } },
    HashTableValue { "persistentStateRequirement"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_persistentStateRequirement, setJSMockCDMFactory_persistentStateRequirement } },
    HashTableValue { "canCreateInstances"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_canCreateInstances, setJSMockCDMFactory_canCreateInstances } },
    HashTableValue { "supportsServerCertificates"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_supportsServerCertificates, setJSMockCDMFactory_supportsServerCertificates } },
    HashTableValue { "supportsSessions"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_supportsSessions, setJSMockCDMFactory_supportsSessions } },
    HashTableValue { "supportedEncryptionSchemes"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockCDMFactory_supportedEncryptionSchemes, setJSMockCDMFactory_supportedEncryptionSchemes } },
    HashTableValue { "unregister"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMockCDMFactoryPrototypeFunction_unregister, 0 } },
};

const ClassInfo JSMockCDMFactoryPrototype::s_info = { "MockCDMFactory"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMockCDMFactoryPrototype) };

void JSMockCDMFactoryPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMockCDMFactory::info(), JSMockCDMFactoryPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSMockCDMFactory::s_info = { "MockCDMFactory"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMockCDMFactory) };

JSMockCDMFactory::JSMockCDMFactory(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MockCDMFactory>&& impl)
    : JSDOMWrapper<MockCDMFactory>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, MockCDMFactory>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSMockCDMFactory::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSMockCDMFactoryPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSMockCDMFactoryPrototype::create(vm, &globalObject, structure);
}

JSObject* JSMockCDMFactory::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSMockCDMFactory>(vm, globalObject);
}

void JSMockCDMFactory::destroy(JSC::JSCell* cell)
{
    JSMockCDMFactory* thisObject = static_cast<JSMockCDMFactory*>(cell);
    thisObject->JSMockCDMFactory::~JSMockCDMFactory();
}

static inline JSValue jsMockCDMFactory_supportedDataTypesGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLSequence<IDLDOMString>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.supportedDataTypes())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_supportedDataTypes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_supportedDataTypesGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_supportedDataTypesSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLSequence<IDLDOMString>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setSupportedDataTypes(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_supportedDataTypes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_supportedDataTypesSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_supportedRobustnessGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLSequence<IDLAtomStringAdaptor<IDLDOMString>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.supportedRobustness())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_supportedRobustness, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_supportedRobustnessGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_supportedRobustnessSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLSequence<IDLAtomStringAdaptor<IDLDOMString>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setSupportedRobustness(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_supportedRobustness, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_supportedRobustnessSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_supportedSessionTypesGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLSequence<IDLEnumeration<MediaKeySessionType>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.supportedSessionTypes())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_supportedSessionTypes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_supportedSessionTypesGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_supportedSessionTypesSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLSequence<IDLEnumeration<MediaKeySessionType>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setSupportedSessionTypes(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_supportedSessionTypes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_supportedSessionTypesSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_distinctiveIdentifiersRequirementGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<MediaKeysRequirement>>(lexicalGlobalObject, throwScope, impl.distinctiveIdentifiersRequirement())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_distinctiveIdentifiersRequirement, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_distinctiveIdentifiersRequirementGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_distinctiveIdentifiersRequirementSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<MediaKeysRequirement>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setDistinctiveIdentifiersRequirement(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_distinctiveIdentifiersRequirement, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_distinctiveIdentifiersRequirementSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_persistentStateRequirementGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<MediaKeysRequirement>>(lexicalGlobalObject, throwScope, impl.persistentStateRequirement())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_persistentStateRequirement, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_persistentStateRequirementGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_persistentStateRequirementSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<MediaKeysRequirement>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setPersistentStateRequirement(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_persistentStateRequirement, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_persistentStateRequirementSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_canCreateInstancesGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.canCreateInstances())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_canCreateInstances, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_canCreateInstancesGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_canCreateInstancesSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLBoolean>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setCanCreateInstances(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_canCreateInstances, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_canCreateInstancesSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_supportsServerCertificatesGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.supportsServerCertificates())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_supportsServerCertificates, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_supportsServerCertificatesGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_supportsServerCertificatesSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLBoolean>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setSupportsServerCertificates(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_supportsServerCertificates, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_supportsServerCertificatesSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_supportsSessionsGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.supportsSessions())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_supportsSessions, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_supportsSessionsGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_supportsSessionsSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLBoolean>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setSupportsSessions(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_supportsSessions, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_supportsSessionsSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockCDMFactory_supportedEncryptionSchemesGetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLSequence<IDLEnumeration<MediaKeyEncryptionScheme>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.supportedEncryptionSchemes())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockCDMFactory_supportedEncryptionSchemes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::get<jsMockCDMFactory_supportedEncryptionSchemesGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockCDMFactory_supportedEncryptionSchemesSetter(JSGlobalObject& lexicalGlobalObject, JSMockCDMFactory& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLSequence<IDLEnumeration<MediaKeyEncryptionScheme>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setSupportedEncryptionSchemes(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockCDMFactory_supportedEncryptionSchemes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockCDMFactory>::set<setJSMockCDMFactory_supportedEncryptionSchemesSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsMockCDMFactoryPrototypeFunction_unregisterBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMockCDMFactory>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.unregister(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsMockCDMFactoryPrototypeFunction_unregister, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMockCDMFactory>::call<jsMockCDMFactoryPrototypeFunction_unregisterBody>(*lexicalGlobalObject, *callFrame, "unregister");
}

JSC::GCClient::IsoSubspace* JSMockCDMFactory::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSMockCDMFactory, UseCustomHeapCellType::No>(vm, "JSMockCDMFactory"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForMockCDMFactory.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForMockCDMFactory = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForMockCDMFactory.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForMockCDMFactory = std::forward<decltype(space)>(space); }
    );
}

void JSMockCDMFactory::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSMockCDMFactory*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSMockCDMFactoryOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSMockCDMFactoryOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMockCDMFactory = static_cast<JSMockCDMFactory*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsMockCDMFactory->protectedWrapped().ptr(), jsMockCDMFactory);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MockCDMFactory@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14MockCDMFactoryE[]; }
#endif
template<std::same_as<MockCDMFactory> T>
static inline void verifyVTable(MockCDMFactory* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7MockCDMFactory@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore14MockCDMFactoryE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // MockCDMFactory has subclasses. If MockCDMFactory has subclasses that get passed
        // to toJS() we currently require MockCDMFactory you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<MockCDMFactory>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<MockCDMFactory>(impl.ptr());
#endif
    return createWrapper<MockCDMFactory>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, MockCDMFactory& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

MockCDMFactory* JSMockCDMFactory::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMockCDMFactory*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(ENCRYPTED_MEDIA)
