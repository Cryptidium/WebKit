/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA)

#include "JSMediaKeyMessageEventInit.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertUnion.h"
#include "JSMediaKeyMessageType.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(ENCRYPTED_MEDIA)

template<> ConversionResult<IDLDictionary<MediaKeyMessageEventInit>> convertDictionary<MediaKeyMessageEventInit>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    MediaKeyMessageEventInit result;
    JSValue bubblesValue;
    if (isNullOrUndefined)
        bubblesValue = jsUndefined();
    else {
        bubblesValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "bubbles"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto bubblesConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, bubblesValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (bubblesConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.bubbles = bubblesConversionResult.releaseReturnValue();
    JSValue cancelableValue;
    if (isNullOrUndefined)
        cancelableValue = jsUndefined();
    else {
        cancelableValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "cancelable"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto cancelableConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, cancelableValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (cancelableConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.cancelable = cancelableConversionResult.releaseReturnValue();
    JSValue composedValue;
    if (isNullOrUndefined)
        composedValue = jsUndefined();
    else {
        composedValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "composed"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto composedConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, composedValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (composedConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.composed = composedConversionResult.releaseReturnValue();
    JSValue messageValue;
    if (isNullOrUndefined)
        messageValue = jsUndefined();
    else {
        messageValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "message"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (messageValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "message"_s, "MediaKeyMessageEventInit"_s, "ArrayBuffer"_s);
        return ConversionResultException { };
    }
    auto messageConversionResult = convert<IDLArrayBuffer>(lexicalGlobalObject, messageValue);
    if (messageConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.message = messageConversionResult.releaseReturnValue();
    JSValue messageTypeValue;
    if (isNullOrUndefined)
        messageTypeValue = jsUndefined();
    else {
        messageTypeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "messageType"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (messageTypeValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "messageType"_s, "MediaKeyMessageEventInit"_s, "MediaKeyMessageType"_s);
        return ConversionResultException { };
    }
    auto messageTypeConversionResult = convert<IDLEnumeration<MediaKeyMessageType>>(lexicalGlobalObject, messageTypeValue);
    if (messageTypeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.messageType = messageTypeConversionResult.releaseReturnValue();
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(ENCRYPTED_MEDIA)
