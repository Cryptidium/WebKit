/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSAuthenticationExtensionsClientInputs.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertRecord.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <wtf/Variant.h>
#include <wtf/Vector.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientInputs>> convertDictionary<AuthenticationExtensionsClientInputs>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientInputs result;
    JSValue appidValue;
    if (isNullOrUndefined)
        appidValue = jsUndefined();
    else {
        appidValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "appid"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!appidValue.isUndefined()) {
        auto appidConversionResult = convert<IDLUSVString>(lexicalGlobalObject, appidValue);
        if (appidConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.appid = appidConversionResult.releaseReturnValue();
    }
    JSValue credPropsValue;
    if (isNullOrUndefined)
        credPropsValue = jsUndefined();
    else {
        credPropsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "credProps"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!credPropsValue.isUndefined()) {
        auto credPropsConversionResult = convert<IDLBoolean>(lexicalGlobalObject, credPropsValue);
        if (credPropsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.credProps = credPropsConversionResult.releaseReturnValue();
    }
    JSValue largeBlobValue;
    if (isNullOrUndefined)
        largeBlobValue = jsUndefined();
    else {
        largeBlobValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "largeBlob"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!largeBlobValue.isUndefined()) {
        auto largeBlobConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientInputs::LargeBlobInputs>>(lexicalGlobalObject, largeBlobValue);
        if (largeBlobConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.largeBlob = largeBlobConversionResult.releaseReturnValue();
    }
    JSValue prfValue;
    if (isNullOrUndefined)
        prfValue = jsUndefined();
    else {
        prfValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "prf"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!prfValue.isUndefined()) {
        auto prfConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientInputs::PRFInputs>>(lexicalGlobalObject, prfValue);
        if (prfConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.prf = prfConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientInputs& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLUSVString::isNullValue(dictionary.appid)) {
        auto appidValue = toJS<IDLUSVString>(lexicalGlobalObject, throwScope, IDLUSVString::extractValueFromNullable(dictionary.appid));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "appid"_s), appidValue);
    }
    if (!IDLBoolean::isNullValue(dictionary.credProps)) {
        auto credPropsValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.credProps));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "credProps"_s), credPropsValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientInputs::LargeBlobInputs>::isNullValue(dictionary.largeBlob)) {
        auto largeBlobValue = toJS<IDLDictionary<AuthenticationExtensionsClientInputs::LargeBlobInputs>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientInputs::LargeBlobInputs>::extractValueFromNullable(dictionary.largeBlob));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "largeBlob"_s), largeBlobValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientInputs::PRFInputs>::isNullValue(dictionary.prf)) {
        auto prfValue = toJS<IDLDictionary<AuthenticationExtensionsClientInputs::PRFInputs>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientInputs::PRFInputs>::extractValueFromNullable(dictionary.prf));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "prf"_s), prfValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientInputs::LargeBlobInputs>> convertDictionary<AuthenticationExtensionsClientInputs::LargeBlobInputs>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientInputs::LargeBlobInputs result;
    JSValue readValue;
    if (isNullOrUndefined)
        readValue = jsUndefined();
    else {
        readValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "read"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!readValue.isUndefined()) {
        auto readConversionResult = convert<IDLBoolean>(lexicalGlobalObject, readValue);
        if (readConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.read = readConversionResult.releaseReturnValue();
    }
    JSValue supportValue;
    if (isNullOrUndefined)
        supportValue = jsUndefined();
    else {
        supportValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "support"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!supportValue.isUndefined()) {
        auto supportConversionResult = convert<IDLDOMString>(lexicalGlobalObject, supportValue);
        if (supportConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.support = supportConversionResult.releaseReturnValue();
    }
    JSValue writeValue;
    if (isNullOrUndefined)
        writeValue = jsUndefined();
    else {
        writeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "write"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!writeValue.isUndefined()) {
        auto writeConversionResult = convert<IDLBufferSource>(lexicalGlobalObject, writeValue);
        if (writeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.write = writeConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientInputs::LargeBlobInputs& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLBoolean::isNullValue(dictionary.read)) {
        auto readValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.read));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "read"_s), readValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.support)) {
        auto supportValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.support));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "support"_s), supportValue);
    }
    if (!IDLBufferSource::isNullValue(dictionary.write)) {
        auto writeValue = toJS<IDLBufferSource>(lexicalGlobalObject, throwScope, IDLBufferSource::extractValueFromNullable(dictionary.write));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "write"_s), writeValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>> convertDictionary<AuthenticationExtensionsClientInputs::PRFValues>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientInputs::PRFValues result;
    JSValue firstValue;
    if (isNullOrUndefined)
        firstValue = jsUndefined();
    else {
        firstValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "first"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (firstValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "first"_s, "AuthenticationExtensionsPRFValues"_s, "(ArrayBufferView or ArrayBuffer)"_s);
        return ConversionResultException { };
    }
    auto firstConversionResult = convert<IDLBufferSource>(lexicalGlobalObject, firstValue);
    if (firstConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.first = firstConversionResult.releaseReturnValue();
    JSValue secondValue;
    if (isNullOrUndefined)
        secondValue = jsUndefined();
    else {
        secondValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "second"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!secondValue.isUndefined()) {
        auto secondConversionResult = convert<IDLBufferSource>(lexicalGlobalObject, secondValue);
        if (secondConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.second = secondConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientInputs::PRFValues& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto firstValue = toJS<IDLBufferSource>(lexicalGlobalObject, throwScope, dictionary.first);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "first"_s), firstValue);
    if (!IDLBufferSource::isNullValue(dictionary.second)) {
        auto secondValue = toJS<IDLBufferSource>(lexicalGlobalObject, throwScope, IDLBufferSource::extractValueFromNullable(dictionary.second));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "second"_s), secondValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientInputs::PRFInputs>> convertDictionary<AuthenticationExtensionsClientInputs::PRFInputs>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientInputs::PRFInputs result;
    JSValue evalValue;
    if (isNullOrUndefined)
        evalValue = jsUndefined();
    else {
        evalValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "eval"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!evalValue.isUndefined()) {
        auto evalConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>>(lexicalGlobalObject, evalValue);
        if (evalConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.eval = evalConversionResult.releaseReturnValue();
    }
    JSValue evalByCredentialValue;
    if (isNullOrUndefined)
        evalByCredentialValue = jsUndefined();
    else {
        evalByCredentialValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "evalByCredential"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!evalByCredentialValue.isUndefined()) {
        auto evalByCredentialConversionResult = convert<IDLRecord<IDLUSVString, IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>>>(lexicalGlobalObject, evalByCredentialValue);
        if (evalByCredentialConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.evalByCredential = evalByCredentialConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientInputs::PRFInputs& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>::isNullValue(dictionary.eval)) {
        auto evalValue = toJS<IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>::extractValueFromNullable(dictionary.eval));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "eval"_s), evalValue);
    }
    if (!IDLRecord<IDLUSVString, IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>>::isNullValue(dictionary.evalByCredential)) {
        auto evalByCredentialValue = toJS<IDLRecord<IDLUSVString, IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>>>(lexicalGlobalObject, globalObject, throwScope, IDLRecord<IDLUSVString, IDLDictionary<AuthenticationExtensionsClientInputs::PRFValues>>::extractValueFromNullable(dictionary.evalByCredential));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "evalByCredential"_s), evalByCredentialValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
