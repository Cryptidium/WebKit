/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCIceCandidateInit.h"

#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCIceCandidateInit>> convertDictionary<RTCIceCandidateInit>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCIceCandidateInit result;
    JSValue candidateValue;
    if (isNullOrUndefined)
        candidateValue = jsUndefined();
    else {
        candidateValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "candidate"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto candidateConversionResult = convertOptionalWithDefault<IDLDOMString>(lexicalGlobalObject, candidateValue, [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (candidateConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.candidate = candidateConversionResult.releaseReturnValue();
    JSValue sdpMLineIndexValue;
    if (isNullOrUndefined)
        sdpMLineIndexValue = jsUndefined();
    else {
        sdpMLineIndexValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sdpMLineIndex"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto sdpMLineIndexConversionResult = convertOptionalWithDefault<IDLNullable<IDLUnsignedShort>>(lexicalGlobalObject, sdpMLineIndexValue, [&]() -> ConversionResult<IDLNullable<IDLUnsignedShort>> { return typename Converter<IDLNullable<IDLUnsignedShort>>::ReturnType { std::nullopt }; });
    if (sdpMLineIndexConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.sdpMLineIndex = sdpMLineIndexConversionResult.releaseReturnValue();
    JSValue sdpMidValue;
    if (isNullOrUndefined)
        sdpMidValue = jsUndefined();
    else {
        sdpMidValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sdpMid"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto sdpMidConversionResult = convertOptionalWithDefault<IDLNullable<IDLDOMString>>(lexicalGlobalObject, sdpMidValue, [&]() -> ConversionResult<IDLNullable<IDLDOMString>> { return typename Converter<IDLNullable<IDLDOMString>>::ReturnType { String() }; });
    if (sdpMidConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.sdpMid = sdpMidConversionResult.releaseReturnValue();
    JSValue usernameFragmentValue;
    if (isNullOrUndefined)
        usernameFragmentValue = jsUndefined();
    else {
        usernameFragmentValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "usernameFragment"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto usernameFragmentConversionResult = convertOptionalWithDefault<IDLNullable<IDLDOMString>>(lexicalGlobalObject, usernameFragmentValue, [&]() -> ConversionResult<IDLNullable<IDLDOMString>> { return typename Converter<IDLNullable<IDLDOMString>>::ReturnType { String() }; });
    if (usernameFragmentConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.usernameFragment = usernameFragmentConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCIceCandidateInit& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto candidateValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.candidate);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "candidate"_s), candidateValue);
    auto sdpMLineIndexValue = toJS<IDLNullable<IDLUnsignedShort>>(lexicalGlobalObject, throwScope, dictionary.sdpMLineIndex);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "sdpMLineIndex"_s), sdpMLineIndexValue);
    auto sdpMidValue = toJS<IDLNullable<IDLDOMString>>(lexicalGlobalObject, throwScope, dictionary.sdpMid);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "sdpMid"_s), sdpMidValue);
    auto usernameFragmentValue = toJS<IDLNullable<IDLDOMString>>(lexicalGlobalObject, throwScope, dictionary.usernameFragment);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "usernameFragment"_s), usernameFragmentValue);
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_RTC)
