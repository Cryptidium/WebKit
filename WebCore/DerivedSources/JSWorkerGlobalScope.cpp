/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSWorkerGlobalScope.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSBackgroundFetchManager.h"
#include "JSBackgroundFetchRecord.h"
#include "JSBackgroundFetchRegistration.h"
#include "JSBackgroundFetchUpdateUIEvent.h"
#include "JSBarcodeDetector.h"
#include "JSBlob.h"
#include "JSBroadcastChannel.h"
#include "JSCSSHSL.h"
#include "JSCSSHWB.h"
#include "JSCSSKeywordValue.h"
#include "JSCSSLCH.h"
#include "JSCSSLab.h"
#include "JSCSSMathClamp.h"
#include "JSCSSMathInvert.h"
#include "JSCSSMathMax.h"
#include "JSCSSMathMin.h"
#include "JSCSSMathNegate.h"
#include "JSCSSMathProduct.h"
#include "JSCSSMathSum.h"
#include "JSCSSMathValue.h"
#include "JSCSSMatrixComponent.h"
#include "JSCSSNumericArray.h"
#include "JSCSSNumericValue.h"
#include "JSCSSOKLCH.h"
#include "JSCSSOKLab.h"
#include "JSCSSOMColor.h"
#include "JSCSSOMColorValue.h"
#include "JSCSSOMVariableReferenceValue.h"
#include "JSCSSPerspective.h"
#include "JSCSSRGB.h"
#include "JSCSSRotate.h"
#include "JSCSSScale.h"
#include "JSCSSSkew.h"
#include "JSCSSSkewX.h"
#include "JSCSSSkewY.h"
#include "JSCSSStyleImageValue.h"
#include "JSCSSStyleValue.h"
#include "JSCSSTransformComponent.h"
#include "JSCSSTransformValue.h"
#include "JSCSSTranslate.h"
#include "JSCSSUnitValue.h"
#include "JSCSSUnparsedValue.h"
#include "JSCanvasGradient.h"
#include "JSCanvasPattern.h"
#include "JSCloseEvent.h"
#include "JSCrypto.h"
#include "JSCryptoKey.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMCache.h"
#include "JSDOMCacheStorage.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertAny.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertScheduledAction.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMConvertVariadic.h"
#include "JSDOMException.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMFormData.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMMatrix.h"
#include "JSDOMMatrixReadOnly.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMPoint.h"
#include "JSDOMPointReadOnly.h"
#include "JSDOMQuad.h"
#include "JSDOMRect.h"
#include "JSDOMRectReadOnly.h"
#include "JSDOMStringList.h"
#include "JSDOMWrapperCache.h"
#include "JSDeprecationReportBody.h"
#include "JSErrorHandler.h"
#include "JSEventListener.h"
#include "JSEventSource.h"
#include "JSFaceDetector.h"
#include "JSFetchHeaders.h"
#include "JSFetchRequest.h"
#include "JSFetchRequestInit.h"
#include "JSFetchResponse.h"
#include "JSFile.h"
#include "JSFileList.h"
#include "JSFileReader.h"
#include "JSFileSystemDirectoryHandle.h"
#include "JSFileSystemFileHandle.h"
#include "JSFileSystemHandle.h"
#include "JSFileSystemWritableFileStream.h"
#include "JSFontFace.h"
#include "JSFontFaceSet.h"
#include "JSGPU.h"
#include "JSGPUAdapter.h"
#include "JSGPUAdapterInfo.h"
#include "JSGPUBindGroup.h"
#include "JSGPUBindGroupLayout.h"
#include "JSGPUBuffer.h"
#include "JSGPUBufferUsage.h"
#include "JSGPUCanvasContext.h"
#include "JSGPUColorWrite.h"
#include "JSGPUCommandBuffer.h"
#include "JSGPUCommandEncoder.h"
#include "JSGPUCompilationInfo.h"
#include "JSGPUCompilationMessage.h"
#include "JSGPUComputePassEncoder.h"
#include "JSGPUComputePipeline.h"
#include "JSGPUDevice.h"
#include "JSGPUDeviceLostInfo.h"
#include "JSGPUExternalTexture.h"
#include "JSGPUInternalError.h"
#include "JSGPUMapMode.h"
#include "JSGPUOutOfMemoryError.h"
#include "JSGPUPipelineLayout.h"
#include "JSGPUQuerySet.h"
#include "JSGPUQueue.h"
#include "JSGPURenderBundle.h"
#include "JSGPURenderBundleEncoder.h"
#include "JSGPURenderPassEncoder.h"
#include "JSGPURenderPipeline.h"
#include "JSGPUSampler.h"
#include "JSGPUShaderModule.h"
#include "JSGPUShaderStage.h"
#include "JSGPUSupportedFeatures.h"
#include "JSGPUSupportedLimits.h"
#include "JSGPUTexture.h"
#include "JSGPUTextureUsage.h"
#include "JSGPUTextureView.h"
#include "JSGPUUncapturedErrorEvent.h"
#include "JSGPUValidationError.h"
#include "JSHTMLCanvasElement.h"
#include "JSHTMLImageElement.h"
#include "JSHTMLVideoElement.h"
#include "JSIDBCursor.h"
#include "JSIDBCursorWithValue.h"
#include "JSIDBDatabase.h"
#include "JSIDBFactory.h"
#include "JSIDBIndex.h"
#include "JSIDBKeyRange.h"
#include "JSIDBObjectStore.h"
#include "JSIDBOpenDBRequest.h"
#include "JSIDBRequest.h"
#include "JSIDBTransaction.h"
#include "JSIDBVersionChangeEvent.h"
#include "JSImageBitmap.h"
#include "JSImageBitmapOptions.h"
#include "JSImageBitmapRenderingContext.h"
#include "JSImageData.h"
#include "JSMessageChannel.h"
#include "JSMessageEvent.h"
#include "JSMessagePort.h"
#include "JSNavigationPreloadManager.h"
#include "JSNavigatorUAData.h"
#include "JSObservable.h"
#include "JSPath2D.h"
#include "JSPerformance.h"
#include "JSPermissions.h"
#include "JSProgressEvent.h"
#include "JSPushManager.h"
#include "JSPushSubscription.h"
#include "JSPushSubscriptionOptions.h"
#include "JSReport.h"
#include "JSReportBody.h"
#include "JSReportingObserver.h"
#include "JSSVGImageElement.h"
#include "JSSecurityPolicyViolationEvent.h"
#include "JSServiceWorker.h"
#include "JSServiceWorkerContainer.h"
#include "JSServiceWorkerRegistration.h"
#include "JSStorageManager.h"
#include "JSStructuredSerializeOptions.h"
#include "JSStylePropertyMapReadOnly.h"
#include "JSSubscriber.h"
#include "JSSubtleCrypto.h"
#include "JSTextDecoderStreamDecoder.h"
#include "JSTextDetector.h"
#include "JSTextEncoderStreamEncoder.h"
#include "JSTextMetrics.h"
#include "JSTrustedHTML.h"
#include "JSTrustedScript.h"
#include "JSTrustedScriptURL.h"
#include "JSTrustedTypePolicy.h"
#include "JSTrustedTypePolicyFactory.h"
#include "JSURLPattern.h"
#include "JSWGSLLanguageFeatures.h"
#include "JSWebLock.h"
#include "JSWebLockManager.h"
#include "JSWebSocket.h"
#include "JSWebTransport.h"
#include "JSWebTransportBidirectionalStream.h"
#include "JSWebTransportDatagramDuplexStream.h"
#include "JSWebTransportError.h"
#include "JSWebTransportReceiveStream.h"
#include "JSWebTransportSendStream.h"
#include "JSWorkerGlobalScope.h"
#include "JSWorkerLocation.h"
#include "JSWorkerNavigator.h"
#include "JSXMLHttpRequestEventTarget.h"
#include "JSXMLHttpRequestUpload.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include "WindowOrWorkerGlobalScopeCaches.h"
#include "WindowOrWorkerGlobalScopeFetch.h"
#include "WindowOrWorkerGlobalScopeIndexedDatabase.h"
#include "WindowOrWorkerGlobalScopeTrustedTypes.h"
#include "WorkerGlobalScope.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/Variant.h>
#include <wtf/text/MakeString.h>

#if ENABLE(OFFSCREEN_CANVAS) && ENABLE(OFFSCREEN_CANVAS_IN_WORKERS)
#include "JSOffscreenCanvas.h"
#include "JSOffscreenCanvasRenderingContext2D.h"
#endif

#if ENABLE(VIDEO)
#include "JSAudioTrackConfiguration.h"
#include "JSVideoColorSpace.h"
#include "JSVideoTrackConfiguration.h"
#endif

#if ENABLE(WEBGL)
#include "JSWebGL2RenderingContext.h"
#include "JSWebGLActiveInfo.h"
#include "JSWebGLBuffer.h"
#include "JSWebGLContextEvent.h"
#include "JSWebGLFramebuffer.h"
#include "JSWebGLProgram.h"
#include "JSWebGLQuery.h"
#include "JSWebGLRenderbuffer.h"
#include "JSWebGLRenderingContext.h"
#include "JSWebGLSampler.h"
#include "JSWebGLShader.h"
#include "JSWebGLShaderPrecisionFormat.h"
#include "JSWebGLSync.h"
#include "JSWebGLTexture.h"
#include "JSWebGLTransformFeedback.h"
#include "JSWebGLUniformLocation.h"
#include "JSWebGLVertexArrayObject.h"
#endif

#if ENABLE(WEB_RTC)
#include "JSRTCDataChannel.h"
#include "JSRTCTransformEvent.h"
#endif

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_importScripts);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_reportError);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_atob);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_btoa);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_setTimeout);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_clearTimeout);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_setInterval);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_clearInterval);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_queueMicrotask);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_createImageBitmap);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_structuredClone);
static JSC_DECLARE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_fetch);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScopeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_self);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_location);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_navigator);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_onerror);
static JSC_DECLARE_CUSTOM_SETTER(setJSWorkerGlobalScope_onerror);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_onoffline);
static JSC_DECLARE_CUSTOM_SETTER(setJSWorkerGlobalScope_onoffline);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ononline);
static JSC_DECLARE_CUSTOM_SETTER(setJSWorkerGlobalScope_ononline);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_onrejectionhandled);
static JSC_DECLARE_CUSTOM_SETTER(setJSWorkerGlobalScope_onrejectionhandled);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_onunhandledrejection);
static JSC_DECLARE_CUSTOM_SETTER(setJSWorkerGlobalScope_onunhandledrejection);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_fonts);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_origin);
static JSC_DECLARE_CUSTOM_SETTER(setJSWorkerGlobalScope_origin);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_isSecureContext);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_crossOriginIsolated);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_caches);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_indexedDB);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_trustedTypes);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_crypto);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_performance);
static JSC_DECLARE_CUSTOM_SETTER(setJSWorkerGlobalScope_performance);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_BarcodeDetectorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FaceDetectorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TextDetectorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUAdapterConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUAdapterInfoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBindGroupConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBindGroupLayoutConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBufferConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBufferUsageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUColorWriteConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCommandBufferConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCommandEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCompilationInfoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCompilationMessageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUComputePassEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUComputePipelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUDeviceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUDeviceLostInfoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUExternalTextureConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUInternalErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUMapModeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUOutOfMemoryErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUPipelineLayoutConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUQuerySetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUQueueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderBundleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderBundleEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderPassEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderPipelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUSamplerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUShaderModuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUShaderStageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUSupportedFeaturesConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUSupportedLimitsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUTextureConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUTextureUsageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUTextureViewConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUUncapturedErrorEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUValidationErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WGSLLanguageFeaturesConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CacheConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CacheStorageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_HeadersConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_RequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ResponseConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemDirectoryHandleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemFileHandleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemHandleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemWritableFileStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBCursorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBCursorWithValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBDatabaseConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBFactoryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBIndexConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBKeyRangeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBObjectStoreConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBOpenDBRequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBRequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBTransactionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBVersionChangeEventConstructor);
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_RTCDataChannelConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_RTCTransformEventConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_PermissionsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_PushManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_PushSubscriptionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_PushSubscriptionOptionsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DeprecationReportBodyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ReportConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ReportBodyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ReportingObserverConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_StorageManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_URLPatternConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_LockConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_LockManagerConstructor);
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_VideoColorSpaceConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CloseEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebSocketConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportBidirectionalStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportDatagramDuplexStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportReceiveStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportSendStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CryptoKeyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_SubtleCryptoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMMatrixConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMMatrixReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FontFaceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FontFaceSetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSKeywordValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSNumericValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSVariableReferenceValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSImageValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSStyleValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSUnitValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSUnparsedValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_StylePropertyMapReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSHSLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSHWBConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSLCHConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSLabConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSOKLCHConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSOKLabConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSColorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSColorValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSRGBConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathClampConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathInvertConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathMaxConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathMinConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathNegateConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathProductConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathSumConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSNumericArrayConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMatrixComponentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSPerspectiveConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSRotateConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSScaleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSSkewConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSSkewXConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSSkewYConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSTransformComponentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSTransformValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSTranslateConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_BroadcastChannelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMExceptionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMPointConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMPointReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMQuadConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMRectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMRectReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMStringListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_MessageChannelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_MessageEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_MessagePortConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ObservableConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ProgressEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_SecurityPolicyViolationEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_SubscriberConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TextDecoderStreamDecoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TextEncoderStreamEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedHTMLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedScriptConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedScriptURLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedTypePolicyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedTypePolicyFactoryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_BlobConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FileConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FileListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FileReaderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_FormDataConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ImageBitmapConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ImageDataConstructor);
#if ENABLE(OFFSCREEN_CANVAS) && ENABLE(OFFSCREEN_CANVAS_IN_WORKERS)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_OffscreenCanvasConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_TextMetricsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CanvasGradientConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CanvasPatternConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCanvasContextConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ImageBitmapRenderingContextConstructor);
#if ENABLE(OFFSCREEN_CANVAS) && ENABLE(OFFSCREEN_CANVAS_IN_WORKERS)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_OffscreenCanvasRenderingContext2DConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_Path2DConstructor);
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGL2RenderingContextConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLActiveInfoConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLBufferConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLContextEventConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLFramebufferConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLProgramConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLQueryConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLRenderbufferConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLRenderingContextConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLSamplerConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLShaderConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLShaderPrecisionFormatConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLSyncConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLTextureConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLTransformFeedbackConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLUniformLocationConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLVertexArrayObjectConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_AudioTrackConfigurationConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_VideoTrackConfigurationConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_CryptoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_EventSourceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_NavigatorUADataConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WorkerNavigatorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WorkerGlobalScopeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_WorkerLocationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_NavigationPreloadManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ServiceWorkerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ServiceWorkerContainerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_ServiceWorkerRegistrationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchRecordConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchRegistrationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchUpdateUIEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_XMLHttpRequestEventTargetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWorkerGlobalScope_XMLHttpRequestUploadConstructor);

using JSWorkerGlobalScopeDOMConstructor = JSDOMConstructorNotConstructable<JSWorkerGlobalScope>;

/* Hash table */

static const struct CompactHashIndex JSWorkerGlobalScopeTableIndex[262] = {
    { -1, -1 },
    { -1, -1 },
    { 20, -1 },
    { -1, -1 },
    { 3, 257 },
    { -1, -1 },
    { 61, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 27, -1 },
    { 49, -1 },
    { -1, -1 },
    { 50, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 62, -1 },
    { 48, -1 },
    { 24, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 25, -1 },
    { 0, -1 },
    { 18, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 66, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 45, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 41, -1 },
    { -1, -1 },
    { 37, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 11, -1 },
    { 30, -1 },
    { -1, -1 },
    { 60, -1 },
    { 56, -1 },
    { -1, -1 },
    { 23, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 21, -1 },
    { -1, -1 },
    { 43, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 4, -1 },
    { 69, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 63, -1 },
    { 70, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 53, -1 },
    { -1, -1 },
    { 1, -1 },
    { -1, -1 },
    { 22, 261 },
    { -1, -1 },
    { -1, -1 },
    { 54, -1 },
    { 39, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 40, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 17, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 64, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 52, -1 },
    { 15, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 28, 260 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 8, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 31, 259 },
    { -1, -1 },
    { -1, -1 },
    { 58, -1 },
    { -1, -1 },
    { -1, -1 },
    { 16, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 38, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 2, 256 },
    { 10, -1 },
    { -1, -1 },
    { 59, -1 },
    { 6, -1 },
    { -1, -1 },
    { 55, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 9, -1 },
    { -1, -1 },
    { 35, -1 },
    { -1, -1 },
    { -1, -1 },
    { 29, 258 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 26, -1 },
    { -1, -1 },
    { 14, -1 },
    { 46, -1 },
    { 12, -1 },
    { 19, -1 },
    { -1, -1 },
    { 34, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 68, -1 },
    { -1, -1 },
    { 36, -1 },
    { 51, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 44, -1 },
    { -1, -1 },
    { -1, -1 },
    { 65, -1 },
    { -1, -1 },
    { 42, -1 },
    { 13, -1 },
    { -1, -1 },
    { -1, -1 },
    { 57, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 5, -1 },
    { 7, -1 },
    { 32, -1 },
    { 33, -1 },
    { 47, -1 },
    { 67, -1 },
};


static const std::array<HashTableValue, 71> JSWorkerGlobalScopeTableValues {
    HashTableValue { "Headers"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_HeadersConstructor, 0 } },
    HashTableValue { "Request"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_RequestConstructor, 0 } },
    HashTableValue { "Response"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ResponseConstructor, 0 } },
    HashTableValue { "Report"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ReportConstructor, 0 } },
    HashTableValue { "ReportBody"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ReportBodyConstructor, 0 } },
    HashTableValue { "ReportingObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ReportingObserverConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "VideoColorSpace"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_VideoColorSpaceConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "CloseEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CloseEventConstructor, 0 } },
    HashTableValue { "DOMMatrix"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMMatrixConstructor, 0 } },
    HashTableValue { "DOMMatrixReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMMatrixReadOnlyConstructor, 0 } },
    HashTableValue { "FontFace"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_FontFaceConstructor, 0 } },
    HashTableValue { "FontFaceSet"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_FontFaceSetConstructor, 0 } },
    HashTableValue { "CSSKeywordValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSKeywordValueConstructor, 0 } },
    HashTableValue { "CSSNumericValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSNumericValueConstructor, 0 } },
    HashTableValue { "CSSVariableReferenceValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSVariableReferenceValueConstructor, 0 } },
    HashTableValue { "CSSImageValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSImageValueConstructor, 0 } },
    HashTableValue { "CSSStyleValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSStyleValueConstructor, 0 } },
    HashTableValue { "CSSUnitValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSUnitValueConstructor, 0 } },
    HashTableValue { "CSSUnparsedValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSUnparsedValueConstructor, 0 } },
    HashTableValue { "StylePropertyMapReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_StylePropertyMapReadOnlyConstructor, 0 } },
    HashTableValue { "CSSMathClamp"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathClampConstructor, 0 } },
    HashTableValue { "CSSMathInvert"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathInvertConstructor, 0 } },
    HashTableValue { "CSSMathMax"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathMaxConstructor, 0 } },
    HashTableValue { "CSSMathMin"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathMinConstructor, 0 } },
    HashTableValue { "CSSMathNegate"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathNegateConstructor, 0 } },
    HashTableValue { "CSSMathProduct"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathProductConstructor, 0 } },
    HashTableValue { "CSSMathSum"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathSumConstructor, 0 } },
    HashTableValue { "CSSMathValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMathValueConstructor, 0 } },
    HashTableValue { "CSSNumericArray"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSNumericArrayConstructor, 0 } },
    HashTableValue { "CSSMatrixComponent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSMatrixComponentConstructor, 0 } },
    HashTableValue { "CSSPerspective"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSPerspectiveConstructor, 0 } },
    HashTableValue { "CSSRotate"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSRotateConstructor, 0 } },
    HashTableValue { "CSSScale"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSScaleConstructor, 0 } },
    HashTableValue { "CSSSkew"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSSkewConstructor, 0 } },
    HashTableValue { "CSSSkewX"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSSkewXConstructor, 0 } },
    HashTableValue { "CSSSkewY"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSSkewYConstructor, 0 } },
    HashTableValue { "CSSTransformComponent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSTransformComponentConstructor, 0 } },
    HashTableValue { "CSSTransformValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSTransformValueConstructor, 0 } },
    HashTableValue { "CSSTranslate"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CSSTranslateConstructor, 0 } },
    HashTableValue { "DOMException"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMExceptionConstructor, 0 } },
    HashTableValue { "DOMPoint"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMPointConstructor, 0 } },
    HashTableValue { "DOMPointReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMPointReadOnlyConstructor, 0 } },
    HashTableValue { "DOMQuad"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMQuadConstructor, 0 } },
    HashTableValue { "DOMRect"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMRectConstructor, 0 } },
    HashTableValue { "DOMRectReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMRectReadOnlyConstructor, 0 } },
    HashTableValue { "DOMStringList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_DOMStringListConstructor, 0 } },
    HashTableValue { "MessageChannel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_MessageChannelConstructor, 0 } },
    HashTableValue { "MessageEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_MessageEventConstructor, 0 } },
    HashTableValue { "MessagePort"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_MessagePortConstructor, 0 } },
    HashTableValue { "ProgressEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ProgressEventConstructor, 0 } },
    HashTableValue { "SecurityPolicyViolationEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_SecurityPolicyViolationEventConstructor, 0 } },
    HashTableValue { "Blob"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_BlobConstructor, 0 } },
    HashTableValue { "File"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_FileConstructor, 0 } },
    HashTableValue { "FileList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_FileListConstructor, 0 } },
    HashTableValue { "FormData"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_FormDataConstructor, 0 } },
    HashTableValue { "ImageBitmap"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ImageBitmapConstructor, 0 } },
    HashTableValue { "ImageData"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ImageDataConstructor, 0 } },
    HashTableValue { "TextMetrics"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_TextMetricsConstructor, 0 } },
    HashTableValue { "CanvasGradient"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CanvasGradientConstructor, 0 } },
    HashTableValue { "CanvasPattern"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CanvasPatternConstructor, 0 } },
    HashTableValue { "ImageBitmapRenderingContext"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ImageBitmapRenderingContextConstructor, 0 } },
    HashTableValue { "Path2D"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_Path2DConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "AudioTrackConfiguration"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_AudioTrackConfigurationConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VideoTrackConfiguration"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_VideoTrackConfigurationConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "Crypto"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_CryptoConstructor, 0 } },
    HashTableValue { "EventSource"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_EventSourceConstructor, 0 } },
    HashTableValue { "WorkerNavigator"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_WorkerNavigatorConstructor, 0 } },
    HashTableValue { "WorkerGlobalScope"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_WorkerGlobalScopeConstructor, 0 } },
    HashTableValue { "WorkerLocation"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_WorkerLocationConstructor, 0 } },
    HashTableValue { "XMLHttpRequestEventTarget"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_XMLHttpRequestEventTargetConstructor, 0 } },
    HashTableValue { "XMLHttpRequestUpload"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_XMLHttpRequestUploadConstructor, 0 } },
};

static const HashTable JSWorkerGlobalScopeTable = { 71, 255, static_cast<uint8_t>(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)), JSWorkerGlobalScope::info(), JSWorkerGlobalScopeTableValues.data(), JSWorkerGlobalScopeTableIndex };
template<> const ClassInfo JSWorkerGlobalScopeDOMConstructor::s_info = { "WorkerGlobalScope"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWorkerGlobalScopeDOMConstructor) };

template<> JSValue JSWorkerGlobalScopeDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSWorkerGlobalScopeDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "WorkerGlobalScope"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWorkerGlobalScope::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const struct CompactHashIndex JSWorkerGlobalScopePrototypeTableIndex[71] = {
    { 12, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 10, 64 },
    { -1, -1 },
    { 27, -1 },
    { -1, -1 },
    { 5, -1 },
    { -1, -1 },
    { 23, -1 },
    { 7, 67 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 11, -1 },
    { -1, -1 },
    { -1, -1 },
    { 22, -1 },
    { -1, -1 },
    { 9, -1 },
    { -1, -1 },
    { -1, -1 },
    { 0, -1 },
    { -1, -1 },
    { 15, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 8, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 1, 66 },
    { 16, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 3, 69 },
    { -1, -1 },
    { 4, 68 },
    { 17, -1 },
    { 2, 65 },
    { -1, -1 },
    { 14, 70 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 6, -1 },
    { 18, -1 },
    { -1, -1 },
    { -1, -1 },
    { 24, -1 },
    { -1, -1 },
    { -1, -1 },
    { 25, -1 },
    { -1, -1 },
    { -1, -1 },
    { 13, -1 },
    { 19, -1 },
    { 20, -1 },
    { 21, -1 },
    { 26, -1 },
    { 28, -1 },
    { 29, -1 },
};


static const std::array<HashTableValue, 30> JSWorkerGlobalScopePrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScopeConstructor, 0 } },
    HashTableValue { "self"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_self, 0 } },
    HashTableValue { "location"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_location, 0 } },
    HashTableValue { "navigator"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_navigator, 0 } },
    HashTableValue { "onerror"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_onerror, setJSWorkerGlobalScope_onerror } },
    HashTableValue { "onoffline"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_onoffline, setJSWorkerGlobalScope_onoffline } },
    HashTableValue { "ononline"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_ononline, setJSWorkerGlobalScope_ononline } },
    HashTableValue { "onrejectionhandled"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_onrejectionhandled, setJSWorkerGlobalScope_onrejectionhandled } },
    HashTableValue { "onunhandledrejection"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_onunhandledrejection, setJSWorkerGlobalScope_onunhandledrejection } },
    HashTableValue { "fonts"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_fonts, 0 } },
    HashTableValue { "origin"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_origin, setJSWorkerGlobalScope_origin } },
    HashTableValue { "isSecureContext"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_isSecureContext, 0 } },
    HashTableValue { "crossOriginIsolated"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_crossOriginIsolated, 0 } },
    HashTableValue { "caches"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_caches, 0 } },
    HashTableValue { "indexedDB"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_indexedDB, 0 } },
    HashTableValue { "trustedTypes"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_trustedTypes, 0 } },
    HashTableValue { "crypto"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_crypto, 0 } },
    HashTableValue { "performance"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsWorkerGlobalScope_performance, setJSWorkerGlobalScope_performance } },
    HashTableValue { "importScripts"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_importScripts, 0 } },
    HashTableValue { "reportError"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_reportError, 1 } },
    HashTableValue { "atob"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_atob, 1 } },
    HashTableValue { "btoa"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_btoa, 1 } },
    HashTableValue { "setTimeout"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_setTimeout, 1 } },
    HashTableValue { "clearTimeout"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_clearTimeout, 0 } },
    HashTableValue { "setInterval"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_setInterval, 1 } },
    HashTableValue { "clearInterval"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_clearInterval, 0 } },
    HashTableValue { "queueMicrotask"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_queueMicrotask, 1 } },
    HashTableValue { "createImageBitmap"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_createImageBitmap, 1 } },
    HashTableValue { "structuredClone"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_structuredClone, 1 } },
    HashTableValue { "fetch"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWorkerGlobalScopePrototypeFunction_fetch, 1 } },
};

static const HashTable JSWorkerGlobalScopePrototypeTable = { 30, 63, static_cast<uint8_t>(JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::Function | JSC::PropertyAttribute::ReadOnly | PropertyAttribute::DontEnum), JSWorkerGlobalScope::info(), JSWorkerGlobalScopePrototypeTableValues.data(), JSWorkerGlobalScopePrototypeTableIndex };
const ClassInfo JSWorkerGlobalScopePrototype::s_info = { "WorkerGlobalScope"_s, &Base::s_info, &JSWorkerGlobalScopePrototypeTable, nullptr, CREATE_METHOD_TABLE(JSWorkerGlobalScopePrototype) };

void JSWorkerGlobalScopePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWorkerGlobalScope::info(), JSWorkerGlobalScopePrototypeTableValues, *this);
    bool hasDisabledRuntimeProperties = false;
    if (!jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().crossOriginOpenerPolicyEnabled) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "crossOriginIsolated"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
    if (!(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cacheAPIEnabled)) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "caches"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
    if (!jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "indexedDB"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
    if (!jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().trustedTypesEnabled) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "trustedTypes"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
    if (hasDisabledRuntimeProperties && structure()->isDictionary())
        flattenDictionaryObject(vm);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWorkerGlobalScope::s_info = { "WorkerGlobalScope"_s, &Base::s_info, &JSWorkerGlobalScopeTable, nullptr, CREATE_METHOD_TABLE(JSWorkerGlobalScope) };

JSWorkerGlobalScope::JSWorkerGlobalScope(VM& vm, Structure* structure, Ref<WorkerGlobalScope>&& impl)
    : JSWorkerGlobalScopeBase(vm, structure, WTFMove(impl))
{
}

Ref<WorkerGlobalScope> JSWorkerGlobalScope::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, WorkerGlobalScope>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

void JSWorkerGlobalScope::finishCreation(VM& vm, JSGlobalProxy* proxy)
{
    Base::finishCreation(vm, proxy);

    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().shapeDetection))
        putDirectCustomAccessor(vm, builtinNames(vm).BarcodeDetectorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_BarcodeDetectorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().shapeDetection))
        putDirectCustomAccessor(vm, builtinNames(vm).FaceDetectorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_FaceDetectorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().shapeDetection))
        putDirectCustomAccessor(vm, builtinNames(vm).TextDetectorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TextDetectorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUAdapterPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUAdapterConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUAdapterInfoPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUAdapterInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBindGroupPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUBindGroupConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBindGroupLayoutPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUBindGroupLayoutConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBufferPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBufferUsagePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUBufferUsageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUColorWritePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUColorWriteConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCommandBufferPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUCommandBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCommandEncoderPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUCommandEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCompilationInfoPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUCompilationInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCompilationMessagePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUCompilationMessageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUComputePassEncoderPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUComputePassEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUComputePipelinePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUComputePipelineConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUDevicePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUDeviceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUDeviceLostInfoPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUDeviceLostInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUExternalTexturePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUExternalTextureConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUInternalErrorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUInternalErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUMapModePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUMapModeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUOutOfMemoryErrorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUOutOfMemoryErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUPipelineLayoutPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUPipelineLayoutConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUQuerySetPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUQuerySetConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUQueuePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUQueueConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderBundlePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPURenderBundleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderBundleEncoderPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPURenderBundleEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderPassEncoderPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPURenderPassEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderPipelinePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPURenderPipelineConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUSamplerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUSamplerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUShaderModulePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUShaderModuleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUShaderStagePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUShaderStageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUSupportedFeaturesPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUSupportedFeaturesConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUSupportedLimitsPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUSupportedLimitsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUTexturePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUTextureConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).GPUTextureUsagePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUTextureUsageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUTextureViewPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUTextureViewConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUUncapturedErrorEventPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUUncapturedErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUValidationErrorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUValidationErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WGSLLanguageFeaturesPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WGSLLanguageFeaturesConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cacheAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CachePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CacheConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cacheAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CacheStoragePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CacheStorageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().fileSystemEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemDirectoryHandlePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_FileSystemDirectoryHandleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().fileSystemEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemFileHandlePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_FileSystemFileHandleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().fileSystemEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemHandlePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_FileSystemHandleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().fileSystemWritableStreamEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemWritableFileStreamPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_FileSystemWritableFileStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBCursorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBCursorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBCursorWithValuePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBCursorWithValueConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBDatabasePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBDatabaseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBFactoryPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBFactoryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBIndexPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBIndexConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBKeyRangePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBKeyRangeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBObjectStorePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBObjectStoreConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBOpenDBRequestPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBOpenDBRequestConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBRequestPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBRequestConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBTransactionPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBTransactionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().indexedDBAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).IDBVersionChangeEventPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_IDBVersionChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(WEB_RTC)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().peerConnectionEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).RTCDataChannelPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_RTCDataChannelConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webRTCEncodedTransformEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).RTCTransformEventPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_RTCTransformEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().permissionsAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).PermissionsPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_PermissionsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().pushAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PushManagerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_PushManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().pushAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PushSubscriptionPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_PushSubscriptionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().pushAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PushSubscriptionOptionsPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_PushSubscriptionOptionsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().deprecationReportingEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).DeprecationReportBodyPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_DeprecationReportBodyConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().storageAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).StorageManagerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_StorageManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().urlPatternAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).URLPatternPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_URLPatternConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webLocksAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).LockPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_LockConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webLocksAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).LockManagerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_LockManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webSocketEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebSocketPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebSocketConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webTransportEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebTransportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webTransportEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportBidirectionalStreamPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebTransportBidirectionalStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webTransportEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportDatagramDuplexStreamPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebTransportDatagramDuplexStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webTransportEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportErrorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebTransportErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webTransportEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportReceiveStreamPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebTransportReceiveStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webTransportEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportSendStreamPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebTransportSendStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).CryptoKeyPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CryptoKeyConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext())
        putDirectCustomAccessor(vm, builtinNames(vm).SubtleCryptoPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_SubtleCryptoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSHSLPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSHSLConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSHWBPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSHWBConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSLCHPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSLCHConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSLabPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSLabConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSOKLCHPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSOKLCHConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSOKLabPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSOKLabConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSColorPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSColorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSColorValuePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSColorValueConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().cssTypedOMColorEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).CSSRGBPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_CSSRGBConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().broadcastChannelEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).BroadcastChannelPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_BroadcastChannelConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().observableEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).ObservablePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_ObservableConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().observableEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).SubscriberPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_SubscriberConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().trustedTypesEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedHTMLPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TrustedHTMLConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().trustedTypesEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedScriptPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TrustedScriptConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().trustedTypesEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedScriptURLPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TrustedScriptURLConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().trustedTypesEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedTypePolicyPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TrustedTypePolicyConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().trustedTypesEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedTypePolicyFactoryPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TrustedTypePolicyFactoryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().fileReaderAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).FileReaderPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_FileReaderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(OFFSCREEN_CANVAS) && ENABLE(OFFSCREEN_CANVAS_IN_WORKERS)
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().offscreenCanvasEnabled && OffscreenCanvas::enabledForContext(*jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())))
        putDirectCustomAccessor(vm, builtinNames(vm).OffscreenCanvasPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_OffscreenCanvasConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGPUEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCanvasContextPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_GPUCanvasContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(OFFSCREEN_CANVAS) && ENABLE(OFFSCREEN_CANVAS_IN_WORKERS)
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().offscreenCanvasEnabled && OffscreenCanvasRenderingContext2D::enabledForContext(*jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())))
        putDirectCustomAccessor(vm, builtinNames(vm).OffscreenCanvasRenderingContext2DPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_OffscreenCanvasRenderingContext2DConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGL2RenderingContextPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGL2RenderingContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLActiveInfoPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLActiveInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLBufferPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLContextEventPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLContextEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLFramebufferPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLFramebufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLProgramPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLProgramConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLQueryPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLQueryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLRenderbufferPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLRenderbufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLRenderingContextPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLRenderingContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLSamplerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLSamplerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLShaderPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLShaderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLShaderPrecisionFormatPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLShaderPrecisionFormatConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLSyncPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLSyncConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLTexturePublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLTextureConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLTransformFeedbackPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLTransformFeedbackConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLUniformLocationPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLUniformLocationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().webGLEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLVertexArrayObjectPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_WebGLVertexArrayObjectConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().navigatorUserAgentDataJavaScriptAPIEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).NavigatorUADataPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_NavigatorUADataConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkerNavigationPreloadEnabled)
        putDirectCustomAccessor(vm, builtinNames(vm).NavigationPreloadManagerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_NavigationPreloadManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkersEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ServiceWorkerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_ServiceWorkerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkersEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ServiceWorkerContainerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_ServiceWorkerContainerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->isSecureContext() && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkersEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ServiceWorkerRegistrationPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_ServiceWorkerRegistrationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkersEnabled && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().backgroundFetchAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchManagerPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_BackgroundFetchManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkersEnabled && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().backgroundFetchAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchRecordPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_BackgroundFetchRecordConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkersEnabled && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().backgroundFetchAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchRegistrationPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_BackgroundFetchRegistrationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().serviceWorkersEnabled && jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().backgroundFetchAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchUpdateUIEventPublicName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_BackgroundFetchUpdateUIEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    putDirectCustomAccessor(vm, builtinNames(vm).TextDecoderStreamDecoderPrivateName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TextDecoderStreamDecoderConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).TextEncoderStreamEncoderPrivateName(), CustomGetterSetter::create(vm, jsWorkerGlobalScope_TextEncoderStreamEncoderConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
}

JSObject* JSWorkerGlobalScope::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWorkerGlobalScopePrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSWorkerGlobalScopePrototype::create(vm, &globalObject, structure);
}

JSObject* JSWorkerGlobalScope::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWorkerGlobalScope>(vm, globalObject);
}

JSValue JSWorkerGlobalScope::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWorkerGlobalScopeDOMConstructor, DOMConstructorID::WorkerGlobalScope>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScopeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWorkerGlobalScopePrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWorkerGlobalScope::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWorkerGlobalScope_selfGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WorkerGlobalScope>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.self())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_self, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_selfGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_locationGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WorkerLocation>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.location())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_location, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_locationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_navigatorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WorkerNavigator>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.navigator())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_navigator, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_navigatorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_onerrorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().errorEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_onerrorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWorkerGlobalScope_onerrorSetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSErrorHandler>(thisObject.protectedWrapped(), eventNames().errorEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWorkerGlobalScope_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::set<setJSWorkerGlobalScope_onerrorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_onofflineGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().offlineEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_onoffline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_onofflineGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWorkerGlobalScope_onofflineSetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().offlineEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWorkerGlobalScope_onoffline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::set<setJSWorkerGlobalScope_onofflineSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ononlineGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().onlineEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ononline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ononlineGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWorkerGlobalScope_ononlineSetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().onlineEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWorkerGlobalScope_ononline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::set<setJSWorkerGlobalScope_ononlineSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_onrejectionhandledGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().rejectionhandledEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_onrejectionhandled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_onrejectionhandledGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWorkerGlobalScope_onrejectionhandledSetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().rejectionhandledEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWorkerGlobalScope_onrejectionhandled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::set<setJSWorkerGlobalScope_onrejectionhandledSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_onunhandledrejectionGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().unhandledrejectionEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_onunhandledrejection, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_onunhandledrejectionGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWorkerGlobalScope_onunhandledrejectionSetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().unhandledrejectionEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWorkerGlobalScope_onunhandledrejection, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::set<setJSWorkerGlobalScope_onunhandledrejectionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_fontsGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FontFaceSet>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.fonts())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_fonts, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_fontsGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_originGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUSVString>(lexicalGlobalObject, throwScope, impl.origin())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_origin, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_originGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWorkerGlobalScope_originSetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWorkerGlobalScope_origin, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::setPassingPropertyName<setJSWorkerGlobalScope_originSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_isSecureContextGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.isSecureContext())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_isSecureContext, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_isSecureContextGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_crossOriginIsolatedGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.crossOriginIsolated())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_crossOriginIsolated, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_crossOriginIsolatedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_cachesGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* context = jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<DOMCacheStorage>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::WindowOrWorkerGlobalScopeCaches::caches(*context, impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_caches, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_cachesGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_indexedDBGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<IDBFactory>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::WindowOrWorkerGlobalScopeIndexedDatabase::indexedDB(impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_indexedDB, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_indexedDBGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_trustedTypesGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<TrustedTypePolicyFactory>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::WindowOrWorkerGlobalScopeTrustedTypes::trustedTypes(impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_trustedTypes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_trustedTypesGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_cryptoGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Crypto>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.crypto())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_crypto, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_cryptoGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_performanceGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Performance>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.performance())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_performance, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_performanceGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWorkerGlobalScope_performanceSetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWorkerGlobalScope_performance, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::setPassingPropertyName<setJSWorkerGlobalScope_performanceSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_BarcodeDetectorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSBarcodeDetector::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_BarcodeDetectorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_BarcodeDetectorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FaceDetectorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFaceDetector::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FaceDetectorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FaceDetectorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TextDetectorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTextDetector::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TextDetectorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TextDetectorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPU::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUAdapterConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUAdapter::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUAdapterConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUAdapterConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUAdapterInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUAdapterInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUAdapterInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUAdapterInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUBindGroupConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUBindGroup::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBindGroupConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUBindGroupConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUBindGroupLayoutConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUBindGroupLayout::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBindGroupLayoutConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUBindGroupLayoutConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUBufferUsageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUBufferUsage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUBufferUsageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUBufferUsageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUColorWriteConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUColorWrite::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUColorWriteConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUColorWriteConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUCommandBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUCommandBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCommandBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUCommandBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUCommandEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUCommandEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCommandEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUCommandEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUCompilationInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUCompilationInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCompilationInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUCompilationInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUCompilationMessageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUCompilationMessage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCompilationMessageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUCompilationMessageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUComputePassEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUComputePassEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUComputePassEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUComputePassEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUComputePipelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUComputePipeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUComputePipelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUComputePipelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUDeviceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUDevice::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUDeviceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUDeviceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUDeviceLostInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUDeviceLostInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUDeviceLostInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUDeviceLostInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUExternalTextureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUExternalTexture::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUExternalTextureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUExternalTextureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUInternalErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUInternalError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUInternalErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUInternalErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUMapModeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUMapMode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUMapModeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUMapModeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUOutOfMemoryErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUOutOfMemoryError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUOutOfMemoryErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUOutOfMemoryErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUPipelineLayoutConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUPipelineLayout::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUPipelineLayoutConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUPipelineLayoutConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUQuerySetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUQuerySet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUQuerySetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUQuerySetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUQueueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUQueue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUQueueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUQueueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPURenderBundleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPURenderBundle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderBundleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPURenderBundleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPURenderBundleEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPURenderBundleEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderBundleEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPURenderBundleEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPURenderPassEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPURenderPassEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderPassEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPURenderPassEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPURenderPipelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPURenderPipeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPURenderPipelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPURenderPipelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUSamplerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUSampler::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUSamplerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUSamplerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUShaderModuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUShaderModule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUShaderModuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUShaderModuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUShaderStageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUShaderStage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUShaderStageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUShaderStageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUSupportedFeaturesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUSupportedFeatures::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUSupportedFeaturesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUSupportedFeaturesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUSupportedLimitsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUSupportedLimits::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUSupportedLimitsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUSupportedLimitsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUTextureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUTexture::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUTextureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUTextureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUTextureUsageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUTextureUsage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUTextureUsageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUTextureUsageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUTextureViewConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUTextureView::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUTextureViewConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUTextureViewConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUUncapturedErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUUncapturedErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUUncapturedErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUUncapturedErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUValidationErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUValidationError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUValidationErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUValidationErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WGSLLanguageFeaturesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWGSLLanguageFeatures::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WGSLLanguageFeaturesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WGSLLanguageFeaturesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CacheConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMCache::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CacheConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CacheConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CacheStorageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMCacheStorage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CacheStorageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CacheStorageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_HeadersConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFetchHeaders::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_HeadersConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_HeadersConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_RequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFetchRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_RequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_RequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ResponseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFetchResponse::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ResponseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FileSystemDirectoryHandleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFileSystemDirectoryHandle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemDirectoryHandleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FileSystemDirectoryHandleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FileSystemFileHandleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFileSystemFileHandle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemFileHandleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FileSystemFileHandleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FileSystemHandleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFileSystemHandle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemHandleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FileSystemHandleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FileSystemWritableFileStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFileSystemWritableFileStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FileSystemWritableFileStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FileSystemWritableFileStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBCursorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBCursor::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBCursorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBCursorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBCursorWithValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBCursorWithValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBCursorWithValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBCursorWithValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBDatabaseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBDatabase::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBDatabaseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBDatabaseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBFactoryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBFactory::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBFactoryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBFactoryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBIndexConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBIndex::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBIndexConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBIndexConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBKeyRangeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBKeyRange::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBKeyRangeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBKeyRangeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBObjectStoreConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBObjectStore::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBObjectStoreConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBObjectStoreConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBOpenDBRequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBOpenDBRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBOpenDBRequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBOpenDBRequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBRequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBRequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBRequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBTransactionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBTransaction::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBTransactionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBTransactionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_IDBVersionChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSIDBVersionChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_IDBVersionChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_IDBVersionChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEB_RTC)
static inline JSValue jsWorkerGlobalScope_RTCDataChannelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSRTCDataChannel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_RTCDataChannelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_RTCDataChannelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsWorkerGlobalScope_RTCTransformEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSRTCTransformEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_RTCTransformEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_RTCTransformEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsWorkerGlobalScope_PermissionsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSPermissions::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_PermissionsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_PermissionsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_PushManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSPushManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_PushManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_PushManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_PushSubscriptionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSPushSubscription::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_PushSubscriptionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_PushSubscriptionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_PushSubscriptionOptionsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSPushSubscriptionOptions::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_PushSubscriptionOptionsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_PushSubscriptionOptionsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DeprecationReportBodyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDeprecationReportBody::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DeprecationReportBodyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DeprecationReportBodyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ReportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSReport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ReportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ReportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ReportBodyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSReportBody::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ReportBodyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ReportBodyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ReportingObserverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSReportingObserver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ReportingObserverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ReportingObserverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_StorageManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSStorageManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_StorageManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_StorageManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_URLPatternConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSURLPattern::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_URLPatternConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_URLPatternConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_LockConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebLock::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_LockConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_LockConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_LockManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebLockManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_LockManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_LockManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(VIDEO)
static inline JSValue jsWorkerGlobalScope_VideoColorSpaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSVideoColorSpace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_VideoColorSpaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_VideoColorSpaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsWorkerGlobalScope_CloseEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCloseEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CloseEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CloseEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WebSocketConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebSocket::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebSocketConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebSocketConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WebTransportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebTransport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebTransportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WebTransportBidirectionalStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebTransportBidirectionalStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportBidirectionalStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebTransportBidirectionalStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WebTransportDatagramDuplexStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebTransportDatagramDuplexStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportDatagramDuplexStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebTransportDatagramDuplexStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WebTransportErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebTransportError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebTransportErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WebTransportReceiveStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebTransportReceiveStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportReceiveStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebTransportReceiveStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WebTransportSendStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebTransportSendStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebTransportSendStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebTransportSendStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CryptoKeyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCryptoKey::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CryptoKeyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CryptoKeyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_SubtleCryptoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSSubtleCrypto::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_SubtleCryptoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_SubtleCryptoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMMatrixConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMMatrix::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMMatrixConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMMatrixConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMMatrixReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMMatrixReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMMatrixReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMMatrixReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FontFaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFontFace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FontFaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FontFaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FontFaceSetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFontFaceSet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FontFaceSetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FontFaceSetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSKeywordValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSKeywordValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSKeywordValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSKeywordValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSNumericValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSNumericValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSNumericValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSNumericValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSVariableReferenceValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSOMVariableReferenceValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSVariableReferenceValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSVariableReferenceValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSImageValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSStyleImageValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSImageValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSImageValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSStyleValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSStyleValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSStyleValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSStyleValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSUnitValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSUnitValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSUnitValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSUnitValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSUnparsedValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSUnparsedValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSUnparsedValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSUnparsedValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_StylePropertyMapReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSStylePropertyMapReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_StylePropertyMapReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_StylePropertyMapReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSHSLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSHSL::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSHSLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSHSLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSHWBConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSHWB::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSHWBConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSHWBConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSLCHConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSLCH::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSLCHConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSLCHConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSLabConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSLab::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSLabConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSLabConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSOKLCHConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSOKLCH::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSOKLCHConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSOKLCHConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSOKLabConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSOKLab::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSOKLabConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSOKLabConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSColorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSOMColor::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSColorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSColorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSColorValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSOMColorValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSColorValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSColorValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSRGBConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSRGB::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSRGBConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSRGBConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathClampConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathClamp::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathClampConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathClampConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathInvertConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathInvert::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathInvertConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathInvertConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathMaxConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathMax::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathMaxConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathMaxConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathMinConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathMin::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathMinConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathMinConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathNegateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathNegate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathNegateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathNegateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathProductConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathProduct::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathProductConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathProductConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathSumConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathSum::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathSumConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathSumConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMathValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMathValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMathValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMathValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSNumericArrayConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSNumericArray::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSNumericArrayConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSNumericArrayConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSMatrixComponentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSMatrixComponent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSMatrixComponentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSMatrixComponentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSPerspectiveConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSPerspective::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSPerspectiveConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSPerspectiveConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSRotateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSRotate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSRotateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSRotateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSScaleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSScale::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSScaleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSScaleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSSkewConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSSkew::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSSkewConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSSkewConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSSkewXConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSSkewX::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSSkewXConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSSkewXConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSSkewYConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSSkewY::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSSkewYConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSSkewYConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSTransformComponentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSTransformComponent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSTransformComponentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSTransformComponentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSTransformValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSTransformValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSTransformValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSTransformValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CSSTranslateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCSSTranslate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CSSTranslateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CSSTranslateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_BroadcastChannelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSBroadcastChannel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_BroadcastChannelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_BroadcastChannelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMExceptionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMException::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMExceptionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMExceptionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMPointConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMPoint::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMPointConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMPointConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMPointReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMPointReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMPointReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMPointReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMQuadConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMQuad::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMQuadConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMQuadConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMRectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMRect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMRectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMRectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMRectReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMRectReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMRectReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMRectReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_DOMStringListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMStringList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_DOMStringListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_DOMStringListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_MessageChannelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSMessageChannel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_MessageChannelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_MessageChannelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_MessageEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSMessageEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_MessageEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_MessageEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_MessagePortConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSMessagePort::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_MessagePortConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_MessagePortConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ObservableConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSObservable::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ObservableConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ObservableConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ProgressEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSProgressEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ProgressEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ProgressEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_SecurityPolicyViolationEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSSecurityPolicyViolationEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_SecurityPolicyViolationEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_SecurityPolicyViolationEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_SubscriberConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSSubscriber::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_SubscriberConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_SubscriberConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TextDecoderStreamDecoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTextDecoderStreamDecoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TextDecoderStreamDecoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TextDecoderStreamDecoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TextEncoderStreamEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTextEncoderStreamEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TextEncoderStreamEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TextEncoderStreamEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TrustedHTMLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTrustedHTML::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedHTMLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TrustedHTMLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TrustedScriptConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTrustedScript::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedScriptConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TrustedScriptConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TrustedScriptURLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTrustedScriptURL::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedScriptURLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TrustedScriptURLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TrustedTypePolicyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTrustedTypePolicy::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedTypePolicyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TrustedTypePolicyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_TrustedTypePolicyFactoryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTrustedTypePolicyFactory::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TrustedTypePolicyFactoryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TrustedTypePolicyFactoryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_BlobConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSBlob::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_BlobConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_BlobConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FileConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFile::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FileConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FileConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FileListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFileList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FileListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FileListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FileReaderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSFileReader::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FileReaderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FileReaderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_FormDataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSDOMFormData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_FormDataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_FormDataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ImageBitmapConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSImageBitmap::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ImageBitmapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ImageBitmapConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ImageDataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSImageData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ImageDataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ImageDataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(OFFSCREEN_CANVAS) && ENABLE(OFFSCREEN_CANVAS_IN_WORKERS)
static inline JSValue jsWorkerGlobalScope_OffscreenCanvasConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSOffscreenCanvas::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_OffscreenCanvasConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_OffscreenCanvasConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsWorkerGlobalScope_TextMetricsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSTextMetrics::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_TextMetricsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_TextMetricsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CanvasGradientConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCanvasGradient::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CanvasGradientConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CanvasGradientConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_CanvasPatternConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCanvasPattern::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CanvasPatternConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CanvasPatternConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_GPUCanvasContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSGPUCanvasContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_GPUCanvasContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_GPUCanvasContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ImageBitmapRenderingContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSImageBitmapRenderingContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ImageBitmapRenderingContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ImageBitmapRenderingContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(OFFSCREEN_CANVAS) && ENABLE(OFFSCREEN_CANVAS_IN_WORKERS)
static inline JSValue jsWorkerGlobalScope_OffscreenCanvasRenderingContext2DConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSOffscreenCanvasRenderingContext2D::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_OffscreenCanvasRenderingContext2DConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_OffscreenCanvasRenderingContext2DConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsWorkerGlobalScope_Path2DConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSPath2D::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_Path2DConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_Path2DConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGL2RenderingContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGL2RenderingContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGL2RenderingContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGL2RenderingContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLActiveInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLActiveInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLActiveInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLActiveInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLContextEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLContextEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLContextEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLContextEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLFramebufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLFramebuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLFramebufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLFramebufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLProgramConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLProgram::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLProgramConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLProgramConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLQueryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLQuery::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLQueryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLQueryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLRenderbufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLRenderbuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLRenderbufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLRenderbufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLRenderingContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLRenderingContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLRenderingContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLRenderingContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLSamplerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLSampler::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLSamplerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLSamplerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLShaderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLShader::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLShaderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLShaderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLShaderPrecisionFormatConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLShaderPrecisionFormat::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLShaderPrecisionFormatConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLShaderPrecisionFormatConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLSyncConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLSync::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLSyncConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLSyncConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLTextureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLTexture::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLTextureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLTextureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLTransformFeedbackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLTransformFeedback::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLTransformFeedbackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLTransformFeedbackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLUniformLocationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLUniformLocation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLUniformLocationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLUniformLocationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsWorkerGlobalScope_WebGLVertexArrayObjectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWebGLVertexArrayObject::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WebGLVertexArrayObjectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WebGLVertexArrayObjectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsWorkerGlobalScope_AudioTrackConfigurationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSAudioTrackConfiguration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_AudioTrackConfigurationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_AudioTrackConfigurationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsWorkerGlobalScope_VideoTrackConfigurationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSVideoTrackConfiguration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_VideoTrackConfigurationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_VideoTrackConfigurationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsWorkerGlobalScope_CryptoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSCrypto::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_CryptoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_CryptoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_EventSourceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSEventSource::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_EventSourceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_EventSourceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_NavigatorUADataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSNavigatorUAData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_NavigatorUADataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_NavigatorUADataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WorkerNavigatorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWorkerNavigator::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WorkerNavigatorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WorkerNavigatorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WorkerGlobalScopeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWorkerGlobalScope::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WorkerGlobalScopeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WorkerGlobalScopeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_WorkerLocationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSWorkerLocation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_WorkerLocationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_WorkerLocationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_NavigationPreloadManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSNavigationPreloadManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_NavigationPreloadManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_NavigationPreloadManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ServiceWorkerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSServiceWorker::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ServiceWorkerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ServiceWorkerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ServiceWorkerContainerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSServiceWorkerContainer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ServiceWorkerContainerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ServiceWorkerContainerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_ServiceWorkerRegistrationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSServiceWorkerRegistration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_ServiceWorkerRegistrationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_ServiceWorkerRegistrationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_BackgroundFetchManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSBackgroundFetchManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_BackgroundFetchManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_BackgroundFetchRecordConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSBackgroundFetchRecord::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchRecordConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_BackgroundFetchRecordConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_BackgroundFetchRegistrationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSBackgroundFetchRegistration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchRegistrationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_BackgroundFetchRegistrationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_BackgroundFetchUpdateUIEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSBackgroundFetchUpdateUIEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_BackgroundFetchUpdateUIEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_BackgroundFetchUpdateUIEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_XMLHttpRequestEventTargetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSXMLHttpRequestEventTarget::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_XMLHttpRequestEventTargetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_XMLHttpRequestEventTargetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWorkerGlobalScope_XMLHttpRequestUploadConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSWorkerGlobalScope& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return JSXMLHttpRequestUpload::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWorkerGlobalScope_XMLHttpRequestUploadConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWorkerGlobalScope>::get<jsWorkerGlobalScope_XMLHttpRequestUploadConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_importScriptsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto urls = convertVariadicArguments<IDLUnion<IDLInterface<TrustedScriptURL>, IDLUSVString>>(*lexicalGlobalObject, *callFrame, 0);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.importScripts(WTFMove(urls)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_importScripts, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_importScriptsBody>(*lexicalGlobalObject, *callFrame, "importScripts");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_reportErrorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto errorConversionResult = convert<IDLAny>(*lexicalGlobalObject, argument0.value());
    if (errorConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.reportError(*(*castedThis).globalObject(), errorConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_reportError, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_reportErrorBody>(*lexicalGlobalObject, *callFrame, "reportError");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_atobBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto stringConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (stringConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.atob(stringConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_atob, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_atobBody>(*lexicalGlobalObject, *callFrame, "atob");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_btoaBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto stringConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (stringConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.btoa(stringConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_btoa, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_btoaBody>(*lexicalGlobalObject, *callFrame, "btoa");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_setTimeoutBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto handlerConversionResult = convert<IDLScheduledAction>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), "WorkerGlobalScope setTimeout"_s);
    if (handlerConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto timeoutConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (timeoutConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto arguments = convertVariadicArguments<IDLAny>(*lexicalGlobalObject, *callFrame, 2);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLLong>(*lexicalGlobalObject, throwScope, impl.setTimeout(handlerConversionResult.releaseReturnValue(), timeoutConversionResult.releaseReturnValue(), WTFMove(arguments)))));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_setTimeout, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_setTimeoutBody>(*lexicalGlobalObject, *callFrame, "setTimeout");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_clearTimeoutBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto handleConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (handleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.clearTimeout(handleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_clearTimeout, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_clearTimeoutBody>(*lexicalGlobalObject, *callFrame, "clearTimeout");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_setIntervalBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto handlerConversionResult = convert<IDLScheduledAction>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), "WorkerGlobalScope setInterval"_s);
    if (handlerConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto timeoutConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (timeoutConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto arguments = convertVariadicArguments<IDLAny>(*lexicalGlobalObject, *callFrame, 2);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLLong>(*lexicalGlobalObject, throwScope, impl.setInterval(handlerConversionResult.releaseReturnValue(), timeoutConversionResult.releaseReturnValue(), WTFMove(arguments)))));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_setInterval, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_setIntervalBody>(*lexicalGlobalObject, *callFrame, "setInterval");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_clearIntervalBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto handleConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (handleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.clearInterval(handleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_clearInterval, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_clearIntervalBody>(*lexicalGlobalObject, *callFrame, "clearInterval");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_queueMicrotaskBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    RELEASE_AND_RETURN(throwScope, (JSValue::encode(castedThis->queueMicrotask(*lexicalGlobalObject, *callFrame))));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_queueMicrotask, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_queueMicrotaskBody>(*lexicalGlobalObject, *callFrame, "queueMicrotask");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_createImageBitmap1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSWorkerGlobalScope>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageConversionResult = convert<IDLUnion<IDLInterface<HTMLImageElement>, IDLInterface<HTMLVideoElement>, IDLInterface<HTMLCanvasElement>, IDLInterface<SVGImageElement>, IDLInterface<ImageBitmap>, IDLInterface<CSSStyleImageValue>, IDLInterface<Blob>, IDLInterface<ImageData>>>(*lexicalGlobalObject, argument0.value());
    if (imageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto optionsConversionResult = convert<IDLDictionary<ImageBitmapOptions>>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLInterface<ImageBitmap>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.createImageBitmap(imageConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_createImageBitmap2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSWorkerGlobalScope>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageConversionResult = convert<IDLUnion<IDLInterface<HTMLImageElement>, IDLInterface<HTMLVideoElement>, IDLInterface<HTMLCanvasElement>, IDLInterface<SVGImageElement>, IDLInterface<ImageBitmap>, IDLInterface<CSSStyleImageValue>, IDLInterface<Blob>, IDLInterface<ImageData>>>(*lexicalGlobalObject, argument0.value());
    if (imageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto sxConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (sxConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->uncheckedArgument(2);
    auto syConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument2.value());
    if (syConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument3 = callFrame->uncheckedArgument(3);
    auto swConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument3.value());
    if (swConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument4 = callFrame->uncheckedArgument(4);
    auto shConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument4.value());
    if (shConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument5 = callFrame->argument(5);
    auto optionsConversionResult = convert<IDLDictionary<ImageBitmapOptions>>(*lexicalGlobalObject, argument5.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLInterface<ImageBitmap>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.createImageBitmap(imageConversionResult.releaseReturnValue(), sxConversionResult.releaseReturnValue(), syConversionResult.releaseReturnValue(), swConversionResult.releaseReturnValue(), shConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_createImageBitmapOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSWorkerGlobalScope>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    size_t argsCount = std::min<size_t>(6, callFrame->argumentCount());
    if (argsCount == 1) {
        RELEASE_AND_RETURN(throwScope, (jsWorkerGlobalScopePrototypeFunction_createImageBitmap1Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    if (argsCount == 2) {
        RELEASE_AND_RETURN(throwScope, (jsWorkerGlobalScopePrototypeFunction_createImageBitmap1Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    if (argsCount == 5) {
        RELEASE_AND_RETURN(throwScope, (jsWorkerGlobalScopePrototypeFunction_createImageBitmap2Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    if (argsCount == 6) {
        RELEASE_AND_RETURN(throwScope, (jsWorkerGlobalScopePrototypeFunction_createImageBitmap2Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    return argsCount < 1 ? throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject)) : throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_createImageBitmap, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_createImageBitmapOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "createImageBitmap");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_structuredCloneBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWorkerGlobalScope>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto valueConversionResult = convert<IDLAny>(*lexicalGlobalObject, argument0.value());
    if (valueConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto optionsConversionResult = convert<IDLDictionary<StructuredSerializeOptions>>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLAny>(*lexicalGlobalObject, throwScope, impl.structuredClone(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), *(*castedThis).globalObject(), valueConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_structuredClone, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_structuredCloneBody>(*lexicalGlobalObject, *callFrame, "structuredClone");
}

static inline JSC::EncodedJSValue jsWorkerGlobalScopePrototypeFunction_fetchBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSWorkerGlobalScope>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputConversionResult = convert<IDLUnion<IDLInterface<FetchRequest>, IDLUSVString>>(*lexicalGlobalObject, argument0.value());
    if (inputConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto initConversionResult = convert<IDLDictionary<FetchRequestInit>>(*lexicalGlobalObject, argument1.value());
    if (initConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJSNewlyCreated<IDLPromise<IDLInterface<FetchResponse>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return WebCore::WindowOrWorkerGlobalScopeFetch::fetch(impl, inputConversionResult.releaseReturnValue(), initConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsWorkerGlobalScopePrototypeFunction_fetch, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSWorkerGlobalScope>::call<jsWorkerGlobalScopePrototypeFunction_fetchBody>(*lexicalGlobalObject, *callFrame, "fetch");
}

JSC::GCClient::IsoSubspace* JSWorkerGlobalScope::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWorkerGlobalScope, UseCustomHeapCellType::Yes>(vm, "JSWorkerGlobalScope"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWorkerGlobalScope.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWorkerGlobalScope = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWorkerGlobalScope.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWorkerGlobalScope = std::forward<decltype(space)>(space); },
        [] (auto& server) -> JSC::HeapCellType& { return server.m_heapCellTypeForJSWorkerGlobalScope; }
    );
}

template<typename Visitor>
void JSWorkerGlobalScope::visitChildrenImpl(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSWorkerGlobalScope*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

DEFINE_VISIT_CHILDREN(JSWorkerGlobalScope);

template<typename Visitor>
void JSWorkerGlobalScope::visitOutputConstraints(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSWorkerGlobalScope*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

template void JSWorkerGlobalScope::visitOutputConstraints(JSCell*, AbstractSlotVisitor&);
template void JSWorkerGlobalScope::visitOutputConstraints(JSCell*, SlotVisitor&);
void JSWorkerGlobalScope::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWorkerGlobalScope*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

WorkerGlobalScope* JSWorkerGlobalScope::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWorkerGlobalScope*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
