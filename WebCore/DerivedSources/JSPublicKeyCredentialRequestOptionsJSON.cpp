/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSPublicKeyCredentialRequestOptionsJSON.h"

#include "JSAuthenticationExtensionsClientInputsJSON.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSPublicKeyCredentialDescriptorJSON.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<PublicKeyCredentialRequestOptionsJSON>> convertDictionary<PublicKeyCredentialRequestOptionsJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    PublicKeyCredentialRequestOptionsJSON result;
    JSValue allowCredentialsValue;
    if (isNullOrUndefined)
        allowCredentialsValue = jsUndefined();
    else {
        allowCredentialsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "allowCredentials"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto allowCredentialsConversionResult = convertOptionalWithDefault<IDLSequence<IDLDictionary<PublicKeyCredentialDescriptorJSON>>>(lexicalGlobalObject, allowCredentialsValue, [&]() -> ConversionResult<IDLSequence<IDLDictionary<PublicKeyCredentialDescriptorJSON>>> { return Converter<IDLSequence<IDLDictionary<PublicKeyCredentialDescriptorJSON>>>::ReturnType { }; });
    if (allowCredentialsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.allowCredentials = allowCredentialsConversionResult.releaseReturnValue();
    JSValue challengeValue;
    if (isNullOrUndefined)
        challengeValue = jsUndefined();
    else {
        challengeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "challenge"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (challengeValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "challenge"_s, "PublicKeyCredentialRequestOptionsJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto challengeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, challengeValue);
    if (challengeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.challenge = challengeConversionResult.releaseReturnValue();
    JSValue extensionsValue;
    if (isNullOrUndefined)
        extensionsValue = jsUndefined();
    else {
        extensionsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "extensions"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!extensionsValue.isUndefined()) {
        auto extensionsConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientInputsJSON>>(lexicalGlobalObject, extensionsValue);
        if (extensionsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.extensions = extensionsConversionResult.releaseReturnValue();
    }
    JSValue rpIdValue;
    if (isNullOrUndefined)
        rpIdValue = jsUndefined();
    else {
        rpIdValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "rpId"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!rpIdValue.isUndefined()) {
        auto rpIdConversionResult = convert<IDLDOMString>(lexicalGlobalObject, rpIdValue);
        if (rpIdConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.rpId = rpIdConversionResult.releaseReturnValue();
    }
    JSValue timeoutValue;
    if (isNullOrUndefined)
        timeoutValue = jsUndefined();
    else {
        timeoutValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "timeout"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!timeoutValue.isUndefined()) {
        auto timeoutConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, timeoutValue);
        if (timeoutConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.timeout = timeoutConversionResult.releaseReturnValue();
    }
    JSValue userVerificationValue;
    if (isNullOrUndefined)
        userVerificationValue = jsUndefined();
    else {
        userVerificationValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "userVerification"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!userVerificationValue.isUndefined()) {
        auto userVerificationConversionResult = convert<IDLDOMString>(lexicalGlobalObject, userVerificationValue);
        if (userVerificationConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.userVerification = userVerificationConversionResult.releaseReturnValue();
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
