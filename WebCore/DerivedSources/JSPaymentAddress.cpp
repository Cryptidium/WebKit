/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PAYMENT_REQUEST)

#include "JSPaymentAddress.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsPaymentAddressPrototypeFunction_toJSON);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddressConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_country);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_addressLine);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_region);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_city);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_dependentLocality);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_postalCode);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_sortingCode);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_organization);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_recipient);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentAddress_phone);

class JSPaymentAddressPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSPaymentAddressPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSPaymentAddressPrototype* ptr = new (NotNull, JSC::allocateCell<JSPaymentAddressPrototype>(vm)) JSPaymentAddressPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSPaymentAddressPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSPaymentAddressPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSPaymentAddressPrototype, JSPaymentAddressPrototype::Base);

using JSPaymentAddressDOMConstructor = JSDOMConstructorNotConstructable<JSPaymentAddress>;

template<> const ClassInfo JSPaymentAddressDOMConstructor::s_info = { "PaymentAddress"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPaymentAddressDOMConstructor) };

template<> JSValue JSPaymentAddressDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSPaymentAddressDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "PaymentAddress"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSPaymentAddress::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 12> JSPaymentAddressPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddressConstructor, 0 } },
    HashTableValue { "country"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_country, 0 } },
    HashTableValue { "addressLine"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_addressLine, 0 } },
    HashTableValue { "region"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_region, 0 } },
    HashTableValue { "city"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_city, 0 } },
    HashTableValue { "dependentLocality"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_dependentLocality, 0 } },
    HashTableValue { "postalCode"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_postalCode, 0 } },
    HashTableValue { "sortingCode"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_sortingCode, 0 } },
    HashTableValue { "organization"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_organization, 0 } },
    HashTableValue { "recipient"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_recipient, 0 } },
    HashTableValue { "phone"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentAddress_phone, 0 } },
    HashTableValue { "toJSON"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPaymentAddressPrototypeFunction_toJSON, 0 } },
};

const ClassInfo JSPaymentAddressPrototype::s_info = { "PaymentAddress"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPaymentAddressPrototype) };

void JSPaymentAddressPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSPaymentAddress::info(), JSPaymentAddressPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSPaymentAddress::s_info = { "PaymentAddress"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPaymentAddress) };

JSPaymentAddress::JSPaymentAddress(Structure* structure, JSDOMGlobalObject& globalObject, Ref<PaymentAddress>&& impl)
    : JSDOMWrapper<PaymentAddress>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, PaymentAddress>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSPaymentAddress::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSPaymentAddressPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSPaymentAddressPrototype::create(vm, &globalObject, structure);
}

JSObject* JSPaymentAddress::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSPaymentAddress>(vm, globalObject);
}

JSValue JSPaymentAddress::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPaymentAddressDOMConstructor, DOMConstructorID::PaymentAddress>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSPaymentAddress::destroy(JSC::JSCell* cell)
{
    JSPaymentAddress* thisObject = static_cast<JSPaymentAddress*>(cell);
    thisObject->JSPaymentAddress::~JSPaymentAddress();
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddressConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSPaymentAddressPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSPaymentAddress::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsPaymentAddress_countryGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.country())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_country, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_countryGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_addressLineGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLFrozenArray<IDLDOMString>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.addressLine())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_addressLine, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_addressLineGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_regionGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.region())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_region, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_regionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_cityGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.city())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_city, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_cityGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_dependentLocalityGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.dependentLocality())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_dependentLocality, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_dependentLocalityGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_postalCodeGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.postalCode())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_postalCode, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_postalCodeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_sortingCodeGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.sortingCode())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_sortingCode, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_sortingCodeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_organizationGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.organization())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_organization, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_organizationGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_recipientGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.recipient())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_recipient, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_recipientGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentAddress_phoneGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentAddress& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.phone())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentAddress_phone, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentAddress>::get<jsPaymentAddress_phoneGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline EncodedJSValue jsPaymentAddressPrototypeFunction_toJSONBody(JSGlobalObject* lexicalGlobalObject, CallFrame*, JSPaymentAddress* castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* result = constructEmptyObject(lexicalGlobalObject);
    auto countryValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.country());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "country"_s), countryValue);
    auto addressLineValue = toJS<IDLFrozenArray<IDLDOMString>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.addressLine());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "addressLine"_s), addressLineValue);
    auto regionValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.region());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "region"_s), regionValue);
    auto cityValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.city());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "city"_s), cityValue);
    auto dependentLocalityValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.dependentLocality());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "dependentLocality"_s), dependentLocalityValue);
    auto postalCodeValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.postalCode());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "postalCode"_s), postalCodeValue);
    auto sortingCodeValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.sortingCode());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "sortingCode"_s), sortingCodeValue);
    auto organizationValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.organization());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "organization"_s), organizationValue);
    auto recipientValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.recipient());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "recipient"_s), recipientValue);
    auto phoneValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.phone());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "phone"_s), phoneValue);
    return JSValue::encode(result);
}

JSC_DEFINE_HOST_FUNCTION(jsPaymentAddressPrototypeFunction_toJSON, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSPaymentAddress>::call<jsPaymentAddressPrototypeFunction_toJSONBody>(*lexicalGlobalObject, *callFrame, "toJSON");
}

JSC::GCClient::IsoSubspace* JSPaymentAddress::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSPaymentAddress, UseCustomHeapCellType::No>(vm, "JSPaymentAddress"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForPaymentAddress.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForPaymentAddress = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForPaymentAddress.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForPaymentAddress = std::forward<decltype(space)>(space); }
    );
}

void JSPaymentAddress::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSPaymentAddress*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSPaymentAddressOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSPaymentAddressOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsPaymentAddress = static_cast<JSPaymentAddress*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsPaymentAddress->protectedWrapped().ptr(), jsPaymentAddress);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7PaymentAddress@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14PaymentAddressE[]; }
#endif
template<std::same_as<PaymentAddress> T>
static inline void verifyVTable(PaymentAddress* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7PaymentAddress@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore14PaymentAddressE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // PaymentAddress has subclasses. If PaymentAddress has subclasses that get passed
        // to toJS() we currently require PaymentAddress you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<PaymentAddress>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<PaymentAddress>(impl.ptr());
#endif
    return createWrapper<PaymentAddress>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, PaymentAddress& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

PaymentAddress* JSPaymentAddress::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSPaymentAddress*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(PAYMENT_REQUEST)
