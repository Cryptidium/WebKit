/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtpSender.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "DocumentInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertVariadic.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWindowBase.h"
#include "JSDOMWrapperCache.h"
#include "JSMediaStream.h"
#include "JSMediaStreamTrack.h"
#include "JSRTCDtlsTransport.h"
#include "JSRTCRtpCapabilities.h"
#include "JSRTCRtpSendParameters.h"
#include "JSRTCStatsReport.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

#if ENABLE(WEB_RTC)
#include "JSDOMConvertUnion.h"
#include "JSRTCDTMFSender.h"
#include "JSRTCRtpSFrameTransform.h"
#include "JSRTCRtpScriptTransform.h"
#include "RTCRtpSenderWithTransform.h"
#include <wtf/Variant.h>
#endif

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpSenderConstructorFunction_getCapabilities);
static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_getParameters);
static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_setParameters);
static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_replaceTrack);
static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_setStreams);
static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_getStats);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSenderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSender_track);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSender_transport);
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSender_dtmf);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSender_transform);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCRtpSender_transform);
#endif

class JSRTCRtpSenderPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCRtpSenderPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCRtpSenderPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCRtpSenderPrototype>(vm)) JSRTCRtpSenderPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCRtpSenderPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCRtpSenderPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCRtpSenderPrototype, JSRTCRtpSenderPrototype::Base);

using JSRTCRtpSenderDOMConstructor = JSDOMConstructorNotConstructable<JSRTCRtpSender>;

/* Hash table for constructor */

static const std::array<HashTableValue, 1> JSRTCRtpSenderConstructorTableValues {
    HashTableValue { "getCapabilities"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpSenderConstructorFunction_getCapabilities, 1 } },
};

template<> const ClassInfo JSRTCRtpSenderDOMConstructor::s_info = { "RTCRtpSender"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpSenderDOMConstructor) };

template<> JSValue JSRTCRtpSenderDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSRTCRtpSenderDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RTCRtpSender"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCRtpSender::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
    reifyStaticProperties(vm, JSRTCRtpSender::info(), JSRTCRtpSenderConstructorTableValues, *this);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 10> JSRTCRtpSenderPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSenderConstructor, 0 } },
    HashTableValue { "track"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSender_track, 0 } },
    HashTableValue { "transport"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSender_transport, 0 } },
#if ENABLE(WEB_RTC)
    HashTableValue { "dtmf"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSender_dtmf, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(WEB_RTC)
    HashTableValue { "transform"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSender_transform, setJSRTCRtpSender_transform } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "getParameters"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpSenderPrototypeFunction_getParameters, 0 } },
    HashTableValue { "setParameters"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpSenderPrototypeFunction_setParameters, 1 } },
    HashTableValue { "replaceTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpSenderPrototypeFunction_replaceTrack, 1 } },
    HashTableValue { "setStreams"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpSenderPrototypeFunction_setStreams, 0 } },
    HashTableValue { "getStats"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpSenderPrototypeFunction_getStats, 0 } },
};

const ClassInfo JSRTCRtpSenderPrototype::s_info = { "RTCRtpSender"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpSenderPrototype) };

void JSRTCRtpSenderPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCRtpSender::info(), JSRTCRtpSenderPrototypeTableValues, *this);
    bool hasDisabledRuntimeProperties = false;
#if ENABLE(WEB_RTC)
    if (!downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webRTCDTMFEnabled) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "dtmf"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
#if ENABLE(WEB_RTC)
    if (!((globalObject())->inherits<JSDOMWindowBase>() && downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webRTCEncodedTransformEnabled)) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "transform"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
    if (hasDisabledRuntimeProperties && structure()->isDictionary())
        flattenDictionaryObject(vm);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCRtpSender::s_info = { "RTCRtpSender"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpSender) };

JSRTCRtpSender::JSRTCRtpSender(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCRtpSender>&& impl)
    : JSDOMWrapper<RTCRtpSender>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, RTCRtpSender>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSRTCRtpSender::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCRtpSenderPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSRTCRtpSenderPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCRtpSender::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCRtpSender>(vm, globalObject);
}

JSValue JSRTCRtpSender::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCRtpSenderDOMConstructor, DOMConstructorID::RTCRtpSender>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSRTCRtpSender::destroy(JSC::JSCell* cell)
{
    JSRTCRtpSender* thisObject = static_cast<JSRTCRtpSender*>(cell);
    thisObject->JSRTCRtpSender::~JSRTCRtpSender();
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSenderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCRtpSenderPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCRtpSender::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCRtpSender_trackGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSender& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<MediaStreamTrack>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.track())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSender_track, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSender>::get<jsRTCRtpSender_trackGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCRtpSender_transportGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSender& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<RTCDtlsTransport>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.transport())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSender_transport, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSender>::get<jsRTCRtpSender_transportGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEB_RTC)
static inline JSValue jsRTCRtpSender_dtmfGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSender& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<RTCDTMFSender>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.dtmf())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSender_dtmf, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSender>::get<jsRTCRtpSender_dtmfGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsRTCRtpSender_transformGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSender& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnion<IDLInterface<RTCRtpSFrameTransform>, IDLInterface<RTCRtpScriptTransform>>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::RTCRtpSenderWithTransform::transform(impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSender_transform, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSender>::get<jsRTCRtpSender_transformGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSRTCRtpSender_transformSetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSender& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLNullable<IDLUnion<IDLInterface<RTCRtpSFrameTransform>, IDLInterface<RTCRtpScriptTransform>>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return WebCore::RTCRtpSenderWithTransform::setTransform(impl, nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCRtpSender_transform, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSender>::set<setJSRTCRtpSender_transformSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

static inline JSC::EncodedJSValue jsRTCRtpSenderConstructorFunction_getCapabilitiesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    auto* context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto kindConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (kindConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLDictionary<RTCRtpCapabilities>>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, RTCRtpSender::getCapabilities(*context, kindConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpSenderConstructorFunction_getCapabilities, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCRtpSender>::callStatic<jsRTCRtpSenderConstructorFunction_getCapabilitiesBody>(*lexicalGlobalObject, *callFrame, "getCapabilities");
}

static inline JSC::EncodedJSValue jsRTCRtpSenderPrototypeFunction_getParametersBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCRtpSender>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDictionary<RTCRtpSendParameters>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getParameters())));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_getParameters, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCRtpSender>::call<jsRTCRtpSenderPrototypeFunction_getParametersBody>(*lexicalGlobalObject, *callFrame, "getParameters");
}

static inline JSC::EncodedJSValue jsRTCRtpSenderPrototypeFunction_setParametersBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRTCRtpSender>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto parametersConversionResult = convert<IDLDictionary<RTCRtpSendParameters>>(*lexicalGlobalObject, argument0.value());
    if (parametersConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.setParameters(parametersConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_setParameters, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRTCRtpSender>::call<jsRTCRtpSenderPrototypeFunction_setParametersBody>(*lexicalGlobalObject, *callFrame, "setParameters");
}

static inline JSC::EncodedJSValue jsRTCRtpSenderPrototypeFunction_replaceTrackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRTCRtpSender>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto withTrackConversionResult = convert<IDLNullable<IDLInterface<MediaStreamTrack>>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "withTrack"_s, "RTCRtpSender"_s, "replaceTrack"_s, "MediaStreamTrack"_s); });
    if (withTrackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.replaceTrack(withTrackConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_replaceTrack, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRTCRtpSender>::call<jsRTCRtpSenderPrototypeFunction_replaceTrackBody>(*lexicalGlobalObject, *callFrame, "replaceTrack");
}

static inline JSC::EncodedJSValue jsRTCRtpSenderPrototypeFunction_setStreamsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCRtpSender>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto streams = convertVariadicArguments<IDLInterface<MediaStream>>(*lexicalGlobalObject, *callFrame, 0);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStreams(WTFMove(streams)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_setStreams, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCRtpSender>::call<jsRTCRtpSenderPrototypeFunction_setStreamsBody>(*lexicalGlobalObject, *callFrame, "setStreams");
}

static inline JSC::EncodedJSValue jsRTCRtpSenderPrototypeFunction_getStatsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRTCRtpSender>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLInterface<RTCStatsReport>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.getStats(WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpSenderPrototypeFunction_getStats, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRTCRtpSender>::call<jsRTCRtpSenderPrototypeFunction_getStatsBody>(*lexicalGlobalObject, *callFrame, "getStats");
}

JSC::GCClient::IsoSubspace* JSRTCRtpSender::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCRtpSender, UseCustomHeapCellType::No>(vm, "JSRTCRtpSender"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCRtpSender.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCRtpSender = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCRtpSender.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCRtpSender = std::forward<decltype(space)>(space); }
    );
}

void JSRTCRtpSender::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCRtpSender*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRTCRtpSenderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSRTCRtpSenderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCRtpSender = static_cast<JSRTCRtpSender*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCRtpSender->protectedWrapped().ptr(), jsRTCRtpSender);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCRtpSender@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12RTCRtpSenderE[]; }
#endif
template<std::same_as<RTCRtpSender> T>
static inline void verifyVTable(RTCRtpSender* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7RTCRtpSender@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore12RTCRtpSenderE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // RTCRtpSender has subclasses. If RTCRtpSender has subclasses that get passed
        // to toJS() we currently require RTCRtpSender you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCRtpSender>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<RTCRtpSender>(impl.ptr());
#endif
    return createWrapper<RTCRtpSender>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCRtpSender& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCRtpSender* JSRTCRtpSender::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCRtpSender*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
