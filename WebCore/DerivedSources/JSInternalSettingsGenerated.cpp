/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSInternalSettingsGenerated.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMBinding.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAVKitContentSourceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingForFixedPositionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedDrawingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedFiltersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAccentColorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAccessHandleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAggressiveTileRetentionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowAnimationControlsOverride);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowContentSecurityPolicySourceStarToMatchAnyProtocol);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowDisplayOfInsecureContent);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowFileAccessFromFileURLs);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowMediaContentTypesRequiringHardwareSupportAsFallback);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowMultiElementImplicitSubmission);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowPrivacySensitiveOperationsInNonPersistentDataStores);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowRunningOfInsecureContent);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowTopNavigationToDataURLs);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowUniversalAccessFromFileURLs);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowViewportShrinkToFitContent);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowWebGLInWorkers);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsAirPlayForMediaPlayback);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlayback);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlaybackAfterFullscreen);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsPictureInPictureMediaPlayback);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAlternateFullScreenControlDesignEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAltitudeAngleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAlwaysAllowLocalWebarchive);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageAsyncDecodingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageDebugCanvasDrawingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAppBadgeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAppHighlightsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAppleMailPaginationQuirkEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setApplePayCapabilityDisclosureAllowed);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setApplePayEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsyncClipboardAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsyncFrameScrollingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsyncOverflowScrollingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsynchronousSpellCheckingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAttachmentWideLayoutEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAudioControlsScaleWithPageZoom);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAudioDescriptionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAuthorAndUserStylesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAutoscrollForDragAndDropEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAuxclickEventEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAzimuthAngleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackgroundFetchAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackgroundShouldExtendBeyondPage);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackgroundWebContentRunningBoardThrottlingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackspaceKeyNavigationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBeaconAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBidiContentAwarePasteEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBlobFileAccessEnforcementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBlockMediaLayerRehostingInWebContentProcess);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBroadcastChannelEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCacheAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasColorSpaceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasFiltersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasFingerprintingQuirkEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasLayersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasPixelFormatEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasUsesAcceleratedDrawing);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCaretBrowsingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCaretPositionFromPointEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setChildProcessDebuggabilityEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataExecutionContextsSupportEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataHTTPHeaderEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setClientCoordinatesRelativeToLayoutViewport);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCloseWatcherEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setColorFilterEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCommandAttributesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCompressionStreamEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContactPickerAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContentChangeObserverEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContentDispositionAttachmentSandboxEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContentInsetBackgroundFillEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContextMenuQRCodeDetectionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieConsentAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIExtendedAttributesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreManagerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCoreMathMLEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossDocumentViewTransitionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginCheckInGetMatchedCSSRulesDisabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginEmbedderPolicyEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginOpenerPolicyEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningPositionVisibilityEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAppearanceBaseEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAxisRelativePositionKeywordsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSBackgroundClipBorderAreaEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSColorLayersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSConstrainedDynamicRangeLimitEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSContrastColorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSCornerShapeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSCounterStyleAtRuleImageSymbolsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSDPropertyEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSDynamicRangeLimitMixEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSFieldSizingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSFontVariantEmojiEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSInputSecurityEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSLineClampEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSLineFitEdgeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSPaintingAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSProgressFunctionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRandomFunctionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRhythmicSizingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyAlignEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyOverhangEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollAnchoringEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarColorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarGutterEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarWidthEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSShapeFunctionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextAutospaceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextBoxTrimEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextGroupAlignEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextJustifyEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextSpacingTrimEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextUnderlinePositionLeftRightEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextWrapPrettyEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTransformStyleSeparatedEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTreeCountingFunctionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTypedOMColorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSURLIntegrityModifierEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSURLModifiersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSUnprefixedBackdropFilterEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSWordBreakAutoPhraseEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCursiveFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDataListElementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDataTransferItemsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDateTimeInputsEditableComponentsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeclarativeWebPush);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultFixedFontSize);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultFontSize);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultTextEncodingName);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultVideoPosterURL);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeprecationReportingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDetachableMediaSourceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDetailsAutoExpandEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeveloperExtrasEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceHeight);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationEventEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationPermissionAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceWidth);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDevolvableWidgetsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDiagnosticLoggingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDigitalCredentialsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDirectoryUploadEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDisabledAdaptationsMetaTagEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionFullEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAccessRequestsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAllowed);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMTestingAPIsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMTimersThrottlingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDownloadAttributeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDynamicSiteInterventionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEmbedElementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEnableElementCurrentCSSZoom);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEnableInheritURIQueryComponent);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEncryptedMediaAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEnterKeyHintEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEventHandlerDrivenSmoothKeyboardScrollingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEventTimingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeCaptureDevicesAfterCaptureEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeDefaultSpeakerAsSpecificDeviceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersWithoutMicrophoneEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExtendedAudioDescriptionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFantasyFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFileReaderAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFileSystemEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFileSystemWritableStreamEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFilterLinkDecorationByDefaultEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFixedBackgroundsPaintRelativeToDocument);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFixedElementsLayoutRelativeToFrame);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFixedFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFlexFormattingContextIntegrationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFontFallbackPrefersPictographs);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceCompositingMode);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceFTPDirectoryListings);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceLockdownFontParserEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceWebGLUsesLowPower);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFormControlRefreshEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFTPDirectoryTemplatePath);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFTPEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullScreenEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullScreenKeyboardLock);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullscreenRequirementForScreenOrientationLockingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneAspectRatioLockingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneDimmingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGamepadTriggerRumbleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGamepadVibrationActuatorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGamepadsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGenericCueAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGeolocationAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGeolocationFloorLevelEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGetCoalescedEventsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGetPredictedEventsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGetUserMediaRequiresFocus);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGoogleAntiFlickerOptimizationQuirkEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGraphicsContextFiltersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageCSSAnimationSuspensionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingAutoIncreases);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenUntilFoundEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHostedBlurMaterialInMediaControlsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHTMLLegacyAttributeValueSerializationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHttpEquivEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHttpsByDefault);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringTestingSettingsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIOSurfaceLosslessCompressionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setICECandidateFilteringEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIdempotentModeAutosizingOnlyHonorsPercentages);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIgnoreIframeEmbeddingProtectionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageAnalysisDuringFindInPageEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageAnimationControlEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageCaptureEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageControlsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageSubsamplingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImagesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInWindowFullscreenEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncludeIgnoredInCoreAXTree);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncompleteImageBorderEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncrementalPDFLoadingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncrementalRenderingSuppressionTimeoutInSeconds);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIndexedDBAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInlineMediaPlaybackRequiresPlaysInlineAttribute);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputMethodUsesCorrectKeyEventOrder);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnhancementsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateTimeLocalEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeMonthEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeTimeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeWeekEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInspectorMaximumResourcesContentSize);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInspectorSupportsShowingCertificate);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionInlinePadding);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionMinimumCornerRadius);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractiveFormValidationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInterruptAudioOnPageVisibilityChangeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInterruptVideoOnPageVisibilityChangeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInvisibleAutoplayNotPermitted);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalDisabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalReproTestingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPerActivityStateCPUUsageMeasurementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingCPUUsageMeasurementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingMemoryUsageMeasurementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadCPUUsageMeasurementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadMemoryUsageMeasurementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsSameSiteStrictEnforcementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsThirdPartyCookieBlockingDisabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setItpDebugModeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanAccessClipboard);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanOpenWindowsAutomatically);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLangAttributeAwareFormControlUIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLargeImageAsyncDecodingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLayerBasedSVGEngineEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLayoutFallbackWidth);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLayoutViewportHeightExpansionFactor);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLazyIframeLoadingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLazyImageLoadingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyEncryptedMediaAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyLineLayoutVisualCoverageEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyOverflowScrollingTouchEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyPluginQuirkForMailSignaturesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyWebRTCOfferOptionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLimitedMatroskaSupportEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinearMediaPlayerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkDNSPrefetchEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEarlyHintsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPrefetchEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPreloadEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkSanitizerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoadDeferringEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoadWebArchiveWithEphemeralStorageEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoadsImagesAutomatically);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalFileContentSniffingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalNetworkAccessEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageDatabasePath);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLockdownFontParserEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIRequiresWebAuthnEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLogsPageMessagesToSystemConsoleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMainContentUserGestureOverrideEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManageCaptureStatusBarInGPUProcessEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceHighThreshold);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceLowThreshold);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceNeedsAirPlay);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMasonryEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMathMLEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMaxParseDuration);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMaximumHTMLParserDOMTreeDepth);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMaximumSourceBufferSize);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesExtensionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilityGrantsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCaptureRequiresSecureConnection);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsContextMenusEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsScaleWithPageZoom);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaDataLoadsAutomatically);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaDevicesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaKeysStorageDirectory);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaPlaybackEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaPreferredFullscreenWidth);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaPreloadingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabledWebM);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCaptureToggleAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCoordinatorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionPlaylistEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceInWorkerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSourcePrefersDecompressionSession);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaStreamTrackProcessingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaTypeOverride);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaUserGestureInheritsFromDocument);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMetaViewportInteractiveWidgetEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMinimumFontSize);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMinimumLogicalFontSize);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMinimumZoomFontSize);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMockCaptureDevicesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMockScrollbarsControllerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setModelElementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setModelNoPortalAttributeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setModelProcessEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMomentumScrollingAnimatorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMouseEventsSimulationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMutationEventsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMuteCameraOnMicrophoneInterruptionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNavigationAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNavigatorUserAgentDataJavaScriptAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsAdobeFrameReloadingQuirk);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirk);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsFrameNameFallbackToIdQuirk);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsKeyboardEventDisambiguationQuirks);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsSiteSpecificQuirks);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsStorageAccessFromFileURLsQuirk);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNotificationEventEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNotificationsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setObservableEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasInWorkersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOpportunisticSweepingAndGarbageCollectionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOptInPartitionedCookiesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOverlappingBackingStoreProvidersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOverscrollBehaviorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPageAtRuleMarginDescriptorsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPassiveTouchListenersAsDefaultOnDocument);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPassiveWheelListenersAsDefaultOnDocument);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoDurationInSeconds);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPaymentRequestEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFJSViewerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginHUDEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginPageNumberIndicatorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionVideoScalingAdaptationDisabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPerElementSpeakerSelectionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPermissionsAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPictographFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPictureInPictureAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPictureInPicturePlaybackStateEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPointerLockEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPointerLockOptionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPopoverAttributeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreferMIMETypeForImages);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreferPageRenderingUpdatesNear60FPSEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreferSpatialAudioExperience);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreventKeyboardDOMEventDispatch);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementDebugModeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementFraudPreventionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateTokenUsageByThirdPartyEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPropagateDamagingInformation);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPunchOutWhiteBackgroundsInDarkMode);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPushAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemoteMediaSessionManagerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemotePlaybackEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemoteSnapshottingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemoveBackgroundEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequestIdleCallbackEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequestStorageAccessThrowsExceptionUntilReload);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequestVideoFrameCallbackEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequireUAGetDisplayMediaPrompt);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityForVideoToBeNowPlaying);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityToPlayAudio);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForAudioPlayback);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForVideoPlayback);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureToLoadVideo);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setResourceLoadSchedulingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setResourceUsageOverlayVisible);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRespondToThermalPressureAggressively);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRubberBandingForSubScrollableRegionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSKAttributionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMaxDifference);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMinHeight);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSansSerifFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScopedCustomElementRegistryEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenCaptureEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationLockingAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenTimeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenWakeLockAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScriptEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScriptMarkupEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScriptTrackingPrivacyLoggingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollAnimatorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollDrivenAnimationsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentFeatureDetectionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentGenerationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentIndicatorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentMarkingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollendEventEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollingCoordinatorEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollingPerformanceTestingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollingTreeIncludesFrames);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSecureContextChecksEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSelectShowPickerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSelectTrailingWhitespaceEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSelectionHonorsOverflowScrolling);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSerifFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceControlsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerInstallEventEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerNavigationPreloadEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersUserGestureEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSessionStorageQuota);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabledForAriaOwns);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShapeDetection);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSharedWorkerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldAllowUserInstalledFonts);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertInvalidURLsToBlank);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertPositionStyleOnCopy);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDecidePolicyBeforeLoadingQuickLookPreview);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseEventsWhenModifyingSelection);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseOutAfterSyntheticClick);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayCaptions);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplaySubtitles);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayTextDescriptions);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDropNearSuspendedAssertionAfterDelay);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldEnableTextAutosizingBoost);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreFontLoadCompletions);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreMetaViewport);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldInjectUserScriptsInInitialEmptyDocument);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldPrintBackgrounds);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldRespectImageOrientation);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldRestrictBaseURLSchemes);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldSuppressTextInputFromEditingDuringProvisionalNavigation);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldTakeNearSuspendedAssertions);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldUseModernAVContentKeySession);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldUseServiceWorkerShortTimeout);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowDebugBorders);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowFrameProcessBorders);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowMediaStatsContextMenuItemEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowModalDialogEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowRepaintCounter);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowTiledScrollingIndicator);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowsToolTipOverTruncatedText);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowsURLsInToolTips);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShrinksStandaloneImagesToFit);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSidewaysWritingModesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationSharedProcessEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSmartInsertDeleteEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSourceBufferChangeTypeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpatialImageControlsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpatialNavigationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpeakerSelectionRequiresUserGesture);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpeechRecognitionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpeechSynthesisAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpringTimingFunctionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStandalone);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStandardFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEstimateEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStorageAccessAPIPerPageScopeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRCompositorTonemappingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRDisplayEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSuppressHDRShouldBeAllowedInFullscreenVideo);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSuppressesIncrementalRendering);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSwitchControlEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSystemPreviewEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTargetTextPseudoElementEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTelephoneNumberParsingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTemporaryTileCohortRetentionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAnimationsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAreasAreResizable);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabledAtLargeInitialScale);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingUsesIdempotentMode);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideHeight);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideWidth);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextInteractionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextRecognitionInVideosEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextTracksInMSEEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setThreadedAnimationResolutionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setThumbAndTrackPseudoElementsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTopContentInsetBackgroundCanChangeAfterScrolling);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTouchEventDOMAttributesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTouchEventEmulationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTouchInputCompatibilityEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTrackConfigurationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTreatIPAddressAsDomain);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTreatsAnyTextCSSLinkAsStylesheet);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTrustedTypesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUAVisualTransitionDetectionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUndoManagerAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnhandledPromiseRejectionToConsoleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnifiedPDFEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnifiedTextCheckerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnifyDamagedRegions);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUpgradeMixedContentEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setURLPatternAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseAnonymousModeWhenFetchingMaskImages);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseAsyncUIKitInteractions);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseDamagingInformationForCompositing);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseGPUProcessForWebGLEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseGiantTiles);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseIFCForSVGText);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseImageDocumentForSubframePDF);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseMicrophoneMuteStatusAPI);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUsePreHTML5ParserQuirks);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseSystemAppearance);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUserActivationAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUserGesturePromisePropagationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUsesEncodingDetector);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setValidationMessageTimerMagnification);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVerifyWindowOpenUserGestureFromUIProcess);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVerticalFormControlsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoFullsceenPrefersMostVisibleHeuristic);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoFullscreenRequiresElementFullscreen);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationManagerEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationModeAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoQualityIncludesDisplayCompositingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererProtectedFallbackDisabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererUseDecompressionSessionForProtected);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionClassesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionTypesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisibleDebugOverlayRegions);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisualTranslationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisuallyContiguousBidiTextSelectionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVP9DecoderEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWantsBalancedSetDefersLoadingBehavior);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAPIStatisticsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAPIsInShadowRealmEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomEffectsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomFrameRateEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsOverallProgressPropertyEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveDebugModeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveTestingModeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAssemblyESMIntegrationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAudioEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationASEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAV1Enabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAudioEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsHEVCEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsVideoEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoSafeCurvesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoX25519Enabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionBookmarksEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionSidebarEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLDraftExtensionsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLErrorsToConsoleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLTimerQueriesEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGPUEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGPUHDREnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebInspectorEngineeringSettingsAllowed);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebLocksAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebPageSpatialBackdropEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCAV1CodecEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCDTMFEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncodedTransformEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncryptionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCH265CodecEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCInterfaceMonitoringViaNWEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCL4SEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCMediaPipelineAdditionalLoggingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCPlatformCodecsInGPUProcessEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCRemoteVideoFrameEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSFrameTransformEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSocketsProxyingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCUDPPortRange);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile0CodecEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile2CodecEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebSecurityEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebShareEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebShareFileAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebSocketEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebTransportEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRAugmentedRealityModuleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXREnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRGamepadsModuleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRHandInputModuleEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRLayersAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRWebGPUBindingsEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebkitImageReadyEventEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWheelEventGesturesBecomeNonBlocking);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWindowFocusRestricted);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWirelessPlaybackTargetAPIEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWorkerAsynchronousURLErrorHandlingEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWriteRichTextDataWhenCopyingOrDragging);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWritingSuggestionsAttributeEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setXsltEnabled);

class JSInternalSettingsGeneratedPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSInternalSettingsGeneratedPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSInternalSettingsGeneratedPrototype* ptr = new (NotNull, JSC::allocateCell<JSInternalSettingsGeneratedPrototype>(vm)) JSInternalSettingsGeneratedPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSInternalSettingsGeneratedPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSInternalSettingsGeneratedPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSInternalSettingsGeneratedPrototype, JSInternalSettingsGeneratedPrototype::Base);

/* Hash table for prototype */

static const std::array<HashTableValue, 626> JSInternalSettingsGeneratedPrototypeTableValues {
    HashTableValue { "setAVKitContentSourceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAVKitContentSourceEnabled, 1 } },
    HashTableValue { "setAcceleratedCompositingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingEnabled, 1 } },
    HashTableValue { "setAcceleratedCompositingForFixedPositionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingForFixedPositionEnabled, 1 } },
    HashTableValue { "setAcceleratedDrawingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedDrawingEnabled, 1 } },
    HashTableValue { "setAcceleratedFiltersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedFiltersEnabled, 1 } },
    HashTableValue { "setAccentColorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAccentColorEnabled, 1 } },
    HashTableValue { "setAccessHandleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAccessHandleEnabled, 1 } },
    HashTableValue { "setAggressiveTileRetentionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAggressiveTileRetentionEnabled, 1 } },
    HashTableValue { "setAllowAnimationControlsOverride"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowAnimationControlsOverride, 1 } },
    HashTableValue { "setAllowContentSecurityPolicySourceStarToMatchAnyProtocol"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowContentSecurityPolicySourceStarToMatchAnyProtocol, 1 } },
    HashTableValue { "setAllowDisplayOfInsecureContent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowDisplayOfInsecureContent, 1 } },
    HashTableValue { "setAllowFileAccessFromFileURLs"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowFileAccessFromFileURLs, 1 } },
    HashTableValue { "setAllowMediaContentTypesRequiringHardwareSupportAsFallback"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowMediaContentTypesRequiringHardwareSupportAsFallback, 1 } },
    HashTableValue { "setAllowMultiElementImplicitSubmission"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowMultiElementImplicitSubmission, 1 } },
    HashTableValue { "setAllowPrivacySensitiveOperationsInNonPersistentDataStores"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowPrivacySensitiveOperationsInNonPersistentDataStores, 1 } },
    HashTableValue { "setAllowRunningOfInsecureContent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowRunningOfInsecureContent, 1 } },
    HashTableValue { "setAllowTopNavigationToDataURLs"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowTopNavigationToDataURLs, 1 } },
    HashTableValue { "setAllowUniversalAccessFromFileURLs"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowUniversalAccessFromFileURLs, 1 } },
    HashTableValue { "setAllowViewportShrinkToFitContent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowViewportShrinkToFitContent, 1 } },
    HashTableValue { "setAllowWebGLInWorkers"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowWebGLInWorkers, 1 } },
    HashTableValue { "setAllowsAirPlayForMediaPlayback"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowsAirPlayForMediaPlayback, 1 } },
    HashTableValue { "setAllowsInlineMediaPlayback"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlayback, 1 } },
    HashTableValue { "setAllowsInlineMediaPlaybackAfterFullscreen"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlaybackAfterFullscreen, 1 } },
    HashTableValue { "setAllowsPictureInPictureMediaPlayback"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAllowsPictureInPictureMediaPlayback, 1 } },
    HashTableValue { "setAlternateFullScreenControlDesignEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAlternateFullScreenControlDesignEnabled, 1 } },
    HashTableValue { "setAltitudeAngleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAltitudeAngleEnabled, 1 } },
    HashTableValue { "setAlwaysAllowLocalWebarchive"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAlwaysAllowLocalWebarchive, 1 } },
    HashTableValue { "setAnimatedImageAsyncDecodingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageAsyncDecodingEnabled, 1 } },
    HashTableValue { "setAnimatedImageDebugCanvasDrawingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageDebugCanvasDrawingEnabled, 1 } },
    HashTableValue { "setAppBadgeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAppBadgeEnabled, 1 } },
    HashTableValue { "setAppHighlightsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAppHighlightsEnabled, 1 } },
    HashTableValue { "setAppleMailPaginationQuirkEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAppleMailPaginationQuirkEnabled, 1 } },
    HashTableValue { "setApplePayCapabilityDisclosureAllowed"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setApplePayCapabilityDisclosureAllowed, 1 } },
    HashTableValue { "setApplePayEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setApplePayEnabled, 1 } },
    HashTableValue { "setAsyncClipboardAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAsyncClipboardAPIEnabled, 1 } },
    HashTableValue { "setAsyncFrameScrollingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAsyncFrameScrollingEnabled, 1 } },
    HashTableValue { "setAsyncOverflowScrollingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAsyncOverflowScrollingEnabled, 1 } },
    HashTableValue { "setAsynchronousSpellCheckingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAsynchronousSpellCheckingEnabled, 1 } },
    HashTableValue { "setAttachmentWideLayoutEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAttachmentWideLayoutEnabled, 1 } },
    HashTableValue { "setAudioControlsScaleWithPageZoom"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAudioControlsScaleWithPageZoom, 1 } },
    HashTableValue { "setAudioDescriptionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAudioDescriptionsEnabled, 1 } },
    HashTableValue { "setAuthorAndUserStylesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAuthorAndUserStylesEnabled, 1 } },
    HashTableValue { "setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth, 1 } },
    HashTableValue { "setAutoscrollForDragAndDropEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAutoscrollForDragAndDropEnabled, 1 } },
    HashTableValue { "setAuxclickEventEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAuxclickEventEnabled, 1 } },
    HashTableValue { "setAzimuthAngleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setAzimuthAngleEnabled, 1 } },
    HashTableValue { "setBackgroundFetchAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBackgroundFetchAPIEnabled, 1 } },
    HashTableValue { "setBackgroundShouldExtendBeyondPage"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBackgroundShouldExtendBeyondPage, 1 } },
    HashTableValue { "setBackgroundWebContentRunningBoardThrottlingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBackgroundWebContentRunningBoardThrottlingEnabled, 1 } },
    HashTableValue { "setBackspaceKeyNavigationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBackspaceKeyNavigationEnabled, 1 } },
    HashTableValue { "setBeaconAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBeaconAPIEnabled, 1 } },
    HashTableValue { "setBidiContentAwarePasteEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBidiContentAwarePasteEnabled, 1 } },
    HashTableValue { "setBlobFileAccessEnforcementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBlobFileAccessEnforcementEnabled, 1 } },
    HashTableValue { "setBlockMediaLayerRehostingInWebContentProcess"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBlockMediaLayerRehostingInWebContentProcess, 1 } },
    HashTableValue { "setBroadcastChannelEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setBroadcastChannelEnabled, 1 } },
    HashTableValue { "setCacheAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCacheAPIEnabled, 1 } },
    HashTableValue { "setCanvasColorSpaceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCanvasColorSpaceEnabled, 1 } },
    HashTableValue { "setCanvasFiltersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCanvasFiltersEnabled, 1 } },
    HashTableValue { "setCanvasFingerprintingQuirkEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCanvasFingerprintingQuirkEnabled, 1 } },
    HashTableValue { "setCanvasLayersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCanvasLayersEnabled, 1 } },
    HashTableValue { "setCanvasPixelFormatEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCanvasPixelFormatEnabled, 1 } },
    HashTableValue { "setCanvasUsesAcceleratedDrawing"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCanvasUsesAcceleratedDrawing, 1 } },
    HashTableValue { "setCaretBrowsingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCaretBrowsingEnabled, 1 } },
    HashTableValue { "setCaretPositionFromPointEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCaretPositionFromPointEnabled, 1 } },
    HashTableValue { "setChildProcessDebuggabilityEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setChildProcessDebuggabilityEnabled, 1 } },
    HashTableValue { "setClearSiteDataExecutionContextsSupportEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataExecutionContextsSupportEnabled, 1 } },
    HashTableValue { "setClearSiteDataHTTPHeaderEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataHTTPHeaderEnabled, 1 } },
    HashTableValue { "setClientCoordinatesRelativeToLayoutViewport"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setClientCoordinatesRelativeToLayoutViewport, 1 } },
    HashTableValue { "setCloseWatcherEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCloseWatcherEnabled, 1 } },
    HashTableValue { "setColorFilterEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setColorFilterEnabled, 1 } },
    HashTableValue { "setCommandAttributesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCommandAttributesEnabled, 1 } },
    HashTableValue { "setCompressionStreamEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCompressionStreamEnabled, 1 } },
    HashTableValue { "setContactPickerAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setContactPickerAPIEnabled, 1 } },
    HashTableValue { "setContentChangeObserverEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setContentChangeObserverEnabled, 1 } },
    HashTableValue { "setContentDispositionAttachmentSandboxEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setContentDispositionAttachmentSandboxEnabled, 1 } },
    HashTableValue { "setContentInsetBackgroundFillEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setContentInsetBackgroundFillEnabled, 1 } },
    HashTableValue { "setContextMenuQRCodeDetectionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setContextMenuQRCodeDetectionEnabled, 1 } },
    HashTableValue { "setCookieConsentAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCookieConsentAPIEnabled, 1 } },
    HashTableValue { "setCookieEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCookieEnabled, 1 } },
    HashTableValue { "setCookieStoreAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIEnabled, 1 } },
    HashTableValue { "setCookieStoreAPIExtendedAttributesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIExtendedAttributesEnabled, 1 } },
    HashTableValue { "setCookieStoreManagerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreManagerEnabled, 1 } },
    HashTableValue { "setCoreMathMLEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCoreMathMLEnabled, 1 } },
    HashTableValue { "setCrossDocumentViewTransitionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCrossDocumentViewTransitionsEnabled, 1 } },
    HashTableValue { "setCrossOriginCheckInGetMatchedCSSRulesDisabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginCheckInGetMatchedCSSRulesDisabled, 1 } },
    HashTableValue { "setCrossOriginEmbedderPolicyEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginEmbedderPolicyEnabled, 1 } },
    HashTableValue { "setCrossOriginOpenerPolicyEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginOpenerPolicyEnabled, 1 } },
    HashTableValue { "setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled, 1 } },
    HashTableValue { "setCSSAnchorPositioningEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningEnabled, 1 } },
    HashTableValue { "setCSSAnchorPositioningPositionVisibilityEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningPositionVisibilityEnabled, 1 } },
    HashTableValue { "setCSSAppearanceBaseEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSAppearanceBaseEnabled, 1 } },
    HashTableValue { "setCSSAxisRelativePositionKeywordsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSAxisRelativePositionKeywordsEnabled, 1 } },
    HashTableValue { "setCSSBackgroundClipBorderAreaEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSBackgroundClipBorderAreaEnabled, 1 } },
    HashTableValue { "setCSSColorLayersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSColorLayersEnabled, 1 } },
    HashTableValue { "setCSSConstrainedDynamicRangeLimitEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSConstrainedDynamicRangeLimitEnabled, 1 } },
    HashTableValue { "setCSSContrastColorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSContrastColorEnabled, 1 } },
    HashTableValue { "setCSSCornerShapeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSCornerShapeEnabled, 1 } },
    HashTableValue { "setCSSCounterStyleAtRuleImageSymbolsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSCounterStyleAtRuleImageSymbolsEnabled, 1 } },
    HashTableValue { "setCSSDPropertyEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSDPropertyEnabled, 1 } },
    HashTableValue { "setCSSDynamicRangeLimitMixEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSDynamicRangeLimitMixEnabled, 1 } },
    HashTableValue { "setCSSFieldSizingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSFieldSizingEnabled, 1 } },
    HashTableValue { "setCSSFontVariantEmojiEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSFontVariantEmojiEnabled, 1 } },
    HashTableValue { "setCSSInputSecurityEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSInputSecurityEnabled, 1 } },
    HashTableValue { "setCSSLineClampEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSLineClampEnabled, 1 } },
    HashTableValue { "setCSSLineFitEdgeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSLineFitEdgeEnabled, 1 } },
    HashTableValue { "setCSSPaintingAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSPaintingAPIEnabled, 1 } },
    HashTableValue { "setCSSProgressFunctionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSProgressFunctionEnabled, 1 } },
    HashTableValue { "setCSSRandomFunctionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSRandomFunctionEnabled, 1 } },
    HashTableValue { "setCSSRhythmicSizingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSRhythmicSizingEnabled, 1 } },
    HashTableValue { "setCSSRubyAlignEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyAlignEnabled, 1 } },
    HashTableValue { "setCSSRubyOverhangEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyOverhangEnabled, 1 } },
    HashTableValue { "setCSSScrollAnchoringEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollAnchoringEnabled, 1 } },
    HashTableValue { "setCSSScrollbarColorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarColorEnabled, 1 } },
    HashTableValue { "setCSSScrollbarGutterEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarGutterEnabled, 1 } },
    HashTableValue { "setCSSScrollbarWidthEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarWidthEnabled, 1 } },
    HashTableValue { "setCSSShapeFunctionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSShapeFunctionEnabled, 1 } },
    HashTableValue { "setCSSTextAutospaceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTextAutospaceEnabled, 1 } },
    HashTableValue { "setCSSTextBoxTrimEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTextBoxTrimEnabled, 1 } },
    HashTableValue { "setCSSTextGroupAlignEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTextGroupAlignEnabled, 1 } },
    HashTableValue { "setCSSTextJustifyEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTextJustifyEnabled, 1 } },
    HashTableValue { "setCSSTextSpacingTrimEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTextSpacingTrimEnabled, 1 } },
    HashTableValue { "setCSSTextUnderlinePositionLeftRightEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTextUnderlinePositionLeftRightEnabled, 1 } },
    HashTableValue { "setCSSTextWrapPrettyEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTextWrapPrettyEnabled, 1 } },
    HashTableValue { "setCSSTransformStyleSeparatedEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTransformStyleSeparatedEnabled, 1 } },
    HashTableValue { "setCSSTreeCountingFunctionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTreeCountingFunctionsEnabled, 1 } },
    HashTableValue { "setCSSTypedOMColorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSTypedOMColorEnabled, 1 } },
    HashTableValue { "setCSSURLIntegrityModifierEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSURLIntegrityModifierEnabled, 1 } },
    HashTableValue { "setCSSURLModifiersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSURLModifiersEnabled, 1 } },
    HashTableValue { "setCSSUnprefixedBackdropFilterEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSUnprefixedBackdropFilterEnabled, 1 } },
    HashTableValue { "setCSSWordBreakAutoPhraseEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCSSWordBreakAutoPhraseEnabled, 1 } },
    HashTableValue { "setCursiveFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setCursiveFontFamily, 1 } },
    HashTableValue { "setDataListElementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDataListElementEnabled, 1 } },
    HashTableValue { "setDataTransferItemsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDataTransferItemsEnabled, 1 } },
    HashTableValue { "setDateTimeInputsEditableComponentsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDateTimeInputsEditableComponentsEnabled, 1 } },
    HashTableValue { "setDeclarativeWebPush"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDeclarativeWebPush, 1 } },
    HashTableValue { "setDefaultFixedFontSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDefaultFixedFontSize, 1 } },
    HashTableValue { "setDefaultFontSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDefaultFontSize, 1 } },
    HashTableValue { "setDefaultTextEncodingName"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDefaultTextEncodingName, 1 } },
    HashTableValue { "setDefaultVideoPosterURL"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDefaultVideoPosterURL, 1 } },
    HashTableValue { "setDeprecationReportingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDeprecationReportingEnabled, 1 } },
    HashTableValue { "setDetachableMediaSourceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDetachableMediaSourceEnabled, 1 } },
    HashTableValue { "setDetailsAutoExpandEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDetailsAutoExpandEnabled, 1 } },
    HashTableValue { "setDeveloperExtrasEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDeveloperExtrasEnabled, 1 } },
    HashTableValue { "setDeviceHeight"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDeviceHeight, 1 } },
    HashTableValue { "setDeviceOrientationEventEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationEventEnabled, 1 } },
    HashTableValue { "setDeviceOrientationPermissionAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationPermissionAPIEnabled, 1 } },
    HashTableValue { "setDeviceWidth"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDeviceWidth, 1 } },
    HashTableValue { "setDevolvableWidgetsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDevolvableWidgetsEnabled, 1 } },
    HashTableValue { "setDiagnosticLoggingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDiagnosticLoggingEnabled, 1 } },
    HashTableValue { "setDigitalCredentialsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDigitalCredentialsEnabled, 1 } },
    HashTableValue { "setDirectoryUploadEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDirectoryUploadEnabled, 1 } },
    HashTableValue { "setDisabledAdaptationsMetaTagEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDisabledAdaptationsMetaTagEnabled, 1 } },
    HashTableValue { "setDOMAudioSessionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionEnabled, 1 } },
    HashTableValue { "setDOMAudioSessionFullEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionFullEnabled, 1 } },
    HashTableValue { "setDOMPasteAccessRequestsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAccessRequestsEnabled, 1 } },
    HashTableValue { "setDOMPasteAllowed"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAllowed, 1 } },
    HashTableValue { "setDOMTestingAPIsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDOMTestingAPIsEnabled, 1 } },
    HashTableValue { "setDOMTimersThrottlingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDOMTimersThrottlingEnabled, 1 } },
    HashTableValue { "setDownloadAttributeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDownloadAttributeEnabled, 1 } },
    HashTableValue { "setDynamicSiteInterventionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setDynamicSiteInterventionsEnabled, 1 } },
    HashTableValue { "setEmbedElementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setEmbedElementEnabled, 1 } },
    HashTableValue { "setEnableElementCurrentCSSZoom"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setEnableElementCurrentCSSZoom, 1 } },
    HashTableValue { "setEnableInheritURIQueryComponent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setEnableInheritURIQueryComponent, 1 } },
    HashTableValue { "setEncryptedMediaAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setEncryptedMediaAPIEnabled, 1 } },
    HashTableValue { "setEnterKeyHintEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setEnterKeyHintEnabled, 1 } },
    HashTableValue { "setEventHandlerDrivenSmoothKeyboardScrollingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setEventHandlerDrivenSmoothKeyboardScrollingEnabled, 1 } },
    HashTableValue { "setEventTimingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setEventTimingEnabled, 1 } },
    HashTableValue { "setExposeCaptureDevicesAfterCaptureEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setExposeCaptureDevicesAfterCaptureEnabled, 1 } },
    HashTableValue { "setExposeDefaultSpeakerAsSpecificDeviceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setExposeDefaultSpeakerAsSpecificDeviceEnabled, 1 } },
    HashTableValue { "setExposeSpeakersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersEnabled, 1 } },
    HashTableValue { "setExposeSpeakersWithoutMicrophoneEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersWithoutMicrophoneEnabled, 1 } },
    HashTableValue { "setExtendedAudioDescriptionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setExtendedAudioDescriptionsEnabled, 1 } },
    HashTableValue { "setFantasyFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFantasyFontFamily, 1 } },
    HashTableValue { "setFileReaderAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFileReaderAPIEnabled, 1 } },
    HashTableValue { "setFileSystemEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFileSystemEnabled, 1 } },
    HashTableValue { "setFileSystemWritableStreamEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFileSystemWritableStreamEnabled, 1 } },
    HashTableValue { "setFilterLinkDecorationByDefaultEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFilterLinkDecorationByDefaultEnabled, 1 } },
    HashTableValue { "setFixedBackgroundsPaintRelativeToDocument"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFixedBackgroundsPaintRelativeToDocument, 1 } },
    HashTableValue { "setFixedElementsLayoutRelativeToFrame"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFixedElementsLayoutRelativeToFrame, 1 } },
    HashTableValue { "setFixedFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFixedFontFamily, 1 } },
    HashTableValue { "setFlexFormattingContextIntegrationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFlexFormattingContextIntegrationEnabled, 1 } },
    HashTableValue { "setFontFallbackPrefersPictographs"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFontFallbackPrefersPictographs, 1 } },
    HashTableValue { "setForceCompositingMode"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setForceCompositingMode, 1 } },
    HashTableValue { "setForceFTPDirectoryListings"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setForceFTPDirectoryListings, 1 } },
    HashTableValue { "setForceLockdownFontParserEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setForceLockdownFontParserEnabled, 1 } },
    HashTableValue { "setForceWebGLUsesLowPower"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setForceWebGLUsesLowPower, 1 } },
    HashTableValue { "setFormControlRefreshEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFormControlRefreshEnabled, 1 } },
    HashTableValue { "setFTPDirectoryTemplatePath"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFTPDirectoryTemplatePath, 1 } },
    HashTableValue { "setFTPEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFTPEnabled, 1 } },
    HashTableValue { "setFullScreenEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFullScreenEnabled, 1 } },
    HashTableValue { "setFullScreenKeyboardLock"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFullScreenKeyboardLock, 1 } },
    HashTableValue { "setFullscreenRequirementForScreenOrientationLockingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFullscreenRequirementForScreenOrientationLockingEnabled, 1 } },
    HashTableValue { "setFullscreenSceneAspectRatioLockingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneAspectRatioLockingEnabled, 1 } },
    HashTableValue { "setFullscreenSceneDimmingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneDimmingEnabled, 1 } },
    HashTableValue { "setGamepadTriggerRumbleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGamepadTriggerRumbleEnabled, 1 } },
    HashTableValue { "setGamepadVibrationActuatorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGamepadVibrationActuatorEnabled, 1 } },
    HashTableValue { "setGamepadsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGamepadsEnabled, 1 } },
    HashTableValue { "setGenericCueAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGenericCueAPIEnabled, 1 } },
    HashTableValue { "setGeolocationAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGeolocationAPIEnabled, 1 } },
    HashTableValue { "setGeolocationFloorLevelEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGeolocationFloorLevelEnabled, 1 } },
    HashTableValue { "setGetCoalescedEventsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGetCoalescedEventsEnabled, 1 } },
    HashTableValue { "setGetPredictedEventsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGetPredictedEventsEnabled, 1 } },
    HashTableValue { "setGetUserMediaRequiresFocus"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGetUserMediaRequiresFocus, 1 } },
    HashTableValue { "setGoogleAntiFlickerOptimizationQuirkEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGoogleAntiFlickerOptimizationQuirkEnabled, 1 } },
    HashTableValue { "setGraphicsContextFiltersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setGraphicsContextFiltersEnabled, 1 } },
    HashTableValue { "setHiddenPageCSSAnimationSuspensionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageCSSAnimationSuspensionEnabled, 1 } },
    HashTableValue { "setHiddenPageDOMTimerThrottlingAutoIncreases"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingAutoIncreases, 1 } },
    HashTableValue { "setHiddenPageDOMTimerThrottlingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingEnabled, 1 } },
    HashTableValue { "setHiddenUntilFoundEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHiddenUntilFoundEnabled, 1 } },
    HashTableValue { "setHostedBlurMaterialInMediaControlsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHostedBlurMaterialInMediaControlsEnabled, 1 } },
    HashTableValue { "setHTMLLegacyAttributeValueSerializationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHTMLLegacyAttributeValueSerializationEnabled, 1 } },
    HashTableValue { "setHttpEquivEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHttpEquivEnabled, 1 } },
    HashTableValue { "setHttpsByDefault"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setHttpsByDefault, 1 } },
    HashTableValue { "setIFrameResourceMonitoringEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringEnabled, 1 } },
    HashTableValue { "setIFrameResourceMonitoringTestingSettingsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringTestingSettingsEnabled, 1 } },
    HashTableValue { "setIOSurfaceLosslessCompressionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIOSurfaceLosslessCompressionEnabled, 1 } },
    HashTableValue { "setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled, 1 } },
    HashTableValue { "setICECandidateFilteringEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setICECandidateFilteringEnabled, 1 } },
    HashTableValue { "setIdempotentModeAutosizingOnlyHonorsPercentages"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIdempotentModeAutosizingOnlyHonorsPercentages, 1 } },
    HashTableValue { "setIgnoreIframeEmbeddingProtectionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIgnoreIframeEmbeddingProtectionsEnabled, 1 } },
    HashTableValue { "setImageAnalysisDuringFindInPageEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setImageAnalysisDuringFindInPageEnabled, 1 } },
    HashTableValue { "setImageAnimationControlEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setImageAnimationControlEnabled, 1 } },
    HashTableValue { "setImageCaptureEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setImageCaptureEnabled, 1 } },
    HashTableValue { "setImageControlsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setImageControlsEnabled, 1 } },
    HashTableValue { "setImageSubsamplingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setImageSubsamplingEnabled, 1 } },
    HashTableValue { "setImagesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setImagesEnabled, 1 } },
    HashTableValue { "setInWindowFullscreenEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInWindowFullscreenEnabled, 1 } },
    HashTableValue { "setIncludeIgnoredInCoreAXTree"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIncludeIgnoredInCoreAXTree, 1 } },
    HashTableValue { "setIncompleteImageBorderEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIncompleteImageBorderEnabled, 1 } },
    HashTableValue { "setIncrementalPDFLoadingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIncrementalPDFLoadingEnabled, 1 } },
    HashTableValue { "setIncrementalRenderingSuppressionTimeoutInSeconds"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIncrementalRenderingSuppressionTimeoutInSeconds, 1 } },
    HashTableValue { "setIndexedDBAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIndexedDBAPIEnabled, 1 } },
    HashTableValue { "setInlineMediaPlaybackRequiresPlaysInlineAttribute"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInlineMediaPlaybackRequiresPlaysInlineAttribute, 1 } },
    HashTableValue { "setInputMethodUsesCorrectKeyEventOrder"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputMethodUsesCorrectKeyEventOrder, 1 } },
    HashTableValue { "setInputTypeColorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnabled, 1 } },
    HashTableValue { "setInputTypeColorEnhancementsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnhancementsEnabled, 1 } },
    HashTableValue { "setInputTypeDateEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateEnabled, 1 } },
    HashTableValue { "setInputTypeDateTimeLocalEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateTimeLocalEnabled, 1 } },
    HashTableValue { "setInputTypeMonthEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputTypeMonthEnabled, 1 } },
    HashTableValue { "setInputTypeTimeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputTypeTimeEnabled, 1 } },
    HashTableValue { "setInputTypeWeekEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInputTypeWeekEnabled, 1 } },
    HashTableValue { "setInspectorMaximumResourcesContentSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInspectorMaximumResourcesContentSize, 1 } },
    HashTableValue { "setInspectorSupportsShowingCertificate"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInspectorSupportsShowingCertificate, 1 } },
    HashTableValue { "setInteractionRegionInlinePadding"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionInlinePadding, 1 } },
    HashTableValue { "setInteractionRegionMinimumCornerRadius"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionMinimumCornerRadius, 1 } },
    HashTableValue { "setInteractionRegionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionsEnabled, 1 } },
    HashTableValue { "setInteractiveFormValidationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInteractiveFormValidationEnabled, 1 } },
    HashTableValue { "setInterruptAudioOnPageVisibilityChangeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInterruptAudioOnPageVisibilityChangeEnabled, 1 } },
    HashTableValue { "setInterruptVideoOnPageVisibilityChangeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInterruptVideoOnPageVisibilityChangeEnabled, 1 } },
    HashTableValue { "setInvisibleAutoplayNotPermitted"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setInvisibleAutoplayNotPermitted, 1 } },
    HashTableValue { "setIsFirstPartyWebsiteDataRemovalDisabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalDisabled, 1 } },
    HashTableValue { "setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled, 1 } },
    HashTableValue { "setIsFirstPartyWebsiteDataRemovalReproTestingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalReproTestingEnabled, 1 } },
    HashTableValue { "setIsPerActivityStateCPUUsageMeasurementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsPerActivityStateCPUUsageMeasurementEnabled, 1 } },
    HashTableValue { "setIsPostBackgroundingCPUUsageMeasurementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingCPUUsageMeasurementEnabled, 1 } },
    HashTableValue { "setIsPostBackgroundingMemoryUsageMeasurementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingMemoryUsageMeasurementEnabled, 1 } },
    HashTableValue { "setIsPostLoadCPUUsageMeasurementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadCPUUsageMeasurementEnabled, 1 } },
    HashTableValue { "setIsPostLoadMemoryUsageMeasurementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadMemoryUsageMeasurementEnabled, 1 } },
    HashTableValue { "setIsSameSiteStrictEnforcementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsSameSiteStrictEnforcementEnabled, 1 } },
    HashTableValue { "setIsThirdPartyCookieBlockingDisabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setIsThirdPartyCookieBlockingDisabled, 1 } },
    HashTableValue { "setItpDebugModeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setItpDebugModeEnabled, 1 } },
    HashTableValue { "setJavaScriptCanAccessClipboard"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanAccessClipboard, 1 } },
    HashTableValue { "setJavaScriptCanOpenWindowsAutomatically"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanOpenWindowsAutomatically, 1 } },
    HashTableValue { "setLangAttributeAwareFormControlUIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLangAttributeAwareFormControlUIEnabled, 1 } },
    HashTableValue { "setLargeImageAsyncDecodingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLargeImageAsyncDecodingEnabled, 1 } },
    HashTableValue { "setLayerBasedSVGEngineEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLayerBasedSVGEngineEnabled, 1 } },
    HashTableValue { "setLayoutFallbackWidth"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLayoutFallbackWidth, 1 } },
    HashTableValue { "setLayoutViewportHeightExpansionFactor"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLayoutViewportHeightExpansionFactor, 1 } },
    HashTableValue { "setLazyIframeLoadingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLazyIframeLoadingEnabled, 1 } },
    HashTableValue { "setLazyImageLoadingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLazyImageLoadingEnabled, 1 } },
    HashTableValue { "setLegacyEncryptedMediaAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLegacyEncryptedMediaAPIEnabled, 1 } },
    HashTableValue { "setLegacyLineLayoutVisualCoverageEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLegacyLineLayoutVisualCoverageEnabled, 1 } },
    HashTableValue { "setLegacyOverflowScrollingTouchEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLegacyOverflowScrollingTouchEnabled, 1 } },
    HashTableValue { "setLegacyPluginQuirkForMailSignaturesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLegacyPluginQuirkForMailSignaturesEnabled, 1 } },
    HashTableValue { "setLegacyWebRTCOfferOptionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLegacyWebRTCOfferOptionsEnabled, 1 } },
    HashTableValue { "setLimitedMatroskaSupportEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLimitedMatroskaSupportEnabled, 1 } },
    HashTableValue { "setLinearMediaPlayerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLinearMediaPlayerEnabled, 1 } },
    HashTableValue { "setLinkDNSPrefetchEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLinkDNSPrefetchEnabled, 1 } },
    HashTableValue { "setLinkPreconnectEarlyHintsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEarlyHintsEnabled, 1 } },
    HashTableValue { "setLinkPreconnectEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEnabled, 1 } },
    HashTableValue { "setLinkPrefetchEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLinkPrefetchEnabled, 1 } },
    HashTableValue { "setLinkPreloadEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLinkPreloadEnabled, 1 } },
    HashTableValue { "setLinkSanitizerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLinkSanitizerEnabled, 1 } },
    HashTableValue { "setLoadDeferringEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLoadDeferringEnabled, 1 } },
    HashTableValue { "setLoadWebArchiveWithEphemeralStorageEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLoadWebArchiveWithEphemeralStorageEnabled, 1 } },
    HashTableValue { "setLoadsImagesAutomatically"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLoadsImagesAutomatically, 1 } },
    HashTableValue { "setLocalFileContentSniffingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLocalFileContentSniffingEnabled, 1 } },
    HashTableValue { "setLocalNetworkAccessEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLocalNetworkAccessEnabled, 1 } },
    HashTableValue { "setLocalStorageDatabasePath"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageDatabasePath, 1 } },
    HashTableValue { "setLocalStorageEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageEnabled, 1 } },
    HashTableValue { "setLockdownFontParserEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLockdownFontParserEnabled, 1 } },
    HashTableValue { "setLoginStatusAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIEnabled, 1 } },
    HashTableValue { "setLoginStatusAPIRequiresWebAuthnEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIRequiresWebAuthnEnabled, 1 } },
    HashTableValue { "setLogsPageMessagesToSystemConsoleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setLogsPageMessagesToSystemConsoleEnabled, 1 } },
    HashTableValue { "setMainContentUserGestureOverrideEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMainContentUserGestureOverrideEnabled, 1 } },
    HashTableValue { "setManageCaptureStatusBarInGPUProcessEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setManageCaptureStatusBarInGPUProcessEnabled, 1 } },
    HashTableValue { "setManagedMediaSourceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceEnabled, 1 } },
    HashTableValue { "setManagedMediaSourceHighThreshold"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceHighThreshold, 1 } },
    HashTableValue { "setManagedMediaSourceLowThreshold"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceLowThreshold, 1 } },
    HashTableValue { "setManagedMediaSourceNeedsAirPlay"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceNeedsAirPlay, 1 } },
    HashTableValue { "setMasonryEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMasonryEnabled, 1 } },
    HashTableValue { "setMathMLEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMathMLEnabled, 1 } },
    HashTableValue { "setMaxParseDuration"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMaxParseDuration, 1 } },
    HashTableValue { "setMaximumHTMLParserDOMTreeDepth"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMaximumHTMLParserDOMTreeDepth, 1 } },
    HashTableValue { "setMaximumSourceBufferSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMaximumSourceBufferSize, 1 } },
    HashTableValue { "setMediaCapabilitiesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesEnabled, 1 } },
    HashTableValue { "setMediaCapabilitiesExtensionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesExtensionsEnabled, 1 } },
    HashTableValue { "setMediaCapabilityGrantsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilityGrantsEnabled, 1 } },
    HashTableValue { "setMediaCaptureRequiresSecureConnection"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaCaptureRequiresSecureConnection, 1 } },
    HashTableValue { "setMediaControlsContextMenusEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsContextMenusEnabled, 1 } },
    HashTableValue { "setMediaControlsScaleWithPageZoom"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsScaleWithPageZoom, 1 } },
    HashTableValue { "setMediaDataLoadsAutomatically"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaDataLoadsAutomatically, 1 } },
    HashTableValue { "setMediaDevicesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaDevicesEnabled, 1 } },
    HashTableValue { "setMediaEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaEnabled, 1 } },
    HashTableValue { "setMediaKeysStorageDirectory"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaKeysStorageDirectory, 1 } },
    HashTableValue { "setMediaPlaybackEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaPlaybackEnabled, 1 } },
    HashTableValue { "setMediaPreferredFullscreenWidth"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaPreferredFullscreenWidth, 1 } },
    HashTableValue { "setMediaPreloadingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaPreloadingEnabled, 1 } },
    HashTableValue { "setMediaRecorderEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabled, 1 } },
    HashTableValue { "setMediaRecorderEnabledWebM"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabledWebM, 1 } },
    HashTableValue { "setMediaSessionCaptureToggleAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCaptureToggleAPIEnabled, 1 } },
    HashTableValue { "setMediaSessionCoordinatorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCoordinatorEnabled, 1 } },
    HashTableValue { "setMediaSessionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionEnabled, 1 } },
    HashTableValue { "setMediaSessionPlaylistEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionPlaylistEnabled, 1 } },
    HashTableValue { "setMediaSourceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceEnabled, 1 } },
    HashTableValue { "setMediaSourceInWorkerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceInWorkerEnabled, 1 } },
    HashTableValue { "setMediaSourcePrefersDecompressionSession"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaSourcePrefersDecompressionSession, 1 } },
    HashTableValue { "setMediaStreamTrackProcessingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaStreamTrackProcessingEnabled, 1 } },
    HashTableValue { "setMediaTypeOverride"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaTypeOverride, 1 } },
    HashTableValue { "setMediaUserGestureInheritsFromDocument"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMediaUserGestureInheritsFromDocument, 1 } },
    HashTableValue { "setMetaViewportInteractiveWidgetEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMetaViewportInteractiveWidgetEnabled, 1 } },
    HashTableValue { "setMinimumFontSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMinimumFontSize, 1 } },
    HashTableValue { "setMinimumLogicalFontSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMinimumLogicalFontSize, 1 } },
    HashTableValue { "setMinimumZoomFontSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMinimumZoomFontSize, 1 } },
    HashTableValue { "setMockCaptureDevicesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMockCaptureDevicesEnabled, 1 } },
    HashTableValue { "setMockScrollbarsControllerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMockScrollbarsControllerEnabled, 1 } },
    HashTableValue { "setModelElementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setModelElementEnabled, 1 } },
    HashTableValue { "setModelNoPortalAttributeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setModelNoPortalAttributeEnabled, 1 } },
    HashTableValue { "setModelProcessEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setModelProcessEnabled, 1 } },
    HashTableValue { "setMomentumScrollingAnimatorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMomentumScrollingAnimatorEnabled, 1 } },
    HashTableValue { "setMouseEventsSimulationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMouseEventsSimulationEnabled, 1 } },
    HashTableValue { "setMutationEventsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMutationEventsEnabled, 1 } },
    HashTableValue { "setMuteCameraOnMicrophoneInterruptionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setMuteCameraOnMicrophoneInterruptionEnabled, 1 } },
    HashTableValue { "setNavigationAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNavigationAPIEnabled, 1 } },
    HashTableValue { "setNavigatorUserAgentDataJavaScriptAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNavigatorUserAgentDataJavaScriptAPIEnabled, 1 } },
    HashTableValue { "setNeedsAdobeFrameReloadingQuirk"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNeedsAdobeFrameReloadingQuirk, 1 } },
    HashTableValue { "setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirk"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirk, 1 } },
    HashTableValue { "setNeedsFrameNameFallbackToIdQuirk"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNeedsFrameNameFallbackToIdQuirk, 1 } },
    HashTableValue { "setNeedsKeyboardEventDisambiguationQuirks"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNeedsKeyboardEventDisambiguationQuirks, 1 } },
    HashTableValue { "setNeedsSiteSpecificQuirks"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNeedsSiteSpecificQuirks, 1 } },
    HashTableValue { "setNeedsStorageAccessFromFileURLsQuirk"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNeedsStorageAccessFromFileURLsQuirk, 1 } },
    HashTableValue { "setNotificationEventEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNotificationEventEnabled, 1 } },
    HashTableValue { "setNotificationsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setNotificationsEnabled, 1 } },
    HashTableValue { "setObservableEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setObservableEnabled, 1 } },
    HashTableValue { "setOffscreenCanvasEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasEnabled, 1 } },
    HashTableValue { "setOffscreenCanvasInWorkersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasInWorkersEnabled, 1 } },
    HashTableValue { "setOpportunisticSweepingAndGarbageCollectionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setOpportunisticSweepingAndGarbageCollectionEnabled, 1 } },
    HashTableValue { "setOptInPartitionedCookiesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setOptInPartitionedCookiesEnabled, 1 } },
    HashTableValue { "setOverlappingBackingStoreProvidersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setOverlappingBackingStoreProvidersEnabled, 1 } },
    HashTableValue { "setOverscrollBehaviorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setOverscrollBehaviorEnabled, 1 } },
    HashTableValue { "setPageAtRuleMarginDescriptorsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPageAtRuleMarginDescriptorsEnabled, 1 } },
    HashTableValue { "setPassiveTouchListenersAsDefaultOnDocument"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPassiveTouchListenersAsDefaultOnDocument, 1 } },
    HashTableValue { "setPassiveWheelListenersAsDefaultOnDocument"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPassiveWheelListenersAsDefaultOnDocument, 1 } },
    HashTableValue { "setPasswordEchoDurationInSeconds"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoDurationInSeconds, 1 } },
    HashTableValue { "setPasswordEchoEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoEnabled, 1 } },
    HashTableValue { "setPaymentRequestEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPaymentRequestEnabled, 1 } },
    HashTableValue { "setPDFJSViewerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPDFJSViewerEnabled, 1 } },
    HashTableValue { "setPDFPluginEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginEnabled, 1 } },
    HashTableValue { "setPDFPluginHUDEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginHUDEnabled, 1 } },
    HashTableValue { "setPDFPluginPageNumberIndicatorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginPageNumberIndicatorEnabled, 1 } },
    HashTableValue { "setPeerConnectionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionEnabled, 1 } },
    HashTableValue { "setPeerConnectionVideoScalingAdaptationDisabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionVideoScalingAdaptationDisabled, 1 } },
    HashTableValue { "setPerElementSpeakerSelectionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPerElementSpeakerSelectionEnabled, 1 } },
    HashTableValue { "setPermissionsAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPermissionsAPIEnabled, 1 } },
    HashTableValue { "setPictographFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPictographFontFamily, 1 } },
    HashTableValue { "setPictureInPictureAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPictureInPictureAPIEnabled, 1 } },
    HashTableValue { "setPictureInPicturePlaybackStateEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPictureInPicturePlaybackStateEnabled, 1 } },
    HashTableValue { "setPointerLockEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPointerLockEnabled, 1 } },
    HashTableValue { "setPointerLockOptionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPointerLockOptionsEnabled, 1 } },
    HashTableValue { "setPopoverAttributeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPopoverAttributeEnabled, 1 } },
    HashTableValue { "setPreferMIMETypeForImages"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPreferMIMETypeForImages, 1 } },
    HashTableValue { "setPreferPageRenderingUpdatesNear60FPSEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPreferPageRenderingUpdatesNear60FPSEnabled, 1 } },
    HashTableValue { "setPreferSpatialAudioExperience"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPreferSpatialAudioExperience, 1 } },
    HashTableValue { "setPreventKeyboardDOMEventDispatch"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPreventKeyboardDOMEventDispatch, 1 } },
    HashTableValue { "setPrivateClickMeasurementDebugModeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementDebugModeEnabled, 1 } },
    HashTableValue { "setPrivateClickMeasurementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementEnabled, 1 } },
    HashTableValue { "setPrivateClickMeasurementFraudPreventionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementFraudPreventionEnabled, 1 } },
    HashTableValue { "setPrivateTokenUsageByThirdPartyEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPrivateTokenUsageByThirdPartyEnabled, 1 } },
    HashTableValue { "setPropagateDamagingInformation"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPropagateDamagingInformation, 1 } },
    HashTableValue { "setPunchOutWhiteBackgroundsInDarkMode"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPunchOutWhiteBackgroundsInDarkMode, 1 } },
    HashTableValue { "setPushAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setPushAPIEnabled, 1 } },
    HashTableValue { "setRemoteMediaSessionManagerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRemoteMediaSessionManagerEnabled, 1 } },
    HashTableValue { "setRemotePlaybackEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRemotePlaybackEnabled, 1 } },
    HashTableValue { "setRemoteSnapshottingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRemoteSnapshottingEnabled, 1 } },
    HashTableValue { "setRemoveBackgroundEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRemoveBackgroundEnabled, 1 } },
    HashTableValue { "setRequestIdleCallbackEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequestIdleCallbackEnabled, 1 } },
    HashTableValue { "setRequestStorageAccessThrowsExceptionUntilReload"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequestStorageAccessThrowsExceptionUntilReload, 1 } },
    HashTableValue { "setRequestVideoFrameCallbackEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequestVideoFrameCallbackEnabled, 1 } },
    HashTableValue { "setRequireUAGetDisplayMediaPrompt"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequireUAGetDisplayMediaPrompt, 1 } },
    HashTableValue { "setRequiresPageVisibilityForVideoToBeNowPlaying"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityForVideoToBeNowPlaying, 1 } },
    HashTableValue { "setRequiresPageVisibilityToPlayAudio"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityToPlayAudio, 1 } },
    HashTableValue { "setRequiresUserGestureForAudioPlayback"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForAudioPlayback, 1 } },
    HashTableValue { "setRequiresUserGestureForVideoPlayback"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForVideoPlayback, 1 } },
    HashTableValue { "setRequiresUserGestureToLoadVideo"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureToLoadVideo, 1 } },
    HashTableValue { "setResourceLoadSchedulingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setResourceLoadSchedulingEnabled, 1 } },
    HashTableValue { "setResourceUsageOverlayVisible"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setResourceUsageOverlayVisible, 1 } },
    HashTableValue { "setRespondToThermalPressureAggressively"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRespondToThermalPressureAggressively, 1 } },
    HashTableValue { "setRubberBandingForSubScrollableRegionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setRubberBandingForSubScrollableRegionsEnabled, 1 } },
    HashTableValue { "setSKAttributionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSKAttributionEnabled, 1 } },
    HashTableValue { "setSampledPageTopColorMaxDifference"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMaxDifference, 1 } },
    HashTableValue { "setSampledPageTopColorMinHeight"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMinHeight, 1 } },
    HashTableValue { "setSansSerifFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSansSerifFontFamily, 1 } },
    HashTableValue { "setScopedCustomElementRegistryEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScopedCustomElementRegistryEnabled, 1 } },
    HashTableValue { "setScreenCaptureEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScreenCaptureEnabled, 1 } },
    HashTableValue { "setScreenOrientationAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationAPIEnabled, 1 } },
    HashTableValue { "setScreenOrientationLockingAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationLockingAPIEnabled, 1 } },
    HashTableValue { "setScreenTimeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScreenTimeEnabled, 1 } },
    HashTableValue { "setScreenWakeLockAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScreenWakeLockAPIEnabled, 1 } },
    HashTableValue { "setScriptEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScriptEnabled, 1 } },
    HashTableValue { "setScriptMarkupEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScriptMarkupEnabled, 1 } },
    HashTableValue { "setScriptTrackingPrivacyLoggingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScriptTrackingPrivacyLoggingEnabled, 1 } },
    HashTableValue { "setScrollAnimatorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollAnimatorEnabled, 1 } },
    HashTableValue { "setScrollDrivenAnimationsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollDrivenAnimationsEnabled, 1 } },
    HashTableValue { "setScrollToTextFragmentEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentEnabled, 1 } },
    HashTableValue { "setScrollToTextFragmentFeatureDetectionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentFeatureDetectionEnabled, 1 } },
    HashTableValue { "setScrollToTextFragmentGenerationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentGenerationEnabled, 1 } },
    HashTableValue { "setScrollToTextFragmentIndicatorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentIndicatorEnabled, 1 } },
    HashTableValue { "setScrollToTextFragmentMarkingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentMarkingEnabled, 1 } },
    HashTableValue { "setScrollendEventEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollendEventEnabled, 1 } },
    HashTableValue { "setScrollingCoordinatorEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollingCoordinatorEnabled, 1 } },
    HashTableValue { "setScrollingPerformanceTestingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollingPerformanceTestingEnabled, 1 } },
    HashTableValue { "setScrollingTreeIncludesFrames"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setScrollingTreeIncludesFrames, 1 } },
    HashTableValue { "setSecureContextChecksEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSecureContextChecksEnabled, 1 } },
    HashTableValue { "setSelectShowPickerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSelectShowPickerEnabled, 1 } },
    HashTableValue { "setSelectTrailingWhitespaceEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSelectTrailingWhitespaceEnabled, 1 } },
    HashTableValue { "setSelectionHonorsOverflowScrolling"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSelectionHonorsOverflowScrolling, 1 } },
    HashTableValue { "setSerifFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSerifFontFamily, 1 } },
    HashTableValue { "setServiceControlsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setServiceControlsEnabled, 1 } },
    HashTableValue { "setServiceWorkerInstallEventEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerInstallEventEnabled, 1 } },
    HashTableValue { "setServiceWorkerNavigationPreloadEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerNavigationPreloadEnabled, 1 } },
    HashTableValue { "setServiceWorkersEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersEnabled, 1 } },
    HashTableValue { "setServiceWorkersUserGestureEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersUserGestureEnabled, 1 } },
    HashTableValue { "setSessionStorageQuota"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSessionStorageQuota, 1 } },
    HashTableValue { "setShadowRootReferenceTargetEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabled, 1 } },
    HashTableValue { "setShadowRootReferenceTargetEnabledForAriaOwns"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabledForAriaOwns, 1 } },
    HashTableValue { "setShapeDetection"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShapeDetection, 1 } },
    HashTableValue { "setSharedWorkerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSharedWorkerEnabled, 1 } },
    HashTableValue { "setShouldAllowUserInstalledFonts"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldAllowUserInstalledFonts, 1 } },
    HashTableValue { "setShouldConvertInvalidURLsToBlank"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertInvalidURLsToBlank, 1 } },
    HashTableValue { "setShouldConvertPositionStyleOnCopy"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertPositionStyleOnCopy, 1 } },
    HashTableValue { "setShouldDecidePolicyBeforeLoadingQuickLookPreview"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDecidePolicyBeforeLoadingQuickLookPreview, 1 } },
    HashTableValue { "setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint, 1 } },
    HashTableValue { "setShouldDispatchSyntheticMouseEventsWhenModifyingSelection"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseEventsWhenModifyingSelection, 1 } },
    HashTableValue { "setShouldDispatchSyntheticMouseOutAfterSyntheticClick"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseOutAfterSyntheticClick, 1 } },
    HashTableValue { "setShouldDisplayCaptions"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayCaptions, 1 } },
    HashTableValue { "setShouldDisplaySubtitles"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplaySubtitles, 1 } },
    HashTableValue { "setShouldDisplayTextDescriptions"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayTextDescriptions, 1 } },
    HashTableValue { "setShouldDropNearSuspendedAssertionAfterDelay"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldDropNearSuspendedAssertionAfterDelay, 1 } },
    HashTableValue { "setShouldEnableTextAutosizingBoost"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldEnableTextAutosizingBoost, 1 } },
    HashTableValue { "setShouldIgnoreFontLoadCompletions"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreFontLoadCompletions, 1 } },
    HashTableValue { "setShouldIgnoreMetaViewport"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreMetaViewport, 1 } },
    HashTableValue { "setShouldInjectUserScriptsInInitialEmptyDocument"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldInjectUserScriptsInInitialEmptyDocument, 1 } },
    HashTableValue { "setShouldPrintBackgrounds"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldPrintBackgrounds, 1 } },
    HashTableValue { "setShouldRespectImageOrientation"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldRespectImageOrientation, 1 } },
    HashTableValue { "setShouldRestrictBaseURLSchemes"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldRestrictBaseURLSchemes, 1 } },
    HashTableValue { "setShouldSuppressTextInputFromEditingDuringProvisionalNavigation"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldSuppressTextInputFromEditingDuringProvisionalNavigation, 1 } },
    HashTableValue { "setShouldTakeNearSuspendedAssertions"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldTakeNearSuspendedAssertions, 1 } },
    HashTableValue { "setShouldUseModernAVContentKeySession"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldUseModernAVContentKeySession, 1 } },
    HashTableValue { "setShouldUseServiceWorkerShortTimeout"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShouldUseServiceWorkerShortTimeout, 1 } },
    HashTableValue { "setShowDebugBorders"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowDebugBorders, 1 } },
    HashTableValue { "setShowFrameProcessBorders"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowFrameProcessBorders, 1 } },
    HashTableValue { "setShowMediaStatsContextMenuItemEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowMediaStatsContextMenuItemEnabled, 1 } },
    HashTableValue { "setShowModalDialogEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowModalDialogEnabled, 1 } },
    HashTableValue { "setShowRepaintCounter"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowRepaintCounter, 1 } },
    HashTableValue { "setShowTiledScrollingIndicator"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowTiledScrollingIndicator, 1 } },
    HashTableValue { "setShowsToolTipOverTruncatedText"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowsToolTipOverTruncatedText, 1 } },
    HashTableValue { "setShowsURLsInToolTips"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShowsURLsInToolTips, 1 } },
    HashTableValue { "setShrinksStandaloneImagesToFit"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setShrinksStandaloneImagesToFit, 1 } },
    HashTableValue { "setSidewaysWritingModesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSidewaysWritingModesEnabled, 1 } },
    HashTableValue { "setSiteIsolationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationEnabled, 1 } },
    HashTableValue { "setSiteIsolationSharedProcessEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationSharedProcessEnabled, 1 } },
    HashTableValue { "setSmartInsertDeleteEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSmartInsertDeleteEnabled, 1 } },
    HashTableValue { "setSourceBufferChangeTypeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSourceBufferChangeTypeEnabled, 1 } },
    HashTableValue { "setSpatialImageControlsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSpatialImageControlsEnabled, 1 } },
    HashTableValue { "setSpatialNavigationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSpatialNavigationEnabled, 1 } },
    HashTableValue { "setSpeakerSelectionRequiresUserGesture"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSpeakerSelectionRequiresUserGesture, 1 } },
    HashTableValue { "setSpeechRecognitionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSpeechRecognitionEnabled, 1 } },
    HashTableValue { "setSpeechSynthesisAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSpeechSynthesisAPIEnabled, 1 } },
    HashTableValue { "setSpringTimingFunctionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSpringTimingFunctionEnabled, 1 } },
    HashTableValue { "setStandalone"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setStandalone, 1 } },
    HashTableValue { "setStandardFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setStandardFontFamily, 1 } },
    HashTableValue { "setStorageAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEnabled, 1 } },
    HashTableValue { "setStorageAPIEstimateEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEstimateEnabled, 1 } },
    HashTableValue { "setStorageAccessAPIPerPageScopeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setStorageAccessAPIPerPageScopeEnabled, 1 } },
    HashTableValue { "setSupportHDRCompositorTonemappingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRCompositorTonemappingEnabled, 1 } },
    HashTableValue { "setSupportHDRDisplayEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRDisplayEnabled, 1 } },
    HashTableValue { "setSuppressHDRShouldBeAllowedInFullscreenVideo"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSuppressHDRShouldBeAllowedInFullscreenVideo, 1 } },
    HashTableValue { "setSuppressesIncrementalRendering"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSuppressesIncrementalRendering, 1 } },
    HashTableValue { "setSwitchControlEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSwitchControlEnabled, 1 } },
    HashTableValue { "setSystemPreviewEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setSystemPreviewEnabled, 1 } },
    HashTableValue { "setTargetTextPseudoElementEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTargetTextPseudoElementEnabled, 1 } },
    HashTableValue { "setTelephoneNumberParsingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTelephoneNumberParsingEnabled, 1 } },
    HashTableValue { "setTemporaryTileCohortRetentionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTemporaryTileCohortRetentionEnabled, 1 } },
    HashTableValue { "setTextAnimationsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextAnimationsEnabled, 1 } },
    HashTableValue { "setTextAreasAreResizable"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextAreasAreResizable, 1 } },
    HashTableValue { "setTextAutosizingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabled, 1 } },
    HashTableValue { "setTextAutosizingEnabledAtLargeInitialScale"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabledAtLargeInitialScale, 1 } },
    HashTableValue { "setTextAutosizingUsesIdempotentMode"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingUsesIdempotentMode, 1 } },
    HashTableValue { "setTextAutosizingWindowSizeOverrideHeight"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideHeight, 1 } },
    HashTableValue { "setTextAutosizingWindowSizeOverrideWidth"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideWidth, 1 } },
    HashTableValue { "setTextInteractionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextInteractionEnabled, 1 } },
    HashTableValue { "setTextRecognitionInVideosEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextRecognitionInVideosEnabled, 1 } },
    HashTableValue { "setTextTracksInMSEEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTextTracksInMSEEnabled, 1 } },
    HashTableValue { "setThreadedAnimationResolutionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setThreadedAnimationResolutionEnabled, 1 } },
    HashTableValue { "setThumbAndTrackPseudoElementsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setThumbAndTrackPseudoElementsEnabled, 1 } },
    HashTableValue { "setTopContentInsetBackgroundCanChangeAfterScrolling"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTopContentInsetBackgroundCanChangeAfterScrolling, 1 } },
    HashTableValue { "setTouchEventDOMAttributesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTouchEventDOMAttributesEnabled, 1 } },
    HashTableValue { "setTouchEventEmulationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTouchEventEmulationEnabled, 1 } },
    HashTableValue { "setTouchInputCompatibilityEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTouchInputCompatibilityEnabled, 1 } },
    HashTableValue { "setTrackConfigurationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTrackConfigurationEnabled, 1 } },
    HashTableValue { "setTreatIPAddressAsDomain"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTreatIPAddressAsDomain, 1 } },
    HashTableValue { "setTreatsAnyTextCSSLinkAsStylesheet"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTreatsAnyTextCSSLinkAsStylesheet, 1 } },
    HashTableValue { "setTrustedTypesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setTrustedTypesEnabled, 1 } },
    HashTableValue { "setUAVisualTransitionDetectionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUAVisualTransitionDetectionEnabled, 1 } },
    HashTableValue { "setUndoManagerAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUndoManagerAPIEnabled, 1 } },
    HashTableValue { "setUnhandledPromiseRejectionToConsoleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUnhandledPromiseRejectionToConsoleEnabled, 1 } },
    HashTableValue { "setUnifiedPDFEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUnifiedPDFEnabled, 1 } },
    HashTableValue { "setUnifiedTextCheckerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUnifiedTextCheckerEnabled, 1 } },
    HashTableValue { "setUnifyDamagedRegions"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUnifyDamagedRegions, 1 } },
    HashTableValue { "setUpgradeMixedContentEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUpgradeMixedContentEnabled, 1 } },
    HashTableValue { "setURLPatternAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setURLPatternAPIEnabled, 1 } },
    HashTableValue { "setUseAnonymousModeWhenFetchingMaskImages"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseAnonymousModeWhenFetchingMaskImages, 1 } },
    HashTableValue { "setUseAsyncUIKitInteractions"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseAsyncUIKitInteractions, 1 } },
    HashTableValue { "setUseDamagingInformationForCompositing"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseDamagingInformationForCompositing, 1 } },
    HashTableValue { "setUseGPUProcessForWebGLEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseGPUProcessForWebGLEnabled, 1 } },
    HashTableValue { "setUseGiantTiles"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseGiantTiles, 1 } },
    HashTableValue { "setUseIFCForSVGText"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseIFCForSVGText, 1 } },
    HashTableValue { "setUseImageDocumentForSubframePDF"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseImageDocumentForSubframePDF, 1 } },
    HashTableValue { "setUseMicrophoneMuteStatusAPI"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseMicrophoneMuteStatusAPI, 1 } },
    HashTableValue { "setUsePreHTML5ParserQuirks"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUsePreHTML5ParserQuirks, 1 } },
    HashTableValue { "setUseSystemAppearance"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUseSystemAppearance, 1 } },
    HashTableValue { "setUserActivationAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUserActivationAPIEnabled, 1 } },
    HashTableValue { "setUserGesturePromisePropagationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUserGesturePromisePropagationEnabled, 1 } },
    HashTableValue { "setUsesEncodingDetector"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setUsesEncodingDetector, 1 } },
    HashTableValue { "setValidationMessageTimerMagnification"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setValidationMessageTimerMagnification, 1 } },
    HashTableValue { "setVerifyWindowOpenUserGestureFromUIProcess"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVerifyWindowOpenUserGestureFromUIProcess, 1 } },
    HashTableValue { "setVerticalFormControlsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVerticalFormControlsEnabled, 1 } },
    HashTableValue { "setVideoFullsceenPrefersMostVisibleHeuristic"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVideoFullsceenPrefersMostVisibleHeuristic, 1 } },
    HashTableValue { "setVideoFullscreenRequiresElementFullscreen"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVideoFullscreenRequiresElementFullscreen, 1 } },
    HashTableValue { "setVideoPresentationManagerEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationManagerEnabled, 1 } },
    HashTableValue { "setVideoPresentationModeAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationModeAPIEnabled, 1 } },
    HashTableValue { "setVideoQualityIncludesDisplayCompositingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVideoQualityIncludesDisplayCompositingEnabled, 1 } },
    HashTableValue { "setVideoRendererProtectedFallbackDisabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererProtectedFallbackDisabled, 1 } },
    HashTableValue { "setVideoRendererUseDecompressionSessionForProtected"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererUseDecompressionSessionForProtected, 1 } },
    HashTableValue { "setViewTransitionClassesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionClassesEnabled, 1 } },
    HashTableValue { "setViewTransitionTypesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionTypesEnabled, 1 } },
    HashTableValue { "setViewTransitionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionsEnabled, 1 } },
    HashTableValue { "setVisibleDebugOverlayRegions"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVisibleDebugOverlayRegions, 1 } },
    HashTableValue { "setVisualTranslationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVisualTranslationEnabled, 1 } },
    HashTableValue { "setVisualViewportAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportAPIEnabled, 1 } },
    HashTableValue { "setVisualViewportEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportEnabled, 1 } },
    HashTableValue { "setVisuallyContiguousBidiTextSelectionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVisuallyContiguousBidiTextSelectionEnabled, 1 } },
    HashTableValue { "setVP9DecoderEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setVP9DecoderEnabled, 1 } },
    HashTableValue { "setWantsBalancedSetDefersLoadingBehavior"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWantsBalancedSetDefersLoadingBehavior, 1 } },
    HashTableValue { "setWebAPIStatisticsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAPIStatisticsEnabled, 1 } },
    HashTableValue { "setWebAPIsInShadowRealmEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAPIsInShadowRealmEnabled, 1 } },
    HashTableValue { "setWebAnimationsCustomEffectsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomEffectsEnabled, 1 } },
    HashTableValue { "setWebAnimationsCustomFrameRateEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomFrameRateEnabled, 1 } },
    HashTableValue { "setWebAnimationsOverallProgressPropertyEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsOverallProgressPropertyEnabled, 1 } },
    HashTableValue { "setWebArchiveDebugModeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveDebugModeEnabled, 1 } },
    HashTableValue { "setWebArchiveTestingModeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveTestingModeEnabled, 1 } },
    HashTableValue { "setWebAssemblyESMIntegrationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAssemblyESMIntegrationEnabled, 1 } },
    HashTableValue { "setWebAudioEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAudioEnabled, 1 } },
    HashTableValue { "setWebAuthenticationASEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationASEnabled, 1 } },
    HashTableValue { "setWebAuthenticationEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationEnabled, 1 } },
    HashTableValue { "setWebCodecsAV1Enabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAV1Enabled, 1 } },
    HashTableValue { "setWebCodecsAudioEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAudioEnabled, 1 } },
    HashTableValue { "setWebCodecsHEVCEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsHEVCEnabled, 1 } },
    HashTableValue { "setWebCodecsVideoEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsVideoEnabled, 1 } },
    HashTableValue { "setWebCryptoSafeCurvesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoSafeCurvesEnabled, 1 } },
    HashTableValue { "setWebCryptoX25519Enabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoX25519Enabled, 1 } },
    HashTableValue { "setWebExtensionBookmarksEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionBookmarksEnabled, 1 } },
    HashTableValue { "setWebExtensionSidebarEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionSidebarEnabled, 1 } },
    HashTableValue { "setWebGLDraftExtensionsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebGLDraftExtensionsEnabled, 1 } },
    HashTableValue { "setWebGLEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebGLEnabled, 1 } },
    HashTableValue { "setWebGLErrorsToConsoleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebGLErrorsToConsoleEnabled, 1 } },
    HashTableValue { "setWebGLTimerQueriesEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebGLTimerQueriesEnabled, 1 } },
    HashTableValue { "setWebGPUEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebGPUEnabled, 1 } },
    HashTableValue { "setWebGPUHDREnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebGPUHDREnabled, 1 } },
    HashTableValue { "setWebInspectorEngineeringSettingsAllowed"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebInspectorEngineeringSettingsAllowed, 1 } },
    HashTableValue { "setWebLocksAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebLocksAPIEnabled, 1 } },
    HashTableValue { "setWebPageSpatialBackdropEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebPageSpatialBackdropEnabled, 1 } },
    HashTableValue { "setWebRTCAV1CodecEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCAV1CodecEnabled, 1 } },
    HashTableValue { "setWebRTCDTMFEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCDTMFEnabled, 1 } },
    HashTableValue { "setWebRTCEncodedTransformEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncodedTransformEnabled, 1 } },
    HashTableValue { "setWebRTCEncryptionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncryptionEnabled, 1 } },
    HashTableValue { "setWebRTCH265CodecEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCH265CodecEnabled, 1 } },
    HashTableValue { "setWebRTCInterfaceMonitoringViaNWEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCInterfaceMonitoringViaNWEnabled, 1 } },
    HashTableValue { "setWebRTCL4SEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCL4SEnabled, 1 } },
    HashTableValue { "setWebRTCMediaPipelineAdditionalLoggingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCMediaPipelineAdditionalLoggingEnabled, 1 } },
    HashTableValue { "setWebRTCPlatformCodecsInGPUProcessEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCPlatformCodecsInGPUProcessEnabled, 1 } },
    HashTableValue { "setWebRTCRemoteVideoFrameEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCRemoteVideoFrameEnabled, 1 } },
    HashTableValue { "setWebRTCSFrameTransformEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSFrameTransformEnabled, 1 } },
    HashTableValue { "setWebRTCSocketsProxyingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSocketsProxyingEnabled, 1 } },
    HashTableValue { "setWebRTCUDPPortRange"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCUDPPortRange, 1 } },
    HashTableValue { "setWebRTCVP9Profile0CodecEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile0CodecEnabled, 1 } },
    HashTableValue { "setWebRTCVP9Profile2CodecEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile2CodecEnabled, 1 } },
    HashTableValue { "setWebSecurityEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebSecurityEnabled, 1 } },
    HashTableValue { "setWebShareEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebShareEnabled, 1 } },
    HashTableValue { "setWebShareFileAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebShareFileAPIEnabled, 1 } },
    HashTableValue { "setWebSocketEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebSocketEnabled, 1 } },
    HashTableValue { "setWebTransportEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebTransportEnabled, 1 } },
    HashTableValue { "setWebXRAugmentedRealityModuleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebXRAugmentedRealityModuleEnabled, 1 } },
    HashTableValue { "setWebXREnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebXREnabled, 1 } },
    HashTableValue { "setWebXRGamepadsModuleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebXRGamepadsModuleEnabled, 1 } },
    HashTableValue { "setWebXRHandInputModuleEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebXRHandInputModuleEnabled, 1 } },
    HashTableValue { "setWebXRLayersAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebXRLayersAPIEnabled, 1 } },
    HashTableValue { "setWebXRWebGPUBindingsEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebXRWebGPUBindingsEnabled, 1 } },
    HashTableValue { "setWebkitImageReadyEventEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWebkitImageReadyEventEnabled, 1 } },
    HashTableValue { "setWheelEventGesturesBecomeNonBlocking"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWheelEventGesturesBecomeNonBlocking, 1 } },
    HashTableValue { "setWindowFocusRestricted"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWindowFocusRestricted, 1 } },
    HashTableValue { "setWirelessPlaybackTargetAPIEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWirelessPlaybackTargetAPIEnabled, 1 } },
    HashTableValue { "setWorkerAsynchronousURLErrorHandlingEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWorkerAsynchronousURLErrorHandlingEnabled, 1 } },
    HashTableValue { "setWriteRichTextDataWhenCopyingOrDragging"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWriteRichTextDataWhenCopyingOrDragging, 1 } },
    HashTableValue { "setWritingSuggestionsAttributeEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setWritingSuggestionsAttributeEnabled, 1 } },
    HashTableValue { "setXsltEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsGeneratedPrototypeFunction_setXsltEnabled, 1 } },
};

const ClassInfo JSInternalSettingsGeneratedPrototype::s_info = { "InternalSettingsGenerated"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSInternalSettingsGeneratedPrototype) };

void JSInternalSettingsGeneratedPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSInternalSettingsGenerated::info(), JSInternalSettingsGeneratedPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSInternalSettingsGenerated::s_info = { "InternalSettingsGenerated"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSInternalSettingsGenerated) };

JSInternalSettingsGenerated::JSInternalSettingsGenerated(Structure* structure, JSDOMGlobalObject& globalObject, Ref<InternalSettingsGenerated>&& impl)
    : JSDOMWrapper<InternalSettingsGenerated>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, InternalSettingsGenerated>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSInternalSettingsGenerated::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSInternalSettingsGeneratedPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSInternalSettingsGeneratedPrototype::create(vm, &globalObject, structure);
}

JSObject* JSInternalSettingsGenerated::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSInternalSettingsGenerated>(vm, globalObject);
}

void JSInternalSettingsGenerated::destroy(JSC::JSCell* cell)
{
    JSInternalSettingsGenerated* thisObject = static_cast<JSInternalSettingsGenerated*>(cell);
    thisObject->JSInternalSettingsGenerated::~JSInternalSettingsGenerated();
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAVKitContentSourceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto aVKitContentSourceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (aVKitContentSourceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAVKitContentSourceEnabled(aVKitContentSourceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAVKitContentSourceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAVKitContentSourceEnabledBody>(*lexicalGlobalObject, *callFrame, "setAVKitContentSourceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto acceleratedCompositingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (acceleratedCompositingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAcceleratedCompositingEnabled(acceleratedCompositingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingEnabledBody>(*lexicalGlobalObject, *callFrame, "setAcceleratedCompositingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingForFixedPositionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto acceleratedCompositingForFixedPositionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (acceleratedCompositingForFixedPositionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAcceleratedCompositingForFixedPositionEnabled(acceleratedCompositingForFixedPositionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingForFixedPositionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedCompositingForFixedPositionEnabledBody>(*lexicalGlobalObject, *callFrame, "setAcceleratedCompositingForFixedPositionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedDrawingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto acceleratedDrawingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (acceleratedDrawingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAcceleratedDrawingEnabled(acceleratedDrawingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedDrawingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedDrawingEnabledBody>(*lexicalGlobalObject, *callFrame, "setAcceleratedDrawingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedFiltersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto acceleratedFiltersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (acceleratedFiltersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAcceleratedFiltersEnabled(acceleratedFiltersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedFiltersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAcceleratedFiltersEnabledBody>(*lexicalGlobalObject, *callFrame, "setAcceleratedFiltersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAccentColorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto accentColorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (accentColorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAccentColorEnabled(accentColorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAccentColorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAccentColorEnabledBody>(*lexicalGlobalObject, *callFrame, "setAccentColorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAccessHandleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto accessHandleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (accessHandleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAccessHandleEnabled(accessHandleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAccessHandleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAccessHandleEnabledBody>(*lexicalGlobalObject, *callFrame, "setAccessHandleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAggressiveTileRetentionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto aggressiveTileRetentionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (aggressiveTileRetentionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAggressiveTileRetentionEnabled(aggressiveTileRetentionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAggressiveTileRetentionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAggressiveTileRetentionEnabledBody>(*lexicalGlobalObject, *callFrame, "setAggressiveTileRetentionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowAnimationControlsOverrideBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowAnimationControlsOverrideConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowAnimationControlsOverrideConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowAnimationControlsOverride(allowAnimationControlsOverrideConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowAnimationControlsOverride, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowAnimationControlsOverrideBody>(*lexicalGlobalObject, *callFrame, "setAllowAnimationControlsOverride");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowContentSecurityPolicySourceStarToMatchAnyProtocolBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowContentSecurityPolicySourceStarToMatchAnyProtocolConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowContentSecurityPolicySourceStarToMatchAnyProtocolConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowContentSecurityPolicySourceStarToMatchAnyProtocol(allowContentSecurityPolicySourceStarToMatchAnyProtocolConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowContentSecurityPolicySourceStarToMatchAnyProtocol, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowContentSecurityPolicySourceStarToMatchAnyProtocolBody>(*lexicalGlobalObject, *callFrame, "setAllowContentSecurityPolicySourceStarToMatchAnyProtocol");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowDisplayOfInsecureContentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowDisplayOfInsecureContentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowDisplayOfInsecureContentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowDisplayOfInsecureContent(allowDisplayOfInsecureContentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowDisplayOfInsecureContent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowDisplayOfInsecureContentBody>(*lexicalGlobalObject, *callFrame, "setAllowDisplayOfInsecureContent");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowFileAccessFromFileURLsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowFileAccessFromFileURLsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowFileAccessFromFileURLsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowFileAccessFromFileURLs(allowFileAccessFromFileURLsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowFileAccessFromFileURLs, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowFileAccessFromFileURLsBody>(*lexicalGlobalObject, *callFrame, "setAllowFileAccessFromFileURLs");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowMediaContentTypesRequiringHardwareSupportAsFallbackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowMediaContentTypesRequiringHardwareSupportAsFallbackConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowMediaContentTypesRequiringHardwareSupportAsFallbackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowMediaContentTypesRequiringHardwareSupportAsFallback(allowMediaContentTypesRequiringHardwareSupportAsFallbackConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowMediaContentTypesRequiringHardwareSupportAsFallback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowMediaContentTypesRequiringHardwareSupportAsFallbackBody>(*lexicalGlobalObject, *callFrame, "setAllowMediaContentTypesRequiringHardwareSupportAsFallback");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowMultiElementImplicitSubmissionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowMultiElementImplicitSubmissionConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowMultiElementImplicitSubmissionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowMultiElementImplicitSubmission(allowMultiElementImplicitSubmissionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowMultiElementImplicitSubmission, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowMultiElementImplicitSubmissionBody>(*lexicalGlobalObject, *callFrame, "setAllowMultiElementImplicitSubmission");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowPrivacySensitiveOperationsInNonPersistentDataStoresBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowPrivacySensitiveOperationsInNonPersistentDataStoresConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowPrivacySensitiveOperationsInNonPersistentDataStoresConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowPrivacySensitiveOperationsInNonPersistentDataStores(allowPrivacySensitiveOperationsInNonPersistentDataStoresConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowPrivacySensitiveOperationsInNonPersistentDataStores, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowPrivacySensitiveOperationsInNonPersistentDataStoresBody>(*lexicalGlobalObject, *callFrame, "setAllowPrivacySensitiveOperationsInNonPersistentDataStores");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowRunningOfInsecureContentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowRunningOfInsecureContentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowRunningOfInsecureContentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowRunningOfInsecureContent(allowRunningOfInsecureContentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowRunningOfInsecureContent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowRunningOfInsecureContentBody>(*lexicalGlobalObject, *callFrame, "setAllowRunningOfInsecureContent");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowTopNavigationToDataURLsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowTopNavigationToDataURLsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowTopNavigationToDataURLsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowTopNavigationToDataURLs(allowTopNavigationToDataURLsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowTopNavigationToDataURLs, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowTopNavigationToDataURLsBody>(*lexicalGlobalObject, *callFrame, "setAllowTopNavigationToDataURLs");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowUniversalAccessFromFileURLsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowUniversalAccessFromFileURLsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowUniversalAccessFromFileURLsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowUniversalAccessFromFileURLs(allowUniversalAccessFromFileURLsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowUniversalAccessFromFileURLs, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowUniversalAccessFromFileURLsBody>(*lexicalGlobalObject, *callFrame, "setAllowUniversalAccessFromFileURLs");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowViewportShrinkToFitContentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowViewportShrinkToFitContentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowViewportShrinkToFitContentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowViewportShrinkToFitContent(allowViewportShrinkToFitContentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowViewportShrinkToFitContent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowViewportShrinkToFitContentBody>(*lexicalGlobalObject, *callFrame, "setAllowViewportShrinkToFitContent");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowWebGLInWorkersBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowWebGLInWorkersConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowWebGLInWorkersConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowWebGLInWorkers(allowWebGLInWorkersConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowWebGLInWorkers, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowWebGLInWorkersBody>(*lexicalGlobalObject, *callFrame, "setAllowWebGLInWorkers");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowsAirPlayForMediaPlaybackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowsAirPlayForMediaPlaybackConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowsAirPlayForMediaPlaybackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowsAirPlayForMediaPlayback(allowsAirPlayForMediaPlaybackConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsAirPlayForMediaPlayback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowsAirPlayForMediaPlaybackBody>(*lexicalGlobalObject, *callFrame, "setAllowsAirPlayForMediaPlayback");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlaybackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowsInlineMediaPlaybackConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowsInlineMediaPlaybackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowsInlineMediaPlayback(allowsInlineMediaPlaybackConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlayback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlaybackBody>(*lexicalGlobalObject, *callFrame, "setAllowsInlineMediaPlayback");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlaybackAfterFullscreenBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowsInlineMediaPlaybackAfterFullscreenConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowsInlineMediaPlaybackAfterFullscreenConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowsInlineMediaPlaybackAfterFullscreen(allowsInlineMediaPlaybackAfterFullscreenConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlaybackAfterFullscreen, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowsInlineMediaPlaybackAfterFullscreenBody>(*lexicalGlobalObject, *callFrame, "setAllowsInlineMediaPlaybackAfterFullscreen");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAllowsPictureInPictureMediaPlaybackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowsPictureInPictureMediaPlaybackConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowsPictureInPictureMediaPlaybackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowsPictureInPictureMediaPlayback(allowsPictureInPictureMediaPlaybackConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAllowsPictureInPictureMediaPlayback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAllowsPictureInPictureMediaPlaybackBody>(*lexicalGlobalObject, *callFrame, "setAllowsPictureInPictureMediaPlayback");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAlternateFullScreenControlDesignEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto alternateFullScreenControlDesignEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (alternateFullScreenControlDesignEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAlternateFullScreenControlDesignEnabled(alternateFullScreenControlDesignEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAlternateFullScreenControlDesignEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAlternateFullScreenControlDesignEnabledBody>(*lexicalGlobalObject, *callFrame, "setAlternateFullScreenControlDesignEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAltitudeAngleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto altitudeAngleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (altitudeAngleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAltitudeAngleEnabled(altitudeAngleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAltitudeAngleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAltitudeAngleEnabledBody>(*lexicalGlobalObject, *callFrame, "setAltitudeAngleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAlwaysAllowLocalWebarchiveBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto alwaysAllowLocalWebarchiveConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (alwaysAllowLocalWebarchiveConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAlwaysAllowLocalWebarchive(alwaysAllowLocalWebarchiveConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAlwaysAllowLocalWebarchive, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAlwaysAllowLocalWebarchiveBody>(*lexicalGlobalObject, *callFrame, "setAlwaysAllowLocalWebarchive");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageAsyncDecodingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto animatedImageAsyncDecodingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (animatedImageAsyncDecodingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAnimatedImageAsyncDecodingEnabled(animatedImageAsyncDecodingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageAsyncDecodingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageAsyncDecodingEnabledBody>(*lexicalGlobalObject, *callFrame, "setAnimatedImageAsyncDecodingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageDebugCanvasDrawingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto animatedImageDebugCanvasDrawingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (animatedImageDebugCanvasDrawingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAnimatedImageDebugCanvasDrawingEnabled(animatedImageDebugCanvasDrawingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageDebugCanvasDrawingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAnimatedImageDebugCanvasDrawingEnabledBody>(*lexicalGlobalObject, *callFrame, "setAnimatedImageDebugCanvasDrawingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAppBadgeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto appBadgeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (appBadgeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAppBadgeEnabled(appBadgeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAppBadgeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAppBadgeEnabledBody>(*lexicalGlobalObject, *callFrame, "setAppBadgeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAppHighlightsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto appHighlightsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (appHighlightsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAppHighlightsEnabled(appHighlightsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAppHighlightsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAppHighlightsEnabledBody>(*lexicalGlobalObject, *callFrame, "setAppHighlightsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAppleMailPaginationQuirkEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto appleMailPaginationQuirkEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (appleMailPaginationQuirkEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAppleMailPaginationQuirkEnabled(appleMailPaginationQuirkEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAppleMailPaginationQuirkEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAppleMailPaginationQuirkEnabledBody>(*lexicalGlobalObject, *callFrame, "setAppleMailPaginationQuirkEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setApplePayCapabilityDisclosureAllowedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto applePayCapabilityDisclosureAllowedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (applePayCapabilityDisclosureAllowedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setApplePayCapabilityDisclosureAllowed(applePayCapabilityDisclosureAllowedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setApplePayCapabilityDisclosureAllowed, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setApplePayCapabilityDisclosureAllowedBody>(*lexicalGlobalObject, *callFrame, "setApplePayCapabilityDisclosureAllowed");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setApplePayEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto applePayEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (applePayEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setApplePayEnabled(applePayEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setApplePayEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setApplePayEnabledBody>(*lexicalGlobalObject, *callFrame, "setApplePayEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAsyncClipboardAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto asyncClipboardAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (asyncClipboardAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAsyncClipboardAPIEnabled(asyncClipboardAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsyncClipboardAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAsyncClipboardAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setAsyncClipboardAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAsyncFrameScrollingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto asyncFrameScrollingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (asyncFrameScrollingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAsyncFrameScrollingEnabled(asyncFrameScrollingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsyncFrameScrollingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAsyncFrameScrollingEnabledBody>(*lexicalGlobalObject, *callFrame, "setAsyncFrameScrollingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAsyncOverflowScrollingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto asyncOverflowScrollingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (asyncOverflowScrollingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAsyncOverflowScrollingEnabled(asyncOverflowScrollingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsyncOverflowScrollingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAsyncOverflowScrollingEnabledBody>(*lexicalGlobalObject, *callFrame, "setAsyncOverflowScrollingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAsynchronousSpellCheckingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto asynchronousSpellCheckingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (asynchronousSpellCheckingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAsynchronousSpellCheckingEnabled(asynchronousSpellCheckingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAsynchronousSpellCheckingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAsynchronousSpellCheckingEnabledBody>(*lexicalGlobalObject, *callFrame, "setAsynchronousSpellCheckingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAttachmentWideLayoutEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto attachmentWideLayoutEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (attachmentWideLayoutEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAttachmentWideLayoutEnabled(attachmentWideLayoutEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAttachmentWideLayoutEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAttachmentWideLayoutEnabledBody>(*lexicalGlobalObject, *callFrame, "setAttachmentWideLayoutEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAudioControlsScaleWithPageZoomBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto audioControlsScaleWithPageZoomConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (audioControlsScaleWithPageZoomConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAudioControlsScaleWithPageZoom(audioControlsScaleWithPageZoomConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAudioControlsScaleWithPageZoom, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAudioControlsScaleWithPageZoomBody>(*lexicalGlobalObject, *callFrame, "setAudioControlsScaleWithPageZoom");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAudioDescriptionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto audioDescriptionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (audioDescriptionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAudioDescriptionsEnabled(audioDescriptionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAudioDescriptionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAudioDescriptionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setAudioDescriptionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAuthorAndUserStylesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto authorAndUserStylesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (authorAndUserStylesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAuthorAndUserStylesEnabled(authorAndUserStylesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAuthorAndUserStylesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAuthorAndUserStylesEnabledBody>(*lexicalGlobalObject, *callFrame, "setAuthorAndUserStylesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth(automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthBody>(*lexicalGlobalObject, *callFrame, "setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAutoscrollForDragAndDropEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto autoscrollForDragAndDropEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (autoscrollForDragAndDropEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAutoscrollForDragAndDropEnabled(autoscrollForDragAndDropEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAutoscrollForDragAndDropEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAutoscrollForDragAndDropEnabledBody>(*lexicalGlobalObject, *callFrame, "setAutoscrollForDragAndDropEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAuxclickEventEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto auxclickEventEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (auxclickEventEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAuxclickEventEnabled(auxclickEventEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAuxclickEventEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAuxclickEventEnabledBody>(*lexicalGlobalObject, *callFrame, "setAuxclickEventEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setAzimuthAngleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto azimuthAngleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (azimuthAngleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAzimuthAngleEnabled(azimuthAngleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setAzimuthAngleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setAzimuthAngleEnabledBody>(*lexicalGlobalObject, *callFrame, "setAzimuthAngleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBackgroundFetchAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto backgroundFetchAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (backgroundFetchAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBackgroundFetchAPIEnabled(backgroundFetchAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackgroundFetchAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBackgroundFetchAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setBackgroundFetchAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBackgroundShouldExtendBeyondPageBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto backgroundShouldExtendBeyondPageConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (backgroundShouldExtendBeyondPageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBackgroundShouldExtendBeyondPage(backgroundShouldExtendBeyondPageConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackgroundShouldExtendBeyondPage, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBackgroundShouldExtendBeyondPageBody>(*lexicalGlobalObject, *callFrame, "setBackgroundShouldExtendBeyondPage");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBackgroundWebContentRunningBoardThrottlingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto backgroundWebContentRunningBoardThrottlingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (backgroundWebContentRunningBoardThrottlingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBackgroundWebContentRunningBoardThrottlingEnabled(backgroundWebContentRunningBoardThrottlingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackgroundWebContentRunningBoardThrottlingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBackgroundWebContentRunningBoardThrottlingEnabledBody>(*lexicalGlobalObject, *callFrame, "setBackgroundWebContentRunningBoardThrottlingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBackspaceKeyNavigationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto backspaceKeyNavigationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (backspaceKeyNavigationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBackspaceKeyNavigationEnabled(backspaceKeyNavigationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBackspaceKeyNavigationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBackspaceKeyNavigationEnabledBody>(*lexicalGlobalObject, *callFrame, "setBackspaceKeyNavigationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBeaconAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto beaconAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (beaconAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBeaconAPIEnabled(beaconAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBeaconAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBeaconAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setBeaconAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBidiContentAwarePasteEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto bidiContentAwarePasteEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (bidiContentAwarePasteEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBidiContentAwarePasteEnabled(bidiContentAwarePasteEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBidiContentAwarePasteEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBidiContentAwarePasteEnabledBody>(*lexicalGlobalObject, *callFrame, "setBidiContentAwarePasteEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBlobFileAccessEnforcementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto blobFileAccessEnforcementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (blobFileAccessEnforcementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBlobFileAccessEnforcementEnabled(blobFileAccessEnforcementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBlobFileAccessEnforcementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBlobFileAccessEnforcementEnabledBody>(*lexicalGlobalObject, *callFrame, "setBlobFileAccessEnforcementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBlockMediaLayerRehostingInWebContentProcessBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto blockMediaLayerRehostingInWebContentProcessConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (blockMediaLayerRehostingInWebContentProcessConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBlockMediaLayerRehostingInWebContentProcess(blockMediaLayerRehostingInWebContentProcessConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBlockMediaLayerRehostingInWebContentProcess, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBlockMediaLayerRehostingInWebContentProcessBody>(*lexicalGlobalObject, *callFrame, "setBlockMediaLayerRehostingInWebContentProcess");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setBroadcastChannelEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto broadcastChannelEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (broadcastChannelEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setBroadcastChannelEnabled(broadcastChannelEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setBroadcastChannelEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setBroadcastChannelEnabledBody>(*lexicalGlobalObject, *callFrame, "setBroadcastChannelEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCacheAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cacheAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cacheAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCacheAPIEnabled(cacheAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCacheAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCacheAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setCacheAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCanvasColorSpaceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto canvasColorSpaceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (canvasColorSpaceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCanvasColorSpaceEnabled(canvasColorSpaceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasColorSpaceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCanvasColorSpaceEnabledBody>(*lexicalGlobalObject, *callFrame, "setCanvasColorSpaceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCanvasFiltersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto canvasFiltersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (canvasFiltersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCanvasFiltersEnabled(canvasFiltersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasFiltersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCanvasFiltersEnabledBody>(*lexicalGlobalObject, *callFrame, "setCanvasFiltersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCanvasFingerprintingQuirkEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto canvasFingerprintingQuirkEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (canvasFingerprintingQuirkEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCanvasFingerprintingQuirkEnabled(canvasFingerprintingQuirkEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasFingerprintingQuirkEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCanvasFingerprintingQuirkEnabledBody>(*lexicalGlobalObject, *callFrame, "setCanvasFingerprintingQuirkEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCanvasLayersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto canvasLayersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (canvasLayersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCanvasLayersEnabled(canvasLayersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasLayersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCanvasLayersEnabledBody>(*lexicalGlobalObject, *callFrame, "setCanvasLayersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCanvasPixelFormatEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto canvasPixelFormatEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (canvasPixelFormatEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCanvasPixelFormatEnabled(canvasPixelFormatEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasPixelFormatEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCanvasPixelFormatEnabledBody>(*lexicalGlobalObject, *callFrame, "setCanvasPixelFormatEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCanvasUsesAcceleratedDrawingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto canvasUsesAcceleratedDrawingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (canvasUsesAcceleratedDrawingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCanvasUsesAcceleratedDrawing(canvasUsesAcceleratedDrawingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCanvasUsesAcceleratedDrawing, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCanvasUsesAcceleratedDrawingBody>(*lexicalGlobalObject, *callFrame, "setCanvasUsesAcceleratedDrawing");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCaretBrowsingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto caretBrowsingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (caretBrowsingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCaretBrowsingEnabled(caretBrowsingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCaretBrowsingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCaretBrowsingEnabledBody>(*lexicalGlobalObject, *callFrame, "setCaretBrowsingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCaretPositionFromPointEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto caretPositionFromPointEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (caretPositionFromPointEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCaretPositionFromPointEnabled(caretPositionFromPointEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCaretPositionFromPointEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCaretPositionFromPointEnabledBody>(*lexicalGlobalObject, *callFrame, "setCaretPositionFromPointEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setChildProcessDebuggabilityEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto childProcessDebuggabilityEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (childProcessDebuggabilityEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setChildProcessDebuggabilityEnabled(childProcessDebuggabilityEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setChildProcessDebuggabilityEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setChildProcessDebuggabilityEnabledBody>(*lexicalGlobalObject, *callFrame, "setChildProcessDebuggabilityEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataExecutionContextsSupportEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto clearSiteDataExecutionContextsSupportEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (clearSiteDataExecutionContextsSupportEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setClearSiteDataExecutionContextsSupportEnabled(clearSiteDataExecutionContextsSupportEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataExecutionContextsSupportEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataExecutionContextsSupportEnabledBody>(*lexicalGlobalObject, *callFrame, "setClearSiteDataExecutionContextsSupportEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataHTTPHeaderEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto clearSiteDataHTTPHeaderEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (clearSiteDataHTTPHeaderEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setClearSiteDataHTTPHeaderEnabled(clearSiteDataHTTPHeaderEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataHTTPHeaderEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setClearSiteDataHTTPHeaderEnabledBody>(*lexicalGlobalObject, *callFrame, "setClearSiteDataHTTPHeaderEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setClientCoordinatesRelativeToLayoutViewportBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto clientCoordinatesRelativeToLayoutViewportConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (clientCoordinatesRelativeToLayoutViewportConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setClientCoordinatesRelativeToLayoutViewport(clientCoordinatesRelativeToLayoutViewportConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setClientCoordinatesRelativeToLayoutViewport, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setClientCoordinatesRelativeToLayoutViewportBody>(*lexicalGlobalObject, *callFrame, "setClientCoordinatesRelativeToLayoutViewport");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCloseWatcherEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto closeWatcherEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (closeWatcherEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCloseWatcherEnabled(closeWatcherEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCloseWatcherEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCloseWatcherEnabledBody>(*lexicalGlobalObject, *callFrame, "setCloseWatcherEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setColorFilterEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto colorFilterEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (colorFilterEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setColorFilterEnabled(colorFilterEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setColorFilterEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setColorFilterEnabledBody>(*lexicalGlobalObject, *callFrame, "setColorFilterEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCommandAttributesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto commandAttributesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (commandAttributesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCommandAttributesEnabled(commandAttributesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCommandAttributesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCommandAttributesEnabledBody>(*lexicalGlobalObject, *callFrame, "setCommandAttributesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCompressionStreamEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto compressionStreamEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (compressionStreamEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCompressionStreamEnabled(compressionStreamEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCompressionStreamEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCompressionStreamEnabledBody>(*lexicalGlobalObject, *callFrame, "setCompressionStreamEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setContactPickerAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto contactPickerAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (contactPickerAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setContactPickerAPIEnabled(contactPickerAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContactPickerAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setContactPickerAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setContactPickerAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setContentChangeObserverEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto contentChangeObserverEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (contentChangeObserverEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setContentChangeObserverEnabled(contentChangeObserverEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContentChangeObserverEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setContentChangeObserverEnabledBody>(*lexicalGlobalObject, *callFrame, "setContentChangeObserverEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setContentDispositionAttachmentSandboxEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto contentDispositionAttachmentSandboxEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (contentDispositionAttachmentSandboxEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setContentDispositionAttachmentSandboxEnabled(contentDispositionAttachmentSandboxEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContentDispositionAttachmentSandboxEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setContentDispositionAttachmentSandboxEnabledBody>(*lexicalGlobalObject, *callFrame, "setContentDispositionAttachmentSandboxEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setContentInsetBackgroundFillEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto contentInsetBackgroundFillEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (contentInsetBackgroundFillEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setContentInsetBackgroundFillEnabled(contentInsetBackgroundFillEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContentInsetBackgroundFillEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setContentInsetBackgroundFillEnabledBody>(*lexicalGlobalObject, *callFrame, "setContentInsetBackgroundFillEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setContextMenuQRCodeDetectionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto contextMenuQRCodeDetectionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (contextMenuQRCodeDetectionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setContextMenuQRCodeDetectionEnabled(contextMenuQRCodeDetectionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setContextMenuQRCodeDetectionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setContextMenuQRCodeDetectionEnabledBody>(*lexicalGlobalObject, *callFrame, "setContextMenuQRCodeDetectionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCookieConsentAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cookieConsentAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cookieConsentAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCookieConsentAPIEnabled(cookieConsentAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieConsentAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCookieConsentAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setCookieConsentAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCookieEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cookieEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cookieEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCookieEnabled(cookieEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCookieEnabledBody>(*lexicalGlobalObject, *callFrame, "setCookieEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cookieStoreAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cookieStoreAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCookieStoreAPIEnabled(cookieStoreAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setCookieStoreAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIExtendedAttributesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cookieStoreAPIExtendedAttributesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cookieStoreAPIExtendedAttributesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCookieStoreAPIExtendedAttributesEnabled(cookieStoreAPIExtendedAttributesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIExtendedAttributesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreAPIExtendedAttributesEnabledBody>(*lexicalGlobalObject, *callFrame, "setCookieStoreAPIExtendedAttributesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreManagerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cookieStoreManagerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cookieStoreManagerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCookieStoreManagerEnabled(cookieStoreManagerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreManagerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCookieStoreManagerEnabledBody>(*lexicalGlobalObject, *callFrame, "setCookieStoreManagerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCoreMathMLEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto coreMathMLEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (coreMathMLEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCoreMathMLEnabled(coreMathMLEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCoreMathMLEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCoreMathMLEnabledBody>(*lexicalGlobalObject, *callFrame, "setCoreMathMLEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCrossDocumentViewTransitionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto crossDocumentViewTransitionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (crossDocumentViewTransitionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCrossDocumentViewTransitionsEnabled(crossDocumentViewTransitionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossDocumentViewTransitionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCrossDocumentViewTransitionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setCrossDocumentViewTransitionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginCheckInGetMatchedCSSRulesDisabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto crossOriginCheckInGetMatchedCSSRulesDisabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (crossOriginCheckInGetMatchedCSSRulesDisabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCrossOriginCheckInGetMatchedCSSRulesDisabled(crossOriginCheckInGetMatchedCSSRulesDisabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginCheckInGetMatchedCSSRulesDisabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginCheckInGetMatchedCSSRulesDisabledBody>(*lexicalGlobalObject, *callFrame, "setCrossOriginCheckInGetMatchedCSSRulesDisabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginEmbedderPolicyEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto crossOriginEmbedderPolicyEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (crossOriginEmbedderPolicyEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCrossOriginEmbedderPolicyEnabled(crossOriginEmbedderPolicyEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginEmbedderPolicyEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginEmbedderPolicyEnabledBody>(*lexicalGlobalObject, *callFrame, "setCrossOriginEmbedderPolicyEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginOpenerPolicyEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto crossOriginOpenerPolicyEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (crossOriginOpenerPolicyEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCrossOriginOpenerPolicyEnabled(crossOriginOpenerPolicyEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginOpenerPolicyEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCrossOriginOpenerPolicyEnabledBody>(*lexicalGlobalObject, *callFrame, "setCrossOriginOpenerPolicyEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSS3DTransformBackfaceVisibilityInteroperabilityEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto css3DTransformBackfaceVisibilityInteroperabilityEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (css3DTransformBackfaceVisibilityInteroperabilityEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled(css3DTransformBackfaceVisibilityInteroperabilityEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSS3DTransformBackfaceVisibilityInteroperabilityEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssAnchorPositioningEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssAnchorPositioningEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSAnchorPositioningEnabled(cssAnchorPositioningEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSAnchorPositioningEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningPositionVisibilityEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssAnchorPositioningPositionVisibilityEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssAnchorPositioningPositionVisibilityEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSAnchorPositioningPositionVisibilityEnabled(cssAnchorPositioningPositionVisibilityEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningPositionVisibilityEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSAnchorPositioningPositionVisibilityEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSAnchorPositioningPositionVisibilityEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSAppearanceBaseEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssAppearanceBaseEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssAppearanceBaseEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSAppearanceBaseEnabled(cssAppearanceBaseEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAppearanceBaseEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSAppearanceBaseEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSAppearanceBaseEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSAxisRelativePositionKeywordsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssAxisRelativePositionKeywordsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssAxisRelativePositionKeywordsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSAxisRelativePositionKeywordsEnabled(cssAxisRelativePositionKeywordsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSAxisRelativePositionKeywordsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSAxisRelativePositionKeywordsEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSAxisRelativePositionKeywordsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSBackgroundClipBorderAreaEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssBackgroundClipBorderAreaEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssBackgroundClipBorderAreaEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSBackgroundClipBorderAreaEnabled(cssBackgroundClipBorderAreaEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSBackgroundClipBorderAreaEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSBackgroundClipBorderAreaEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSBackgroundClipBorderAreaEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSColorLayersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssColorLayersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssColorLayersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSColorLayersEnabled(cssColorLayersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSColorLayersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSColorLayersEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSColorLayersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSConstrainedDynamicRangeLimitEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssConstrainedDynamicRangeLimitEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssConstrainedDynamicRangeLimitEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSConstrainedDynamicRangeLimitEnabled(cssConstrainedDynamicRangeLimitEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSConstrainedDynamicRangeLimitEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSConstrainedDynamicRangeLimitEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSConstrainedDynamicRangeLimitEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSContrastColorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssContrastColorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssContrastColorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSContrastColorEnabled(cssContrastColorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSContrastColorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSContrastColorEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSContrastColorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSCornerShapeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssCornerShapeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssCornerShapeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSCornerShapeEnabled(cssCornerShapeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSCornerShapeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSCornerShapeEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSCornerShapeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSCounterStyleAtRuleImageSymbolsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssCounterStyleAtRuleImageSymbolsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssCounterStyleAtRuleImageSymbolsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSCounterStyleAtRuleImageSymbolsEnabled(cssCounterStyleAtRuleImageSymbolsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSCounterStyleAtRuleImageSymbolsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSCounterStyleAtRuleImageSymbolsEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSCounterStyleAtRuleImageSymbolsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSDPropertyEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssDPropertyEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssDPropertyEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSDPropertyEnabled(cssDPropertyEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSDPropertyEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSDPropertyEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSDPropertyEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSDynamicRangeLimitMixEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssDynamicRangeLimitMixEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssDynamicRangeLimitMixEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSDynamicRangeLimitMixEnabled(cssDynamicRangeLimitMixEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSDynamicRangeLimitMixEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSDynamicRangeLimitMixEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSDynamicRangeLimitMixEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSFieldSizingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssFieldSizingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssFieldSizingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSFieldSizingEnabled(cssFieldSizingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSFieldSizingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSFieldSizingEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSFieldSizingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSFontVariantEmojiEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssFontVariantEmojiEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssFontVariantEmojiEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSFontVariantEmojiEnabled(cssFontVariantEmojiEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSFontVariantEmojiEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSFontVariantEmojiEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSFontVariantEmojiEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSInputSecurityEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssInputSecurityEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssInputSecurityEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSInputSecurityEnabled(cssInputSecurityEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSInputSecurityEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSInputSecurityEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSInputSecurityEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSLineClampEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssLineClampEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssLineClampEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSLineClampEnabled(cssLineClampEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSLineClampEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSLineClampEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSLineClampEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSLineFitEdgeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssLineFitEdgeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssLineFitEdgeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSLineFitEdgeEnabled(cssLineFitEdgeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSLineFitEdgeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSLineFitEdgeEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSLineFitEdgeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSPaintingAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssPaintingAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssPaintingAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSPaintingAPIEnabled(cssPaintingAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSPaintingAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSPaintingAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSPaintingAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSProgressFunctionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssProgressFunctionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssProgressFunctionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSProgressFunctionEnabled(cssProgressFunctionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSProgressFunctionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSProgressFunctionEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSProgressFunctionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSRandomFunctionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssRandomFunctionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssRandomFunctionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSRandomFunctionEnabled(cssRandomFunctionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRandomFunctionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSRandomFunctionEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSRandomFunctionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSRhythmicSizingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssRhythmicSizingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssRhythmicSizingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSRhythmicSizingEnabled(cssRhythmicSizingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRhythmicSizingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSRhythmicSizingEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSRhythmicSizingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyAlignEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssRubyAlignEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssRubyAlignEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSRubyAlignEnabled(cssRubyAlignEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyAlignEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyAlignEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSRubyAlignEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyOverhangEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssRubyOverhangEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssRubyOverhangEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSRubyOverhangEnabled(cssRubyOverhangEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyOverhangEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSRubyOverhangEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSRubyOverhangEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollAnchoringEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssScrollAnchoringEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssScrollAnchoringEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSScrollAnchoringEnabled(cssScrollAnchoringEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollAnchoringEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollAnchoringEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSScrollAnchoringEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarColorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssScrollbarColorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssScrollbarColorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSScrollbarColorEnabled(cssScrollbarColorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarColorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarColorEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSScrollbarColorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarGutterEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssScrollbarGutterEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssScrollbarGutterEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSScrollbarGutterEnabled(cssScrollbarGutterEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarGutterEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarGutterEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSScrollbarGutterEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarWidthEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssScrollbarWidthEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssScrollbarWidthEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSScrollbarWidthEnabled(cssScrollbarWidthEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarWidthEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSScrollbarWidthEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSScrollbarWidthEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSShapeFunctionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssShapeFunctionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssShapeFunctionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSShapeFunctionEnabled(cssShapeFunctionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSShapeFunctionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSShapeFunctionEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSShapeFunctionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTextAutospaceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTextAutospaceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTextAutospaceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTextAutospaceEnabled(cssTextAutospaceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextAutospaceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTextAutospaceEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTextAutospaceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTextBoxTrimEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTextBoxTrimEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTextBoxTrimEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTextBoxTrimEnabled(cssTextBoxTrimEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextBoxTrimEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTextBoxTrimEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTextBoxTrimEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTextGroupAlignEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTextGroupAlignEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTextGroupAlignEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTextGroupAlignEnabled(cssTextGroupAlignEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextGroupAlignEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTextGroupAlignEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTextGroupAlignEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTextJustifyEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTextJustifyEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTextJustifyEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTextJustifyEnabled(cssTextJustifyEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextJustifyEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTextJustifyEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTextJustifyEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTextSpacingTrimEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTextSpacingTrimEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTextSpacingTrimEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTextSpacingTrimEnabled(cssTextSpacingTrimEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextSpacingTrimEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTextSpacingTrimEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTextSpacingTrimEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTextUnderlinePositionLeftRightEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTextUnderlinePositionLeftRightEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTextUnderlinePositionLeftRightEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTextUnderlinePositionLeftRightEnabled(cssTextUnderlinePositionLeftRightEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextUnderlinePositionLeftRightEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTextUnderlinePositionLeftRightEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTextUnderlinePositionLeftRightEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTextWrapPrettyEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTextWrapPrettyEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTextWrapPrettyEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTextWrapPrettyEnabled(cssTextWrapPrettyEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTextWrapPrettyEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTextWrapPrettyEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTextWrapPrettyEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTransformStyleSeparatedEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTransformStyleSeparatedEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTransformStyleSeparatedEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTransformStyleSeparatedEnabled(cssTransformStyleSeparatedEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTransformStyleSeparatedEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTransformStyleSeparatedEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTransformStyleSeparatedEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTreeCountingFunctionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTreeCountingFunctionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTreeCountingFunctionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTreeCountingFunctionsEnabled(cssTreeCountingFunctionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTreeCountingFunctionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTreeCountingFunctionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTreeCountingFunctionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSTypedOMColorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssTypedOMColorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssTypedOMColorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSTypedOMColorEnabled(cssTypedOMColorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSTypedOMColorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSTypedOMColorEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSTypedOMColorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSURLIntegrityModifierEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssURLIntegrityModifierEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssURLIntegrityModifierEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSURLIntegrityModifierEnabled(cssURLIntegrityModifierEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSURLIntegrityModifierEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSURLIntegrityModifierEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSURLIntegrityModifierEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSURLModifiersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssURLModifiersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssURLModifiersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSURLModifiersEnabled(cssURLModifiersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSURLModifiersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSURLModifiersEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSURLModifiersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSUnprefixedBackdropFilterEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssUnprefixedBackdropFilterEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssUnprefixedBackdropFilterEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSUnprefixedBackdropFilterEnabled(cssUnprefixedBackdropFilterEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSUnprefixedBackdropFilterEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSUnprefixedBackdropFilterEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSUnprefixedBackdropFilterEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCSSWordBreakAutoPhraseEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cssWordBreakAutoPhraseEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (cssWordBreakAutoPhraseEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCSSWordBreakAutoPhraseEnabled(cssWordBreakAutoPhraseEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCSSWordBreakAutoPhraseEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCSSWordBreakAutoPhraseEnabledBody>(*lexicalGlobalObject, *callFrame, "setCSSWordBreakAutoPhraseEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setCursiveFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto cursiveFontFamilyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (cursiveFontFamilyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCursiveFontFamily(cursiveFontFamilyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setCursiveFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setCursiveFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setCursiveFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDataListElementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dataListElementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (dataListElementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDataListElementEnabled(dataListElementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDataListElementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDataListElementEnabledBody>(*lexicalGlobalObject, *callFrame, "setDataListElementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDataTransferItemsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dataTransferItemsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (dataTransferItemsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDataTransferItemsEnabled(dataTransferItemsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDataTransferItemsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDataTransferItemsEnabledBody>(*lexicalGlobalObject, *callFrame, "setDataTransferItemsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDateTimeInputsEditableComponentsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dateTimeInputsEditableComponentsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (dateTimeInputsEditableComponentsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDateTimeInputsEditableComponentsEnabled(dateTimeInputsEditableComponentsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDateTimeInputsEditableComponentsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDateTimeInputsEditableComponentsEnabledBody>(*lexicalGlobalObject, *callFrame, "setDateTimeInputsEditableComponentsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDeclarativeWebPushBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto declarativeWebPushConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (declarativeWebPushConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDeclarativeWebPush(declarativeWebPushConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeclarativeWebPush, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDeclarativeWebPushBody>(*lexicalGlobalObject, *callFrame, "setDeclarativeWebPush");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDefaultFixedFontSizeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto defaultFixedFontSizeConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (defaultFixedFontSizeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDefaultFixedFontSize(defaultFixedFontSizeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultFixedFontSize, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDefaultFixedFontSizeBody>(*lexicalGlobalObject, *callFrame, "setDefaultFixedFontSize");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDefaultFontSizeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto defaultFontSizeConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (defaultFontSizeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDefaultFontSize(defaultFontSizeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultFontSize, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDefaultFontSizeBody>(*lexicalGlobalObject, *callFrame, "setDefaultFontSize");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDefaultTextEncodingNameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto defaultTextEncodingNameConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (defaultTextEncodingNameConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDefaultTextEncodingName(defaultTextEncodingNameConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultTextEncodingName, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDefaultTextEncodingNameBody>(*lexicalGlobalObject, *callFrame, "setDefaultTextEncodingName");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDefaultVideoPosterURLBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto defaultVideoPosterURLConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (defaultVideoPosterURLConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDefaultVideoPosterURL(defaultVideoPosterURLConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDefaultVideoPosterURL, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDefaultVideoPosterURLBody>(*lexicalGlobalObject, *callFrame, "setDefaultVideoPosterURL");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDeprecationReportingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto deprecationReportingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (deprecationReportingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDeprecationReportingEnabled(deprecationReportingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeprecationReportingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDeprecationReportingEnabledBody>(*lexicalGlobalObject, *callFrame, "setDeprecationReportingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDetachableMediaSourceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto detachableMediaSourceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (detachableMediaSourceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDetachableMediaSourceEnabled(detachableMediaSourceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDetachableMediaSourceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDetachableMediaSourceEnabledBody>(*lexicalGlobalObject, *callFrame, "setDetachableMediaSourceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDetailsAutoExpandEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto detailsAutoExpandEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (detailsAutoExpandEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDetailsAutoExpandEnabled(detailsAutoExpandEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDetailsAutoExpandEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDetailsAutoExpandEnabledBody>(*lexicalGlobalObject, *callFrame, "setDetailsAutoExpandEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDeveloperExtrasEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto developerExtrasEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (developerExtrasEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDeveloperExtrasEnabled(developerExtrasEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeveloperExtrasEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDeveloperExtrasEnabledBody>(*lexicalGlobalObject, *callFrame, "setDeveloperExtrasEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDeviceHeightBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto deviceHeightConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (deviceHeightConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDeviceHeight(deviceHeightConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceHeight, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDeviceHeightBody>(*lexicalGlobalObject, *callFrame, "setDeviceHeight");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationEventEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto deviceOrientationEventEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (deviceOrientationEventEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDeviceOrientationEventEnabled(deviceOrientationEventEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationEventEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationEventEnabledBody>(*lexicalGlobalObject, *callFrame, "setDeviceOrientationEventEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationPermissionAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto deviceOrientationPermissionAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (deviceOrientationPermissionAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDeviceOrientationPermissionAPIEnabled(deviceOrientationPermissionAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationPermissionAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDeviceOrientationPermissionAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setDeviceOrientationPermissionAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDeviceWidthBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto deviceWidthConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (deviceWidthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDeviceWidth(deviceWidthConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDeviceWidth, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDeviceWidthBody>(*lexicalGlobalObject, *callFrame, "setDeviceWidth");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDevolvableWidgetsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto devolvableWidgetsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (devolvableWidgetsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDevolvableWidgetsEnabled(devolvableWidgetsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDevolvableWidgetsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDevolvableWidgetsEnabledBody>(*lexicalGlobalObject, *callFrame, "setDevolvableWidgetsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDiagnosticLoggingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto diagnosticLoggingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (diagnosticLoggingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDiagnosticLoggingEnabled(diagnosticLoggingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDiagnosticLoggingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDiagnosticLoggingEnabledBody>(*lexicalGlobalObject, *callFrame, "setDiagnosticLoggingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDigitalCredentialsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto digitalCredentialsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (digitalCredentialsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDigitalCredentialsEnabled(digitalCredentialsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDigitalCredentialsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDigitalCredentialsEnabledBody>(*lexicalGlobalObject, *callFrame, "setDigitalCredentialsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDirectoryUploadEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto directoryUploadEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (directoryUploadEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDirectoryUploadEnabled(directoryUploadEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDirectoryUploadEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDirectoryUploadEnabledBody>(*lexicalGlobalObject, *callFrame, "setDirectoryUploadEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDisabledAdaptationsMetaTagEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto disabledAdaptationsMetaTagEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (disabledAdaptationsMetaTagEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDisabledAdaptationsMetaTagEnabled(disabledAdaptationsMetaTagEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDisabledAdaptationsMetaTagEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDisabledAdaptationsMetaTagEnabledBody>(*lexicalGlobalObject, *callFrame, "setDisabledAdaptationsMetaTagEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto domAudioSessionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (domAudioSessionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDOMAudioSessionEnabled(domAudioSessionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionEnabledBody>(*lexicalGlobalObject, *callFrame, "setDOMAudioSessionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionFullEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto domAudioSessionFullEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (domAudioSessionFullEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDOMAudioSessionFullEnabled(domAudioSessionFullEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionFullEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDOMAudioSessionFullEnabledBody>(*lexicalGlobalObject, *callFrame, "setDOMAudioSessionFullEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAccessRequestsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto domPasteAccessRequestsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (domPasteAccessRequestsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDOMPasteAccessRequestsEnabled(domPasteAccessRequestsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAccessRequestsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAccessRequestsEnabledBody>(*lexicalGlobalObject, *callFrame, "setDOMPasteAccessRequestsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAllowedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto domPasteAllowedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (domPasteAllowedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDOMPasteAllowed(domPasteAllowedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAllowed, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDOMPasteAllowedBody>(*lexicalGlobalObject, *callFrame, "setDOMPasteAllowed");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDOMTestingAPIsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto domTestingAPIsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (domTestingAPIsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDOMTestingAPIsEnabled(domTestingAPIsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMTestingAPIsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDOMTestingAPIsEnabledBody>(*lexicalGlobalObject, *callFrame, "setDOMTestingAPIsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDOMTimersThrottlingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto domTimersThrottlingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (domTimersThrottlingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDOMTimersThrottlingEnabled(domTimersThrottlingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDOMTimersThrottlingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDOMTimersThrottlingEnabledBody>(*lexicalGlobalObject, *callFrame, "setDOMTimersThrottlingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDownloadAttributeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto downloadAttributeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (downloadAttributeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDownloadAttributeEnabled(downloadAttributeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDownloadAttributeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDownloadAttributeEnabledBody>(*lexicalGlobalObject, *callFrame, "setDownloadAttributeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setDynamicSiteInterventionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dynamicSiteInterventionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (dynamicSiteInterventionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDynamicSiteInterventionsEnabled(dynamicSiteInterventionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setDynamicSiteInterventionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setDynamicSiteInterventionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setDynamicSiteInterventionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setEmbedElementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto embedElementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (embedElementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEmbedElementEnabled(embedElementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEmbedElementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setEmbedElementEnabledBody>(*lexicalGlobalObject, *callFrame, "setEmbedElementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setEnableElementCurrentCSSZoomBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enableElementCurrentCSSZoomConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enableElementCurrentCSSZoomConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEnableElementCurrentCSSZoom(enableElementCurrentCSSZoomConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEnableElementCurrentCSSZoom, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setEnableElementCurrentCSSZoomBody>(*lexicalGlobalObject, *callFrame, "setEnableElementCurrentCSSZoom");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setEnableInheritURIQueryComponentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enableInheritURIQueryComponentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enableInheritURIQueryComponentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEnableInheritURIQueryComponent(enableInheritURIQueryComponentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEnableInheritURIQueryComponent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setEnableInheritURIQueryComponentBody>(*lexicalGlobalObject, *callFrame, "setEnableInheritURIQueryComponent");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setEncryptedMediaAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto encryptedMediaAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (encryptedMediaAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEncryptedMediaAPIEnabled(encryptedMediaAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEncryptedMediaAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setEncryptedMediaAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setEncryptedMediaAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setEnterKeyHintEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enterKeyHintEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enterKeyHintEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEnterKeyHintEnabled(enterKeyHintEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEnterKeyHintEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setEnterKeyHintEnabledBody>(*lexicalGlobalObject, *callFrame, "setEnterKeyHintEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setEventHandlerDrivenSmoothKeyboardScrollingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto eventHandlerDrivenSmoothKeyboardScrollingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (eventHandlerDrivenSmoothKeyboardScrollingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEventHandlerDrivenSmoothKeyboardScrollingEnabled(eventHandlerDrivenSmoothKeyboardScrollingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEventHandlerDrivenSmoothKeyboardScrollingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setEventHandlerDrivenSmoothKeyboardScrollingEnabledBody>(*lexicalGlobalObject, *callFrame, "setEventHandlerDrivenSmoothKeyboardScrollingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setEventTimingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto eventTimingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (eventTimingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEventTimingEnabled(eventTimingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setEventTimingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setEventTimingEnabledBody>(*lexicalGlobalObject, *callFrame, "setEventTimingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setExposeCaptureDevicesAfterCaptureEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto exposeCaptureDevicesAfterCaptureEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (exposeCaptureDevicesAfterCaptureEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setExposeCaptureDevicesAfterCaptureEnabled(exposeCaptureDevicesAfterCaptureEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeCaptureDevicesAfterCaptureEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setExposeCaptureDevicesAfterCaptureEnabledBody>(*lexicalGlobalObject, *callFrame, "setExposeCaptureDevicesAfterCaptureEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setExposeDefaultSpeakerAsSpecificDeviceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto exposeDefaultSpeakerAsSpecificDeviceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (exposeDefaultSpeakerAsSpecificDeviceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setExposeDefaultSpeakerAsSpecificDeviceEnabled(exposeDefaultSpeakerAsSpecificDeviceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeDefaultSpeakerAsSpecificDeviceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setExposeDefaultSpeakerAsSpecificDeviceEnabledBody>(*lexicalGlobalObject, *callFrame, "setExposeDefaultSpeakerAsSpecificDeviceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto exposeSpeakersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (exposeSpeakersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setExposeSpeakersEnabled(exposeSpeakersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersEnabledBody>(*lexicalGlobalObject, *callFrame, "setExposeSpeakersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersWithoutMicrophoneEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto exposeSpeakersWithoutMicrophoneEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (exposeSpeakersWithoutMicrophoneEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setExposeSpeakersWithoutMicrophoneEnabled(exposeSpeakersWithoutMicrophoneEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersWithoutMicrophoneEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setExposeSpeakersWithoutMicrophoneEnabledBody>(*lexicalGlobalObject, *callFrame, "setExposeSpeakersWithoutMicrophoneEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setExtendedAudioDescriptionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto extendedAudioDescriptionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (extendedAudioDescriptionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setExtendedAudioDescriptionsEnabled(extendedAudioDescriptionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setExtendedAudioDescriptionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setExtendedAudioDescriptionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setExtendedAudioDescriptionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFantasyFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fantasyFontFamilyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (fantasyFontFamilyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFantasyFontFamily(fantasyFontFamilyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFantasyFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFantasyFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setFantasyFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFileReaderAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fileReaderAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fileReaderAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFileReaderAPIEnabled(fileReaderAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFileReaderAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFileReaderAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setFileReaderAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFileSystemEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fileSystemEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fileSystemEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFileSystemEnabled(fileSystemEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFileSystemEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFileSystemEnabledBody>(*lexicalGlobalObject, *callFrame, "setFileSystemEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFileSystemWritableStreamEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fileSystemWritableStreamEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fileSystemWritableStreamEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFileSystemWritableStreamEnabled(fileSystemWritableStreamEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFileSystemWritableStreamEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFileSystemWritableStreamEnabledBody>(*lexicalGlobalObject, *callFrame, "setFileSystemWritableStreamEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFilterLinkDecorationByDefaultEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto filterLinkDecorationByDefaultEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (filterLinkDecorationByDefaultEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFilterLinkDecorationByDefaultEnabled(filterLinkDecorationByDefaultEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFilterLinkDecorationByDefaultEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFilterLinkDecorationByDefaultEnabledBody>(*lexicalGlobalObject, *callFrame, "setFilterLinkDecorationByDefaultEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFixedBackgroundsPaintRelativeToDocumentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fixedBackgroundsPaintRelativeToDocumentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fixedBackgroundsPaintRelativeToDocumentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFixedBackgroundsPaintRelativeToDocument(fixedBackgroundsPaintRelativeToDocumentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFixedBackgroundsPaintRelativeToDocument, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFixedBackgroundsPaintRelativeToDocumentBody>(*lexicalGlobalObject, *callFrame, "setFixedBackgroundsPaintRelativeToDocument");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFixedElementsLayoutRelativeToFrameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fixedElementsLayoutRelativeToFrameConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fixedElementsLayoutRelativeToFrameConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFixedElementsLayoutRelativeToFrame(fixedElementsLayoutRelativeToFrameConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFixedElementsLayoutRelativeToFrame, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFixedElementsLayoutRelativeToFrameBody>(*lexicalGlobalObject, *callFrame, "setFixedElementsLayoutRelativeToFrame");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFixedFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fixedFontFamilyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (fixedFontFamilyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFixedFontFamily(fixedFontFamilyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFixedFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFixedFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setFixedFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFlexFormattingContextIntegrationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto flexFormattingContextIntegrationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (flexFormattingContextIntegrationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFlexFormattingContextIntegrationEnabled(flexFormattingContextIntegrationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFlexFormattingContextIntegrationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFlexFormattingContextIntegrationEnabledBody>(*lexicalGlobalObject, *callFrame, "setFlexFormattingContextIntegrationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFontFallbackPrefersPictographsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fontFallbackPrefersPictographsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fontFallbackPrefersPictographsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFontFallbackPrefersPictographs(fontFallbackPrefersPictographsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFontFallbackPrefersPictographs, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFontFallbackPrefersPictographsBody>(*lexicalGlobalObject, *callFrame, "setFontFallbackPrefersPictographs");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setForceCompositingModeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto forceCompositingModeConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (forceCompositingModeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setForceCompositingMode(forceCompositingModeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceCompositingMode, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setForceCompositingModeBody>(*lexicalGlobalObject, *callFrame, "setForceCompositingMode");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setForceFTPDirectoryListingsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto forceFTPDirectoryListingsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (forceFTPDirectoryListingsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setForceFTPDirectoryListings(forceFTPDirectoryListingsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceFTPDirectoryListings, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setForceFTPDirectoryListingsBody>(*lexicalGlobalObject, *callFrame, "setForceFTPDirectoryListings");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setForceLockdownFontParserEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto forceLockdownFontParserEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (forceLockdownFontParserEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setForceLockdownFontParserEnabled(forceLockdownFontParserEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceLockdownFontParserEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setForceLockdownFontParserEnabledBody>(*lexicalGlobalObject, *callFrame, "setForceLockdownFontParserEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setForceWebGLUsesLowPowerBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto forceWebGLUsesLowPowerConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (forceWebGLUsesLowPowerConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setForceWebGLUsesLowPower(forceWebGLUsesLowPowerConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setForceWebGLUsesLowPower, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setForceWebGLUsesLowPowerBody>(*lexicalGlobalObject, *callFrame, "setForceWebGLUsesLowPower");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFormControlRefreshEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto formControlRefreshEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (formControlRefreshEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFormControlRefreshEnabled(formControlRefreshEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFormControlRefreshEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFormControlRefreshEnabledBody>(*lexicalGlobalObject, *callFrame, "setFormControlRefreshEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFTPDirectoryTemplatePathBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto ftpDirectoryTemplatePathConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (ftpDirectoryTemplatePathConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFTPDirectoryTemplatePath(ftpDirectoryTemplatePathConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFTPDirectoryTemplatePath, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFTPDirectoryTemplatePathBody>(*lexicalGlobalObject, *callFrame, "setFTPDirectoryTemplatePath");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFTPEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto ftpEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (ftpEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFTPEnabled(ftpEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFTPEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFTPEnabledBody>(*lexicalGlobalObject, *callFrame, "setFTPEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFullScreenEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fullScreenEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fullScreenEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFullScreenEnabled(fullScreenEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullScreenEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFullScreenEnabledBody>(*lexicalGlobalObject, *callFrame, "setFullScreenEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFullScreenKeyboardLockBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fullScreenKeyboardLockConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fullScreenKeyboardLockConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFullScreenKeyboardLock(fullScreenKeyboardLockConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullScreenKeyboardLock, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFullScreenKeyboardLockBody>(*lexicalGlobalObject, *callFrame, "setFullScreenKeyboardLock");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFullscreenRequirementForScreenOrientationLockingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fullscreenRequirementForScreenOrientationLockingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fullscreenRequirementForScreenOrientationLockingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFullscreenRequirementForScreenOrientationLockingEnabled(fullscreenRequirementForScreenOrientationLockingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullscreenRequirementForScreenOrientationLockingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFullscreenRequirementForScreenOrientationLockingEnabledBody>(*lexicalGlobalObject, *callFrame, "setFullscreenRequirementForScreenOrientationLockingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneAspectRatioLockingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fullscreenSceneAspectRatioLockingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fullscreenSceneAspectRatioLockingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFullscreenSceneAspectRatioLockingEnabled(fullscreenSceneAspectRatioLockingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneAspectRatioLockingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneAspectRatioLockingEnabledBody>(*lexicalGlobalObject, *callFrame, "setFullscreenSceneAspectRatioLockingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneDimmingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto fullscreenSceneDimmingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (fullscreenSceneDimmingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFullscreenSceneDimmingEnabled(fullscreenSceneDimmingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneDimmingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setFullscreenSceneDimmingEnabledBody>(*lexicalGlobalObject, *callFrame, "setFullscreenSceneDimmingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGamepadTriggerRumbleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto gamepadTriggerRumbleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (gamepadTriggerRumbleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGamepadTriggerRumbleEnabled(gamepadTriggerRumbleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGamepadTriggerRumbleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGamepadTriggerRumbleEnabledBody>(*lexicalGlobalObject, *callFrame, "setGamepadTriggerRumbleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGamepadVibrationActuatorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto gamepadVibrationActuatorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (gamepadVibrationActuatorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGamepadVibrationActuatorEnabled(gamepadVibrationActuatorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGamepadVibrationActuatorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGamepadVibrationActuatorEnabledBody>(*lexicalGlobalObject, *callFrame, "setGamepadVibrationActuatorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGamepadsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto gamepadsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (gamepadsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGamepadsEnabled(gamepadsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGamepadsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGamepadsEnabledBody>(*lexicalGlobalObject, *callFrame, "setGamepadsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGenericCueAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto genericCueAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (genericCueAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGenericCueAPIEnabled(genericCueAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGenericCueAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGenericCueAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setGenericCueAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGeolocationAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto geolocationAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (geolocationAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGeolocationAPIEnabled(geolocationAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGeolocationAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGeolocationAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setGeolocationAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGeolocationFloorLevelEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto geolocationFloorLevelEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (geolocationFloorLevelEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGeolocationFloorLevelEnabled(geolocationFloorLevelEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGeolocationFloorLevelEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGeolocationFloorLevelEnabledBody>(*lexicalGlobalObject, *callFrame, "setGeolocationFloorLevelEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGetCoalescedEventsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto getCoalescedEventsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (getCoalescedEventsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGetCoalescedEventsEnabled(getCoalescedEventsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGetCoalescedEventsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGetCoalescedEventsEnabledBody>(*lexicalGlobalObject, *callFrame, "setGetCoalescedEventsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGetPredictedEventsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto getPredictedEventsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (getPredictedEventsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGetPredictedEventsEnabled(getPredictedEventsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGetPredictedEventsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGetPredictedEventsEnabledBody>(*lexicalGlobalObject, *callFrame, "setGetPredictedEventsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGetUserMediaRequiresFocusBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto getUserMediaRequiresFocusConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (getUserMediaRequiresFocusConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGetUserMediaRequiresFocus(getUserMediaRequiresFocusConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGetUserMediaRequiresFocus, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGetUserMediaRequiresFocusBody>(*lexicalGlobalObject, *callFrame, "setGetUserMediaRequiresFocus");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGoogleAntiFlickerOptimizationQuirkEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto googleAntiFlickerOptimizationQuirkEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (googleAntiFlickerOptimizationQuirkEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGoogleAntiFlickerOptimizationQuirkEnabled(googleAntiFlickerOptimizationQuirkEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGoogleAntiFlickerOptimizationQuirkEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGoogleAntiFlickerOptimizationQuirkEnabledBody>(*lexicalGlobalObject, *callFrame, "setGoogleAntiFlickerOptimizationQuirkEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setGraphicsContextFiltersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto graphicsContextFiltersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (graphicsContextFiltersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setGraphicsContextFiltersEnabled(graphicsContextFiltersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setGraphicsContextFiltersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setGraphicsContextFiltersEnabledBody>(*lexicalGlobalObject, *callFrame, "setGraphicsContextFiltersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageCSSAnimationSuspensionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto hiddenPageCSSAnimationSuspensionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (hiddenPageCSSAnimationSuspensionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHiddenPageCSSAnimationSuspensionEnabled(hiddenPageCSSAnimationSuspensionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageCSSAnimationSuspensionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageCSSAnimationSuspensionEnabledBody>(*lexicalGlobalObject, *callFrame, "setHiddenPageCSSAnimationSuspensionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingAutoIncreasesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto hiddenPageDOMTimerThrottlingAutoIncreasesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (hiddenPageDOMTimerThrottlingAutoIncreasesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHiddenPageDOMTimerThrottlingAutoIncreases(hiddenPageDOMTimerThrottlingAutoIncreasesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingAutoIncreases, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingAutoIncreasesBody>(*lexicalGlobalObject, *callFrame, "setHiddenPageDOMTimerThrottlingAutoIncreases");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto hiddenPageDOMTimerThrottlingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (hiddenPageDOMTimerThrottlingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHiddenPageDOMTimerThrottlingEnabled(hiddenPageDOMTimerThrottlingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHiddenPageDOMTimerThrottlingEnabledBody>(*lexicalGlobalObject, *callFrame, "setHiddenPageDOMTimerThrottlingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHiddenUntilFoundEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto hiddenUntilFoundEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (hiddenUntilFoundEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHiddenUntilFoundEnabled(hiddenUntilFoundEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHiddenUntilFoundEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHiddenUntilFoundEnabledBody>(*lexicalGlobalObject, *callFrame, "setHiddenUntilFoundEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHostedBlurMaterialInMediaControlsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto hostedBlurMaterialInMediaControlsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (hostedBlurMaterialInMediaControlsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHostedBlurMaterialInMediaControlsEnabled(hostedBlurMaterialInMediaControlsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHostedBlurMaterialInMediaControlsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHostedBlurMaterialInMediaControlsEnabledBody>(*lexicalGlobalObject, *callFrame, "setHostedBlurMaterialInMediaControlsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHTMLLegacyAttributeValueSerializationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto htmlLegacyAttributeValueSerializationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (htmlLegacyAttributeValueSerializationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHTMLLegacyAttributeValueSerializationEnabled(htmlLegacyAttributeValueSerializationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHTMLLegacyAttributeValueSerializationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHTMLLegacyAttributeValueSerializationEnabledBody>(*lexicalGlobalObject, *callFrame, "setHTMLLegacyAttributeValueSerializationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHttpEquivEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto httpEquivEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (httpEquivEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHttpEquivEnabled(httpEquivEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHttpEquivEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHttpEquivEnabledBody>(*lexicalGlobalObject, *callFrame, "setHttpEquivEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setHttpsByDefaultBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto httpsByDefaultConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (httpsByDefaultConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setHttpsByDefault(httpsByDefaultConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setHttpsByDefault, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setHttpsByDefaultBody>(*lexicalGlobalObject, *callFrame, "setHttpsByDefault");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto iFrameResourceMonitoringEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (iFrameResourceMonitoringEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIFrameResourceMonitoringEnabled(iFrameResourceMonitoringEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringEnabledBody>(*lexicalGlobalObject, *callFrame, "setIFrameResourceMonitoringEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringTestingSettingsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto iFrameResourceMonitoringTestingSettingsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (iFrameResourceMonitoringTestingSettingsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIFrameResourceMonitoringTestingSettingsEnabled(iFrameResourceMonitoringTestingSettingsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringTestingSettingsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIFrameResourceMonitoringTestingSettingsEnabledBody>(*lexicalGlobalObject, *callFrame, "setIFrameResourceMonitoringTestingSettingsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIOSurfaceLosslessCompressionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto iOSurfaceLosslessCompressionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (iOSurfaceLosslessCompressionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIOSurfaceLosslessCompressionEnabled(iOSurfaceLosslessCompressionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIOSurfaceLosslessCompressionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIOSurfaceLosslessCompressionEnabledBody>(*lexicalGlobalObject, *callFrame, "setIOSurfaceLosslessCompressionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIPAddressAndLocalhostMixedContentUpgradeTestingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto iPAddressAndLocalhostMixedContentUpgradeTestingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (iPAddressAndLocalhostMixedContentUpgradeTestingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled(iPAddressAndLocalhostMixedContentUpgradeTestingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIPAddressAndLocalhostMixedContentUpgradeTestingEnabledBody>(*lexicalGlobalObject, *callFrame, "setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setICECandidateFilteringEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto iceCandidateFilteringEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (iceCandidateFilteringEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setICECandidateFilteringEnabled(iceCandidateFilteringEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setICECandidateFilteringEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setICECandidateFilteringEnabledBody>(*lexicalGlobalObject, *callFrame, "setICECandidateFilteringEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIdempotentModeAutosizingOnlyHonorsPercentagesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto idempotentModeAutosizingOnlyHonorsPercentagesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (idempotentModeAutosizingOnlyHonorsPercentagesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIdempotentModeAutosizingOnlyHonorsPercentages(idempotentModeAutosizingOnlyHonorsPercentagesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIdempotentModeAutosizingOnlyHonorsPercentages, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIdempotentModeAutosizingOnlyHonorsPercentagesBody>(*lexicalGlobalObject, *callFrame, "setIdempotentModeAutosizingOnlyHonorsPercentages");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIgnoreIframeEmbeddingProtectionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto ignoreIframeEmbeddingProtectionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (ignoreIframeEmbeddingProtectionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIgnoreIframeEmbeddingProtectionsEnabled(ignoreIframeEmbeddingProtectionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIgnoreIframeEmbeddingProtectionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIgnoreIframeEmbeddingProtectionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setIgnoreIframeEmbeddingProtectionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setImageAnalysisDuringFindInPageEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageAnalysisDuringFindInPageEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (imageAnalysisDuringFindInPageEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setImageAnalysisDuringFindInPageEnabled(imageAnalysisDuringFindInPageEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageAnalysisDuringFindInPageEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setImageAnalysisDuringFindInPageEnabledBody>(*lexicalGlobalObject, *callFrame, "setImageAnalysisDuringFindInPageEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setImageAnimationControlEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageAnimationControlEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (imageAnimationControlEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setImageAnimationControlEnabled(imageAnimationControlEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageAnimationControlEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setImageAnimationControlEnabledBody>(*lexicalGlobalObject, *callFrame, "setImageAnimationControlEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setImageCaptureEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageCaptureEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (imageCaptureEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setImageCaptureEnabled(imageCaptureEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageCaptureEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setImageCaptureEnabledBody>(*lexicalGlobalObject, *callFrame, "setImageCaptureEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setImageControlsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageControlsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (imageControlsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setImageControlsEnabled(imageControlsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageControlsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setImageControlsEnabledBody>(*lexicalGlobalObject, *callFrame, "setImageControlsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setImageSubsamplingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageSubsamplingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (imageSubsamplingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setImageSubsamplingEnabled(imageSubsamplingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImageSubsamplingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setImageSubsamplingEnabledBody>(*lexicalGlobalObject, *callFrame, "setImageSubsamplingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setImagesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imagesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (imagesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setImagesEnabled(imagesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setImagesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setImagesEnabledBody>(*lexicalGlobalObject, *callFrame, "setImagesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInWindowFullscreenEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inWindowFullscreenEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inWindowFullscreenEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInWindowFullscreenEnabled(inWindowFullscreenEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInWindowFullscreenEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInWindowFullscreenEnabledBody>(*lexicalGlobalObject, *callFrame, "setInWindowFullscreenEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIncludeIgnoredInCoreAXTreeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto includeIgnoredInCoreAXTreeConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (includeIgnoredInCoreAXTreeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIncludeIgnoredInCoreAXTree(includeIgnoredInCoreAXTreeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncludeIgnoredInCoreAXTree, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIncludeIgnoredInCoreAXTreeBody>(*lexicalGlobalObject, *callFrame, "setIncludeIgnoredInCoreAXTree");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIncompleteImageBorderEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto incompleteImageBorderEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (incompleteImageBorderEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIncompleteImageBorderEnabled(incompleteImageBorderEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncompleteImageBorderEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIncompleteImageBorderEnabledBody>(*lexicalGlobalObject, *callFrame, "setIncompleteImageBorderEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIncrementalPDFLoadingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto incrementalPDFLoadingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (incrementalPDFLoadingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIncrementalPDFLoadingEnabled(incrementalPDFLoadingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncrementalPDFLoadingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIncrementalPDFLoadingEnabledBody>(*lexicalGlobalObject, *callFrame, "setIncrementalPDFLoadingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIncrementalRenderingSuppressionTimeoutInSecondsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto incrementalRenderingSuppressionTimeoutInSecondsConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (incrementalRenderingSuppressionTimeoutInSecondsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIncrementalRenderingSuppressionTimeoutInSeconds(incrementalRenderingSuppressionTimeoutInSecondsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIncrementalRenderingSuppressionTimeoutInSeconds, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIncrementalRenderingSuppressionTimeoutInSecondsBody>(*lexicalGlobalObject, *callFrame, "setIncrementalRenderingSuppressionTimeoutInSeconds");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIndexedDBAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto indexedDBAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (indexedDBAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIndexedDBAPIEnabled(indexedDBAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIndexedDBAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIndexedDBAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setIndexedDBAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInlineMediaPlaybackRequiresPlaysInlineAttributeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inlineMediaPlaybackRequiresPlaysInlineAttributeConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inlineMediaPlaybackRequiresPlaysInlineAttributeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInlineMediaPlaybackRequiresPlaysInlineAttribute(inlineMediaPlaybackRequiresPlaysInlineAttributeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInlineMediaPlaybackRequiresPlaysInlineAttribute, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInlineMediaPlaybackRequiresPlaysInlineAttributeBody>(*lexicalGlobalObject, *callFrame, "setInlineMediaPlaybackRequiresPlaysInlineAttribute");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputMethodUsesCorrectKeyEventOrderBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputMethodUsesCorrectKeyEventOrderConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputMethodUsesCorrectKeyEventOrderConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputMethodUsesCorrectKeyEventOrder(inputMethodUsesCorrectKeyEventOrderConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputMethodUsesCorrectKeyEventOrder, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputMethodUsesCorrectKeyEventOrderBody>(*lexicalGlobalObject, *callFrame, "setInputMethodUsesCorrectKeyEventOrder");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputTypeColorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputTypeColorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputTypeColorEnabled(inputTypeColorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnabledBody>(*lexicalGlobalObject, *callFrame, "setInputTypeColorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnhancementsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputTypeColorEnhancementsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputTypeColorEnhancementsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputTypeColorEnhancementsEnabled(inputTypeColorEnhancementsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnhancementsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputTypeColorEnhancementsEnabledBody>(*lexicalGlobalObject, *callFrame, "setInputTypeColorEnhancementsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputTypeDateEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputTypeDateEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputTypeDateEnabled(inputTypeDateEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateEnabledBody>(*lexicalGlobalObject, *callFrame, "setInputTypeDateEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateTimeLocalEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputTypeDateTimeLocalEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputTypeDateTimeLocalEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputTypeDateTimeLocalEnabled(inputTypeDateTimeLocalEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateTimeLocalEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputTypeDateTimeLocalEnabledBody>(*lexicalGlobalObject, *callFrame, "setInputTypeDateTimeLocalEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputTypeMonthEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputTypeMonthEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputTypeMonthEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputTypeMonthEnabled(inputTypeMonthEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeMonthEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputTypeMonthEnabledBody>(*lexicalGlobalObject, *callFrame, "setInputTypeMonthEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputTypeTimeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputTypeTimeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputTypeTimeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputTypeTimeEnabled(inputTypeTimeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeTimeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputTypeTimeEnabledBody>(*lexicalGlobalObject, *callFrame, "setInputTypeTimeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInputTypeWeekEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputTypeWeekEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inputTypeWeekEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInputTypeWeekEnabled(inputTypeWeekEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInputTypeWeekEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInputTypeWeekEnabledBody>(*lexicalGlobalObject, *callFrame, "setInputTypeWeekEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInspectorMaximumResourcesContentSizeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inspectorMaximumResourcesContentSizeConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (inspectorMaximumResourcesContentSizeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInspectorMaximumResourcesContentSize(inspectorMaximumResourcesContentSizeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInspectorMaximumResourcesContentSize, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInspectorMaximumResourcesContentSizeBody>(*lexicalGlobalObject, *callFrame, "setInspectorMaximumResourcesContentSize");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInspectorSupportsShowingCertificateBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inspectorSupportsShowingCertificateConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (inspectorSupportsShowingCertificateConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInspectorSupportsShowingCertificate(inspectorSupportsShowingCertificateConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInspectorSupportsShowingCertificate, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInspectorSupportsShowingCertificateBody>(*lexicalGlobalObject, *callFrame, "setInspectorSupportsShowingCertificate");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionInlinePaddingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto interactionRegionInlinePaddingConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (interactionRegionInlinePaddingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInteractionRegionInlinePadding(interactionRegionInlinePaddingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionInlinePadding, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionInlinePaddingBody>(*lexicalGlobalObject, *callFrame, "setInteractionRegionInlinePadding");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionMinimumCornerRadiusBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto interactionRegionMinimumCornerRadiusConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (interactionRegionMinimumCornerRadiusConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInteractionRegionMinimumCornerRadius(interactionRegionMinimumCornerRadiusConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionMinimumCornerRadius, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionMinimumCornerRadiusBody>(*lexicalGlobalObject, *callFrame, "setInteractionRegionMinimumCornerRadius");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto interactionRegionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (interactionRegionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInteractionRegionsEnabled(interactionRegionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInteractionRegionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setInteractionRegionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInteractiveFormValidationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto interactiveFormValidationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (interactiveFormValidationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInteractiveFormValidationEnabled(interactiveFormValidationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInteractiveFormValidationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInteractiveFormValidationEnabledBody>(*lexicalGlobalObject, *callFrame, "setInteractiveFormValidationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInterruptAudioOnPageVisibilityChangeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto interruptAudioOnPageVisibilityChangeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (interruptAudioOnPageVisibilityChangeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInterruptAudioOnPageVisibilityChangeEnabled(interruptAudioOnPageVisibilityChangeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInterruptAudioOnPageVisibilityChangeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInterruptAudioOnPageVisibilityChangeEnabledBody>(*lexicalGlobalObject, *callFrame, "setInterruptAudioOnPageVisibilityChangeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInterruptVideoOnPageVisibilityChangeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto interruptVideoOnPageVisibilityChangeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (interruptVideoOnPageVisibilityChangeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInterruptVideoOnPageVisibilityChangeEnabled(interruptVideoOnPageVisibilityChangeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInterruptVideoOnPageVisibilityChangeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInterruptVideoOnPageVisibilityChangeEnabledBody>(*lexicalGlobalObject, *callFrame, "setInterruptVideoOnPageVisibilityChangeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setInvisibleAutoplayNotPermittedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto invisibleAutoplayNotPermittedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (invisibleAutoplayNotPermittedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setInvisibleAutoplayNotPermitted(invisibleAutoplayNotPermittedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setInvisibleAutoplayNotPermitted, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setInvisibleAutoplayNotPermittedBody>(*lexicalGlobalObject, *callFrame, "setInvisibleAutoplayNotPermitted");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalDisabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isFirstPartyWebsiteDataRemovalDisabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isFirstPartyWebsiteDataRemovalDisabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsFirstPartyWebsiteDataRemovalDisabled(isFirstPartyWebsiteDataRemovalDisabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalDisabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalDisabledBody>(*lexicalGlobalObject, *callFrame, "setIsFirstPartyWebsiteDataRemovalDisabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled(isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalReproTestingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isFirstPartyWebsiteDataRemovalReproTestingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isFirstPartyWebsiteDataRemovalReproTestingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsFirstPartyWebsiteDataRemovalReproTestingEnabled(isFirstPartyWebsiteDataRemovalReproTestingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalReproTestingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsFirstPartyWebsiteDataRemovalReproTestingEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsFirstPartyWebsiteDataRemovalReproTestingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsPerActivityStateCPUUsageMeasurementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isPerActivityStateCPUUsageMeasurementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isPerActivityStateCPUUsageMeasurementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsPerActivityStateCPUUsageMeasurementEnabled(isPerActivityStateCPUUsageMeasurementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPerActivityStateCPUUsageMeasurementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsPerActivityStateCPUUsageMeasurementEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsPerActivityStateCPUUsageMeasurementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingCPUUsageMeasurementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isPostBackgroundingCPUUsageMeasurementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isPostBackgroundingCPUUsageMeasurementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsPostBackgroundingCPUUsageMeasurementEnabled(isPostBackgroundingCPUUsageMeasurementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingCPUUsageMeasurementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingCPUUsageMeasurementEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsPostBackgroundingCPUUsageMeasurementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingMemoryUsageMeasurementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isPostBackgroundingMemoryUsageMeasurementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isPostBackgroundingMemoryUsageMeasurementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsPostBackgroundingMemoryUsageMeasurementEnabled(isPostBackgroundingMemoryUsageMeasurementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingMemoryUsageMeasurementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsPostBackgroundingMemoryUsageMeasurementEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsPostBackgroundingMemoryUsageMeasurementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadCPUUsageMeasurementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isPostLoadCPUUsageMeasurementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isPostLoadCPUUsageMeasurementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsPostLoadCPUUsageMeasurementEnabled(isPostLoadCPUUsageMeasurementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadCPUUsageMeasurementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadCPUUsageMeasurementEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsPostLoadCPUUsageMeasurementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadMemoryUsageMeasurementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isPostLoadMemoryUsageMeasurementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isPostLoadMemoryUsageMeasurementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsPostLoadMemoryUsageMeasurementEnabled(isPostLoadMemoryUsageMeasurementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadMemoryUsageMeasurementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsPostLoadMemoryUsageMeasurementEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsPostLoadMemoryUsageMeasurementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsSameSiteStrictEnforcementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isSameSiteStrictEnforcementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isSameSiteStrictEnforcementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsSameSiteStrictEnforcementEnabled(isSameSiteStrictEnforcementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsSameSiteStrictEnforcementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsSameSiteStrictEnforcementEnabledBody>(*lexicalGlobalObject, *callFrame, "setIsSameSiteStrictEnforcementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setIsThirdPartyCookieBlockingDisabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isThirdPartyCookieBlockingDisabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isThirdPartyCookieBlockingDisabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setIsThirdPartyCookieBlockingDisabled(isThirdPartyCookieBlockingDisabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setIsThirdPartyCookieBlockingDisabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setIsThirdPartyCookieBlockingDisabledBody>(*lexicalGlobalObject, *callFrame, "setIsThirdPartyCookieBlockingDisabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setItpDebugModeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto itpDebugModeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (itpDebugModeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setItpDebugModeEnabled(itpDebugModeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setItpDebugModeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setItpDebugModeEnabledBody>(*lexicalGlobalObject, *callFrame, "setItpDebugModeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanAccessClipboardBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto javaScriptCanAccessClipboardConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (javaScriptCanAccessClipboardConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboardConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanAccessClipboard, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanAccessClipboardBody>(*lexicalGlobalObject, *callFrame, "setJavaScriptCanAccessClipboard");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanOpenWindowsAutomaticallyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto javaScriptCanOpenWindowsAutomaticallyConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (javaScriptCanOpenWindowsAutomaticallyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setJavaScriptCanOpenWindowsAutomatically(javaScriptCanOpenWindowsAutomaticallyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanOpenWindowsAutomatically, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setJavaScriptCanOpenWindowsAutomaticallyBody>(*lexicalGlobalObject, *callFrame, "setJavaScriptCanOpenWindowsAutomatically");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLangAttributeAwareFormControlUIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto langAttributeAwareFormControlUIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (langAttributeAwareFormControlUIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLangAttributeAwareFormControlUIEnabled(langAttributeAwareFormControlUIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLangAttributeAwareFormControlUIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLangAttributeAwareFormControlUIEnabledBody>(*lexicalGlobalObject, *callFrame, "setLangAttributeAwareFormControlUIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLargeImageAsyncDecodingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto largeImageAsyncDecodingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (largeImageAsyncDecodingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLargeImageAsyncDecodingEnabled(largeImageAsyncDecodingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLargeImageAsyncDecodingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLargeImageAsyncDecodingEnabledBody>(*lexicalGlobalObject, *callFrame, "setLargeImageAsyncDecodingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLayerBasedSVGEngineEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto layerBasedSVGEngineEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (layerBasedSVGEngineEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLayerBasedSVGEngineEnabled(layerBasedSVGEngineEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLayerBasedSVGEngineEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLayerBasedSVGEngineEnabledBody>(*lexicalGlobalObject, *callFrame, "setLayerBasedSVGEngineEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLayoutFallbackWidthBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto layoutFallbackWidthConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (layoutFallbackWidthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLayoutFallbackWidth(layoutFallbackWidthConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLayoutFallbackWidth, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLayoutFallbackWidthBody>(*lexicalGlobalObject, *callFrame, "setLayoutFallbackWidth");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLayoutViewportHeightExpansionFactorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto layoutViewportHeightExpansionFactorConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (layoutViewportHeightExpansionFactorConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLayoutViewportHeightExpansionFactor(layoutViewportHeightExpansionFactorConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLayoutViewportHeightExpansionFactor, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLayoutViewportHeightExpansionFactorBody>(*lexicalGlobalObject, *callFrame, "setLayoutViewportHeightExpansionFactor");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLazyIframeLoadingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto lazyIframeLoadingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (lazyIframeLoadingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLazyIframeLoadingEnabled(lazyIframeLoadingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLazyIframeLoadingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLazyIframeLoadingEnabledBody>(*lexicalGlobalObject, *callFrame, "setLazyIframeLoadingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLazyImageLoadingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto lazyImageLoadingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (lazyImageLoadingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLazyImageLoadingEnabled(lazyImageLoadingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLazyImageLoadingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLazyImageLoadingEnabledBody>(*lexicalGlobalObject, *callFrame, "setLazyImageLoadingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLegacyEncryptedMediaAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto legacyEncryptedMediaAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (legacyEncryptedMediaAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLegacyEncryptedMediaAPIEnabled(legacyEncryptedMediaAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyEncryptedMediaAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLegacyEncryptedMediaAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setLegacyEncryptedMediaAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLegacyLineLayoutVisualCoverageEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto legacyLineLayoutVisualCoverageEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (legacyLineLayoutVisualCoverageEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLegacyLineLayoutVisualCoverageEnabled(legacyLineLayoutVisualCoverageEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyLineLayoutVisualCoverageEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLegacyLineLayoutVisualCoverageEnabledBody>(*lexicalGlobalObject, *callFrame, "setLegacyLineLayoutVisualCoverageEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLegacyOverflowScrollingTouchEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto legacyOverflowScrollingTouchEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (legacyOverflowScrollingTouchEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLegacyOverflowScrollingTouchEnabled(legacyOverflowScrollingTouchEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyOverflowScrollingTouchEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLegacyOverflowScrollingTouchEnabledBody>(*lexicalGlobalObject, *callFrame, "setLegacyOverflowScrollingTouchEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLegacyPluginQuirkForMailSignaturesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto legacyPluginQuirkForMailSignaturesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (legacyPluginQuirkForMailSignaturesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLegacyPluginQuirkForMailSignaturesEnabled(legacyPluginQuirkForMailSignaturesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyPluginQuirkForMailSignaturesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLegacyPluginQuirkForMailSignaturesEnabledBody>(*lexicalGlobalObject, *callFrame, "setLegacyPluginQuirkForMailSignaturesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLegacyWebRTCOfferOptionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto legacyWebRTCOfferOptionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (legacyWebRTCOfferOptionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLegacyWebRTCOfferOptionsEnabled(legacyWebRTCOfferOptionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLegacyWebRTCOfferOptionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLegacyWebRTCOfferOptionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setLegacyWebRTCOfferOptionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLimitedMatroskaSupportEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto limitedMatroskaSupportEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (limitedMatroskaSupportEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLimitedMatroskaSupportEnabled(limitedMatroskaSupportEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLimitedMatroskaSupportEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLimitedMatroskaSupportEnabledBody>(*lexicalGlobalObject, *callFrame, "setLimitedMatroskaSupportEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLinearMediaPlayerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto linearMediaPlayerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (linearMediaPlayerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLinearMediaPlayerEnabled(linearMediaPlayerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinearMediaPlayerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLinearMediaPlayerEnabledBody>(*lexicalGlobalObject, *callFrame, "setLinearMediaPlayerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLinkDNSPrefetchEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto linkDNSPrefetchEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (linkDNSPrefetchEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLinkDNSPrefetchEnabled(linkDNSPrefetchEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkDNSPrefetchEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLinkDNSPrefetchEnabledBody>(*lexicalGlobalObject, *callFrame, "setLinkDNSPrefetchEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEarlyHintsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto linkPreconnectEarlyHintsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (linkPreconnectEarlyHintsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLinkPreconnectEarlyHintsEnabled(linkPreconnectEarlyHintsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEarlyHintsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEarlyHintsEnabledBody>(*lexicalGlobalObject, *callFrame, "setLinkPreconnectEarlyHintsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto linkPreconnectEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (linkPreconnectEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLinkPreconnectEnabled(linkPreconnectEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLinkPreconnectEnabledBody>(*lexicalGlobalObject, *callFrame, "setLinkPreconnectEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLinkPrefetchEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto linkPrefetchEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (linkPrefetchEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLinkPrefetchEnabled(linkPrefetchEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPrefetchEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLinkPrefetchEnabledBody>(*lexicalGlobalObject, *callFrame, "setLinkPrefetchEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLinkPreloadEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto linkPreloadEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (linkPreloadEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLinkPreloadEnabled(linkPreloadEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkPreloadEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLinkPreloadEnabledBody>(*lexicalGlobalObject, *callFrame, "setLinkPreloadEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLinkSanitizerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto linkSanitizerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (linkSanitizerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLinkSanitizerEnabled(linkSanitizerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLinkSanitizerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLinkSanitizerEnabledBody>(*lexicalGlobalObject, *callFrame, "setLinkSanitizerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLoadDeferringEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto loadDeferringEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (loadDeferringEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLoadDeferringEnabled(loadDeferringEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoadDeferringEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLoadDeferringEnabledBody>(*lexicalGlobalObject, *callFrame, "setLoadDeferringEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLoadWebArchiveWithEphemeralStorageEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto loadWebArchiveWithEphemeralStorageEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (loadWebArchiveWithEphemeralStorageEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLoadWebArchiveWithEphemeralStorageEnabled(loadWebArchiveWithEphemeralStorageEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoadWebArchiveWithEphemeralStorageEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLoadWebArchiveWithEphemeralStorageEnabledBody>(*lexicalGlobalObject, *callFrame, "setLoadWebArchiveWithEphemeralStorageEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLoadsImagesAutomaticallyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto loadsImagesAutomaticallyConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (loadsImagesAutomaticallyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLoadsImagesAutomatically(loadsImagesAutomaticallyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoadsImagesAutomatically, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLoadsImagesAutomaticallyBody>(*lexicalGlobalObject, *callFrame, "setLoadsImagesAutomatically");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLocalFileContentSniffingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto localFileContentSniffingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (localFileContentSniffingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLocalFileContentSniffingEnabled(localFileContentSniffingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalFileContentSniffingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLocalFileContentSniffingEnabledBody>(*lexicalGlobalObject, *callFrame, "setLocalFileContentSniffingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLocalNetworkAccessEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto localNetworkAccessEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (localNetworkAccessEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLocalNetworkAccessEnabled(localNetworkAccessEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalNetworkAccessEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLocalNetworkAccessEnabledBody>(*lexicalGlobalObject, *callFrame, "setLocalNetworkAccessEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageDatabasePathBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto localStorageDatabasePathConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (localStorageDatabasePathConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLocalStorageDatabasePath(localStorageDatabasePathConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageDatabasePath, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageDatabasePathBody>(*lexicalGlobalObject, *callFrame, "setLocalStorageDatabasePath");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto localStorageEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (localStorageEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLocalStorageEnabled(localStorageEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLocalStorageEnabledBody>(*lexicalGlobalObject, *callFrame, "setLocalStorageEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLockdownFontParserEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto lockdownFontParserEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (lockdownFontParserEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLockdownFontParserEnabled(lockdownFontParserEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLockdownFontParserEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLockdownFontParserEnabledBody>(*lexicalGlobalObject, *callFrame, "setLockdownFontParserEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto loginStatusAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (loginStatusAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLoginStatusAPIEnabled(loginStatusAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setLoginStatusAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIRequiresWebAuthnEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto loginStatusAPIRequiresWebAuthnEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (loginStatusAPIRequiresWebAuthnEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLoginStatusAPIRequiresWebAuthnEnabled(loginStatusAPIRequiresWebAuthnEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIRequiresWebAuthnEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLoginStatusAPIRequiresWebAuthnEnabledBody>(*lexicalGlobalObject, *callFrame, "setLoginStatusAPIRequiresWebAuthnEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setLogsPageMessagesToSystemConsoleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto logsPageMessagesToSystemConsoleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (logsPageMessagesToSystemConsoleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setLogsPageMessagesToSystemConsoleEnabled(logsPageMessagesToSystemConsoleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setLogsPageMessagesToSystemConsoleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setLogsPageMessagesToSystemConsoleEnabledBody>(*lexicalGlobalObject, *callFrame, "setLogsPageMessagesToSystemConsoleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMainContentUserGestureOverrideEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mainContentUserGestureOverrideEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mainContentUserGestureOverrideEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMainContentUserGestureOverrideEnabled(mainContentUserGestureOverrideEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMainContentUserGestureOverrideEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMainContentUserGestureOverrideEnabledBody>(*lexicalGlobalObject, *callFrame, "setMainContentUserGestureOverrideEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setManageCaptureStatusBarInGPUProcessEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto manageCaptureStatusBarInGPUProcessEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (manageCaptureStatusBarInGPUProcessEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setManageCaptureStatusBarInGPUProcessEnabled(manageCaptureStatusBarInGPUProcessEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManageCaptureStatusBarInGPUProcessEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setManageCaptureStatusBarInGPUProcessEnabledBody>(*lexicalGlobalObject, *callFrame, "setManageCaptureStatusBarInGPUProcessEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto managedMediaSourceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (managedMediaSourceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setManagedMediaSourceEnabled(managedMediaSourceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceEnabledBody>(*lexicalGlobalObject, *callFrame, "setManagedMediaSourceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceHighThresholdBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto managedMediaSourceHighThresholdConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (managedMediaSourceHighThresholdConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setManagedMediaSourceHighThreshold(managedMediaSourceHighThresholdConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceHighThreshold, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceHighThresholdBody>(*lexicalGlobalObject, *callFrame, "setManagedMediaSourceHighThreshold");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceLowThresholdBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto managedMediaSourceLowThresholdConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (managedMediaSourceLowThresholdConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setManagedMediaSourceLowThreshold(managedMediaSourceLowThresholdConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceLowThreshold, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceLowThresholdBody>(*lexicalGlobalObject, *callFrame, "setManagedMediaSourceLowThreshold");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceNeedsAirPlayBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto managedMediaSourceNeedsAirPlayConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (managedMediaSourceNeedsAirPlayConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setManagedMediaSourceNeedsAirPlay(managedMediaSourceNeedsAirPlayConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceNeedsAirPlay, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setManagedMediaSourceNeedsAirPlayBody>(*lexicalGlobalObject, *callFrame, "setManagedMediaSourceNeedsAirPlay");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMasonryEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto masonryEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (masonryEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMasonryEnabled(masonryEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMasonryEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMasonryEnabledBody>(*lexicalGlobalObject, *callFrame, "setMasonryEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMathMLEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mathMLEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mathMLEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMathMLEnabled(mathMLEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMathMLEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMathMLEnabledBody>(*lexicalGlobalObject, *callFrame, "setMathMLEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMaxParseDurationBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto maxParseDurationConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (maxParseDurationConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMaxParseDuration(maxParseDurationConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMaxParseDuration, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMaxParseDurationBody>(*lexicalGlobalObject, *callFrame, "setMaxParseDuration");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMaximumHTMLParserDOMTreeDepthBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto maximumHTMLParserDOMTreeDepthConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (maximumHTMLParserDOMTreeDepthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMaximumHTMLParserDOMTreeDepth(maximumHTMLParserDOMTreeDepthConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMaximumHTMLParserDOMTreeDepth, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMaximumHTMLParserDOMTreeDepthBody>(*lexicalGlobalObject, *callFrame, "setMaximumHTMLParserDOMTreeDepth");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMaximumSourceBufferSizeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto maximumSourceBufferSizeConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (maximumSourceBufferSizeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMaximumSourceBufferSize(maximumSourceBufferSizeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMaximumSourceBufferSize, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMaximumSourceBufferSizeBody>(*lexicalGlobalObject, *callFrame, "setMaximumSourceBufferSize");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaCapabilitiesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaCapabilitiesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaCapabilitiesEnabled(mediaCapabilitiesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaCapabilitiesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesExtensionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaCapabilitiesExtensionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaCapabilitiesExtensionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaCapabilitiesExtensionsEnabled(mediaCapabilitiesExtensionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesExtensionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilitiesExtensionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaCapabilitiesExtensionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilityGrantsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaCapabilityGrantsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaCapabilityGrantsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaCapabilityGrantsEnabled(mediaCapabilityGrantsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilityGrantsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaCapabilityGrantsEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaCapabilityGrantsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaCaptureRequiresSecureConnectionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaCaptureRequiresSecureConnectionConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaCaptureRequiresSecureConnectionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaCaptureRequiresSecureConnection(mediaCaptureRequiresSecureConnectionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaCaptureRequiresSecureConnection, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaCaptureRequiresSecureConnectionBody>(*lexicalGlobalObject, *callFrame, "setMediaCaptureRequiresSecureConnection");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsContextMenusEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaControlsContextMenusEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaControlsContextMenusEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaControlsContextMenusEnabled(mediaControlsContextMenusEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsContextMenusEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsContextMenusEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaControlsContextMenusEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsScaleWithPageZoomBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaControlsScaleWithPageZoomConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaControlsScaleWithPageZoomConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaControlsScaleWithPageZoom(mediaControlsScaleWithPageZoomConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsScaleWithPageZoom, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaControlsScaleWithPageZoomBody>(*lexicalGlobalObject, *callFrame, "setMediaControlsScaleWithPageZoom");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaDataLoadsAutomaticallyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaDataLoadsAutomaticallyConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaDataLoadsAutomaticallyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaDataLoadsAutomatically(mediaDataLoadsAutomaticallyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaDataLoadsAutomatically, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaDataLoadsAutomaticallyBody>(*lexicalGlobalObject, *callFrame, "setMediaDataLoadsAutomatically");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaDevicesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaDevicesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaDevicesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaDevicesEnabled(mediaDevicesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaDevicesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaDevicesEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaDevicesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaEnabled(mediaEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaKeysStorageDirectoryBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaKeysStorageDirectoryConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (mediaKeysStorageDirectoryConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaKeysStorageDirectory(mediaKeysStorageDirectoryConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaKeysStorageDirectory, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaKeysStorageDirectoryBody>(*lexicalGlobalObject, *callFrame, "setMediaKeysStorageDirectory");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaPlaybackEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaPlaybackEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaPlaybackEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaPlaybackEnabled(mediaPlaybackEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaPlaybackEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaPlaybackEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaPlaybackEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaPreferredFullscreenWidthBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaPreferredFullscreenWidthConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (mediaPreferredFullscreenWidthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaPreferredFullscreenWidth(mediaPreferredFullscreenWidthConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaPreferredFullscreenWidth, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaPreferredFullscreenWidthBody>(*lexicalGlobalObject, *callFrame, "setMediaPreferredFullscreenWidth");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaPreloadingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaPreloadingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaPreloadingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaPreloadingEnabled(mediaPreloadingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaPreloadingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaPreloadingEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaPreloadingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaRecorderEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaRecorderEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaRecorderEnabled(mediaRecorderEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaRecorderEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabledWebMBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaRecorderEnabledWebMConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaRecorderEnabledWebMConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaRecorderEnabledWebM(mediaRecorderEnabledWebMConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabledWebM, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaRecorderEnabledWebMBody>(*lexicalGlobalObject, *callFrame, "setMediaRecorderEnabledWebM");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCaptureToggleAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaSessionCaptureToggleAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaSessionCaptureToggleAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaSessionCaptureToggleAPIEnabled(mediaSessionCaptureToggleAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCaptureToggleAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCaptureToggleAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaSessionCaptureToggleAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCoordinatorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaSessionCoordinatorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaSessionCoordinatorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaSessionCoordinatorEnabled(mediaSessionCoordinatorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCoordinatorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionCoordinatorEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaSessionCoordinatorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaSessionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaSessionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaSessionEnabled(mediaSessionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaSessionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionPlaylistEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaSessionPlaylistEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaSessionPlaylistEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaSessionPlaylistEnabled(mediaSessionPlaylistEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionPlaylistEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaSessionPlaylistEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaSessionPlaylistEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaSourceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaSourceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaSourceEnabled(mediaSourceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaSourceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceInWorkerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaSourceInWorkerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaSourceInWorkerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaSourceInWorkerEnabled(mediaSourceInWorkerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceInWorkerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaSourceInWorkerEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaSourceInWorkerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaSourcePrefersDecompressionSessionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaSourcePrefersDecompressionSessionConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaSourcePrefersDecompressionSessionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaSourcePrefersDecompressionSession(mediaSourcePrefersDecompressionSessionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaSourcePrefersDecompressionSession, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaSourcePrefersDecompressionSessionBody>(*lexicalGlobalObject, *callFrame, "setMediaSourcePrefersDecompressionSession");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaStreamTrackProcessingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaStreamTrackProcessingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaStreamTrackProcessingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaStreamTrackProcessingEnabled(mediaStreamTrackProcessingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaStreamTrackProcessingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaStreamTrackProcessingEnabledBody>(*lexicalGlobalObject, *callFrame, "setMediaStreamTrackProcessingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaTypeOverrideBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaTypeOverrideConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (mediaTypeOverrideConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaTypeOverride(mediaTypeOverrideConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaTypeOverride, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaTypeOverrideBody>(*lexicalGlobalObject, *callFrame, "setMediaTypeOverride");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMediaUserGestureInheritsFromDocumentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mediaUserGestureInheritsFromDocumentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mediaUserGestureInheritsFromDocumentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMediaUserGestureInheritsFromDocument(mediaUserGestureInheritsFromDocumentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMediaUserGestureInheritsFromDocument, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMediaUserGestureInheritsFromDocumentBody>(*lexicalGlobalObject, *callFrame, "setMediaUserGestureInheritsFromDocument");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMetaViewportInteractiveWidgetEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto metaViewportInteractiveWidgetEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (metaViewportInteractiveWidgetEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMetaViewportInteractiveWidgetEnabled(metaViewportInteractiveWidgetEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMetaViewportInteractiveWidgetEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMetaViewportInteractiveWidgetEnabledBody>(*lexicalGlobalObject, *callFrame, "setMetaViewportInteractiveWidgetEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMinimumFontSizeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto minimumFontSizeConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (minimumFontSizeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMinimumFontSize(minimumFontSizeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMinimumFontSize, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMinimumFontSizeBody>(*lexicalGlobalObject, *callFrame, "setMinimumFontSize");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMinimumLogicalFontSizeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto minimumLogicalFontSizeConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (minimumLogicalFontSizeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMinimumLogicalFontSize(minimumLogicalFontSizeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMinimumLogicalFontSize, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMinimumLogicalFontSizeBody>(*lexicalGlobalObject, *callFrame, "setMinimumLogicalFontSize");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMinimumZoomFontSizeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto minimumZoomFontSizeConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (minimumZoomFontSizeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMinimumZoomFontSize(minimumZoomFontSizeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMinimumZoomFontSize, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMinimumZoomFontSizeBody>(*lexicalGlobalObject, *callFrame, "setMinimumZoomFontSize");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMockCaptureDevicesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mockCaptureDevicesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mockCaptureDevicesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMockCaptureDevicesEnabled(mockCaptureDevicesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMockCaptureDevicesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMockCaptureDevicesEnabledBody>(*lexicalGlobalObject, *callFrame, "setMockCaptureDevicesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMockScrollbarsControllerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mockScrollbarsControllerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mockScrollbarsControllerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMockScrollbarsControllerEnabled(mockScrollbarsControllerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMockScrollbarsControllerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMockScrollbarsControllerEnabledBody>(*lexicalGlobalObject, *callFrame, "setMockScrollbarsControllerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setModelElementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto modelElementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (modelElementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setModelElementEnabled(modelElementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setModelElementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setModelElementEnabledBody>(*lexicalGlobalObject, *callFrame, "setModelElementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setModelNoPortalAttributeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto modelNoPortalAttributeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (modelNoPortalAttributeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setModelNoPortalAttributeEnabled(modelNoPortalAttributeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setModelNoPortalAttributeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setModelNoPortalAttributeEnabledBody>(*lexicalGlobalObject, *callFrame, "setModelNoPortalAttributeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setModelProcessEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto modelProcessEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (modelProcessEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setModelProcessEnabled(modelProcessEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setModelProcessEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setModelProcessEnabledBody>(*lexicalGlobalObject, *callFrame, "setModelProcessEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMomentumScrollingAnimatorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto momentumScrollingAnimatorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (momentumScrollingAnimatorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMomentumScrollingAnimatorEnabled(momentumScrollingAnimatorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMomentumScrollingAnimatorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMomentumScrollingAnimatorEnabledBody>(*lexicalGlobalObject, *callFrame, "setMomentumScrollingAnimatorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMouseEventsSimulationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mouseEventsSimulationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mouseEventsSimulationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMouseEventsSimulationEnabled(mouseEventsSimulationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMouseEventsSimulationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMouseEventsSimulationEnabledBody>(*lexicalGlobalObject, *callFrame, "setMouseEventsSimulationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMutationEventsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto mutationEventsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (mutationEventsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMutationEventsEnabled(mutationEventsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMutationEventsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMutationEventsEnabledBody>(*lexicalGlobalObject, *callFrame, "setMutationEventsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setMuteCameraOnMicrophoneInterruptionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto muteCameraOnMicrophoneInterruptionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (muteCameraOnMicrophoneInterruptionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMuteCameraOnMicrophoneInterruptionEnabled(muteCameraOnMicrophoneInterruptionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setMuteCameraOnMicrophoneInterruptionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setMuteCameraOnMicrophoneInterruptionEnabledBody>(*lexicalGlobalObject, *callFrame, "setMuteCameraOnMicrophoneInterruptionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNavigationAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto navigationAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (navigationAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNavigationAPIEnabled(navigationAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNavigationAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNavigationAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setNavigationAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNavigatorUserAgentDataJavaScriptAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto navigatorUserAgentDataJavaScriptAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (navigatorUserAgentDataJavaScriptAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNavigatorUserAgentDataJavaScriptAPIEnabled(navigatorUserAgentDataJavaScriptAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNavigatorUserAgentDataJavaScriptAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNavigatorUserAgentDataJavaScriptAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setNavigatorUserAgentDataJavaScriptAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNeedsAdobeFrameReloadingQuirkBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto needsAdobeFrameReloadingQuirkConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (needsAdobeFrameReloadingQuirkConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNeedsAdobeFrameReloadingQuirk(needsAdobeFrameReloadingQuirkConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsAdobeFrameReloadingQuirk, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNeedsAdobeFrameReloadingQuirkBody>(*lexicalGlobalObject, *callFrame, "setNeedsAdobeFrameReloadingQuirk");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirkBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto needsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirkConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (needsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirkConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirk(needsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirkConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirk, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirkBody>(*lexicalGlobalObject, *callFrame, "setNeedsDeferKeyDownAndKeyPressTimersUntilNextEditingCommandQuirk");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNeedsFrameNameFallbackToIdQuirkBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto needsFrameNameFallbackToIdQuirkConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (needsFrameNameFallbackToIdQuirkConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNeedsFrameNameFallbackToIdQuirk(needsFrameNameFallbackToIdQuirkConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsFrameNameFallbackToIdQuirk, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNeedsFrameNameFallbackToIdQuirkBody>(*lexicalGlobalObject, *callFrame, "setNeedsFrameNameFallbackToIdQuirk");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNeedsKeyboardEventDisambiguationQuirksBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto needsKeyboardEventDisambiguationQuirksConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (needsKeyboardEventDisambiguationQuirksConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNeedsKeyboardEventDisambiguationQuirks(needsKeyboardEventDisambiguationQuirksConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsKeyboardEventDisambiguationQuirks, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNeedsKeyboardEventDisambiguationQuirksBody>(*lexicalGlobalObject, *callFrame, "setNeedsKeyboardEventDisambiguationQuirks");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNeedsSiteSpecificQuirksBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto needsSiteSpecificQuirksConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (needsSiteSpecificQuirksConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNeedsSiteSpecificQuirks(needsSiteSpecificQuirksConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsSiteSpecificQuirks, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNeedsSiteSpecificQuirksBody>(*lexicalGlobalObject, *callFrame, "setNeedsSiteSpecificQuirks");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNeedsStorageAccessFromFileURLsQuirkBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto needsStorageAccessFromFileURLsQuirkConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (needsStorageAccessFromFileURLsQuirkConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNeedsStorageAccessFromFileURLsQuirk(needsStorageAccessFromFileURLsQuirkConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNeedsStorageAccessFromFileURLsQuirk, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNeedsStorageAccessFromFileURLsQuirkBody>(*lexicalGlobalObject, *callFrame, "setNeedsStorageAccessFromFileURLsQuirk");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNotificationEventEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto notificationEventEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (notificationEventEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNotificationEventEnabled(notificationEventEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNotificationEventEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNotificationEventEnabledBody>(*lexicalGlobalObject, *callFrame, "setNotificationEventEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setNotificationsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto notificationsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (notificationsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setNotificationsEnabled(notificationsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setNotificationsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setNotificationsEnabledBody>(*lexicalGlobalObject, *callFrame, "setNotificationsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setObservableEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto observableEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (observableEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setObservableEnabled(observableEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setObservableEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setObservableEnabledBody>(*lexicalGlobalObject, *callFrame, "setObservableEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto offscreenCanvasEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (offscreenCanvasEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setOffscreenCanvasEnabled(offscreenCanvasEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasEnabledBody>(*lexicalGlobalObject, *callFrame, "setOffscreenCanvasEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasInWorkersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto offscreenCanvasInWorkersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (offscreenCanvasInWorkersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setOffscreenCanvasInWorkersEnabled(offscreenCanvasInWorkersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasInWorkersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setOffscreenCanvasInWorkersEnabledBody>(*lexicalGlobalObject, *callFrame, "setOffscreenCanvasInWorkersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setOpportunisticSweepingAndGarbageCollectionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto opportunisticSweepingAndGarbageCollectionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (opportunisticSweepingAndGarbageCollectionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setOpportunisticSweepingAndGarbageCollectionEnabled(opportunisticSweepingAndGarbageCollectionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOpportunisticSweepingAndGarbageCollectionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setOpportunisticSweepingAndGarbageCollectionEnabledBody>(*lexicalGlobalObject, *callFrame, "setOpportunisticSweepingAndGarbageCollectionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setOptInPartitionedCookiesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto optInPartitionedCookiesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (optInPartitionedCookiesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setOptInPartitionedCookiesEnabled(optInPartitionedCookiesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOptInPartitionedCookiesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setOptInPartitionedCookiesEnabledBody>(*lexicalGlobalObject, *callFrame, "setOptInPartitionedCookiesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setOverlappingBackingStoreProvidersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto overlappingBackingStoreProvidersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (overlappingBackingStoreProvidersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setOverlappingBackingStoreProvidersEnabled(overlappingBackingStoreProvidersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOverlappingBackingStoreProvidersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setOverlappingBackingStoreProvidersEnabledBody>(*lexicalGlobalObject, *callFrame, "setOverlappingBackingStoreProvidersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setOverscrollBehaviorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto overscrollBehaviorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (overscrollBehaviorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setOverscrollBehaviorEnabled(overscrollBehaviorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setOverscrollBehaviorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setOverscrollBehaviorEnabledBody>(*lexicalGlobalObject, *callFrame, "setOverscrollBehaviorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPageAtRuleMarginDescriptorsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pageAtRuleMarginDescriptorsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pageAtRuleMarginDescriptorsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPageAtRuleMarginDescriptorsEnabled(pageAtRuleMarginDescriptorsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPageAtRuleMarginDescriptorsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPageAtRuleMarginDescriptorsEnabledBody>(*lexicalGlobalObject, *callFrame, "setPageAtRuleMarginDescriptorsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPassiveTouchListenersAsDefaultOnDocumentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto passiveTouchListenersAsDefaultOnDocumentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (passiveTouchListenersAsDefaultOnDocumentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPassiveTouchListenersAsDefaultOnDocument(passiveTouchListenersAsDefaultOnDocumentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPassiveTouchListenersAsDefaultOnDocument, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPassiveTouchListenersAsDefaultOnDocumentBody>(*lexicalGlobalObject, *callFrame, "setPassiveTouchListenersAsDefaultOnDocument");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPassiveWheelListenersAsDefaultOnDocumentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto passiveWheelListenersAsDefaultOnDocumentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (passiveWheelListenersAsDefaultOnDocumentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPassiveWheelListenersAsDefaultOnDocument(passiveWheelListenersAsDefaultOnDocumentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPassiveWheelListenersAsDefaultOnDocument, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPassiveWheelListenersAsDefaultOnDocumentBody>(*lexicalGlobalObject, *callFrame, "setPassiveWheelListenersAsDefaultOnDocument");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoDurationInSecondsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto passwordEchoDurationInSecondsConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (passwordEchoDurationInSecondsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPasswordEchoDurationInSeconds(passwordEchoDurationInSecondsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoDurationInSeconds, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoDurationInSecondsBody>(*lexicalGlobalObject, *callFrame, "setPasswordEchoDurationInSeconds");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto passwordEchoEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (passwordEchoEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPasswordEchoEnabled(passwordEchoEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPasswordEchoEnabledBody>(*lexicalGlobalObject, *callFrame, "setPasswordEchoEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPaymentRequestEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto paymentRequestEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (paymentRequestEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPaymentRequestEnabled(paymentRequestEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPaymentRequestEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPaymentRequestEnabledBody>(*lexicalGlobalObject, *callFrame, "setPaymentRequestEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPDFJSViewerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pdfJSViewerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pdfJSViewerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPDFJSViewerEnabled(pdfJSViewerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFJSViewerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPDFJSViewerEnabledBody>(*lexicalGlobalObject, *callFrame, "setPDFJSViewerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pdfPluginEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pdfPluginEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPDFPluginEnabled(pdfPluginEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginEnabledBody>(*lexicalGlobalObject, *callFrame, "setPDFPluginEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginHUDEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pdfPluginHUDEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pdfPluginHUDEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPDFPluginHUDEnabled(pdfPluginHUDEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginHUDEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginHUDEnabledBody>(*lexicalGlobalObject, *callFrame, "setPDFPluginHUDEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginPageNumberIndicatorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pdfPluginPageNumberIndicatorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pdfPluginPageNumberIndicatorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPDFPluginPageNumberIndicatorEnabled(pdfPluginPageNumberIndicatorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginPageNumberIndicatorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPDFPluginPageNumberIndicatorEnabledBody>(*lexicalGlobalObject, *callFrame, "setPDFPluginPageNumberIndicatorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto peerConnectionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (peerConnectionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPeerConnectionEnabled(peerConnectionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionEnabledBody>(*lexicalGlobalObject, *callFrame, "setPeerConnectionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionVideoScalingAdaptationDisabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto peerConnectionVideoScalingAdaptationDisabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (peerConnectionVideoScalingAdaptationDisabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPeerConnectionVideoScalingAdaptationDisabled(peerConnectionVideoScalingAdaptationDisabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionVideoScalingAdaptationDisabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPeerConnectionVideoScalingAdaptationDisabledBody>(*lexicalGlobalObject, *callFrame, "setPeerConnectionVideoScalingAdaptationDisabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPerElementSpeakerSelectionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto perElementSpeakerSelectionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (perElementSpeakerSelectionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPerElementSpeakerSelectionEnabled(perElementSpeakerSelectionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPerElementSpeakerSelectionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPerElementSpeakerSelectionEnabledBody>(*lexicalGlobalObject, *callFrame, "setPerElementSpeakerSelectionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPermissionsAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto permissionsAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (permissionsAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPermissionsAPIEnabled(permissionsAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPermissionsAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPermissionsAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setPermissionsAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPictographFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pictographFontFamilyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (pictographFontFamilyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPictographFontFamily(pictographFontFamilyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPictographFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPictographFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setPictographFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPictureInPictureAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pictureInPictureAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pictureInPictureAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPictureInPictureAPIEnabled(pictureInPictureAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPictureInPictureAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPictureInPictureAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setPictureInPictureAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPictureInPicturePlaybackStateEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pictureInPicturePlaybackStateEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pictureInPicturePlaybackStateEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPictureInPicturePlaybackStateEnabled(pictureInPicturePlaybackStateEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPictureInPicturePlaybackStateEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPictureInPicturePlaybackStateEnabledBody>(*lexicalGlobalObject, *callFrame, "setPictureInPicturePlaybackStateEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPointerLockEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pointerLockEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pointerLockEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPointerLockEnabled(pointerLockEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPointerLockEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPointerLockEnabledBody>(*lexicalGlobalObject, *callFrame, "setPointerLockEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPointerLockOptionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pointerLockOptionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pointerLockOptionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPointerLockOptionsEnabled(pointerLockOptionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPointerLockOptionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPointerLockOptionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setPointerLockOptionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPopoverAttributeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto popoverAttributeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (popoverAttributeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPopoverAttributeEnabled(popoverAttributeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPopoverAttributeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPopoverAttributeEnabledBody>(*lexicalGlobalObject, *callFrame, "setPopoverAttributeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPreferMIMETypeForImagesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto preferMIMETypeForImagesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (preferMIMETypeForImagesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPreferMIMETypeForImages(preferMIMETypeForImagesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreferMIMETypeForImages, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPreferMIMETypeForImagesBody>(*lexicalGlobalObject, *callFrame, "setPreferMIMETypeForImages");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPreferPageRenderingUpdatesNear60FPSEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto preferPageRenderingUpdatesNear60FPSEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (preferPageRenderingUpdatesNear60FPSEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPreferPageRenderingUpdatesNear60FPSEnabled(preferPageRenderingUpdatesNear60FPSEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreferPageRenderingUpdatesNear60FPSEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPreferPageRenderingUpdatesNear60FPSEnabledBody>(*lexicalGlobalObject, *callFrame, "setPreferPageRenderingUpdatesNear60FPSEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPreferSpatialAudioExperienceBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto preferSpatialAudioExperienceConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (preferSpatialAudioExperienceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPreferSpatialAudioExperience(preferSpatialAudioExperienceConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreferSpatialAudioExperience, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPreferSpatialAudioExperienceBody>(*lexicalGlobalObject, *callFrame, "setPreferSpatialAudioExperience");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPreventKeyboardDOMEventDispatchBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto preventKeyboardDOMEventDispatchConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (preventKeyboardDOMEventDispatchConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPreventKeyboardDOMEventDispatch(preventKeyboardDOMEventDispatchConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPreventKeyboardDOMEventDispatch, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPreventKeyboardDOMEventDispatchBody>(*lexicalGlobalObject, *callFrame, "setPreventKeyboardDOMEventDispatch");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementDebugModeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto privateClickMeasurementDebugModeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (privateClickMeasurementDebugModeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPrivateClickMeasurementDebugModeEnabled(privateClickMeasurementDebugModeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementDebugModeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementDebugModeEnabledBody>(*lexicalGlobalObject, *callFrame, "setPrivateClickMeasurementDebugModeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto privateClickMeasurementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (privateClickMeasurementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPrivateClickMeasurementEnabled(privateClickMeasurementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementEnabledBody>(*lexicalGlobalObject, *callFrame, "setPrivateClickMeasurementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementFraudPreventionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto privateClickMeasurementFraudPreventionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (privateClickMeasurementFraudPreventionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPrivateClickMeasurementFraudPreventionEnabled(privateClickMeasurementFraudPreventionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementFraudPreventionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPrivateClickMeasurementFraudPreventionEnabledBody>(*lexicalGlobalObject, *callFrame, "setPrivateClickMeasurementFraudPreventionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPrivateTokenUsageByThirdPartyEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto privateTokenUsageByThirdPartyEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (privateTokenUsageByThirdPartyEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPrivateTokenUsageByThirdPartyEnabled(privateTokenUsageByThirdPartyEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPrivateTokenUsageByThirdPartyEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPrivateTokenUsageByThirdPartyEnabledBody>(*lexicalGlobalObject, *callFrame, "setPrivateTokenUsageByThirdPartyEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPropagateDamagingInformationBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto propagateDamagingInformationConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (propagateDamagingInformationConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPropagateDamagingInformation(propagateDamagingInformationConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPropagateDamagingInformation, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPropagateDamagingInformationBody>(*lexicalGlobalObject, *callFrame, "setPropagateDamagingInformation");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPunchOutWhiteBackgroundsInDarkModeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto punchOutWhiteBackgroundsInDarkModeConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (punchOutWhiteBackgroundsInDarkModeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPunchOutWhiteBackgroundsInDarkMode(punchOutWhiteBackgroundsInDarkModeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPunchOutWhiteBackgroundsInDarkMode, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPunchOutWhiteBackgroundsInDarkModeBody>(*lexicalGlobalObject, *callFrame, "setPunchOutWhiteBackgroundsInDarkMode");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setPushAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto pushAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (pushAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPushAPIEnabled(pushAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setPushAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setPushAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setPushAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRemoteMediaSessionManagerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto remoteMediaSessionManagerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (remoteMediaSessionManagerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRemoteMediaSessionManagerEnabled(remoteMediaSessionManagerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemoteMediaSessionManagerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRemoteMediaSessionManagerEnabledBody>(*lexicalGlobalObject, *callFrame, "setRemoteMediaSessionManagerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRemotePlaybackEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto remotePlaybackEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (remotePlaybackEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRemotePlaybackEnabled(remotePlaybackEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemotePlaybackEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRemotePlaybackEnabledBody>(*lexicalGlobalObject, *callFrame, "setRemotePlaybackEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRemoteSnapshottingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto remoteSnapshottingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (remoteSnapshottingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRemoteSnapshottingEnabled(remoteSnapshottingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemoteSnapshottingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRemoteSnapshottingEnabledBody>(*lexicalGlobalObject, *callFrame, "setRemoteSnapshottingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRemoveBackgroundEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto removeBackgroundEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (removeBackgroundEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRemoveBackgroundEnabled(removeBackgroundEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRemoveBackgroundEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRemoveBackgroundEnabledBody>(*lexicalGlobalObject, *callFrame, "setRemoveBackgroundEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequestIdleCallbackEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requestIdleCallbackEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requestIdleCallbackEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequestIdleCallbackEnabled(requestIdleCallbackEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequestIdleCallbackEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequestIdleCallbackEnabledBody>(*lexicalGlobalObject, *callFrame, "setRequestIdleCallbackEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequestStorageAccessThrowsExceptionUntilReloadBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requestStorageAccessThrowsExceptionUntilReloadConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requestStorageAccessThrowsExceptionUntilReloadConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequestStorageAccessThrowsExceptionUntilReload(requestStorageAccessThrowsExceptionUntilReloadConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequestStorageAccessThrowsExceptionUntilReload, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequestStorageAccessThrowsExceptionUntilReloadBody>(*lexicalGlobalObject, *callFrame, "setRequestStorageAccessThrowsExceptionUntilReload");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequestVideoFrameCallbackEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requestVideoFrameCallbackEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requestVideoFrameCallbackEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequestVideoFrameCallbackEnabled(requestVideoFrameCallbackEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequestVideoFrameCallbackEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequestVideoFrameCallbackEnabledBody>(*lexicalGlobalObject, *callFrame, "setRequestVideoFrameCallbackEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequireUAGetDisplayMediaPromptBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requireUAGetDisplayMediaPromptConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requireUAGetDisplayMediaPromptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequireUAGetDisplayMediaPrompt(requireUAGetDisplayMediaPromptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequireUAGetDisplayMediaPrompt, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequireUAGetDisplayMediaPromptBody>(*lexicalGlobalObject, *callFrame, "setRequireUAGetDisplayMediaPrompt");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityForVideoToBeNowPlayingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requiresPageVisibilityForVideoToBeNowPlayingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requiresPageVisibilityForVideoToBeNowPlayingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequiresPageVisibilityForVideoToBeNowPlaying(requiresPageVisibilityForVideoToBeNowPlayingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityForVideoToBeNowPlaying, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityForVideoToBeNowPlayingBody>(*lexicalGlobalObject, *callFrame, "setRequiresPageVisibilityForVideoToBeNowPlaying");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityToPlayAudioBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requiresPageVisibilityToPlayAudioConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requiresPageVisibilityToPlayAudioConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequiresPageVisibilityToPlayAudio(requiresPageVisibilityToPlayAudioConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityToPlayAudio, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequiresPageVisibilityToPlayAudioBody>(*lexicalGlobalObject, *callFrame, "setRequiresPageVisibilityToPlayAudio");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForAudioPlaybackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requiresUserGestureForAudioPlaybackConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requiresUserGestureForAudioPlaybackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequiresUserGestureForAudioPlayback(requiresUserGestureForAudioPlaybackConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForAudioPlayback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForAudioPlaybackBody>(*lexicalGlobalObject, *callFrame, "setRequiresUserGestureForAudioPlayback");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForVideoPlaybackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requiresUserGestureForVideoPlaybackConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requiresUserGestureForVideoPlaybackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequiresUserGestureForVideoPlayback(requiresUserGestureForVideoPlaybackConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForVideoPlayback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureForVideoPlaybackBody>(*lexicalGlobalObject, *callFrame, "setRequiresUserGestureForVideoPlayback");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureToLoadVideoBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto requiresUserGestureToLoadVideoConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (requiresUserGestureToLoadVideoConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRequiresUserGestureToLoadVideo(requiresUserGestureToLoadVideoConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureToLoadVideo, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRequiresUserGestureToLoadVideoBody>(*lexicalGlobalObject, *callFrame, "setRequiresUserGestureToLoadVideo");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setResourceLoadSchedulingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto resourceLoadSchedulingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (resourceLoadSchedulingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setResourceLoadSchedulingEnabled(resourceLoadSchedulingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setResourceLoadSchedulingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setResourceLoadSchedulingEnabledBody>(*lexicalGlobalObject, *callFrame, "setResourceLoadSchedulingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setResourceUsageOverlayVisibleBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto resourceUsageOverlayVisibleConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (resourceUsageOverlayVisibleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setResourceUsageOverlayVisible(resourceUsageOverlayVisibleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setResourceUsageOverlayVisible, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setResourceUsageOverlayVisibleBody>(*lexicalGlobalObject, *callFrame, "setResourceUsageOverlayVisible");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRespondToThermalPressureAggressivelyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto respondToThermalPressureAggressivelyConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (respondToThermalPressureAggressivelyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRespondToThermalPressureAggressively(respondToThermalPressureAggressivelyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRespondToThermalPressureAggressively, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRespondToThermalPressureAggressivelyBody>(*lexicalGlobalObject, *callFrame, "setRespondToThermalPressureAggressively");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setRubberBandingForSubScrollableRegionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto rubberBandingForSubScrollableRegionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (rubberBandingForSubScrollableRegionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setRubberBandingForSubScrollableRegionsEnabled(rubberBandingForSubScrollableRegionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setRubberBandingForSubScrollableRegionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setRubberBandingForSubScrollableRegionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setRubberBandingForSubScrollableRegionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSKAttributionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sKAttributionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (sKAttributionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSKAttributionEnabled(sKAttributionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSKAttributionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSKAttributionEnabledBody>(*lexicalGlobalObject, *callFrame, "setSKAttributionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMaxDifferenceBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sampledPageTopColorMaxDifferenceConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (sampledPageTopColorMaxDifferenceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSampledPageTopColorMaxDifference(sampledPageTopColorMaxDifferenceConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMaxDifference, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMaxDifferenceBody>(*lexicalGlobalObject, *callFrame, "setSampledPageTopColorMaxDifference");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMinHeightBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sampledPageTopColorMinHeightConversionResult = convert<IDLDouble>(*lexicalGlobalObject, argument0.value());
    if (sampledPageTopColorMinHeightConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSampledPageTopColorMinHeight(sampledPageTopColorMinHeightConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMinHeight, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSampledPageTopColorMinHeightBody>(*lexicalGlobalObject, *callFrame, "setSampledPageTopColorMinHeight");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSansSerifFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sansSerifFontFamilyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (sansSerifFontFamilyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSansSerifFontFamily(sansSerifFontFamilyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSansSerifFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSansSerifFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setSansSerifFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScopedCustomElementRegistryEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scopedCustomElementRegistryEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scopedCustomElementRegistryEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScopedCustomElementRegistryEnabled(scopedCustomElementRegistryEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScopedCustomElementRegistryEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScopedCustomElementRegistryEnabledBody>(*lexicalGlobalObject, *callFrame, "setScopedCustomElementRegistryEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScreenCaptureEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto screenCaptureEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (screenCaptureEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScreenCaptureEnabled(screenCaptureEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenCaptureEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScreenCaptureEnabledBody>(*lexicalGlobalObject, *callFrame, "setScreenCaptureEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto screenOrientationAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (screenOrientationAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScreenOrientationAPIEnabled(screenOrientationAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setScreenOrientationAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationLockingAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto screenOrientationLockingAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (screenOrientationLockingAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScreenOrientationLockingAPIEnabled(screenOrientationLockingAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationLockingAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScreenOrientationLockingAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setScreenOrientationLockingAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScreenTimeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto screenTimeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (screenTimeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScreenTimeEnabled(screenTimeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenTimeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScreenTimeEnabledBody>(*lexicalGlobalObject, *callFrame, "setScreenTimeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScreenWakeLockAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto screenWakeLockAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (screenWakeLockAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScreenWakeLockAPIEnabled(screenWakeLockAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScreenWakeLockAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScreenWakeLockAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setScreenWakeLockAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScriptEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scriptEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scriptEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScriptEnabled(scriptEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScriptEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScriptEnabledBody>(*lexicalGlobalObject, *callFrame, "setScriptEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScriptMarkupEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scriptMarkupEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scriptMarkupEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScriptMarkupEnabled(scriptMarkupEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScriptMarkupEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScriptMarkupEnabledBody>(*lexicalGlobalObject, *callFrame, "setScriptMarkupEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScriptTrackingPrivacyLoggingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scriptTrackingPrivacyLoggingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scriptTrackingPrivacyLoggingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScriptTrackingPrivacyLoggingEnabled(scriptTrackingPrivacyLoggingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScriptTrackingPrivacyLoggingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScriptTrackingPrivacyLoggingEnabledBody>(*lexicalGlobalObject, *callFrame, "setScriptTrackingPrivacyLoggingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollAnimatorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollAnimatorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollAnimatorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollAnimatorEnabled(scrollAnimatorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollAnimatorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollAnimatorEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollAnimatorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollDrivenAnimationsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollDrivenAnimationsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollDrivenAnimationsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollDrivenAnimationsEnabled(scrollDrivenAnimationsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollDrivenAnimationsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollDrivenAnimationsEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollDrivenAnimationsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollToTextFragmentEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollToTextFragmentEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollToTextFragmentEnabled(scrollToTextFragmentEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollToTextFragmentEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentFeatureDetectionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollToTextFragmentFeatureDetectionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollToTextFragmentFeatureDetectionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollToTextFragmentFeatureDetectionEnabled(scrollToTextFragmentFeatureDetectionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentFeatureDetectionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentFeatureDetectionEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollToTextFragmentFeatureDetectionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentGenerationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollToTextFragmentGenerationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollToTextFragmentGenerationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollToTextFragmentGenerationEnabled(scrollToTextFragmentGenerationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentGenerationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentGenerationEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollToTextFragmentGenerationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentIndicatorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollToTextFragmentIndicatorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollToTextFragmentIndicatorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollToTextFragmentIndicatorEnabled(scrollToTextFragmentIndicatorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentIndicatorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentIndicatorEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollToTextFragmentIndicatorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentMarkingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollToTextFragmentMarkingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollToTextFragmentMarkingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollToTextFragmentMarkingEnabled(scrollToTextFragmentMarkingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentMarkingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollToTextFragmentMarkingEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollToTextFragmentMarkingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollendEventEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollendEventEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollendEventEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollendEventEnabled(scrollendEventEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollendEventEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollendEventEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollendEventEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollingCoordinatorEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollingCoordinatorEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollingCoordinatorEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollingCoordinatorEnabled(scrollingCoordinatorEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollingCoordinatorEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollingCoordinatorEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollingCoordinatorEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollingPerformanceTestingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollingPerformanceTestingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollingPerformanceTestingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollingPerformanceTestingEnabled(scrollingPerformanceTestingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollingPerformanceTestingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollingPerformanceTestingEnabledBody>(*lexicalGlobalObject, *callFrame, "setScrollingPerformanceTestingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setScrollingTreeIncludesFramesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scrollingTreeIncludesFramesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (scrollingTreeIncludesFramesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setScrollingTreeIncludesFrames(scrollingTreeIncludesFramesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setScrollingTreeIncludesFrames, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setScrollingTreeIncludesFramesBody>(*lexicalGlobalObject, *callFrame, "setScrollingTreeIncludesFrames");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSecureContextChecksEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto secureContextChecksEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (secureContextChecksEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSecureContextChecksEnabled(secureContextChecksEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSecureContextChecksEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSecureContextChecksEnabledBody>(*lexicalGlobalObject, *callFrame, "setSecureContextChecksEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSelectShowPickerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto selectShowPickerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (selectShowPickerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSelectShowPickerEnabled(selectShowPickerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSelectShowPickerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSelectShowPickerEnabledBody>(*lexicalGlobalObject, *callFrame, "setSelectShowPickerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSelectTrailingWhitespaceEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto selectTrailingWhitespaceEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (selectTrailingWhitespaceEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSelectTrailingWhitespaceEnabled(selectTrailingWhitespaceEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSelectTrailingWhitespaceEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSelectTrailingWhitespaceEnabledBody>(*lexicalGlobalObject, *callFrame, "setSelectTrailingWhitespaceEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSelectionHonorsOverflowScrollingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto selectionHonorsOverflowScrollingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (selectionHonorsOverflowScrollingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSelectionHonorsOverflowScrolling(selectionHonorsOverflowScrollingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSelectionHonorsOverflowScrolling, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSelectionHonorsOverflowScrollingBody>(*lexicalGlobalObject, *callFrame, "setSelectionHonorsOverflowScrolling");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSerifFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto serifFontFamilyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (serifFontFamilyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSerifFontFamily(serifFontFamilyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSerifFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSerifFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setSerifFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setServiceControlsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto serviceControlsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (serviceControlsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setServiceControlsEnabled(serviceControlsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceControlsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setServiceControlsEnabledBody>(*lexicalGlobalObject, *callFrame, "setServiceControlsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerInstallEventEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto serviceWorkerInstallEventEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (serviceWorkerInstallEventEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setServiceWorkerInstallEventEnabled(serviceWorkerInstallEventEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerInstallEventEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerInstallEventEnabledBody>(*lexicalGlobalObject, *callFrame, "setServiceWorkerInstallEventEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerNavigationPreloadEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto serviceWorkerNavigationPreloadEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (serviceWorkerNavigationPreloadEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setServiceWorkerNavigationPreloadEnabled(serviceWorkerNavigationPreloadEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerNavigationPreloadEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkerNavigationPreloadEnabledBody>(*lexicalGlobalObject, *callFrame, "setServiceWorkerNavigationPreloadEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto serviceWorkersEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (serviceWorkersEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setServiceWorkersEnabled(serviceWorkersEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersEnabledBody>(*lexicalGlobalObject, *callFrame, "setServiceWorkersEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersUserGestureEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto serviceWorkersUserGestureEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (serviceWorkersUserGestureEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setServiceWorkersUserGestureEnabled(serviceWorkersUserGestureEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersUserGestureEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setServiceWorkersUserGestureEnabledBody>(*lexicalGlobalObject, *callFrame, "setServiceWorkersUserGestureEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSessionStorageQuotaBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sessionStorageQuotaConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (sessionStorageQuotaConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSessionStorageQuota(sessionStorageQuotaConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSessionStorageQuota, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSessionStorageQuotaBody>(*lexicalGlobalObject, *callFrame, "setSessionStorageQuota");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shadowRootReferenceTargetEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shadowRootReferenceTargetEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShadowRootReferenceTargetEnabled(shadowRootReferenceTargetEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabledBody>(*lexicalGlobalObject, *callFrame, "setShadowRootReferenceTargetEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabledForAriaOwnsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shadowRootReferenceTargetEnabledForAriaOwnsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shadowRootReferenceTargetEnabledForAriaOwnsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShadowRootReferenceTargetEnabledForAriaOwns(shadowRootReferenceTargetEnabledForAriaOwnsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabledForAriaOwns, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShadowRootReferenceTargetEnabledForAriaOwnsBody>(*lexicalGlobalObject, *callFrame, "setShadowRootReferenceTargetEnabledForAriaOwns");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShapeDetectionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shapeDetectionConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shapeDetectionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShapeDetection(shapeDetectionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShapeDetection, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShapeDetectionBody>(*lexicalGlobalObject, *callFrame, "setShapeDetection");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSharedWorkerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sharedWorkerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (sharedWorkerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSharedWorkerEnabled(sharedWorkerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSharedWorkerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSharedWorkerEnabledBody>(*lexicalGlobalObject, *callFrame, "setSharedWorkerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldAllowUserInstalledFontsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldAllowUserInstalledFontsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldAllowUserInstalledFontsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldAllowUserInstalledFonts(shouldAllowUserInstalledFontsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldAllowUserInstalledFonts, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldAllowUserInstalledFontsBody>(*lexicalGlobalObject, *callFrame, "setShouldAllowUserInstalledFonts");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertInvalidURLsToBlankBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldConvertInvalidURLsToBlankConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldConvertInvalidURLsToBlankConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldConvertInvalidURLsToBlank(shouldConvertInvalidURLsToBlankConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertInvalidURLsToBlank, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertInvalidURLsToBlankBody>(*lexicalGlobalObject, *callFrame, "setShouldConvertInvalidURLsToBlank");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertPositionStyleOnCopyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldConvertPositionStyleOnCopyConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldConvertPositionStyleOnCopyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldConvertPositionStyleOnCopy(shouldConvertPositionStyleOnCopyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertPositionStyleOnCopy, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldConvertPositionStyleOnCopyBody>(*lexicalGlobalObject, *callFrame, "setShouldConvertPositionStyleOnCopy");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDecidePolicyBeforeLoadingQuickLookPreviewBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDecidePolicyBeforeLoadingQuickLookPreviewConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDecidePolicyBeforeLoadingQuickLookPreviewConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDecidePolicyBeforeLoadingQuickLookPreview(shouldDecidePolicyBeforeLoadingQuickLookPreviewConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDecidePolicyBeforeLoadingQuickLookPreview, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDecidePolicyBeforeLoadingQuickLookPreviewBody>(*lexicalGlobalObject, *callFrame, "setShouldDecidePolicyBeforeLoadingQuickLookPreview");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint(shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintBody>(*lexicalGlobalObject, *callFrame, "setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseEventsWhenModifyingSelectionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDispatchSyntheticMouseEventsWhenModifyingSelectionConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDispatchSyntheticMouseEventsWhenModifyingSelectionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDispatchSyntheticMouseEventsWhenModifyingSelection(shouldDispatchSyntheticMouseEventsWhenModifyingSelectionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseEventsWhenModifyingSelection, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseEventsWhenModifyingSelectionBody>(*lexicalGlobalObject, *callFrame, "setShouldDispatchSyntheticMouseEventsWhenModifyingSelection");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseOutAfterSyntheticClickBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDispatchSyntheticMouseOutAfterSyntheticClickConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDispatchSyntheticMouseOutAfterSyntheticClickConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDispatchSyntheticMouseOutAfterSyntheticClick(shouldDispatchSyntheticMouseOutAfterSyntheticClickConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseOutAfterSyntheticClick, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDispatchSyntheticMouseOutAfterSyntheticClickBody>(*lexicalGlobalObject, *callFrame, "setShouldDispatchSyntheticMouseOutAfterSyntheticClick");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayCaptionsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDisplayCaptionsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDisplayCaptionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDisplayCaptions(shouldDisplayCaptionsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayCaptions, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayCaptionsBody>(*lexicalGlobalObject, *callFrame, "setShouldDisplayCaptions");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplaySubtitlesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDisplaySubtitlesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDisplaySubtitlesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDisplaySubtitles(shouldDisplaySubtitlesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplaySubtitles, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplaySubtitlesBody>(*lexicalGlobalObject, *callFrame, "setShouldDisplaySubtitles");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayTextDescriptionsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDisplayTextDescriptionsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDisplayTextDescriptionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDisplayTextDescriptions(shouldDisplayTextDescriptionsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayTextDescriptions, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDisplayTextDescriptionsBody>(*lexicalGlobalObject, *callFrame, "setShouldDisplayTextDescriptions");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldDropNearSuspendedAssertionAfterDelayBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDropNearSuspendedAssertionAfterDelayConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDropNearSuspendedAssertionAfterDelayConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDropNearSuspendedAssertionAfterDelay(shouldDropNearSuspendedAssertionAfterDelayConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldDropNearSuspendedAssertionAfterDelay, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldDropNearSuspendedAssertionAfterDelayBody>(*lexicalGlobalObject, *callFrame, "setShouldDropNearSuspendedAssertionAfterDelay");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldEnableTextAutosizingBoostBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldEnableTextAutosizingBoostConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldEnableTextAutosizingBoostConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldEnableTextAutosizingBoost(shouldEnableTextAutosizingBoostConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldEnableTextAutosizingBoost, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldEnableTextAutosizingBoostBody>(*lexicalGlobalObject, *callFrame, "setShouldEnableTextAutosizingBoost");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreFontLoadCompletionsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldIgnoreFontLoadCompletionsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldIgnoreFontLoadCompletionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldIgnoreFontLoadCompletions(shouldIgnoreFontLoadCompletionsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreFontLoadCompletions, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreFontLoadCompletionsBody>(*lexicalGlobalObject, *callFrame, "setShouldIgnoreFontLoadCompletions");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreMetaViewportBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldIgnoreMetaViewportConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldIgnoreMetaViewportConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldIgnoreMetaViewport(shouldIgnoreMetaViewportConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreMetaViewport, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldIgnoreMetaViewportBody>(*lexicalGlobalObject, *callFrame, "setShouldIgnoreMetaViewport");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldInjectUserScriptsInInitialEmptyDocumentBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldInjectUserScriptsInInitialEmptyDocumentConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldInjectUserScriptsInInitialEmptyDocumentConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldInjectUserScriptsInInitialEmptyDocument(shouldInjectUserScriptsInInitialEmptyDocumentConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldInjectUserScriptsInInitialEmptyDocument, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldInjectUserScriptsInInitialEmptyDocumentBody>(*lexicalGlobalObject, *callFrame, "setShouldInjectUserScriptsInInitialEmptyDocument");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldPrintBackgroundsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldPrintBackgroundsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldPrintBackgroundsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldPrintBackgrounds(shouldPrintBackgroundsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldPrintBackgrounds, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldPrintBackgroundsBody>(*lexicalGlobalObject, *callFrame, "setShouldPrintBackgrounds");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldRespectImageOrientationBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldRespectImageOrientationConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldRespectImageOrientationConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldRespectImageOrientation(shouldRespectImageOrientationConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldRespectImageOrientation, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldRespectImageOrientationBody>(*lexicalGlobalObject, *callFrame, "setShouldRespectImageOrientation");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldRestrictBaseURLSchemesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldRestrictBaseURLSchemesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldRestrictBaseURLSchemesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldRestrictBaseURLSchemes(shouldRestrictBaseURLSchemesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldRestrictBaseURLSchemes, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldRestrictBaseURLSchemesBody>(*lexicalGlobalObject, *callFrame, "setShouldRestrictBaseURLSchemes");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldSuppressTextInputFromEditingDuringProvisionalNavigationBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldSuppressTextInputFromEditingDuringProvisionalNavigationConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldSuppressTextInputFromEditingDuringProvisionalNavigationConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldSuppressTextInputFromEditingDuringProvisionalNavigation(shouldSuppressTextInputFromEditingDuringProvisionalNavigationConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldSuppressTextInputFromEditingDuringProvisionalNavigation, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldSuppressTextInputFromEditingDuringProvisionalNavigationBody>(*lexicalGlobalObject, *callFrame, "setShouldSuppressTextInputFromEditingDuringProvisionalNavigation");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldTakeNearSuspendedAssertionsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldTakeNearSuspendedAssertionsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldTakeNearSuspendedAssertionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldTakeNearSuspendedAssertions(shouldTakeNearSuspendedAssertionsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldTakeNearSuspendedAssertions, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldTakeNearSuspendedAssertionsBody>(*lexicalGlobalObject, *callFrame, "setShouldTakeNearSuspendedAssertions");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldUseModernAVContentKeySessionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldUseModernAVContentKeySessionConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldUseModernAVContentKeySessionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldUseModernAVContentKeySession(shouldUseModernAVContentKeySessionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldUseModernAVContentKeySession, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldUseModernAVContentKeySessionBody>(*lexicalGlobalObject, *callFrame, "setShouldUseModernAVContentKeySession");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShouldUseServiceWorkerShortTimeoutBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldUseServiceWorkerShortTimeoutConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldUseServiceWorkerShortTimeoutConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldUseServiceWorkerShortTimeout(shouldUseServiceWorkerShortTimeoutConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShouldUseServiceWorkerShortTimeout, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShouldUseServiceWorkerShortTimeoutBody>(*lexicalGlobalObject, *callFrame, "setShouldUseServiceWorkerShortTimeout");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowDebugBordersBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showDebugBordersConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showDebugBordersConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowDebugBorders(showDebugBordersConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowDebugBorders, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowDebugBordersBody>(*lexicalGlobalObject, *callFrame, "setShowDebugBorders");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowFrameProcessBordersBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showFrameProcessBordersConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showFrameProcessBordersConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowFrameProcessBorders(showFrameProcessBordersConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowFrameProcessBorders, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowFrameProcessBordersBody>(*lexicalGlobalObject, *callFrame, "setShowFrameProcessBorders");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowMediaStatsContextMenuItemEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showMediaStatsContextMenuItemEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showMediaStatsContextMenuItemEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowMediaStatsContextMenuItemEnabled(showMediaStatsContextMenuItemEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowMediaStatsContextMenuItemEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowMediaStatsContextMenuItemEnabledBody>(*lexicalGlobalObject, *callFrame, "setShowMediaStatsContextMenuItemEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowModalDialogEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showModalDialogEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showModalDialogEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowModalDialogEnabled(showModalDialogEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowModalDialogEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowModalDialogEnabledBody>(*lexicalGlobalObject, *callFrame, "setShowModalDialogEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowRepaintCounterBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showRepaintCounterConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showRepaintCounterConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowRepaintCounter(showRepaintCounterConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowRepaintCounter, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowRepaintCounterBody>(*lexicalGlobalObject, *callFrame, "setShowRepaintCounter");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowTiledScrollingIndicatorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showTiledScrollingIndicatorConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showTiledScrollingIndicatorConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowTiledScrollingIndicator(showTiledScrollingIndicatorConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowTiledScrollingIndicator, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowTiledScrollingIndicatorBody>(*lexicalGlobalObject, *callFrame, "setShowTiledScrollingIndicator");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowsToolTipOverTruncatedTextBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showsToolTipOverTruncatedTextConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showsToolTipOverTruncatedTextConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowsToolTipOverTruncatedText(showsToolTipOverTruncatedTextConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowsToolTipOverTruncatedText, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowsToolTipOverTruncatedTextBody>(*lexicalGlobalObject, *callFrame, "setShowsToolTipOverTruncatedText");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShowsURLsInToolTipsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto showsURLsInToolTipsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (showsURLsInToolTipsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShowsURLsInToolTips(showsURLsInToolTipsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShowsURLsInToolTips, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShowsURLsInToolTipsBody>(*lexicalGlobalObject, *callFrame, "setShowsURLsInToolTips");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setShrinksStandaloneImagesToFitBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shrinksStandaloneImagesToFitConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shrinksStandaloneImagesToFitConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShrinksStandaloneImagesToFit(shrinksStandaloneImagesToFitConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setShrinksStandaloneImagesToFit, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setShrinksStandaloneImagesToFitBody>(*lexicalGlobalObject, *callFrame, "setShrinksStandaloneImagesToFit");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSidewaysWritingModesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sidewaysWritingModesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (sidewaysWritingModesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSidewaysWritingModesEnabled(sidewaysWritingModesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSidewaysWritingModesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSidewaysWritingModesEnabledBody>(*lexicalGlobalObject, *callFrame, "setSidewaysWritingModesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto siteIsolationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (siteIsolationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSiteIsolationEnabled(siteIsolationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationEnabledBody>(*lexicalGlobalObject, *callFrame, "setSiteIsolationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationSharedProcessEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto siteIsolationSharedProcessEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (siteIsolationSharedProcessEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSiteIsolationSharedProcessEnabled(siteIsolationSharedProcessEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationSharedProcessEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSiteIsolationSharedProcessEnabledBody>(*lexicalGlobalObject, *callFrame, "setSiteIsolationSharedProcessEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSmartInsertDeleteEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto smartInsertDeleteEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (smartInsertDeleteEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSmartInsertDeleteEnabled(smartInsertDeleteEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSmartInsertDeleteEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSmartInsertDeleteEnabledBody>(*lexicalGlobalObject, *callFrame, "setSmartInsertDeleteEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSourceBufferChangeTypeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sourceBufferChangeTypeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (sourceBufferChangeTypeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSourceBufferChangeTypeEnabled(sourceBufferChangeTypeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSourceBufferChangeTypeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSourceBufferChangeTypeEnabledBody>(*lexicalGlobalObject, *callFrame, "setSourceBufferChangeTypeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSpatialImageControlsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto spatialImageControlsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (spatialImageControlsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSpatialImageControlsEnabled(spatialImageControlsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpatialImageControlsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSpatialImageControlsEnabledBody>(*lexicalGlobalObject, *callFrame, "setSpatialImageControlsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSpatialNavigationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto spatialNavigationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (spatialNavigationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSpatialNavigationEnabled(spatialNavigationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpatialNavigationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSpatialNavigationEnabledBody>(*lexicalGlobalObject, *callFrame, "setSpatialNavigationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSpeakerSelectionRequiresUserGestureBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto speakerSelectionRequiresUserGestureConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (speakerSelectionRequiresUserGestureConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSpeakerSelectionRequiresUserGesture(speakerSelectionRequiresUserGestureConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpeakerSelectionRequiresUserGesture, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSpeakerSelectionRequiresUserGestureBody>(*lexicalGlobalObject, *callFrame, "setSpeakerSelectionRequiresUserGesture");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSpeechRecognitionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto speechRecognitionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (speechRecognitionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSpeechRecognitionEnabled(speechRecognitionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpeechRecognitionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSpeechRecognitionEnabledBody>(*lexicalGlobalObject, *callFrame, "setSpeechRecognitionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSpeechSynthesisAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto speechSynthesisAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (speechSynthesisAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSpeechSynthesisAPIEnabled(speechSynthesisAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpeechSynthesisAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSpeechSynthesisAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setSpeechSynthesisAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSpringTimingFunctionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto springTimingFunctionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (springTimingFunctionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSpringTimingFunctionEnabled(springTimingFunctionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSpringTimingFunctionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSpringTimingFunctionEnabledBody>(*lexicalGlobalObject, *callFrame, "setSpringTimingFunctionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setStandaloneBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto standaloneConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (standaloneConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStandalone(standaloneConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStandalone, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setStandaloneBody>(*lexicalGlobalObject, *callFrame, "setStandalone");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setStandardFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto standardFontFamilyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (standardFontFamilyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStandardFontFamily(standardFontFamilyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStandardFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setStandardFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setStandardFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto storageAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (storageAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStorageAPIEnabled(storageAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setStorageAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEstimateEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto storageAPIEstimateEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (storageAPIEstimateEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStorageAPIEstimateEnabled(storageAPIEstimateEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEstimateEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setStorageAPIEstimateEnabledBody>(*lexicalGlobalObject, *callFrame, "setStorageAPIEstimateEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setStorageAccessAPIPerPageScopeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto storageAccessAPIPerPageScopeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (storageAccessAPIPerPageScopeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStorageAccessAPIPerPageScopeEnabled(storageAccessAPIPerPageScopeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setStorageAccessAPIPerPageScopeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setStorageAccessAPIPerPageScopeEnabledBody>(*lexicalGlobalObject, *callFrame, "setStorageAccessAPIPerPageScopeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRCompositorTonemappingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto supportHDRCompositorTonemappingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (supportHDRCompositorTonemappingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSupportHDRCompositorTonemappingEnabled(supportHDRCompositorTonemappingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRCompositorTonemappingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRCompositorTonemappingEnabledBody>(*lexicalGlobalObject, *callFrame, "setSupportHDRCompositorTonemappingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRDisplayEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto supportHDRDisplayEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (supportHDRDisplayEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSupportHDRDisplayEnabled(supportHDRDisplayEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRDisplayEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSupportHDRDisplayEnabledBody>(*lexicalGlobalObject, *callFrame, "setSupportHDRDisplayEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSuppressHDRShouldBeAllowedInFullscreenVideoBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto suppressHDRShouldBeAllowedInFullscreenVideoConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (suppressHDRShouldBeAllowedInFullscreenVideoConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSuppressHDRShouldBeAllowedInFullscreenVideo(suppressHDRShouldBeAllowedInFullscreenVideoConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSuppressHDRShouldBeAllowedInFullscreenVideo, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSuppressHDRShouldBeAllowedInFullscreenVideoBody>(*lexicalGlobalObject, *callFrame, "setSuppressHDRShouldBeAllowedInFullscreenVideo");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSuppressesIncrementalRenderingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto suppressesIncrementalRenderingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (suppressesIncrementalRenderingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSuppressesIncrementalRendering(suppressesIncrementalRenderingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSuppressesIncrementalRendering, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSuppressesIncrementalRenderingBody>(*lexicalGlobalObject, *callFrame, "setSuppressesIncrementalRendering");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSwitchControlEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto switchControlEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (switchControlEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSwitchControlEnabled(switchControlEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSwitchControlEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSwitchControlEnabledBody>(*lexicalGlobalObject, *callFrame, "setSwitchControlEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setSystemPreviewEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto systemPreviewEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (systemPreviewEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSystemPreviewEnabled(systemPreviewEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setSystemPreviewEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setSystemPreviewEnabledBody>(*lexicalGlobalObject, *callFrame, "setSystemPreviewEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTargetTextPseudoElementEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto targetTextPseudoElementEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (targetTextPseudoElementEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTargetTextPseudoElementEnabled(targetTextPseudoElementEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTargetTextPseudoElementEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTargetTextPseudoElementEnabledBody>(*lexicalGlobalObject, *callFrame, "setTargetTextPseudoElementEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTelephoneNumberParsingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto telephoneNumberParsingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (telephoneNumberParsingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTelephoneNumberParsingEnabled(telephoneNumberParsingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTelephoneNumberParsingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTelephoneNumberParsingEnabledBody>(*lexicalGlobalObject, *callFrame, "setTelephoneNumberParsingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTemporaryTileCohortRetentionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto temporaryTileCohortRetentionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (temporaryTileCohortRetentionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTemporaryTileCohortRetentionEnabled(temporaryTileCohortRetentionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTemporaryTileCohortRetentionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTemporaryTileCohortRetentionEnabledBody>(*lexicalGlobalObject, *callFrame, "setTemporaryTileCohortRetentionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextAnimationsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textAnimationsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textAnimationsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAnimationsEnabled(textAnimationsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAnimationsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextAnimationsEnabledBody>(*lexicalGlobalObject, *callFrame, "setTextAnimationsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextAreasAreResizableBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textAreasAreResizableConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textAreasAreResizableConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAreasAreResizable(textAreasAreResizableConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAreasAreResizable, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextAreasAreResizableBody>(*lexicalGlobalObject, *callFrame, "setTextAreasAreResizable");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textAutosizingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textAutosizingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAutosizingEnabled(textAutosizingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabledBody>(*lexicalGlobalObject, *callFrame, "setTextAutosizingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabledAtLargeInitialScaleBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textAutosizingEnabledAtLargeInitialScaleConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textAutosizingEnabledAtLargeInitialScaleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAutosizingEnabledAtLargeInitialScale(textAutosizingEnabledAtLargeInitialScaleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabledAtLargeInitialScale, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingEnabledAtLargeInitialScaleBody>(*lexicalGlobalObject, *callFrame, "setTextAutosizingEnabledAtLargeInitialScale");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingUsesIdempotentModeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textAutosizingUsesIdempotentModeConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textAutosizingUsesIdempotentModeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAutosizingUsesIdempotentMode(textAutosizingUsesIdempotentModeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingUsesIdempotentMode, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingUsesIdempotentModeBody>(*lexicalGlobalObject, *callFrame, "setTextAutosizingUsesIdempotentMode");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideHeightBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textAutosizingWindowSizeOverrideHeightConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (textAutosizingWindowSizeOverrideHeightConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAutosizingWindowSizeOverrideHeight(textAutosizingWindowSizeOverrideHeightConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideHeight, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideHeightBody>(*lexicalGlobalObject, *callFrame, "setTextAutosizingWindowSizeOverrideHeight");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideWidthBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textAutosizingWindowSizeOverrideWidthConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (textAutosizingWindowSizeOverrideWidthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAutosizingWindowSizeOverrideWidth(textAutosizingWindowSizeOverrideWidthConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideWidth, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextAutosizingWindowSizeOverrideWidthBody>(*lexicalGlobalObject, *callFrame, "setTextAutosizingWindowSizeOverrideWidth");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextInteractionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textInteractionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textInteractionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextInteractionEnabled(textInteractionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextInteractionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextInteractionEnabledBody>(*lexicalGlobalObject, *callFrame, "setTextInteractionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextRecognitionInVideosEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textRecognitionInVideosEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textRecognitionInVideosEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextRecognitionInVideosEnabled(textRecognitionInVideosEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextRecognitionInVideosEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextRecognitionInVideosEnabledBody>(*lexicalGlobalObject, *callFrame, "setTextRecognitionInVideosEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTextTracksInMSEEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto textTracksInMSEEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (textTracksInMSEEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextTracksInMSEEnabled(textTracksInMSEEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTextTracksInMSEEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTextTracksInMSEEnabledBody>(*lexicalGlobalObject, *callFrame, "setTextTracksInMSEEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setThreadedAnimationResolutionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto threadedAnimationResolutionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (threadedAnimationResolutionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setThreadedAnimationResolutionEnabled(threadedAnimationResolutionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setThreadedAnimationResolutionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setThreadedAnimationResolutionEnabledBody>(*lexicalGlobalObject, *callFrame, "setThreadedAnimationResolutionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setThumbAndTrackPseudoElementsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto thumbAndTrackPseudoElementsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (thumbAndTrackPseudoElementsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setThumbAndTrackPseudoElementsEnabled(thumbAndTrackPseudoElementsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setThumbAndTrackPseudoElementsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setThumbAndTrackPseudoElementsEnabledBody>(*lexicalGlobalObject, *callFrame, "setThumbAndTrackPseudoElementsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTopContentInsetBackgroundCanChangeAfterScrollingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto topContentInsetBackgroundCanChangeAfterScrollingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (topContentInsetBackgroundCanChangeAfterScrollingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTopContentInsetBackgroundCanChangeAfterScrolling(topContentInsetBackgroundCanChangeAfterScrollingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTopContentInsetBackgroundCanChangeAfterScrolling, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTopContentInsetBackgroundCanChangeAfterScrollingBody>(*lexicalGlobalObject, *callFrame, "setTopContentInsetBackgroundCanChangeAfterScrolling");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTouchEventDOMAttributesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto touchEventDOMAttributesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (touchEventDOMAttributesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTouchEventDOMAttributesEnabled(touchEventDOMAttributesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTouchEventDOMAttributesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTouchEventDOMAttributesEnabledBody>(*lexicalGlobalObject, *callFrame, "setTouchEventDOMAttributesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTouchEventEmulationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto touchEventEmulationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (touchEventEmulationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTouchEventEmulationEnabled(touchEventEmulationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTouchEventEmulationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTouchEventEmulationEnabledBody>(*lexicalGlobalObject, *callFrame, "setTouchEventEmulationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTouchInputCompatibilityEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto touchInputCompatibilityEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (touchInputCompatibilityEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTouchInputCompatibilityEnabled(touchInputCompatibilityEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTouchInputCompatibilityEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTouchInputCompatibilityEnabledBody>(*lexicalGlobalObject, *callFrame, "setTouchInputCompatibilityEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTrackConfigurationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto trackConfigurationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (trackConfigurationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTrackConfigurationEnabled(trackConfigurationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTrackConfigurationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTrackConfigurationEnabledBody>(*lexicalGlobalObject, *callFrame, "setTrackConfigurationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTreatIPAddressAsDomainBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto treatIPAddressAsDomainConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (treatIPAddressAsDomainConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTreatIPAddressAsDomain(treatIPAddressAsDomainConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTreatIPAddressAsDomain, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTreatIPAddressAsDomainBody>(*lexicalGlobalObject, *callFrame, "setTreatIPAddressAsDomain");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTreatsAnyTextCSSLinkAsStylesheetBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto treatsAnyTextCSSLinkAsStylesheetConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (treatsAnyTextCSSLinkAsStylesheetConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTreatsAnyTextCSSLinkAsStylesheet(treatsAnyTextCSSLinkAsStylesheetConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTreatsAnyTextCSSLinkAsStylesheet, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTreatsAnyTextCSSLinkAsStylesheetBody>(*lexicalGlobalObject, *callFrame, "setTreatsAnyTextCSSLinkAsStylesheet");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setTrustedTypesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto trustedTypesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (trustedTypesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTrustedTypesEnabled(trustedTypesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setTrustedTypesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setTrustedTypesEnabledBody>(*lexicalGlobalObject, *callFrame, "setTrustedTypesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUAVisualTransitionDetectionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto uAVisualTransitionDetectionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (uAVisualTransitionDetectionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUAVisualTransitionDetectionEnabled(uAVisualTransitionDetectionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUAVisualTransitionDetectionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUAVisualTransitionDetectionEnabledBody>(*lexicalGlobalObject, *callFrame, "setUAVisualTransitionDetectionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUndoManagerAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto undoManagerAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (undoManagerAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUndoManagerAPIEnabled(undoManagerAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUndoManagerAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUndoManagerAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setUndoManagerAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUnhandledPromiseRejectionToConsoleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto unhandledPromiseRejectionToConsoleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (unhandledPromiseRejectionToConsoleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUnhandledPromiseRejectionToConsoleEnabled(unhandledPromiseRejectionToConsoleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnhandledPromiseRejectionToConsoleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUnhandledPromiseRejectionToConsoleEnabledBody>(*lexicalGlobalObject, *callFrame, "setUnhandledPromiseRejectionToConsoleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUnifiedPDFEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto unifiedPDFEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (unifiedPDFEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUnifiedPDFEnabled(unifiedPDFEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnifiedPDFEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUnifiedPDFEnabledBody>(*lexicalGlobalObject, *callFrame, "setUnifiedPDFEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUnifiedTextCheckerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto unifiedTextCheckerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (unifiedTextCheckerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUnifiedTextCheckerEnabled(unifiedTextCheckerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnifiedTextCheckerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUnifiedTextCheckerEnabledBody>(*lexicalGlobalObject, *callFrame, "setUnifiedTextCheckerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUnifyDamagedRegionsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto unifyDamagedRegionsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (unifyDamagedRegionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUnifyDamagedRegions(unifyDamagedRegionsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUnifyDamagedRegions, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUnifyDamagedRegionsBody>(*lexicalGlobalObject, *callFrame, "setUnifyDamagedRegions");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUpgradeMixedContentEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto upgradeMixedContentEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (upgradeMixedContentEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUpgradeMixedContentEnabled(upgradeMixedContentEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUpgradeMixedContentEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUpgradeMixedContentEnabledBody>(*lexicalGlobalObject, *callFrame, "setUpgradeMixedContentEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setURLPatternAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto urlPatternAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (urlPatternAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setURLPatternAPIEnabled(urlPatternAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setURLPatternAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setURLPatternAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setURLPatternAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseAnonymousModeWhenFetchingMaskImagesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useAnonymousModeWhenFetchingMaskImagesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useAnonymousModeWhenFetchingMaskImagesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseAnonymousModeWhenFetchingMaskImages(useAnonymousModeWhenFetchingMaskImagesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseAnonymousModeWhenFetchingMaskImages, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseAnonymousModeWhenFetchingMaskImagesBody>(*lexicalGlobalObject, *callFrame, "setUseAnonymousModeWhenFetchingMaskImages");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseAsyncUIKitInteractionsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useAsyncUIKitInteractionsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useAsyncUIKitInteractionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseAsyncUIKitInteractions(useAsyncUIKitInteractionsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseAsyncUIKitInteractions, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseAsyncUIKitInteractionsBody>(*lexicalGlobalObject, *callFrame, "setUseAsyncUIKitInteractions");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseDamagingInformationForCompositingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useDamagingInformationForCompositingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useDamagingInformationForCompositingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseDamagingInformationForCompositing(useDamagingInformationForCompositingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseDamagingInformationForCompositing, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseDamagingInformationForCompositingBody>(*lexicalGlobalObject, *callFrame, "setUseDamagingInformationForCompositing");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseGPUProcessForWebGLEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useGPUProcessForWebGLEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useGPUProcessForWebGLEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseGPUProcessForWebGLEnabled(useGPUProcessForWebGLEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseGPUProcessForWebGLEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseGPUProcessForWebGLEnabledBody>(*lexicalGlobalObject, *callFrame, "setUseGPUProcessForWebGLEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseGiantTilesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useGiantTilesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useGiantTilesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseGiantTiles(useGiantTilesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseGiantTiles, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseGiantTilesBody>(*lexicalGlobalObject, *callFrame, "setUseGiantTiles");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseIFCForSVGTextBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useIFCForSVGTextConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useIFCForSVGTextConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseIFCForSVGText(useIFCForSVGTextConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseIFCForSVGText, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseIFCForSVGTextBody>(*lexicalGlobalObject, *callFrame, "setUseIFCForSVGText");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseImageDocumentForSubframePDFBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useImageDocumentForSubframePDFConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useImageDocumentForSubframePDFConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseImageDocumentForSubframePDF(useImageDocumentForSubframePDFConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseImageDocumentForSubframePDF, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseImageDocumentForSubframePDFBody>(*lexicalGlobalObject, *callFrame, "setUseImageDocumentForSubframePDF");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseMicrophoneMuteStatusAPIBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useMicrophoneMuteStatusAPIConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useMicrophoneMuteStatusAPIConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseMicrophoneMuteStatusAPI(useMicrophoneMuteStatusAPIConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseMicrophoneMuteStatusAPI, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseMicrophoneMuteStatusAPIBody>(*lexicalGlobalObject, *callFrame, "setUseMicrophoneMuteStatusAPI");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUsePreHTML5ParserQuirksBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto usePreHTML5ParserQuirksConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (usePreHTML5ParserQuirksConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUsePreHTML5ParserQuirks(usePreHTML5ParserQuirksConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUsePreHTML5ParserQuirks, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUsePreHTML5ParserQuirksBody>(*lexicalGlobalObject, *callFrame, "setUsePreHTML5ParserQuirks");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUseSystemAppearanceBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto useSystemAppearanceConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (useSystemAppearanceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseSystemAppearance(useSystemAppearanceConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUseSystemAppearance, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUseSystemAppearanceBody>(*lexicalGlobalObject, *callFrame, "setUseSystemAppearance");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUserActivationAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto userActivationAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (userActivationAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUserActivationAPIEnabled(userActivationAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUserActivationAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUserActivationAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setUserActivationAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUserGesturePromisePropagationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto userGesturePromisePropagationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (userGesturePromisePropagationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUserGesturePromisePropagationEnabled(userGesturePromisePropagationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUserGesturePromisePropagationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUserGesturePromisePropagationEnabledBody>(*lexicalGlobalObject, *callFrame, "setUserGesturePromisePropagationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setUsesEncodingDetectorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto usesEncodingDetectorConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (usesEncodingDetectorConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUsesEncodingDetector(usesEncodingDetectorConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setUsesEncodingDetector, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setUsesEncodingDetectorBody>(*lexicalGlobalObject, *callFrame, "setUsesEncodingDetector");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setValidationMessageTimerMagnificationBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto validationMessageTimerMagnificationConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (validationMessageTimerMagnificationConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setValidationMessageTimerMagnification(validationMessageTimerMagnificationConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setValidationMessageTimerMagnification, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setValidationMessageTimerMagnificationBody>(*lexicalGlobalObject, *callFrame, "setValidationMessageTimerMagnification");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVerifyWindowOpenUserGestureFromUIProcessBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto verifyWindowOpenUserGestureFromUIProcessConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (verifyWindowOpenUserGestureFromUIProcessConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVerifyWindowOpenUserGestureFromUIProcess(verifyWindowOpenUserGestureFromUIProcessConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVerifyWindowOpenUserGestureFromUIProcess, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVerifyWindowOpenUserGestureFromUIProcessBody>(*lexicalGlobalObject, *callFrame, "setVerifyWindowOpenUserGestureFromUIProcess");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVerticalFormControlsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto verticalFormControlsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (verticalFormControlsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVerticalFormControlsEnabled(verticalFormControlsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVerticalFormControlsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVerticalFormControlsEnabledBody>(*lexicalGlobalObject, *callFrame, "setVerticalFormControlsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVideoFullsceenPrefersMostVisibleHeuristicBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto videoFullsceenPrefersMostVisibleHeuristicConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (videoFullsceenPrefersMostVisibleHeuristicConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVideoFullsceenPrefersMostVisibleHeuristic(videoFullsceenPrefersMostVisibleHeuristicConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoFullsceenPrefersMostVisibleHeuristic, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVideoFullsceenPrefersMostVisibleHeuristicBody>(*lexicalGlobalObject, *callFrame, "setVideoFullsceenPrefersMostVisibleHeuristic");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVideoFullscreenRequiresElementFullscreenBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto videoFullscreenRequiresElementFullscreenConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (videoFullscreenRequiresElementFullscreenConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVideoFullscreenRequiresElementFullscreen(videoFullscreenRequiresElementFullscreenConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoFullscreenRequiresElementFullscreen, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVideoFullscreenRequiresElementFullscreenBody>(*lexicalGlobalObject, *callFrame, "setVideoFullscreenRequiresElementFullscreen");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationManagerEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto videoPresentationManagerEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (videoPresentationManagerEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVideoPresentationManagerEnabled(videoPresentationManagerEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationManagerEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationManagerEnabledBody>(*lexicalGlobalObject, *callFrame, "setVideoPresentationManagerEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationModeAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto videoPresentationModeAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (videoPresentationModeAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVideoPresentationModeAPIEnabled(videoPresentationModeAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationModeAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVideoPresentationModeAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setVideoPresentationModeAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVideoQualityIncludesDisplayCompositingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto videoQualityIncludesDisplayCompositingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (videoQualityIncludesDisplayCompositingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVideoQualityIncludesDisplayCompositingEnabled(videoQualityIncludesDisplayCompositingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoQualityIncludesDisplayCompositingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVideoQualityIncludesDisplayCompositingEnabledBody>(*lexicalGlobalObject, *callFrame, "setVideoQualityIncludesDisplayCompositingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererProtectedFallbackDisabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto videoRendererProtectedFallbackDisabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (videoRendererProtectedFallbackDisabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVideoRendererProtectedFallbackDisabled(videoRendererProtectedFallbackDisabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererProtectedFallbackDisabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererProtectedFallbackDisabledBody>(*lexicalGlobalObject, *callFrame, "setVideoRendererProtectedFallbackDisabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererUseDecompressionSessionForProtectedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto videoRendererUseDecompressionSessionForProtectedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (videoRendererUseDecompressionSessionForProtectedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVideoRendererUseDecompressionSessionForProtected(videoRendererUseDecompressionSessionForProtectedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererUseDecompressionSessionForProtected, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVideoRendererUseDecompressionSessionForProtectedBody>(*lexicalGlobalObject, *callFrame, "setVideoRendererUseDecompressionSessionForProtected");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionClassesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto viewTransitionClassesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (viewTransitionClassesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setViewTransitionClassesEnabled(viewTransitionClassesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionClassesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionClassesEnabledBody>(*lexicalGlobalObject, *callFrame, "setViewTransitionClassesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionTypesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto viewTransitionTypesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (viewTransitionTypesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setViewTransitionTypesEnabled(viewTransitionTypesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionTypesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionTypesEnabledBody>(*lexicalGlobalObject, *callFrame, "setViewTransitionTypesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto viewTransitionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (viewTransitionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setViewTransitionsEnabled(viewTransitionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setViewTransitionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setViewTransitionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVisibleDebugOverlayRegionsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto visibleDebugOverlayRegionsConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (visibleDebugOverlayRegionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVisibleDebugOverlayRegions(visibleDebugOverlayRegionsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisibleDebugOverlayRegions, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVisibleDebugOverlayRegionsBody>(*lexicalGlobalObject, *callFrame, "setVisibleDebugOverlayRegions");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVisualTranslationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto visualTranslationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (visualTranslationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVisualTranslationEnabled(visualTranslationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisualTranslationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVisualTranslationEnabledBody>(*lexicalGlobalObject, *callFrame, "setVisualTranslationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto visualViewportAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (visualViewportAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVisualViewportAPIEnabled(visualViewportAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setVisualViewportAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto visualViewportEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (visualViewportEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVisualViewportEnabled(visualViewportEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVisualViewportEnabledBody>(*lexicalGlobalObject, *callFrame, "setVisualViewportEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVisuallyContiguousBidiTextSelectionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto visuallyContiguousBidiTextSelectionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (visuallyContiguousBidiTextSelectionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVisuallyContiguousBidiTextSelectionEnabled(visuallyContiguousBidiTextSelectionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVisuallyContiguousBidiTextSelectionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVisuallyContiguousBidiTextSelectionEnabledBody>(*lexicalGlobalObject, *callFrame, "setVisuallyContiguousBidiTextSelectionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setVP9DecoderEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto vp9DecoderEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (vp9DecoderEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setVP9DecoderEnabled(vp9DecoderEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setVP9DecoderEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setVP9DecoderEnabledBody>(*lexicalGlobalObject, *callFrame, "setVP9DecoderEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWantsBalancedSetDefersLoadingBehaviorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto wantsBalancedSetDefersLoadingBehaviorConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (wantsBalancedSetDefersLoadingBehaviorConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWantsBalancedSetDefersLoadingBehavior(wantsBalancedSetDefersLoadingBehaviorConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWantsBalancedSetDefersLoadingBehavior, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWantsBalancedSetDefersLoadingBehaviorBody>(*lexicalGlobalObject, *callFrame, "setWantsBalancedSetDefersLoadingBehavior");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAPIStatisticsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAPIStatisticsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAPIStatisticsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAPIStatisticsEnabled(webAPIStatisticsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAPIStatisticsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAPIStatisticsEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAPIStatisticsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAPIsInShadowRealmEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAPIsInShadowRealmEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAPIsInShadowRealmEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAPIsInShadowRealmEnabled(webAPIsInShadowRealmEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAPIsInShadowRealmEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAPIsInShadowRealmEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAPIsInShadowRealmEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomEffectsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAnimationsCustomEffectsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAnimationsCustomEffectsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAnimationsCustomEffectsEnabled(webAnimationsCustomEffectsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomEffectsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomEffectsEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAnimationsCustomEffectsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomFrameRateEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAnimationsCustomFrameRateEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAnimationsCustomFrameRateEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAnimationsCustomFrameRateEnabled(webAnimationsCustomFrameRateEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomFrameRateEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsCustomFrameRateEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAnimationsCustomFrameRateEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsOverallProgressPropertyEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAnimationsOverallProgressPropertyEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAnimationsOverallProgressPropertyEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAnimationsOverallProgressPropertyEnabled(webAnimationsOverallProgressPropertyEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsOverallProgressPropertyEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAnimationsOverallProgressPropertyEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAnimationsOverallProgressPropertyEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveDebugModeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webArchiveDebugModeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webArchiveDebugModeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebArchiveDebugModeEnabled(webArchiveDebugModeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveDebugModeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveDebugModeEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebArchiveDebugModeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveTestingModeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webArchiveTestingModeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webArchiveTestingModeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebArchiveTestingModeEnabled(webArchiveTestingModeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveTestingModeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebArchiveTestingModeEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebArchiveTestingModeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAssemblyESMIntegrationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAssemblyESMIntegrationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAssemblyESMIntegrationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAssemblyESMIntegrationEnabled(webAssemblyESMIntegrationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAssemblyESMIntegrationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAssemblyESMIntegrationEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAssemblyESMIntegrationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAudioEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAudioEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAudioEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAudioEnabled(webAudioEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAudioEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAudioEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAudioEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationASEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAuthenticationASEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAuthenticationASEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAuthenticationASEnabled(webAuthenticationASEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationASEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationASEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAuthenticationASEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webAuthenticationEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webAuthenticationEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebAuthenticationEnabled(webAuthenticationEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebAuthenticationEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebAuthenticationEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAV1EnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webCodecsAV1EnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webCodecsAV1EnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebCodecsAV1Enabled(webCodecsAV1EnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAV1Enabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAV1EnabledBody>(*lexicalGlobalObject, *callFrame, "setWebCodecsAV1Enabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAudioEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webCodecsAudioEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webCodecsAudioEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebCodecsAudioEnabled(webCodecsAudioEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAudioEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsAudioEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebCodecsAudioEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsHEVCEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webCodecsHEVCEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webCodecsHEVCEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebCodecsHEVCEnabled(webCodecsHEVCEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsHEVCEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsHEVCEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebCodecsHEVCEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsVideoEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webCodecsVideoEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webCodecsVideoEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebCodecsVideoEnabled(webCodecsVideoEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsVideoEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebCodecsVideoEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebCodecsVideoEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoSafeCurvesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webCryptoSafeCurvesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webCryptoSafeCurvesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebCryptoSafeCurvesEnabled(webCryptoSafeCurvesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoSafeCurvesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoSafeCurvesEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebCryptoSafeCurvesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoX25519EnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webCryptoX25519EnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webCryptoX25519EnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebCryptoX25519Enabled(webCryptoX25519EnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoX25519Enabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebCryptoX25519EnabledBody>(*lexicalGlobalObject, *callFrame, "setWebCryptoX25519Enabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionBookmarksEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webExtensionBookmarksEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webExtensionBookmarksEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebExtensionBookmarksEnabled(webExtensionBookmarksEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionBookmarksEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionBookmarksEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebExtensionBookmarksEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionSidebarEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webExtensionSidebarEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webExtensionSidebarEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebExtensionSidebarEnabled(webExtensionSidebarEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionSidebarEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebExtensionSidebarEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebExtensionSidebarEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebGLDraftExtensionsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webGLDraftExtensionsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webGLDraftExtensionsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebGLDraftExtensionsEnabled(webGLDraftExtensionsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLDraftExtensionsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebGLDraftExtensionsEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebGLDraftExtensionsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebGLEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webGLEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webGLEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebGLEnabled(webGLEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebGLEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebGLEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebGLErrorsToConsoleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webGLErrorsToConsoleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webGLErrorsToConsoleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebGLErrorsToConsoleEnabled(webGLErrorsToConsoleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLErrorsToConsoleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebGLErrorsToConsoleEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebGLErrorsToConsoleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebGLTimerQueriesEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webGLTimerQueriesEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webGLTimerQueriesEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebGLTimerQueriesEnabled(webGLTimerQueriesEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGLTimerQueriesEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebGLTimerQueriesEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebGLTimerQueriesEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebGPUEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webGPUEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webGPUEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebGPUEnabled(webGPUEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGPUEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebGPUEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebGPUEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebGPUHDREnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webGPUHDREnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webGPUHDREnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebGPUHDREnabled(webGPUHDREnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebGPUHDREnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebGPUHDREnabledBody>(*lexicalGlobalObject, *callFrame, "setWebGPUHDREnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebInspectorEngineeringSettingsAllowedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webInspectorEngineeringSettingsAllowedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webInspectorEngineeringSettingsAllowedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebInspectorEngineeringSettingsAllowed(webInspectorEngineeringSettingsAllowedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebInspectorEngineeringSettingsAllowed, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebInspectorEngineeringSettingsAllowedBody>(*lexicalGlobalObject, *callFrame, "setWebInspectorEngineeringSettingsAllowed");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebLocksAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webLocksAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webLocksAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebLocksAPIEnabled(webLocksAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebLocksAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebLocksAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebLocksAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebPageSpatialBackdropEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webPageSpatialBackdropEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webPageSpatialBackdropEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebPageSpatialBackdropEnabled(webPageSpatialBackdropEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebPageSpatialBackdropEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebPageSpatialBackdropEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebPageSpatialBackdropEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCAV1CodecEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCAV1CodecEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCAV1CodecEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCAV1CodecEnabled(webRTCAV1CodecEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCAV1CodecEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCAV1CodecEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCAV1CodecEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCDTMFEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCDTMFEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCDTMFEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCDTMFEnabled(webRTCDTMFEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCDTMFEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCDTMFEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCDTMFEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncodedTransformEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCEncodedTransformEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCEncodedTransformEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCEncodedTransformEnabled(webRTCEncodedTransformEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncodedTransformEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncodedTransformEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCEncodedTransformEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncryptionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCEncryptionEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCEncryptionEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCEncryptionEnabled(webRTCEncryptionEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncryptionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCEncryptionEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCEncryptionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCH265CodecEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCH265CodecEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCH265CodecEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCH265CodecEnabled(webRTCH265CodecEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCH265CodecEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCH265CodecEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCH265CodecEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCInterfaceMonitoringViaNWEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCInterfaceMonitoringViaNWEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCInterfaceMonitoringViaNWEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCInterfaceMonitoringViaNWEnabled(webRTCInterfaceMonitoringViaNWEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCInterfaceMonitoringViaNWEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCInterfaceMonitoringViaNWEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCInterfaceMonitoringViaNWEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCL4SEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCL4SEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCL4SEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCL4SEnabled(webRTCL4SEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCL4SEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCL4SEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCL4SEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCMediaPipelineAdditionalLoggingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCMediaPipelineAdditionalLoggingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCMediaPipelineAdditionalLoggingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCMediaPipelineAdditionalLoggingEnabled(webRTCMediaPipelineAdditionalLoggingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCMediaPipelineAdditionalLoggingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCMediaPipelineAdditionalLoggingEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCMediaPipelineAdditionalLoggingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCPlatformCodecsInGPUProcessEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCPlatformCodecsInGPUProcessEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCPlatformCodecsInGPUProcessEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCPlatformCodecsInGPUProcessEnabled(webRTCPlatformCodecsInGPUProcessEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCPlatformCodecsInGPUProcessEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCPlatformCodecsInGPUProcessEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCPlatformCodecsInGPUProcessEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCRemoteVideoFrameEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCRemoteVideoFrameEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCRemoteVideoFrameEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCRemoteVideoFrameEnabled(webRTCRemoteVideoFrameEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCRemoteVideoFrameEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCRemoteVideoFrameEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCRemoteVideoFrameEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSFrameTransformEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCSFrameTransformEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCSFrameTransformEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCSFrameTransformEnabled(webRTCSFrameTransformEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSFrameTransformEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSFrameTransformEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCSFrameTransformEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSocketsProxyingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCSocketsProxyingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCSocketsProxyingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCSocketsProxyingEnabled(webRTCSocketsProxyingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSocketsProxyingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCSocketsProxyingEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCSocketsProxyingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCUDPPortRangeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCUDPPortRangeConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (webRTCUDPPortRangeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCUDPPortRange(webRTCUDPPortRangeConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCUDPPortRange, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCUDPPortRangeBody>(*lexicalGlobalObject, *callFrame, "setWebRTCUDPPortRange");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile0CodecEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCVP9Profile0CodecEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCVP9Profile0CodecEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCVP9Profile0CodecEnabled(webRTCVP9Profile0CodecEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile0CodecEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile0CodecEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCVP9Profile0CodecEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile2CodecEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webRTCVP9Profile2CodecEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webRTCVP9Profile2CodecEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebRTCVP9Profile2CodecEnabled(webRTCVP9Profile2CodecEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile2CodecEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebRTCVP9Profile2CodecEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebRTCVP9Profile2CodecEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebSecurityEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webSecurityEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webSecurityEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebSecurityEnabled(webSecurityEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebSecurityEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebSecurityEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebSecurityEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebShareEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webShareEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webShareEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebShareEnabled(webShareEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebShareEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebShareEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebShareEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebShareFileAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webShareFileAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webShareFileAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebShareFileAPIEnabled(webShareFileAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebShareFileAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebShareFileAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebShareFileAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebSocketEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webSocketEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webSocketEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebSocketEnabled(webSocketEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebSocketEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebSocketEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebSocketEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebTransportEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webTransportEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webTransportEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebTransportEnabled(webTransportEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebTransportEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebTransportEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebTransportEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebXRAugmentedRealityModuleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webXRAugmentedRealityModuleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webXRAugmentedRealityModuleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebXRAugmentedRealityModuleEnabled(webXRAugmentedRealityModuleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRAugmentedRealityModuleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebXRAugmentedRealityModuleEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebXRAugmentedRealityModuleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebXREnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webXREnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webXREnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebXREnabled(webXREnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXREnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebXREnabledBody>(*lexicalGlobalObject, *callFrame, "setWebXREnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebXRGamepadsModuleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webXRGamepadsModuleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webXRGamepadsModuleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebXRGamepadsModuleEnabled(webXRGamepadsModuleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRGamepadsModuleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebXRGamepadsModuleEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebXRGamepadsModuleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebXRHandInputModuleEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webXRHandInputModuleEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webXRHandInputModuleEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebXRHandInputModuleEnabled(webXRHandInputModuleEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRHandInputModuleEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebXRHandInputModuleEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebXRHandInputModuleEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebXRLayersAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webXRLayersAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webXRLayersAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebXRLayersAPIEnabled(webXRLayersAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRLayersAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebXRLayersAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebXRLayersAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebXRWebGPUBindingsEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webXRWebGPUBindingsEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webXRWebGPUBindingsEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebXRWebGPUBindingsEnabled(webXRWebGPUBindingsEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebXRWebGPUBindingsEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebXRWebGPUBindingsEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebXRWebGPUBindingsEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWebkitImageReadyEventEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto webkitImageReadyEventEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (webkitImageReadyEventEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWebkitImageReadyEventEnabled(webkitImageReadyEventEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWebkitImageReadyEventEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWebkitImageReadyEventEnabledBody>(*lexicalGlobalObject, *callFrame, "setWebkitImageReadyEventEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWheelEventGesturesBecomeNonBlockingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto wheelEventGesturesBecomeNonBlockingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (wheelEventGesturesBecomeNonBlockingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWheelEventGesturesBecomeNonBlocking(wheelEventGesturesBecomeNonBlockingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWheelEventGesturesBecomeNonBlocking, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWheelEventGesturesBecomeNonBlockingBody>(*lexicalGlobalObject, *callFrame, "setWheelEventGesturesBecomeNonBlocking");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWindowFocusRestrictedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto windowFocusRestrictedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (windowFocusRestrictedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWindowFocusRestricted(windowFocusRestrictedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWindowFocusRestricted, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWindowFocusRestrictedBody>(*lexicalGlobalObject, *callFrame, "setWindowFocusRestricted");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWirelessPlaybackTargetAPIEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto wirelessPlaybackTargetAPIEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (wirelessPlaybackTargetAPIEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWirelessPlaybackTargetAPIEnabled(wirelessPlaybackTargetAPIEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWirelessPlaybackTargetAPIEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWirelessPlaybackTargetAPIEnabledBody>(*lexicalGlobalObject, *callFrame, "setWirelessPlaybackTargetAPIEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWorkerAsynchronousURLErrorHandlingEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto workerAsynchronousURLErrorHandlingEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (workerAsynchronousURLErrorHandlingEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWorkerAsynchronousURLErrorHandlingEnabled(workerAsynchronousURLErrorHandlingEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWorkerAsynchronousURLErrorHandlingEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWorkerAsynchronousURLErrorHandlingEnabledBody>(*lexicalGlobalObject, *callFrame, "setWorkerAsynchronousURLErrorHandlingEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWriteRichTextDataWhenCopyingOrDraggingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto writeRichTextDataWhenCopyingOrDraggingConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (writeRichTextDataWhenCopyingOrDraggingConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWriteRichTextDataWhenCopyingOrDragging(writeRichTextDataWhenCopyingOrDraggingConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWriteRichTextDataWhenCopyingOrDragging, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWriteRichTextDataWhenCopyingOrDraggingBody>(*lexicalGlobalObject, *callFrame, "setWriteRichTextDataWhenCopyingOrDragging");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setWritingSuggestionsAttributeEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto writingSuggestionsAttributeEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (writingSuggestionsAttributeEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setWritingSuggestionsAttributeEnabled(writingSuggestionsAttributeEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setWritingSuggestionsAttributeEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setWritingSuggestionsAttributeEnabledBody>(*lexicalGlobalObject, *callFrame, "setWritingSuggestionsAttributeEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsGeneratedPrototypeFunction_setXsltEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettingsGenerated>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto xsltEnabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (xsltEnabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setXsltEnabled(xsltEnabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsGeneratedPrototypeFunction_setXsltEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettingsGenerated>::call<jsInternalSettingsGeneratedPrototypeFunction_setXsltEnabledBody>(*lexicalGlobalObject, *callFrame, "setXsltEnabled");
}

JSC::GCClient::IsoSubspace* JSInternalSettingsGenerated::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSInternalSettingsGenerated, UseCustomHeapCellType::No>(vm, "JSInternalSettingsGenerated"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForInternalSettingsGenerated.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForInternalSettingsGenerated = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForInternalSettingsGenerated.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForInternalSettingsGenerated = std::forward<decltype(space)>(space); }
    );
}

void JSInternalSettingsGenerated::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSInternalSettingsGenerated*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSInternalSettingsGeneratedOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSInternalSettingsGeneratedOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsInternalSettingsGenerated = static_cast<JSInternalSettingsGenerated*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsInternalSettingsGenerated->protectedWrapped().ptr(), jsInternalSettingsGenerated);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7InternalSettingsGenerated@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore25InternalSettingsGeneratedE[]; }
#endif
template<std::same_as<InternalSettingsGenerated> T>
static inline void verifyVTable(InternalSettingsGenerated* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7InternalSettingsGenerated@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore25InternalSettingsGeneratedE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // InternalSettingsGenerated has subclasses. If InternalSettingsGenerated has subclasses that get passed
        // to toJS() we currently require InternalSettingsGenerated you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<InternalSettingsGenerated>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<InternalSettingsGenerated>(impl.ptr());
#endif
    return createWrapper<InternalSettingsGenerated>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, InternalSettingsGenerated& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

InternalSettingsGenerated* JSInternalSettingsGenerated::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSInternalSettingsGenerated*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
