/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSGPUImageCopyExternalImage.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertUnion.h"
#include "JSGPUOrigin2DDict.h"
#include "JSHTMLCanvasElement.h"
#include "JSImageBitmap.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <wtf/Variant.h>



namespace WebCore {
using namespace JSC;

template<> ConversionResult<IDLDictionary<GPUImageCopyExternalImage>> convertDictionary<GPUImageCopyExternalImage>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    GPUImageCopyExternalImage result;
    JSValue flipYValue;
    if (isNullOrUndefined)
        flipYValue = jsUndefined();
    else {
        flipYValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "flipY"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto flipYConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, flipYValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (flipYConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.flipY = flipYConversionResult.releaseReturnValue();
    JSValue originValue;
    if (isNullOrUndefined)
        originValue = jsUndefined();
    else {
        originValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "origin"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!originValue.isUndefined()) {
        auto originConversionResult = convert<IDLUnion<IDLSequence<IDLEnforceRangeAdaptor<IDLUnsignedLong>>, IDLDictionary<GPUOrigin2DDict>>>(lexicalGlobalObject, originValue);
        if (originConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.origin = originConversionResult.releaseReturnValue();
    }
    JSValue sourceValue;
    if (isNullOrUndefined)
        sourceValue = jsUndefined();
    else {
        sourceValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "source"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (sourceValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "source"_s, "GPUImageCopyExternalImage"_s, "(ImageBitmap or HTMLCanvasElement)"_s);
        return ConversionResultException { };
    }
    auto sourceConversionResult = convert<IDLUnion<IDLInterface<ImageBitmap>, IDLInterface<HTMLCanvasElement>>>(lexicalGlobalObject, sourceValue);
    if (sourceConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.source = sourceConversionResult.releaseReturnValue();
    return result;
}

} // namespace WebCore

