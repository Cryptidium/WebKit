/* C++ code produced by gperf version 3.1 */
/* Command-line: C:/Dev/gperf/gperf.exe --key-positions='*' -m 10 -s 2 --output-file=SelectorPseudoElementMap.cpp SelectorPseudoElementMap.gperf  */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
#endif

#line 1 "SelectorPseudoElementMap.gperf"

/*
 * Copyright (C) 2014-2024 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// This file is automatically generated from CSSPseudoSelectors.json by the process-css-pseudo-selectors.py script, do not edit by hand.

#include "config.h"
#include "SelectorPseudoTypeMap.h"

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
IGNORE_WARNINGS_BEGIN("implicit-fallthrough")

// Older versions of gperf use the `register` keyword.
#define register

namespace WebCore {

struct SelectorPseudoTypeEntry {
    const char* name;
    std::optional<CSSSelector::PseudoElement> type;
};

enum
  {
    TOTAL_KEYWORDS = 89,
    MIN_WORD_LENGTH = 3,
    MAX_WORD_LENGTH = 41,
    MIN_HASH_VALUE = 6,
    MAX_HASH_VALUE = 300
  };

/* maximum key range = 295, duplicates = 0 */

#ifndef GPERF_DOWNCASE
#define GPERF_DOWNCASE 1
static unsigned char gperf_downcase[256] =
  {
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
    255
  };
#endif

#ifndef GPERF_CASE_STRNCMP
#define GPERF_CASE_STRNCMP 1
static int
gperf_case_strncmp (const char *s1, const char *s2, size_t n)
{
  for (; n > 0;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 != 0 && c1 == c2)
        {
          n--;
          continue;
        }
      return (int)c1 - (int)c2;
    }
  return 0;
}
#endif

class SelectorPseudoElementMapHash
{
private:
  static inline unsigned int hash (const char *str, size_t len);
public:
  static const struct SelectorPseudoTypeEntry *in_word_set (const char *str, size_t len);
};

inline unsigned int
SelectorPseudoElementMapHash::hash (const char *str, size_t len)
{
  static const unsigned short asso_values[] =
    {
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301,   1, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301,   1,   4,   1,   1,   1,
       16,  34,  73,   1, 301,   1,   1,   7,   1,   1,
       13, 301,   1,   4,   1,   1,  43,   4,  49,  28,
        1, 301, 301, 301, 301, 301, 301,   1,   4,   1,
        1,   1,  16,  34,  73,   1, 301,   1,   1,   7,
        1,   1,  13, 301,   1,   4,   1,   1,  43,   4,
       49,  28,   1, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
      301, 301, 301, 301, 301, 301
    };
  unsigned int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[static_cast<unsigned char>(str[40])];
      /*FALLTHROUGH*/
      case 40:
        hval += asso_values[static_cast<unsigned char>(str[39])];
      /*FALLTHROUGH*/
      case 39:
        hval += asso_values[static_cast<unsigned char>(str[38])];
      /*FALLTHROUGH*/
      case 38:
        hval += asso_values[static_cast<unsigned char>(str[37])];
      /*FALLTHROUGH*/
      case 37:
        hval += asso_values[static_cast<unsigned char>(str[36])];
      /*FALLTHROUGH*/
      case 36:
        hval += asso_values[static_cast<unsigned char>(str[35])];
      /*FALLTHROUGH*/
      case 35:
        hval += asso_values[static_cast<unsigned char>(str[34])];
      /*FALLTHROUGH*/
      case 34:
        hval += asso_values[static_cast<unsigned char>(str[33])];
      /*FALLTHROUGH*/
      case 33:
        hval += asso_values[static_cast<unsigned char>(str[32])];
      /*FALLTHROUGH*/
      case 32:
        hval += asso_values[static_cast<unsigned char>(str[31])];
      /*FALLTHROUGH*/
      case 31:
        hval += asso_values[static_cast<unsigned char>(str[30])];
      /*FALLTHROUGH*/
      case 30:
        hval += asso_values[static_cast<unsigned char>(str[29])];
      /*FALLTHROUGH*/
      case 29:
        hval += asso_values[static_cast<unsigned char>(str[28])];
      /*FALLTHROUGH*/
      case 28:
        hval += asso_values[static_cast<unsigned char>(str[27])];
      /*FALLTHROUGH*/
      case 27:
        hval += asso_values[static_cast<unsigned char>(str[26])];
      /*FALLTHROUGH*/
      case 26:
        hval += asso_values[static_cast<unsigned char>(str[25])];
      /*FALLTHROUGH*/
      case 25:
        hval += asso_values[static_cast<unsigned char>(str[24])];
      /*FALLTHROUGH*/
      case 24:
        hval += asso_values[static_cast<unsigned char>(str[23])];
      /*FALLTHROUGH*/
      case 23:
        hval += asso_values[static_cast<unsigned char>(str[22])];
      /*FALLTHROUGH*/
      case 22:
        hval += asso_values[static_cast<unsigned char>(str[21])];
      /*FALLTHROUGH*/
      case 21:
        hval += asso_values[static_cast<unsigned char>(str[20])];
      /*FALLTHROUGH*/
      case 20:
        hval += asso_values[static_cast<unsigned char>(str[19])];
      /*FALLTHROUGH*/
      case 19:
        hval += asso_values[static_cast<unsigned char>(str[18])];
      /*FALLTHROUGH*/
      case 18:
        hval += asso_values[static_cast<unsigned char>(str[17])];
      /*FALLTHROUGH*/
      case 17:
        hval += asso_values[static_cast<unsigned char>(str[16])];
      /*FALLTHROUGH*/
      case 16:
        hval += asso_values[static_cast<unsigned char>(str[15])];
      /*FALLTHROUGH*/
      case 15:
        hval += asso_values[static_cast<unsigned char>(str[14])];
      /*FALLTHROUGH*/
      case 14:
        hval += asso_values[static_cast<unsigned char>(str[13])];
      /*FALLTHROUGH*/
      case 13:
        hval += asso_values[static_cast<unsigned char>(str[12])];
      /*FALLTHROUGH*/
      case 12:
        hval += asso_values[static_cast<unsigned char>(str[11])];
      /*FALLTHROUGH*/
      case 11:
        hval += asso_values[static_cast<unsigned char>(str[10])];
      /*FALLTHROUGH*/
      case 10:
        hval += asso_values[static_cast<unsigned char>(str[9])];
      /*FALLTHROUGH*/
      case 9:
        hval += asso_values[static_cast<unsigned char>(str[8])];
      /*FALLTHROUGH*/
      case 8:
        hval += asso_values[static_cast<unsigned char>(str[7])];
      /*FALLTHROUGH*/
      case 7:
        hval += asso_values[static_cast<unsigned char>(str[6])];
      /*FALLTHROUGH*/
      case 6:
        hval += asso_values[static_cast<unsigned char>(str[5])];
      /*FALLTHROUGH*/
      case 5:
        hval += asso_values[static_cast<unsigned char>(str[4])];
      /*FALLTHROUGH*/
      case 4:
        hval += asso_values[static_cast<unsigned char>(str[3])];
      /*FALLTHROUGH*/
      case 3:
        hval += asso_values[static_cast<unsigned char>(str[2])];
      /*FALLTHROUGH*/
      case 2:
        hval += asso_values[static_cast<unsigned char>(str[1])];
      /*FALLTHROUGH*/
      case 1:
        hval += asso_values[static_cast<unsigned char>(str[0])];
        break;
    }
  return hval;
}

static const struct SelectorPseudoTypeEntry wordlist[] =
  {
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 126 "SelectorPseudoElementMap.gperf"
    {"cue", CSSSelector::PseudoElement::Cue},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 144 "SelectorPseudoElementMap.gperf"
    {"track", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 140 "SelectorPseudoElementMap.gperf"
    {"slotted", CSSSelector::PseudoElement::Slotted},
#line 135 "SelectorPseudoElementMap.gperf"
    {"marker", CSSSelector::PseudoElement::Marker},
    {"",std::nullopt},
#line 136 "SelectorPseudoElementMap.gperf"
    {"part", CSSSelector::PseudoElement::Part},
#line 139 "SelectorPseudoElementMap.gperf"
    {"selection", CSSSelector::PseudoElement::Selection},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 123 "SelectorPseudoElementMap.gperf"
    {"after", CSSSelector::PseudoElement::After},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt},
#line 125 "SelectorPseudoElementMap.gperf"
    {"before", CSSSelector::PseudoElement::Before},
#line 124 "SelectorPseudoElementMap.gperf"
    {"backdrop", CSSSelector::PseudoElement::Backdrop},
    {"",std::nullopt},
#line 127 "SelectorPseudoElementMap.gperf"
    {"details-content", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt},
#line 132 "SelectorPseudoElementMap.gperf"
    {"first-line", CSSSelector::PseudoElement::FirstLine},
#line 99 "SelectorPseudoElementMap.gperf"
    {"-webkit-resizer", CSSSelector::PseudoElement::WebKitResizer},
    {"",std::nullopt}, {"",std::nullopt},
#line 131 "SelectorPseudoElementMap.gperf"
    {"first-letter", CSSSelector::PseudoElement::FirstLetter},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 100 "SelectorPseudoElementMap.gperf"
    {"-webkit-scrollbar", CSSSelector::PseudoElement::WebKitScrollbar},
    {"",std::nullopt}, {"",std::nullopt},
#line 91 "SelectorPseudoElementMap.gperf"
    {"-webkit-meter-bar", CSSSelector::PseudoElement::UserAgentPart},
#line 84 "SelectorPseudoElementMap.gperf"
    {"-webkit-list-button", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 71 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 110 "SelectorPseudoElementMap.gperf"
    {"-webkit-slider-container", CSSSelector::PseudoElement::UserAgentPart},
#line 104 "SelectorPseudoElementMap.gperf"
    {"-webkit-scrollbar-track", CSSSelector::PseudoElement::WebKitScrollbarTrack},
#line 85 "SelectorPseudoElementMap.gperf"
    {"-webkit-media-controls", CSSSelector::PseudoElement::UserAgentPart},
#line 102 "SelectorPseudoElementMap.gperf"
    {"-webkit-scrollbar-corner", CSSSelector::PseudoElement::WebKitScrollbarCorner},
#line 129 "SelectorPseudoElementMap.gperf"
    {"file-selector-button", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 101 "SelectorPseudoElementMap.gperf"
    {"-webkit-scrollbar-button", CSSSelector::PseudoElement::WebKitScrollbarButton},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 111 "SelectorPseudoElementMap.gperf"
    {"-webkit-slider-runnable-track", CSSSelector::PseudoElement::UserAgentPart},
#line 133 "SelectorPseudoElementMap.gperf"
    {"grammar-error", CSSSelector::PseudoElement::GrammarError},
#line 93 "SelectorPseudoElementMap.gperf"
    {"-webkit-meter-inner-element", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 83 "SelectorPseudoElementMap.gperf"
    {"-webkit-inner-spin-button", CSSSelector::PseudoElement::UserAgentPart},
#line 63 "SelectorPseudoElementMap.gperf"
    {"-webkit-caps-lock-indicator", CSSSelector::PseudoElement::UserAgentPart},
#line 141 "SelectorPseudoElementMap.gperf"
    {"spelling-error", CSSSelector::PseudoElement::SpellingError},
    {"",std::nullopt},
#line 145 "SelectorPseudoElementMap.gperf"
    {"view-transition", CSSSelector::PseudoElement::ViewTransition},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 105 "SelectorPseudoElementMap.gperf"
    {"-webkit-scrollbar-track-piece", CSSSelector::PseudoElement::WebKitScrollbarTrackPiece},
    {"",std::nullopt},
#line 128 "SelectorPseudoElementMap.gperf"
    {"-internal-cue-background", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 149 "SelectorPseudoElementMap.gperf"
    {"view-transition-old", CSSSelector::PseudoElement::ViewTransitionOld},
#line 82 "SelectorPseudoElementMap.gperf"
    {"-webkit-generic-cue-root", CSSSelector::PseudoElement::UserAgentPart},
#line 130 "SelectorPseudoElementMap.gperf"
    {"-webkit-file-upload-button", CSSSelector::PseudoElement::UserAgentPartLegacyAlias},
#line 148 "SelectorPseudoElementMap.gperf"
    {"view-transition-new", CSSSelector::PseudoElement::ViewTransitionNew},
    {"",std::nullopt},
#line 143 "SelectorPseudoElementMap.gperf"
    {"thumb", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 67 "SelectorPseudoElementMap.gperf"
    {"-webkit-contacts-auto-fill-button", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 69 "SelectorPseudoElementMap.gperf"
    {"-webkit-credit-card-auto-fill-button", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 79 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-second-field", CSSSelector::PseudoElement::UserAgentPart},
#line 68 "SelectorPseudoElementMap.gperf"
    {"-webkit-credentials-auto-fill-button", CSSSelector::PseudoElement::UserAgentPart},
#line 96 "SelectorPseudoElementMap.gperf"
    {"-webkit-progress-bar", CSSSelector::PseudoElement::UserAgentPart},
#line 77 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-minute-field", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 142 "SelectorPseudoElementMap.gperf"
    {"target-text", CSSSelector::PseudoElement::TargetText},
    {"",std::nullopt}, {"",std::nullopt},
#line 137 "SelectorPseudoElementMap.gperf"
    {"placeholder", CSSSelector::PseudoElement::UserAgentPart},
#line 115 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble", CSSSelector::PseudoElement::UserAgentPart},
#line 70 "SelectorPseudoElementMap.gperf"
    {"-webkit-date-and-time-value", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 75 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-meridiem-field", CSSSelector::PseudoElement::UserAgentPart},
#line 80 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-text", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 76 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-millisecond-field", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 72 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-day-field", CSSSelector::PseudoElement::UserAgentPart},
#line 120 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble-icon", CSSSelector::PseudoElement::UserAgentPart},
#line 81 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-year-field", CSSSelector::PseudoElement::UserAgentPart},
#line 61 "SelectorPseudoElementMap.gperf"
    {"-internal-loading-auto-fill-button", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 116 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble-arrow", CSSSelector::PseudoElement::UserAgentPart},
#line 97 "SelectorPseudoElementMap.gperf"
    {"-webkit-progress-inner-element", CSSSelector::PseudoElement::UserAgentPart},
#line 64 "SelectorPseudoElementMap.gperf"
    {"-webkit-color-swatch", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 86 "SelectorPseudoElementMap.gperf"
    {"-webkit-media-text-track-container", CSSSelector::PseudoElement::UserAgentPart},
#line 73 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-fields-wrapper", CSSSelector::PseudoElement::UserAgentPart},
#line 112 "SelectorPseudoElementMap.gperf"
    {"-webkit-slider-thumb", CSSSelector::PseudoElement::UserAgentPart},
#line 107 "SelectorPseudoElementMap.gperf"
    {"-webkit-search-decoration", CSSSelector::PseudoElement::UserAgentPart},
#line 94 "SelectorPseudoElementMap.gperf"
    {"-webkit-meter-optimum-value", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 146 "SelectorPseudoElementMap.gperf"
    {"view-transition-group", CSSSelector::PseudoElement::ViewTransitionGroup},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 103 "SelectorPseudoElementMap.gperf"
    {"-webkit-scrollbar-thumb", CSSSelector::PseudoElement::WebKitScrollbarThumb},
#line 106 "SelectorPseudoElementMap.gperf"
    {"-webkit-search-cancel-button", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 98 "SelectorPseudoElementMap.gperf"
    {"-webkit-progress-value", CSSSelector::PseudoElement::UserAgentPart},
#line 95 "SelectorPseudoElementMap.gperf"
    {"-webkit-meter-suboptimum-value", CSSSelector::PseudoElement::UserAgentPart},
#line 114 "SelectorPseudoElementMap.gperf"
    {"-webkit-textfield-decoration-container", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 118 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble-body", CSSSelector::PseudoElement::UserAgentPart},
#line 108 "SelectorPseudoElementMap.gperf"
    {"-webkit-search-results-button", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 147 "SelectorPseudoElementMap.gperf"
    {"view-transition-image-pair", CSSSelector::PseudoElement::ViewTransitionImagePair},
#line 138 "SelectorPseudoElementMap.gperf"
    {"-webkit-input-placeholder", CSSSelector::PseudoElement::UserAgentPartLegacyAlias},
#line 109 "SelectorPseudoElementMap.gperf"
    {"-webkit-search-results-decoration", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt},
#line 89 "SelectorPseudoElementMap.gperf"
    {"-webkit-media-text-track-region", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt},
#line 113 "SelectorPseudoElementMap.gperf"
    {"-webkit-strong-password-auto-fill-button", CSSSelector::PseudoElement::UserAgentPart},
#line 117 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble-arrow-clipper", CSSSelector::PseudoElement::UserAgentPart},
#line 74 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-hour-field", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt},
#line 87 "SelectorPseudoElementMap.gperf"
    {"-webkit-media-text-track-display", CSSSelector::PseudoElement::UserAgentPart},
#line 66 "SelectorPseudoElementMap.gperf"
    {"-webkit-color-swatch-wrapper", CSSSelector::PseudoElement::UserAgentPart},
#line 121 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble-message", CSSSelector::PseudoElement::UserAgentPart},
#line 62 "SelectorPseudoElementMap.gperf"
    {"-internal-writing-suggestions", CSSSelector::PseudoElement::InternalWritingSuggestions},
    {"",std::nullopt},
#line 78 "SelectorPseudoElementMap.gperf"
    {"-webkit-datetime-edit-month-field", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 90 "SelectorPseudoElementMap.gperf"
    {"-webkit-media-text-track-region-container", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt},
#line 122 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble-text-block", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 88 "SelectorPseudoElementMap.gperf"
    {"-webkit-media-text-track-display-backdrop", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 92 "SelectorPseudoElementMap.gperf"
    {"-webkit-meter-even-less-good-value", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
#line 65 "SelectorPseudoElementMap.gperf"
    {"-internal-color-swatch-overlay", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt},
#line 119 "SelectorPseudoElementMap.gperf"
    {"-webkit-validation-bubble-heading", CSSSelector::PseudoElement::UserAgentPart},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt}, {"",std::nullopt},
    {"",std::nullopt}, {"",std::nullopt},
#line 134 "SelectorPseudoElementMap.gperf"
    {"highlight", CSSSelector::PseudoElement::Highlight}
  };

const struct SelectorPseudoTypeEntry *
SelectorPseudoElementMapHash::in_word_set (const char *str, size_t len)
{
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE)
        {
          const char *s = wordlist[key].name;

          if ((((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strncmp (str, s, len) && s[len] == '\0')
            return &wordlist[key];
        }
    }
  return 0;
}
#line 150 "SelectorPseudoElementMap.gperf"


static inline std::optional<CSSSelector::PseudoElement> findPseudoElementName(std::span<const LChar> characters)
{
    if (auto entry = SelectorPseudoElementMapHash::in_word_set(byteCast<char>(characters.data()), characters.size()))
        return entry->type;
    return std::nullopt;
}

static inline std::optional<CSSSelector::PseudoElement> findPseudoElementName(std::span<const char16_t> characters)
{
    constexpr unsigned maxKeywordLength = 41;
    std::array<LChar, maxKeywordLength> buffer;
    if (characters.size() > maxKeywordLength)
        return std::nullopt;

    for (size_t i = 0; i < characters.size(); ++i) {
        char16_t character = characters[i];
        if (!isLatin1(character))
            return std::nullopt;

        buffer[i] = static_cast<LChar>(character);
    }
    return findPseudoElementName(std::span { buffer }.first(characters.size()));
}

std::optional<CSSSelector::PseudoElement> findPseudoElementName(StringView name)
{
    if (name.is8Bit())
        return findPseudoElementName(name.span8());
    return findPseudoElementName(name.span16());
}

} // namespace WebCore

IGNORE_WARNINGS_END
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END
