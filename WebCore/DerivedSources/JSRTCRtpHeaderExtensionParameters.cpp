/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtpHeaderExtensionParameters.h"

#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCRtpHeaderExtensionParameters>> convertDictionary<RTCRtpHeaderExtensionParameters>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCRtpHeaderExtensionParameters result;
    JSValue idValue;
    if (isNullOrUndefined)
        idValue = jsUndefined();
    else {
        idValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "id"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!idValue.isUndefined()) {
        auto idConversionResult = convert<IDLUnsignedShort>(lexicalGlobalObject, idValue);
        if (idConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.id = idConversionResult.releaseReturnValue();
    }
    JSValue uriValue;
    if (isNullOrUndefined)
        uriValue = jsUndefined();
    else {
        uriValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "uri"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!uriValue.isUndefined()) {
        auto uriConversionResult = convert<IDLDOMString>(lexicalGlobalObject, uriValue);
        if (uriConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.uri = uriConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCRtpHeaderExtensionParameters& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLUnsignedShort::isNullValue(dictionary.id)) {
        auto idValue = toJS<IDLUnsignedShort>(lexicalGlobalObject, throwScope, IDLUnsignedShort::extractValueFromNullable(dictionary.id));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "id"_s), idValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.uri)) {
        auto uriValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.uri));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "uri"_s), uriValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_RTC)
