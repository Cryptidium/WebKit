/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR)

#include "JSWebXRWebGLLayer.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSWebGL2RenderingContext.h"
#include "JSWebGLFramebuffer.h"
#include "JSWebGLRenderingContext.h"
#include "JSWebXRSession.h"
#include "JSWebXRView.h"
#include "JSWebXRViewport.h"
#include "JSXRWebGLLayerInit.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/Variant.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsWebXRWebGLLayerPrototypeFunction_getViewport);
static JSC_DECLARE_HOST_FUNCTION(jsWebXRWebGLLayerConstructorFunction_getNativeFramebufferScaleFactor);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWebXRWebGLLayerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRWebGLLayer_antialias);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRWebGLLayer_ignoreDepthValues);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRWebGLLayer_framebuffer);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRWebGLLayer_framebufferWidth);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRWebGLLayer_framebufferHeight);

class JSWebXRWebGLLayerPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebXRWebGLLayerPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebXRWebGLLayerPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebXRWebGLLayerPrototype>(vm)) JSWebXRWebGLLayerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRWebGLLayerPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebXRWebGLLayerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRWebGLLayerPrototype, JSWebXRWebGLLayerPrototype::Base);

using JSWebXRWebGLLayerDOMConstructor = JSDOMConstructor<JSWebXRWebGLLayer>;

/* Hash table for constructor */

static const std::array<HashTableValue, 1> JSWebXRWebGLLayerConstructorTableValues {
    HashTableValue { "getNativeFramebufferScaleFactor"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRWebGLLayerConstructorFunction_getNativeFramebufferScaleFactor, 1 } },
};

template<> EncodedJSValue JSC_HOST_CALL_ATTRIBUTES JSWebXRWebGLLayerDOMConstructor::construct(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = lexicalGlobalObject->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* castedThis = jsCast<JSWebXRWebGLLayerDOMConstructor*>(callFrame->jsCallee());
    ASSERT(castedThis);
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sessionConversionResult = convert<IDLInterface<WebXRSession>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "session"_s, "XRWebGLLayer"_s, nullptr, "WebXRSession"_s); });
    if (sessionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto contextConversionResult = convert<IDLUnion<IDLInterface<WebGLRenderingContext>, IDLInterface<WebGL2RenderingContext>>>(*lexicalGlobalObject, argument1.value());
    if (contextConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->argument(2);
    auto layerInitConversionResult = convert<IDLDictionary<XRWebGLLayerInit>>(*lexicalGlobalObject, argument2.value());
    if (layerInitConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto object = WebXRWebGLLayer::create(*sessionConversionResult.releaseReturnValue(), contextConversionResult.releaseReturnValue(), layerInitConversionResult.releaseReturnValue());
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    static_assert(TypeOrExceptionOrUnderlyingType<decltype(object)>::isRef);
    auto jsValue = toJSNewlyCreated<IDLInterface<WebXRWebGLLayer>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, WTFMove(object));
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    setSubclassStructureIfNeeded<WebXRWebGLLayer>(lexicalGlobalObject, callFrame, asObject(jsValue));
    RETURN_IF_EXCEPTION(throwScope, { });
    return JSValue::encode(jsValue);
}
JSC_ANNOTATE_HOST_FUNCTION(JSWebXRWebGLLayerDOMConstructorConstruct, JSWebXRWebGLLayerDOMConstructor::construct);

template<> const ClassInfo JSWebXRWebGLLayerDOMConstructor::s_info = { "XRWebGLLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRWebGLLayerDOMConstructor) };

template<> JSValue JSWebXRWebGLLayerDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSWebXRLayer::getConstructor(vm, &globalObject);
}

template<> void JSWebXRWebGLLayerDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(2), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRWebGLLayer"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWebXRWebGLLayer::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
    reifyStaticProperties(vm, JSWebXRWebGLLayer::info(), JSWebXRWebGLLayerConstructorTableValues, *this);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 7> JSWebXRWebGLLayerPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRWebGLLayerConstructor, 0 } },
    HashTableValue { "antialias"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRWebGLLayer_antialias, 0 } },
    HashTableValue { "ignoreDepthValues"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRWebGLLayer_ignoreDepthValues, 0 } },
    HashTableValue { "framebuffer"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRWebGLLayer_framebuffer, 0 } },
    HashTableValue { "framebufferWidth"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRWebGLLayer_framebufferWidth, 0 } },
    HashTableValue { "framebufferHeight"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRWebGLLayer_framebufferHeight, 0 } },
    HashTableValue { "getViewport"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRWebGLLayerPrototypeFunction_getViewport, 1 } },
};

const ClassInfo JSWebXRWebGLLayerPrototype::s_info = { "XRWebGLLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRWebGLLayerPrototype) };

void JSWebXRWebGLLayerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebXRWebGLLayer::info(), JSWebXRWebGLLayerPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWebXRWebGLLayer::s_info = { "XRWebGLLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRWebGLLayer) };

JSWebXRWebGLLayer::JSWebXRWebGLLayer(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebXRWebGLLayer>&& impl)
    : JSWebXRLayer(structure, globalObject, WTFMove(impl))
{
}

Ref<WebXRWebGLLayer> JSWebXRWebGLLayer::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, WebXRWebGLLayer>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSWebXRWebGLLayer::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWebXRWebGLLayerPrototype::createStructure(vm, &globalObject, JSWebXRLayer::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSWebXRWebGLLayerPrototype::create(vm, &globalObject, structure);
}

JSObject* JSWebXRWebGLLayer::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWebXRWebGLLayer>(vm, globalObject);
}

JSValue JSWebXRWebGLLayer::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebXRWebGLLayerDOMConstructor, DOMConstructorID::WebXRWebGLLayer>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRWebGLLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWebXRWebGLLayerPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWebXRWebGLLayer::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWebXRWebGLLayer_antialiasGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRWebGLLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.antialias())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRWebGLLayer_antialias, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRWebGLLayer>::get<jsWebXRWebGLLayer_antialiasGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRWebGLLayer_ignoreDepthValuesGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRWebGLLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.ignoreDepthValues())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRWebGLLayer_ignoreDepthValues, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRWebGLLayer>::get<jsWebXRWebGLLayer_ignoreDepthValuesGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRWebGLLayer_framebufferGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRWebGLLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebGLFramebuffer>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.framebuffer())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRWebGLLayer_framebuffer, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRWebGLLayer>::get<jsWebXRWebGLLayer_framebufferGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRWebGLLayer_framebufferWidthGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRWebGLLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.framebufferWidth())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRWebGLLayer_framebufferWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRWebGLLayer>::get<jsWebXRWebGLLayer_framebufferWidthGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRWebGLLayer_framebufferHeightGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRWebGLLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.framebufferHeight())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRWebGLLayer_framebufferHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRWebGLLayer>::get<jsWebXRWebGLLayer_framebufferHeightGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsWebXRWebGLLayerPrototypeFunction_getViewportBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebXRWebGLLayer>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto viewConversionResult = convert<IDLInterface<WebXRView>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "view"_s, "XRWebGLLayer"_s, "getViewport"_s, "WebXRView"_s); });
    if (viewConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLInterface<WebXRViewport>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getViewport(*viewConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRWebGLLayerPrototypeFunction_getViewport, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRWebGLLayer>::call<jsWebXRWebGLLayerPrototypeFunction_getViewportBody>(*lexicalGlobalObject, *callFrame, "getViewport");
}

static inline JSC::EncodedJSValue jsWebXRWebGLLayerConstructorFunction_getNativeFramebufferScaleFactorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sessionConversionResult = convert<IDLInterface<WebXRSession>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "session"_s, "XRWebGLLayer"_s, "getNativeFramebufferScaleFactor"_s, "WebXRSession"_s); });
    if (sessionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDouble>(*lexicalGlobalObject, throwScope, WebXRWebGLLayer::getNativeFramebufferScaleFactor(*sessionConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRWebGLLayerConstructorFunction_getNativeFramebufferScaleFactor, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRWebGLLayer>::callStatic<jsWebXRWebGLLayerConstructorFunction_getNativeFramebufferScaleFactorBody>(*lexicalGlobalObject, *callFrame, "getNativeFramebufferScaleFactor");
}

JSC::GCClient::IsoSubspace* JSWebXRWebGLLayer::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWebXRWebGLLayer, UseCustomHeapCellType::No>(vm, "JSWebXRWebGLLayer"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWebXRWebGLLayer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebXRWebGLLayer = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWebXRWebGLLayer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebXRWebGLLayer = std::forward<decltype(space)>(space); }
    );
}

void JSWebXRWebGLLayer::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWebXRWebGLLayer*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebXRWebGLLayer@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15WebXRWebGLLayerE[]; }
#endif
template<std::same_as<WebXRWebGLLayer> T>
static inline void verifyVTable(WebXRWebGLLayer* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7WebXRWebGLLayer@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore15WebXRWebGLLayerE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // WebXRWebGLLayer has subclasses. If WebXRWebGLLayer has subclasses that get passed
        // to toJS() we currently require WebXRWebGLLayer you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<WebXRWebGLLayer>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<WebXRWebGLLayer>(impl.ptr());
#endif
    return createWrapper<WebXRWebGLLayer>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, WebXRWebGLLayer& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

WebXRWebGLLayer* JSWebXRWebGLLayer::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebXRWebGLLayer*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBXR)
