/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR_HANDS)

#include "JSXRHandJoint.h"

#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSString.h>
#include <wtf/NeverDestroyed.h>
#include <wtf/SortedArrayMap.h>



namespace WebCore {
using namespace JSC;

String convertEnumerationToString(XRHandJoint enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 25> values {
        MAKE_STATIC_STRING_IMPL("wrist"),
        MAKE_STATIC_STRING_IMPL("thumb-metacarpal"),
        MAKE_STATIC_STRING_IMPL("thumb-phalanx-proximal"),
        MAKE_STATIC_STRING_IMPL("thumb-phalanx-distal"),
        MAKE_STATIC_STRING_IMPL("thumb-tip"),
        MAKE_STATIC_STRING_IMPL("index-finger-metacarpal"),
        MAKE_STATIC_STRING_IMPL("index-finger-phalanx-proximal"),
        MAKE_STATIC_STRING_IMPL("index-finger-phalanx-intermediate"),
        MAKE_STATIC_STRING_IMPL("index-finger-phalanx-distal"),
        MAKE_STATIC_STRING_IMPL("index-finger-tip"),
        MAKE_STATIC_STRING_IMPL("middle-finger-metacarpal"),
        MAKE_STATIC_STRING_IMPL("middle-finger-phalanx-proximal"),
        MAKE_STATIC_STRING_IMPL("middle-finger-phalanx-intermediate"),
        MAKE_STATIC_STRING_IMPL("middle-finger-phalanx-distal"),
        MAKE_STATIC_STRING_IMPL("middle-finger-tip"),
        MAKE_STATIC_STRING_IMPL("ring-finger-metacarpal"),
        MAKE_STATIC_STRING_IMPL("ring-finger-phalanx-proximal"),
        MAKE_STATIC_STRING_IMPL("ring-finger-phalanx-intermediate"),
        MAKE_STATIC_STRING_IMPL("ring-finger-phalanx-distal"),
        MAKE_STATIC_STRING_IMPL("ring-finger-tip"),
        MAKE_STATIC_STRING_IMPL("pinky-finger-metacarpal"),
        MAKE_STATIC_STRING_IMPL("pinky-finger-phalanx-proximal"),
        MAKE_STATIC_STRING_IMPL("pinky-finger-phalanx-intermediate"),
        MAKE_STATIC_STRING_IMPL("pinky-finger-phalanx-distal"),
        MAKE_STATIC_STRING_IMPL("pinky-finger-tip"),
    };
    static_assert(static_cast<size_t>(XRHandJoint::Wrist) == 0, "XRHandJoint::Wrist is not 0 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::ThumbMetacarpal) == 1, "XRHandJoint::ThumbMetacarpal is not 1 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::ThumbPhalanxProximal) == 2, "XRHandJoint::ThumbPhalanxProximal is not 2 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::ThumbPhalanxDistal) == 3, "XRHandJoint::ThumbPhalanxDistal is not 3 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::ThumbTip) == 4, "XRHandJoint::ThumbTip is not 4 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::IndexFingerMetacarpal) == 5, "XRHandJoint::IndexFingerMetacarpal is not 5 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::IndexFingerPhalanxProximal) == 6, "XRHandJoint::IndexFingerPhalanxProximal is not 6 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::IndexFingerPhalanxIntermediate) == 7, "XRHandJoint::IndexFingerPhalanxIntermediate is not 7 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::IndexFingerPhalanxDistal) == 8, "XRHandJoint::IndexFingerPhalanxDistal is not 8 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::IndexFingerTip) == 9, "XRHandJoint::IndexFingerTip is not 9 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::MiddleFingerMetacarpal) == 10, "XRHandJoint::MiddleFingerMetacarpal is not 10 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::MiddleFingerPhalanxProximal) == 11, "XRHandJoint::MiddleFingerPhalanxProximal is not 11 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::MiddleFingerPhalanxIntermediate) == 12, "XRHandJoint::MiddleFingerPhalanxIntermediate is not 12 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::MiddleFingerPhalanxDistal) == 13, "XRHandJoint::MiddleFingerPhalanxDistal is not 13 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::MiddleFingerTip) == 14, "XRHandJoint::MiddleFingerTip is not 14 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::RingFingerMetacarpal) == 15, "XRHandJoint::RingFingerMetacarpal is not 15 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::RingFingerPhalanxProximal) == 16, "XRHandJoint::RingFingerPhalanxProximal is not 16 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::RingFingerPhalanxIntermediate) == 17, "XRHandJoint::RingFingerPhalanxIntermediate is not 17 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::RingFingerPhalanxDistal) == 18, "XRHandJoint::RingFingerPhalanxDistal is not 18 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::RingFingerTip) == 19, "XRHandJoint::RingFingerTip is not 19 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::PinkyFingerMetacarpal) == 20, "XRHandJoint::PinkyFingerMetacarpal is not 20 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::PinkyFingerPhalanxProximal) == 21, "XRHandJoint::PinkyFingerPhalanxProximal is not 21 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::PinkyFingerPhalanxIntermediate) == 22, "XRHandJoint::PinkyFingerPhalanxIntermediate is not 22 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::PinkyFingerPhalanxDistal) == 23, "XRHandJoint::PinkyFingerPhalanxDistal is not 23 as expected");
    static_assert(static_cast<size_t>(XRHandJoint::PinkyFingerTip) == 24, "XRHandJoint::PinkyFingerTip is not 24 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, XRHandJoint enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<XRHandJoint> parseEnumerationFromString<XRHandJoint>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, XRHandJoint>, 25> mappings {
        std::pair<ComparableASCIILiteral, XRHandJoint> { "index-finger-metacarpal"_s, XRHandJoint::IndexFingerMetacarpal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "index-finger-phalanx-distal"_s, XRHandJoint::IndexFingerPhalanxDistal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "index-finger-phalanx-intermediate"_s, XRHandJoint::IndexFingerPhalanxIntermediate },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "index-finger-phalanx-proximal"_s, XRHandJoint::IndexFingerPhalanxProximal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "index-finger-tip"_s, XRHandJoint::IndexFingerTip },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "middle-finger-metacarpal"_s, XRHandJoint::MiddleFingerMetacarpal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "middle-finger-phalanx-distal"_s, XRHandJoint::MiddleFingerPhalanxDistal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "middle-finger-phalanx-intermediate"_s, XRHandJoint::MiddleFingerPhalanxIntermediate },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "middle-finger-phalanx-proximal"_s, XRHandJoint::MiddleFingerPhalanxProximal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "middle-finger-tip"_s, XRHandJoint::MiddleFingerTip },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "pinky-finger-metacarpal"_s, XRHandJoint::PinkyFingerMetacarpal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "pinky-finger-phalanx-distal"_s, XRHandJoint::PinkyFingerPhalanxDistal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "pinky-finger-phalanx-intermediate"_s, XRHandJoint::PinkyFingerPhalanxIntermediate },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "pinky-finger-phalanx-proximal"_s, XRHandJoint::PinkyFingerPhalanxProximal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "pinky-finger-tip"_s, XRHandJoint::PinkyFingerTip },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "ring-finger-metacarpal"_s, XRHandJoint::RingFingerMetacarpal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "ring-finger-phalanx-distal"_s, XRHandJoint::RingFingerPhalanxDistal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "ring-finger-phalanx-intermediate"_s, XRHandJoint::RingFingerPhalanxIntermediate },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "ring-finger-phalanx-proximal"_s, XRHandJoint::RingFingerPhalanxProximal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "ring-finger-tip"_s, XRHandJoint::RingFingerTip },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "thumb-metacarpal"_s, XRHandJoint::ThumbMetacarpal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "thumb-phalanx-distal"_s, XRHandJoint::ThumbPhalanxDistal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "thumb-phalanx-proximal"_s, XRHandJoint::ThumbPhalanxProximal },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "thumb-tip"_s, XRHandJoint::ThumbTip },
        std::pair<ComparableASCIILiteral, XRHandJoint> { "wrist"_s, XRHandJoint::Wrist },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<XRHandJoint> parseEnumeration<XRHandJoint>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<XRHandJoint>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<XRHandJoint>()
{
    return "\"wrist\", \"thumb-metacarpal\", \"thumb-phalanx-proximal\", \"thumb-phalanx-distal\", \"thumb-tip\", \"index-finger-metacarpal\", \"index-finger-phalanx-proximal\", \"index-finger-phalanx-intermediate\", \"index-finger-phalanx-distal\", \"index-finger-tip\", \"middle-finger-metacarpal\", \"middle-finger-phalanx-proximal\", \"middle-finger-phalanx-intermediate\", \"middle-finger-phalanx-distal\", \"middle-finger-tip\", \"ring-finger-metacarpal\", \"ring-finger-phalanx-proximal\", \"ring-finger-phalanx-intermediate\", \"ring-finger-phalanx-distal\", \"ring-finger-tip\", \"pinky-finger-metacarpal\", \"pinky-finger-phalanx-proximal\", \"pinky-finger-phalanx-intermediate\", \"pinky-finger-phalanx-distal\", \"pinky-finger-tip\""_s;
}

} // namespace WebCore


#endif // ENABLE(WEBXR_HANDS)
