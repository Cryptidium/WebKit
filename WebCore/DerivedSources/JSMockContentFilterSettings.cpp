/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(CONTENT_FILTERING)

#include "JSMockContentFilterSettings.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(MockContentFilterSettings::DecisionPoint enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 6> values {
        MAKE_STATIC_STRING_IMPL("afterWillSendRequest"),
        MAKE_STATIC_STRING_IMPL("afterRedirect"),
        MAKE_STATIC_STRING_IMPL("afterResponse"),
        MAKE_STATIC_STRING_IMPL("afterAddData"),
        MAKE_STATIC_STRING_IMPL("afterFinishedAddingData"),
        MAKE_STATIC_STRING_IMPL("never"),
    };
    static_assert(static_cast<size_t>(MockContentFilterSettings::DecisionPoint::AfterWillSendRequest) == 0, "MockContentFilterSettings::DecisionPoint::AfterWillSendRequest is not 0 as expected");
    static_assert(static_cast<size_t>(MockContentFilterSettings::DecisionPoint::AfterRedirect) == 1, "MockContentFilterSettings::DecisionPoint::AfterRedirect is not 1 as expected");
    static_assert(static_cast<size_t>(MockContentFilterSettings::DecisionPoint::AfterResponse) == 2, "MockContentFilterSettings::DecisionPoint::AfterResponse is not 2 as expected");
    static_assert(static_cast<size_t>(MockContentFilterSettings::DecisionPoint::AfterAddData) == 3, "MockContentFilterSettings::DecisionPoint::AfterAddData is not 3 as expected");
    static_assert(static_cast<size_t>(MockContentFilterSettings::DecisionPoint::AfterFinishedAddingData) == 4, "MockContentFilterSettings::DecisionPoint::AfterFinishedAddingData is not 4 as expected");
    static_assert(static_cast<size_t>(MockContentFilterSettings::DecisionPoint::Never) == 5, "MockContentFilterSettings::DecisionPoint::Never is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, MockContentFilterSettings::DecisionPoint enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<MockContentFilterSettings::DecisionPoint> parseEnumerationFromString<MockContentFilterSettings::DecisionPoint>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, MockContentFilterSettings::DecisionPoint>, 6> mappings {
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::DecisionPoint> { "afterAddData"_s, MockContentFilterSettings::DecisionPoint::AfterAddData },
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::DecisionPoint> { "afterFinishedAddingData"_s, MockContentFilterSettings::DecisionPoint::AfterFinishedAddingData },
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::DecisionPoint> { "afterRedirect"_s, MockContentFilterSettings::DecisionPoint::AfterRedirect },
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::DecisionPoint> { "afterResponse"_s, MockContentFilterSettings::DecisionPoint::AfterResponse },
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::DecisionPoint> { "afterWillSendRequest"_s, MockContentFilterSettings::DecisionPoint::AfterWillSendRequest },
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::DecisionPoint> { "never"_s, MockContentFilterSettings::DecisionPoint::Never },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<MockContentFilterSettings::DecisionPoint> parseEnumeration<MockContentFilterSettings::DecisionPoint>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<MockContentFilterSettings::DecisionPoint>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<MockContentFilterSettings::DecisionPoint>()
{
    return "\"afterWillSendRequest\", \"afterRedirect\", \"afterResponse\", \"afterAddData\", \"afterFinishedAddingData\", \"never\""_s;
}

String convertEnumerationToString(MockContentFilterSettings::Decision enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 2> values {
        MAKE_STATIC_STRING_IMPL("allow"),
        MAKE_STATIC_STRING_IMPL("block"),
    };
    static_assert(static_cast<size_t>(MockContentFilterSettings::Decision::Allow) == 0, "MockContentFilterSettings::Decision::Allow is not 0 as expected");
    static_assert(static_cast<size_t>(MockContentFilterSettings::Decision::Block) == 1, "MockContentFilterSettings::Decision::Block is not 1 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, MockContentFilterSettings::Decision enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<MockContentFilterSettings::Decision> parseEnumerationFromString<MockContentFilterSettings::Decision>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, MockContentFilterSettings::Decision>, 2> mappings {
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::Decision> { "allow"_s, MockContentFilterSettings::Decision::Allow },
        std::pair<ComparableASCIILiteral, MockContentFilterSettings::Decision> { "block"_s, MockContentFilterSettings::Decision::Block },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<MockContentFilterSettings::Decision> parseEnumeration<MockContentFilterSettings::Decision>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<MockContentFilterSettings::Decision>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<MockContentFilterSettings::Decision>()
{
    return "\"allow\", \"block\""_s;
}

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsMockContentFilterSettings_enabled);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockContentFilterSettings_enabled);
static JSC_DECLARE_CUSTOM_GETTER(jsMockContentFilterSettings_blockedString);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockContentFilterSettings_blockedString);
static JSC_DECLARE_CUSTOM_GETTER(jsMockContentFilterSettings_modifiedRequestURL);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockContentFilterSettings_modifiedRequestURL);
static JSC_DECLARE_CUSTOM_GETTER(jsMockContentFilterSettings_decisionPoint);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockContentFilterSettings_decisionPoint);
static JSC_DECLARE_CUSTOM_GETTER(jsMockContentFilterSettings_decision);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockContentFilterSettings_decision);
static JSC_DECLARE_CUSTOM_GETTER(jsMockContentFilterSettings_unblockRequestDecision);
static JSC_DECLARE_CUSTOM_SETTER(setJSMockContentFilterSettings_unblockRequestDecision);
static JSC_DECLARE_CUSTOM_GETTER(jsMockContentFilterSettings_unblockRequestURL);

class JSMockContentFilterSettingsPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMockContentFilterSettingsPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMockContentFilterSettingsPrototype* ptr = new (NotNull, JSC::allocateCell<JSMockContentFilterSettingsPrototype>(vm)) JSMockContentFilterSettingsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMockContentFilterSettingsPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMockContentFilterSettingsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMockContentFilterSettingsPrototype, JSMockContentFilterSettingsPrototype::Base);

/* Hash table for prototype */

static const std::array<HashTableValue, 7> JSMockContentFilterSettingsPrototypeTableValues {
    HashTableValue { "enabled"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockContentFilterSettings_enabled, setJSMockContentFilterSettings_enabled } },
    HashTableValue { "blockedString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockContentFilterSettings_blockedString, setJSMockContentFilterSettings_blockedString } },
    HashTableValue { "modifiedRequestURL"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockContentFilterSettings_modifiedRequestURL, setJSMockContentFilterSettings_modifiedRequestURL } },
    HashTableValue { "decisionPoint"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockContentFilterSettings_decisionPoint, setJSMockContentFilterSettings_decisionPoint } },
    HashTableValue { "decision"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockContentFilterSettings_decision, setJSMockContentFilterSettings_decision } },
    HashTableValue { "unblockRequestDecision"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockContentFilterSettings_unblockRequestDecision, setJSMockContentFilterSettings_unblockRequestDecision } },
    HashTableValue { "unblockRequestURL"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMockContentFilterSettings_unblockRequestURL, 0 } },
};

const ClassInfo JSMockContentFilterSettingsPrototype::s_info = { "MockContentFilterSettings"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMockContentFilterSettingsPrototype) };

void JSMockContentFilterSettingsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMockContentFilterSettings::info(), JSMockContentFilterSettingsPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSMockContentFilterSettings::s_info = { "MockContentFilterSettings"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMockContentFilterSettings) };

JSMockContentFilterSettings::JSMockContentFilterSettings(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MockContentFilterSettings>&& impl)
    : JSDOMWrapper<MockContentFilterSettings>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, MockContentFilterSettings>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSMockContentFilterSettings::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSMockContentFilterSettingsPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSMockContentFilterSettingsPrototype::create(vm, &globalObject, structure);
}

JSObject* JSMockContentFilterSettings::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSMockContentFilterSettings>(vm, globalObject);
}

void JSMockContentFilterSettings::destroy(JSC::JSCell* cell)
{
    JSMockContentFilterSettings* thisObject = static_cast<JSMockContentFilterSettings*>(cell);
    thisObject->JSMockContentFilterSettings::~JSMockContentFilterSettings();
}

static inline JSValue jsMockContentFilterSettings_enabledGetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.enabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockContentFilterSettings_enabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::get<jsMockContentFilterSettings_enabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockContentFilterSettings_enabledSetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLBoolean>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setEnabled(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockContentFilterSettings_enabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::set<setJSMockContentFilterSettings_enabledSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockContentFilterSettings_blockedStringGetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.blockedString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockContentFilterSettings_blockedString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::get<jsMockContentFilterSettings_blockedStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockContentFilterSettings_blockedStringSetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLDOMString>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setBlockedString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockContentFilterSettings_blockedString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::set<setJSMockContentFilterSettings_blockedStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockContentFilterSettings_modifiedRequestURLGetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.modifiedRequestURL())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockContentFilterSettings_modifiedRequestURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::get<jsMockContentFilterSettings_modifiedRequestURLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockContentFilterSettings_modifiedRequestURLSetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLDOMString>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setModifiedRequestURL(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockContentFilterSettings_modifiedRequestURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::set<setJSMockContentFilterSettings_modifiedRequestURLSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockContentFilterSettings_decisionPointGetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<MockContentFilterSettings::DecisionPoint>>(lexicalGlobalObject, throwScope, impl.decisionPoint())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockContentFilterSettings_decisionPoint, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::get<jsMockContentFilterSettings_decisionPointGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockContentFilterSettings_decisionPointSetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<MockContentFilterSettings::DecisionPoint>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setDecisionPoint(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockContentFilterSettings_decisionPoint, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::set<setJSMockContentFilterSettings_decisionPointSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockContentFilterSettings_decisionGetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<MockContentFilterSettings::Decision>>(lexicalGlobalObject, throwScope, impl.decision())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockContentFilterSettings_decision, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::get<jsMockContentFilterSettings_decisionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockContentFilterSettings_decisionSetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<MockContentFilterSettings::Decision>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setDecision(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockContentFilterSettings_decision, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::set<setJSMockContentFilterSettings_decisionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockContentFilterSettings_unblockRequestDecisionGetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<MockContentFilterSettings::Decision>>(lexicalGlobalObject, throwScope, impl.unblockRequestDecision())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockContentFilterSettings_unblockRequestDecision, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::get<jsMockContentFilterSettings_unblockRequestDecisionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMockContentFilterSettings_unblockRequestDecisionSetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<MockContentFilterSettings::Decision>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setUnblockRequestDecision(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMockContentFilterSettings_unblockRequestDecision, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::set<setJSMockContentFilterSettings_unblockRequestDecisionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMockContentFilterSettings_unblockRequestURLGetter(JSGlobalObject& lexicalGlobalObject, JSMockContentFilterSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.unblockRequestURL())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMockContentFilterSettings_unblockRequestURL, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMockContentFilterSettings>::get<jsMockContentFilterSettings_unblockRequestURLGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

JSC::GCClient::IsoSubspace* JSMockContentFilterSettings::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSMockContentFilterSettings, UseCustomHeapCellType::No>(vm, "JSMockContentFilterSettings"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForMockContentFilterSettings.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForMockContentFilterSettings = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForMockContentFilterSettings.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForMockContentFilterSettings = std::forward<decltype(space)>(space); }
    );
}

void JSMockContentFilterSettings::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSMockContentFilterSettings*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSMockContentFilterSettingsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSMockContentFilterSettingsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMockContentFilterSettings = static_cast<JSMockContentFilterSettings*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsMockContentFilterSettings->protectedWrapped().ptr(), jsMockContentFilterSettings);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MockContentFilterSettings@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore25MockContentFilterSettingsE[]; }
#endif
template<std::same_as<MockContentFilterSettings> T>
static inline void verifyVTable(MockContentFilterSettings* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7MockContentFilterSettings@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore25MockContentFilterSettingsE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // MockContentFilterSettings has subclasses. If MockContentFilterSettings has subclasses that get passed
        // to toJS() we currently require MockContentFilterSettings you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<MockContentFilterSettings>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<MockContentFilterSettings>(impl.ptr());
#endif
    return createWrapper<MockContentFilterSettings>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, MockContentFilterSettings& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

MockContentFilterSettings* JSMockContentFilterSettings::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMockContentFilterSettings*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(CONTENT_FILTERING)
