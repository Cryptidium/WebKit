/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"

#include "XMLNames.h"

#include "Namespace.h"
#include "NodeName.h"
#include <array>

namespace WebCore {

namespace XMLNames {

using namespace WebCore;

MainThreadLazyNeverDestroyed<const AtomString> xmlNamespaceURI;

static constexpr StringImpl::StaticStringImpl langData("lang");
static constexpr StringImpl::StaticStringImpl spaceData("space");

// Attributes
WEBCORE_EXPORT LazyNeverDestroyed<const QualifiedName> langAttr;
WEBCORE_EXPORT LazyNeverDestroyed<const QualifiedName> spaceAttr;

void init()
{
    static bool initialized = false;
    if (initialized)
        return;
    initialized = true;

    // Use placement new to initialize the globals.
    AtomString xmlNS("http://www.w3.org/XML/1998/namespace"_s);

    // Namespace
    xmlNamespaceURI.construct(xmlNS);

#ifndef NDEBUG
    reinterpret_cast<const StringImpl*>(&langData)->assertHashIsCorrect();
    reinterpret_cast<const StringImpl*>(&spaceData)->assertHashIsCorrect();
#endif // NDEBUG


    struct AttributesTableEntry {
        LazyNeverDestroyed<const QualifiedName>* targetAddress;
        const StaticStringImpl& name;
        NodeName nodeName;
    };

    static const AttributesTableEntry attributesTable[] = {
        { &langAttr, *(&langData), NodeName::XML_langAttr },
        { &spaceAttr, *(&spaceData), NodeName::XML_spaceAttr },
    };

    for (auto& entry : attributesTable)
        entry.targetAddress->construct(nullAtom(), AtomString(&entry.name), xmlNS, Namespace::XML, entry.nodeName);
}

} }

