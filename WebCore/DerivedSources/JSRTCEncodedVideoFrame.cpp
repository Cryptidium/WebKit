/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCEncodedVideoFrame.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSRTCEncodedVideoFrame.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(RTCEncodedVideoFrame::Type enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("empty"),
        MAKE_STATIC_STRING_IMPL("key"),
        MAKE_STATIC_STRING_IMPL("delta"),
    };
    static_assert(static_cast<size_t>(RTCEncodedVideoFrame::Type::Empty) == 0, "RTCEncodedVideoFrame::Type::Empty is not 0 as expected");
    static_assert(static_cast<size_t>(RTCEncodedVideoFrame::Type::Key) == 1, "RTCEncodedVideoFrame::Type::Key is not 1 as expected");
    static_assert(static_cast<size_t>(RTCEncodedVideoFrame::Type::Delta) == 2, "RTCEncodedVideoFrame::Type::Delta is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, RTCEncodedVideoFrame::Type enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<RTCEncodedVideoFrame::Type> parseEnumerationFromString<RTCEncodedVideoFrame::Type>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, RTCEncodedVideoFrame::Type>, 3> mappings {
        std::pair<ComparableASCIILiteral, RTCEncodedVideoFrame::Type> { "delta"_s, RTCEncodedVideoFrame::Type::Delta },
        std::pair<ComparableASCIILiteral, RTCEncodedVideoFrame::Type> { "empty"_s, RTCEncodedVideoFrame::Type::Empty },
        std::pair<ComparableASCIILiteral, RTCEncodedVideoFrame::Type> { "key"_s, RTCEncodedVideoFrame::Type::Key },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<RTCEncodedVideoFrame::Type> parseEnumeration<RTCEncodedVideoFrame::Type>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<RTCEncodedVideoFrame::Type>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<RTCEncodedVideoFrame::Type>()
{
    return "\"empty\", \"key\", \"delta\""_s;
}

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCEncodedVideoFrame::Metadata>> convertDictionary<RTCEncodedVideoFrame::Metadata>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCEncodedVideoFrame::Metadata result;
    JSValue contributingSourcesValue;
    if (isNullOrUndefined)
        contributingSourcesValue = jsUndefined();
    else {
        contributingSourcesValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "contributingSources"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!contributingSourcesValue.isUndefined()) {
        auto contributingSourcesConversionResult = convert<IDLSequence<IDLUnsignedLong>>(lexicalGlobalObject, contributingSourcesValue);
        if (contributingSourcesConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.contributingSources = contributingSourcesConversionResult.releaseReturnValue();
    }
    JSValue dependenciesValue;
    if (isNullOrUndefined)
        dependenciesValue = jsUndefined();
    else {
        dependenciesValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "dependencies"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!dependenciesValue.isUndefined()) {
        auto dependenciesConversionResult = convert<IDLSequence<IDLLongLong>>(lexicalGlobalObject, dependenciesValue);
        if (dependenciesConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.dependencies = dependenciesConversionResult.releaseReturnValue();
    }
    JSValue frameIdValue;
    if (isNullOrUndefined)
        frameIdValue = jsUndefined();
    else {
        frameIdValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "frameId"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!frameIdValue.isUndefined()) {
        auto frameIdConversionResult = convert<IDLLongLong>(lexicalGlobalObject, frameIdValue);
        if (frameIdConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.frameId = frameIdConversionResult.releaseReturnValue();
    }
    JSValue heightValue;
    if (isNullOrUndefined)
        heightValue = jsUndefined();
    else {
        heightValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "height"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!heightValue.isUndefined()) {
        auto heightConversionResult = convert<IDLUnsignedShort>(lexicalGlobalObject, heightValue);
        if (heightConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.height = heightConversionResult.releaseReturnValue();
    }
    JSValue mimeTypeValue;
    if (isNullOrUndefined)
        mimeTypeValue = jsUndefined();
    else {
        mimeTypeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "mimeType"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!mimeTypeValue.isUndefined()) {
        auto mimeTypeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, mimeTypeValue);
        if (mimeTypeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.mimeType = mimeTypeConversionResult.releaseReturnValue();
    }
    JSValue payloadTypeValue;
    if (isNullOrUndefined)
        payloadTypeValue = jsUndefined();
    else {
        payloadTypeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "payloadType"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!payloadTypeValue.isUndefined()) {
        auto payloadTypeConversionResult = convert<IDLOctet>(lexicalGlobalObject, payloadTypeValue);
        if (payloadTypeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.payloadType = payloadTypeConversionResult.releaseReturnValue();
    }
    JSValue rtpTimestampValue;
    if (isNullOrUndefined)
        rtpTimestampValue = jsUndefined();
    else {
        rtpTimestampValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "rtpTimestamp"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!rtpTimestampValue.isUndefined()) {
        auto rtpTimestampConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, rtpTimestampValue);
        if (rtpTimestampConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.rtpTimestamp = rtpTimestampConversionResult.releaseReturnValue();
    }
    JSValue spatialIndexValue;
    if (isNullOrUndefined)
        spatialIndexValue = jsUndefined();
    else {
        spatialIndexValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "spatialIndex"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!spatialIndexValue.isUndefined()) {
        auto spatialIndexConversionResult = convert<IDLLong>(lexicalGlobalObject, spatialIndexValue);
        if (spatialIndexConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.spatialIndex = spatialIndexConversionResult.releaseReturnValue();
    }
    JSValue synchronizationSourceValue;
    if (isNullOrUndefined)
        synchronizationSourceValue = jsUndefined();
    else {
        synchronizationSourceValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "synchronizationSource"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!synchronizationSourceValue.isUndefined()) {
        auto synchronizationSourceConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, synchronizationSourceValue);
        if (synchronizationSourceConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.synchronizationSource = synchronizationSourceConversionResult.releaseReturnValue();
    }
    JSValue temporalIndexValue;
    if (isNullOrUndefined)
        temporalIndexValue = jsUndefined();
    else {
        temporalIndexValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "temporalIndex"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!temporalIndexValue.isUndefined()) {
        auto temporalIndexConversionResult = convert<IDLLong>(lexicalGlobalObject, temporalIndexValue);
        if (temporalIndexConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.temporalIndex = temporalIndexConversionResult.releaseReturnValue();
    }
    JSValue timestampValue;
    if (isNullOrUndefined)
        timestampValue = jsUndefined();
    else {
        timestampValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "timestamp"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!timestampValue.isUndefined()) {
        auto timestampConversionResult = convert<IDLLongLong>(lexicalGlobalObject, timestampValue);
        if (timestampConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.timestamp = timestampConversionResult.releaseReturnValue();
    }
    JSValue widthValue;
    if (isNullOrUndefined)
        widthValue = jsUndefined();
    else {
        widthValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "width"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!widthValue.isUndefined()) {
        auto widthConversionResult = convert<IDLUnsignedShort>(lexicalGlobalObject, widthValue);
        if (widthConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.width = widthConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCEncodedVideoFrame::Metadata& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLSequence<IDLUnsignedLong>::isNullValue(dictionary.contributingSources)) {
        auto contributingSourcesValue = toJS<IDLSequence<IDLUnsignedLong>>(lexicalGlobalObject, globalObject, throwScope, IDLSequence<IDLUnsignedLong>::extractValueFromNullable(dictionary.contributingSources));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "contributingSources"_s), contributingSourcesValue);
    }
    if (!IDLSequence<IDLLongLong>::isNullValue(dictionary.dependencies)) {
        auto dependenciesValue = toJS<IDLSequence<IDLLongLong>>(lexicalGlobalObject, globalObject, throwScope, IDLSequence<IDLLongLong>::extractValueFromNullable(dictionary.dependencies));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "dependencies"_s), dependenciesValue);
    }
    if (!IDLLongLong::isNullValue(dictionary.frameId)) {
        auto frameIdValue = toJS<IDLLongLong>(lexicalGlobalObject, throwScope, IDLLongLong::extractValueFromNullable(dictionary.frameId));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "frameId"_s), frameIdValue);
    }
    if (!IDLUnsignedShort::isNullValue(dictionary.height)) {
        auto heightValue = toJS<IDLUnsignedShort>(lexicalGlobalObject, throwScope, IDLUnsignedShort::extractValueFromNullable(dictionary.height));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "height"_s), heightValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.mimeType)) {
        auto mimeTypeValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.mimeType));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "mimeType"_s), mimeTypeValue);
    }
    if (!IDLOctet::isNullValue(dictionary.payloadType)) {
        auto payloadTypeValue = toJS<IDLOctet>(lexicalGlobalObject, throwScope, IDLOctet::extractValueFromNullable(dictionary.payloadType));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "payloadType"_s), payloadTypeValue);
    }
    if (!IDLUnsignedLong::isNullValue(dictionary.rtpTimestamp)) {
        auto rtpTimestampValue = toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, IDLUnsignedLong::extractValueFromNullable(dictionary.rtpTimestamp));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "rtpTimestamp"_s), rtpTimestampValue);
    }
    if (!IDLLong::isNullValue(dictionary.spatialIndex)) {
        auto spatialIndexValue = toJS<IDLLong>(lexicalGlobalObject, throwScope, IDLLong::extractValueFromNullable(dictionary.spatialIndex));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "spatialIndex"_s), spatialIndexValue);
    }
    if (!IDLUnsignedLong::isNullValue(dictionary.synchronizationSource)) {
        auto synchronizationSourceValue = toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, IDLUnsignedLong::extractValueFromNullable(dictionary.synchronizationSource));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "synchronizationSource"_s), synchronizationSourceValue);
    }
    if (!IDLLong::isNullValue(dictionary.temporalIndex)) {
        auto temporalIndexValue = toJS<IDLLong>(lexicalGlobalObject, throwScope, IDLLong::extractValueFromNullable(dictionary.temporalIndex));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "temporalIndex"_s), temporalIndexValue);
    }
    if (!IDLLongLong::isNullValue(dictionary.timestamp)) {
        auto timestampValue = toJS<IDLLongLong>(lexicalGlobalObject, throwScope, IDLLongLong::extractValueFromNullable(dictionary.timestamp));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "timestamp"_s), timestampValue);
    }
    if (!IDLUnsignedShort::isNullValue(dictionary.width)) {
        auto widthValue = toJS<IDLUnsignedShort>(lexicalGlobalObject, throwScope, IDLUnsignedShort::extractValueFromNullable(dictionary.width));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "width"_s), widthValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCEncodedVideoFrame::Options>> convertDictionary<RTCEncodedVideoFrame::Options>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCEncodedVideoFrame::Options result;
    JSValue metadataValue;
    if (isNullOrUndefined)
        metadataValue = jsUndefined();
    else {
        metadataValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "metadata"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!metadataValue.isUndefined()) {
        auto metadataConversionResult = convert<IDLDictionary<RTCEncodedVideoFrame::Metadata>>(lexicalGlobalObject, metadataValue);
        if (metadataConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.metadata = metadataConversionResult.releaseReturnValue();
    }
    return result;
}

#endif

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRTCEncodedVideoFramePrototypeFunction_getMetadata);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCEncodedVideoFrameConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCEncodedVideoFrame_type);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCEncodedVideoFrame_timestamp);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCEncodedVideoFrame_data);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCEncodedVideoFrame_data);

class JSRTCEncodedVideoFramePrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCEncodedVideoFramePrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCEncodedVideoFramePrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCEncodedVideoFramePrototype>(vm)) JSRTCEncodedVideoFramePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCEncodedVideoFramePrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCEncodedVideoFramePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCEncodedVideoFramePrototype, JSRTCEncodedVideoFramePrototype::Base);

using JSRTCEncodedVideoFrameDOMConstructor = JSDOMConstructor<JSRTCEncodedVideoFrame>;

template<> EncodedJSValue JSC_HOST_CALL_ATTRIBUTES JSRTCEncodedVideoFrameDOMConstructor::construct(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = lexicalGlobalObject->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* castedThis = jsCast<JSRTCEncodedVideoFrameDOMConstructor*>(callFrame->jsCallee());
    ASSERT(castedThis);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto originalFrameConversionResult = convert<IDLInterface<RTCEncodedVideoFrame>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "originalFrame"_s, "RTCEncodedVideoFrame"_s, nullptr, "RTCEncodedVideoFrame"_s); });
    if (originalFrameConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto optionsConversionResult = convert<IDLDictionary<RTCEncodedVideoFrame::Options>>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto object = RTCEncodedVideoFrame::create(*originalFrameConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue());
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    static_assert(TypeOrExceptionOrUnderlyingType<decltype(object)>::isRef);
    auto jsValue = toJSNewlyCreated<IDLInterface<RTCEncodedVideoFrame>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, WTFMove(object));
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    setSubclassStructureIfNeeded<RTCEncodedVideoFrame>(lexicalGlobalObject, callFrame, asObject(jsValue));
    RETURN_IF_EXCEPTION(throwScope, { });
    return JSValue::encode(jsValue);
}
JSC_ANNOTATE_HOST_FUNCTION(JSRTCEncodedVideoFrameDOMConstructorConstruct, JSRTCEncodedVideoFrameDOMConstructor::construct);

template<> const ClassInfo JSRTCEncodedVideoFrameDOMConstructor::s_info = { "RTCEncodedVideoFrame"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCEncodedVideoFrameDOMConstructor) };

template<> JSValue JSRTCEncodedVideoFrameDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSRTCEncodedVideoFrameDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(1), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RTCEncodedVideoFrame"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCEncodedVideoFrame::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 5> JSRTCEncodedVideoFramePrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCEncodedVideoFrameConstructor, 0 } },
    HashTableValue { "type"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCEncodedVideoFrame_type, 0 } },
    HashTableValue { "timestamp"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCEncodedVideoFrame_timestamp, 0 } },
    HashTableValue { "data"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCEncodedVideoFrame_data, setJSRTCEncodedVideoFrame_data } },
    HashTableValue { "getMetadata"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCEncodedVideoFramePrototypeFunction_getMetadata, 0 } },
};

const ClassInfo JSRTCEncodedVideoFramePrototype::s_info = { "RTCEncodedVideoFrame"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCEncodedVideoFramePrototype) };

void JSRTCEncodedVideoFramePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCEncodedVideoFrame::info(), JSRTCEncodedVideoFramePrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCEncodedVideoFrame::s_info = { "RTCEncodedVideoFrame"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCEncodedVideoFrame) };

JSRTCEncodedVideoFrame::JSRTCEncodedVideoFrame(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCEncodedVideoFrame>&& impl)
    : JSDOMWrapper<RTCEncodedVideoFrame>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, RTCEncodedVideoFrame>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSRTCEncodedVideoFrame::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCEncodedVideoFramePrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSRTCEncodedVideoFramePrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCEncodedVideoFrame::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCEncodedVideoFrame>(vm, globalObject);
}

JSValue JSRTCEncodedVideoFrame::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCEncodedVideoFrameDOMConstructor, DOMConstructorID::RTCEncodedVideoFrame>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSRTCEncodedVideoFrame::destroy(JSC::JSCell* cell)
{
    JSRTCEncodedVideoFrame* thisObject = static_cast<JSRTCEncodedVideoFrame*>(cell);
    thisObject->JSRTCEncodedVideoFrame::~JSRTCEncodedVideoFrame();
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCEncodedVideoFrameConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCEncodedVideoFramePrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCEncodedVideoFrame::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCEncodedVideoFrame_typeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCEncodedVideoFrame& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCEncodedVideoFrame::Type>>(lexicalGlobalObject, throwScope, impl.type())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCEncodedVideoFrame_type, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCEncodedVideoFrame>::get<jsRTCEncodedVideoFrame_typeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCEncodedVideoFrame_timestampGetter(JSGlobalObject& lexicalGlobalObject, JSRTCEncodedVideoFrame& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLongLong>(lexicalGlobalObject, throwScope, impl.timestamp())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCEncodedVideoFrame_timestamp, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCEncodedVideoFrame>::get<jsRTCEncodedVideoFrame_timestampGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCEncodedVideoFrame_dataGetter(JSGlobalObject& lexicalGlobalObject, JSRTCEncodedVideoFrame& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLArrayBuffer>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.data())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCEncodedVideoFrame_data, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCEncodedVideoFrame>::get<jsRTCEncodedVideoFrame_dataGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCEncodedVideoFrame_dataSetter(JSGlobalObject& lexicalGlobalObject, JSRTCEncodedVideoFrame& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLArrayBuffer>(lexicalGlobalObject, value, [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwAttributeTypeError(lexicalGlobalObject, scope, "RTCEncodedVideoFrame"_s, "data"_s, "ArrayBuffer"_s); });
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setData(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCEncodedVideoFrame_data, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCEncodedVideoFrame>::set<setJSRTCEncodedVideoFrame_dataSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsRTCEncodedVideoFramePrototypeFunction_getMetadataBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCEncodedVideoFrame>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDictionary<RTCEncodedVideoFrame::Metadata>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getMetadata())));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCEncodedVideoFramePrototypeFunction_getMetadata, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCEncodedVideoFrame>::call<jsRTCEncodedVideoFramePrototypeFunction_getMetadataBody>(*lexicalGlobalObject, *callFrame, "getMetadata");
}

JSC::GCClient::IsoSubspace* JSRTCEncodedVideoFrame::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCEncodedVideoFrame, UseCustomHeapCellType::No>(vm, "JSRTCEncodedVideoFrame"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCEncodedVideoFrame.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCEncodedVideoFrame = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCEncodedVideoFrame.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCEncodedVideoFrame = std::forward<decltype(space)>(space); }
    );
}

void JSRTCEncodedVideoFrame::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCEncodedVideoFrame*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRTCEncodedVideoFrameOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSRTCEncodedVideoFrameOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCEncodedVideoFrame = static_cast<JSRTCEncodedVideoFrame*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCEncodedVideoFrame->protectedWrapped().ptr(), jsRTCEncodedVideoFrame);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCEncodedVideoFrame@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore20RTCEncodedVideoFrameE[]; }
#endif
template<std::same_as<RTCEncodedVideoFrame> T>
static inline void verifyVTable(RTCEncodedVideoFrame* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7RTCEncodedVideoFrame@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore20RTCEncodedVideoFrameE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // RTCEncodedVideoFrame has subclasses. If RTCEncodedVideoFrame has subclasses that get passed
        // to toJS() we currently require RTCEncodedVideoFrame you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCEncodedVideoFrame>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<RTCEncodedVideoFrame>(impl.ptr());
#endif
    return createWrapper<RTCEncodedVideoFrame>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCEncodedVideoFrame& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCEncodedVideoFrame* JSRTCEncodedVideoFrame::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCEncodedVideoFrame*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
