/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCDataChannel.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSBlob.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSRTCPriorityType.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(RTCDataChannel::BinaryType enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 2> values {
        MAKE_STATIC_STRING_IMPL("blob"),
        MAKE_STATIC_STRING_IMPL("arraybuffer"),
    };
    static_assert(static_cast<size_t>(RTCDataChannel::BinaryType::Blob) == 0, "RTCDataChannel::BinaryType::Blob is not 0 as expected");
    static_assert(static_cast<size_t>(RTCDataChannel::BinaryType::Arraybuffer) == 1, "RTCDataChannel::BinaryType::Arraybuffer is not 1 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, RTCDataChannel::BinaryType enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<RTCDataChannel::BinaryType> parseEnumerationFromString<RTCDataChannel::BinaryType>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, RTCDataChannel::BinaryType>, 2> mappings {
        std::pair<ComparableASCIILiteral, RTCDataChannel::BinaryType> { "arraybuffer"_s, RTCDataChannel::BinaryType::Arraybuffer },
        std::pair<ComparableASCIILiteral, RTCDataChannel::BinaryType> { "blob"_s, RTCDataChannel::BinaryType::Blob },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<RTCDataChannel::BinaryType> parseEnumeration<RTCDataChannel::BinaryType>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<RTCDataChannel::BinaryType>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<RTCDataChannel::BinaryType>()
{
    return "\"blob\", \"arraybuffer\""_s;
}

#if ENABLE(WEB_RTC)

String convertEnumerationToString(RTCDataChannelState enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 4> values {
        MAKE_STATIC_STRING_IMPL("connecting"),
        MAKE_STATIC_STRING_IMPL("open"),
        MAKE_STATIC_STRING_IMPL("closing"),
        MAKE_STATIC_STRING_IMPL("closed"),
    };
    static_assert(static_cast<size_t>(RTCDataChannelState::Connecting) == 0, "RTCDataChannelState::Connecting is not 0 as expected");
    static_assert(static_cast<size_t>(RTCDataChannelState::Open) == 1, "RTCDataChannelState::Open is not 1 as expected");
    static_assert(static_cast<size_t>(RTCDataChannelState::Closing) == 2, "RTCDataChannelState::Closing is not 2 as expected");
    static_assert(static_cast<size_t>(RTCDataChannelState::Closed) == 3, "RTCDataChannelState::Closed is not 3 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, RTCDataChannelState enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<RTCDataChannelState> parseEnumerationFromString<RTCDataChannelState>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, RTCDataChannelState>, 4> mappings {
        std::pair<ComparableASCIILiteral, RTCDataChannelState> { "closed"_s, RTCDataChannelState::Closed },
        std::pair<ComparableASCIILiteral, RTCDataChannelState> { "closing"_s, RTCDataChannelState::Closing },
        std::pair<ComparableASCIILiteral, RTCDataChannelState> { "connecting"_s, RTCDataChannelState::Connecting },
        std::pair<ComparableASCIILiteral, RTCDataChannelState> { "open"_s, RTCDataChannelState::Open },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<RTCDataChannelState> parseEnumeration<RTCDataChannelState>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<RTCDataChannelState>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<RTCDataChannelState>()
{
    return "\"connecting\", \"open\", \"closing\", \"closed\""_s;
}

#endif

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRTCDataChannelPrototypeFunction_send);
static JSC_DECLARE_HOST_FUNCTION(jsRTCDataChannelPrototypeFunction_close);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_label);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_ordered);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_maxPacketLifeTime);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_maxRetransmits);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_protocol);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_negotiated);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_id);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_readyState);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_bufferedAmount);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_priority);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_bufferedAmountLowThreshold);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_bufferedAmountLowThreshold);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_binaryType);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_binaryType);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_onopen);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_onopen);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_onerror);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_onerror);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_onclose);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_onclose);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_onclosing);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_onclosing);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_onmessage);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_onmessage);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDataChannel_onbufferedamountlow);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDataChannel_onbufferedamountlow);

class JSRTCDataChannelPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCDataChannelPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCDataChannelPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCDataChannelPrototype>(vm)) JSRTCDataChannelPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCDataChannelPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCDataChannelPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCDataChannelPrototype, JSRTCDataChannelPrototype::Base);

using JSRTCDataChannelDOMConstructor = JSDOMConstructorNotConstructable<JSRTCDataChannel>;

template<> const ClassInfo JSRTCDataChannelDOMConstructor::s_info = { "RTCDataChannel"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCDataChannelDOMConstructor) };

template<> JSValue JSRTCDataChannelDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSRTCDataChannelDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RTCDataChannel"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCDataChannel::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 21> JSRTCDataChannelPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannelConstructor, 0 } },
    HashTableValue { "label"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_label, 0 } },
    HashTableValue { "ordered"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_ordered, 0 } },
    HashTableValue { "maxPacketLifeTime"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_maxPacketLifeTime, 0 } },
    HashTableValue { "maxRetransmits"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_maxRetransmits, 0 } },
    HashTableValue { "protocol"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_protocol, 0 } },
    HashTableValue { "negotiated"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_negotiated, 0 } },
    HashTableValue { "id"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_id, 0 } },
    HashTableValue { "readyState"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_readyState, 0 } },
    HashTableValue { "bufferedAmount"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_bufferedAmount, 0 } },
    HashTableValue { "priority"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_priority, 0 } },
    HashTableValue { "bufferedAmountLowThreshold"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_bufferedAmountLowThreshold, setJSRTCDataChannel_bufferedAmountLowThreshold } },
    HashTableValue { "binaryType"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_binaryType, setJSRTCDataChannel_binaryType } },
    HashTableValue { "onopen"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_onopen, setJSRTCDataChannel_onopen } },
    HashTableValue { "onerror"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_onerror, setJSRTCDataChannel_onerror } },
    HashTableValue { "onclose"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_onclose, setJSRTCDataChannel_onclose } },
    HashTableValue { "onclosing"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_onclosing, setJSRTCDataChannel_onclosing } },
    HashTableValue { "onmessage"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_onmessage, setJSRTCDataChannel_onmessage } },
    HashTableValue { "onbufferedamountlow"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDataChannel_onbufferedamountlow, setJSRTCDataChannel_onbufferedamountlow } },
    HashTableValue { "send"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCDataChannelPrototypeFunction_send, 1 } },
    HashTableValue { "close"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCDataChannelPrototypeFunction_close, 0 } },
};

const ClassInfo JSRTCDataChannelPrototype::s_info = { "RTCDataChannel"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCDataChannelPrototype) };

void JSRTCDataChannelPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCDataChannel::info(), JSRTCDataChannelPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCDataChannel::s_info = { "RTCDataChannel"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCDataChannel) };

JSRTCDataChannel::JSRTCDataChannel(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCDataChannel>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<RTCDataChannel> JSRTCDataChannel::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, RTCDataChannel>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSRTCDataChannel::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCDataChannelPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSRTCDataChannelPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCDataChannel::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCDataChannel>(vm, globalObject);
}

JSValue JSRTCDataChannel::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCDataChannelDOMConstructor, DOMConstructorID::RTCDataChannel>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCDataChannelPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCDataChannel::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCDataChannel_labelGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUSVString>(lexicalGlobalObject, throwScope, impl.label())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_label, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_labelGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_orderedGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.ordered())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_ordered, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_orderedGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_maxPacketLifeTimeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedShort>>(lexicalGlobalObject, throwScope, impl.maxPacketLifeTime())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_maxPacketLifeTime, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_maxPacketLifeTimeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_maxRetransmitsGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedShort>>(lexicalGlobalObject, throwScope, impl.maxRetransmits())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_maxRetransmits, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_maxRetransmitsGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_protocolGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUSVString>(lexicalGlobalObject, throwScope, impl.protocol())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_protocol, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_protocolGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_negotiatedGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.negotiated())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_negotiated, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_negotiatedGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_idGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedShort>>(lexicalGlobalObject, throwScope, impl.id())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_id, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_idGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_readyStateGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCDataChannelState>>(lexicalGlobalObject, throwScope, impl.readyState())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_readyState, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_readyStateGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_bufferedAmountGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.bufferedAmount())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_bufferedAmount, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_bufferedAmountGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_priorityGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCPriorityType>>(lexicalGlobalObject, throwScope, impl.priority())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_priority, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_priorityGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDataChannel_bufferedAmountLowThresholdGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.bufferedAmountLowThreshold())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_bufferedAmountLowThreshold, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_bufferedAmountLowThresholdGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_bufferedAmountLowThresholdSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setBufferedAmountLowThreshold(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_bufferedAmountLowThreshold, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_bufferedAmountLowThresholdSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDataChannel_binaryTypeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCDataChannel::BinaryType>>(lexicalGlobalObject, throwScope, impl.binaryType())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_binaryType, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_binaryTypeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_binaryTypeSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<RTCDataChannel::BinaryType>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setBinaryType(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_binaryType, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_binaryTypeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDataChannel_onopenGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().openEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_onopen, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_onopenGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_onopenSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().openEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_onopen, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_onopenSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDataChannel_onerrorGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().errorEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_onerrorGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_onerrorSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().errorEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_onerrorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDataChannel_oncloseGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().closeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_onclose, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_oncloseGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_oncloseSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().closeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_onclose, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_oncloseSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDataChannel_onclosingGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().closingEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_onclosing, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_onclosingGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_onclosingSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().closingEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_onclosing, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_onclosingSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDataChannel_onmessageGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().messageEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_onmessage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_onmessageGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_onmessageSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().messageEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_onmessage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_onmessageSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDataChannel_onbufferedamountlowGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().bufferedamountlowEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDataChannel_onbufferedamountlow, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::get<jsRTCDataChannel_onbufferedamountlowGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDataChannel_onbufferedamountlowSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDataChannel& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().bufferedamountlowEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDataChannel_onbufferedamountlow, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDataChannel>::set<setJSRTCDataChannel_onbufferedamountlowSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunction_send1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCDataChannel>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dataConversionResult = convert<IDLArrayBuffer>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "data"_s, "RTCDataChannel"_s, "send"_s, "ArrayBuffer"_s); });
    if (dataConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.send(dataConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunction_send2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCDataChannel>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dataConversionResult = convert<IDLArrayBufferView>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "data"_s, "RTCDataChannel"_s, "send"_s, "ArrayBufferView"_s); });
    if (dataConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.send(dataConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunction_send3Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCDataChannel>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dataConversionResult = convert<IDLInterface<Blob>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "data"_s, "RTCDataChannel"_s, "send"_s, "Blob"_s); });
    if (dataConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.send(*dataConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunction_send4Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCDataChannel>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto dataConversionResult = convert<IDLUSVString>(*lexicalGlobalObject, argument0.value());
    if (dataConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.send(dataConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunction_sendOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCDataChannel>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    size_t argsCount = std::min<size_t>(1, callFrame->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = callFrame->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits<JSArrayBuffer>())
            RELEASE_AND_RETURN(throwScope, (jsRTCDataChannelPrototypeFunction_send1Body(lexicalGlobalObject, callFrame, castedThis)));
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits<JSArrayBufferView>())
            RELEASE_AND_RETURN(throwScope, (jsRTCDataChannelPrototypeFunction_send2Body(lexicalGlobalObject, callFrame, castedThis)));
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits<JSBlob>())
            RELEASE_AND_RETURN(throwScope, (jsRTCDataChannelPrototypeFunction_send3Body(lexicalGlobalObject, callFrame, castedThis)));
        RELEASE_AND_RETURN(throwScope, (jsRTCDataChannelPrototypeFunction_send4Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    return argsCount < 1 ? throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject)) : throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsRTCDataChannelPrototypeFunction_send, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCDataChannel>::call<jsRTCDataChannelPrototypeFunction_sendOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "send");
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunction_closeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCDataChannel>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.close(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCDataChannelPrototypeFunction_close, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCDataChannel>::call<jsRTCDataChannelPrototypeFunction_closeBody>(*lexicalGlobalObject, *callFrame, "close");
}

JSC::GCClient::IsoSubspace* JSRTCDataChannel::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCDataChannel, UseCustomHeapCellType::No>(vm, "JSRTCDataChannel"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCDataChannel.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCDataChannel = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCDataChannel.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCDataChannel = std::forward<decltype(space)>(space); }
    );
}

void JSRTCDataChannel::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCDataChannel*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRTCDataChannelOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsRTCDataChannel = jsCast<JSRTCDataChannel*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsRTCDataChannel->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSRTCDataChannelOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCDataChannel = static_cast<JSRTCDataChannel*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCDataChannel->protectedWrapped().ptr(), jsRTCDataChannel);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCDataChannel@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14RTCDataChannelE[]; }
#endif
template<std::same_as<RTCDataChannel> T>
static inline void verifyVTable(RTCDataChannel* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7RTCDataChannel@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore14RTCDataChannelE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // RTCDataChannel has subclasses. If RTCDataChannel has subclasses that get passed
        // to toJS() we currently require RTCDataChannel you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCDataChannel>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<RTCDataChannel>(impl.ptr());
#endif
    return createWrapper<RTCDataChannel>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCDataChannel& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCDataChannel* JSRTCDataChannel::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCDataChannel*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
