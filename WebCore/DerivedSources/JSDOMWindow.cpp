/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMWindow.h"

#include "ActiveDOMObject.h"
#include "DOMPromiseProxy.h"
#include "DOMWrapperWorld.h"
#include "DeprecatedGlobalSettings.h"
#include "Document.h"
#include "DocumentInlines.h"
#include "EventNames.h"
#include "EventTargetInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "HTMLFrameOwnerElement.h"
#include "IDLTypes.h"
#include "JSAbortController.h"
#include "JSAbortSignal.h"
#include "JSAbstractRange.h"
#include "JSAnimationEffect.h"
#include "JSAnimationPlaybackEvent.h"
#include "JSAnimationTimeline.h"
#include "JSAttr.h"
#include "JSBackgroundFetchManager.h"
#include "JSBackgroundFetchRecord.h"
#include "JSBackgroundFetchRegistration.h"
#include "JSBackgroundFetchUpdateUIEvent.h"
#include "JSBarProp.h"
#include "JSBarcodeDetector.h"
#include "JSBeforeUnloadEvent.h"
#include "JSBlob.h"
#include "JSBroadcastChannel.h"
#include "JSByteLengthQueuingStrategy.h"
#include "JSCDATASection.h"
#include "JSCSPViolationReportBody.h"
#include "JSCSSAnimation.h"
#include "JSCSSAnimationEvent.h"
#include "JSCSSConditionRule.h"
#include "JSCSSContainerRule.h"
#include "JSCSSCounterStyleRule.h"
#include "JSCSSFontFaceDescriptors.h"
#include "JSCSSFontFaceRule.h"
#include "JSCSSFontFeatureValuesRule.h"
#include "JSCSSFontPaletteValuesRule.h"
#include "JSCSSGroupingRule.h"
#include "JSCSSHSL.h"
#include "JSCSSHWB.h"
#include "JSCSSImportRule.h"
#include "JSCSSKeyframeRule.h"
#include "JSCSSKeyframesRule.h"
#include "JSCSSKeywordValue.h"
#include "JSCSSLCH.h"
#include "JSCSSLab.h"
#include "JSCSSLayerBlockRule.h"
#include "JSCSSLayerStatementRule.h"
#include "JSCSSMathClamp.h"
#include "JSCSSMathInvert.h"
#include "JSCSSMathMax.h"
#include "JSCSSMathMin.h"
#include "JSCSSMathNegate.h"
#include "JSCSSMathProduct.h"
#include "JSCSSMathSum.h"
#include "JSCSSMathValue.h"
#include "JSCSSMatrixComponent.h"
#include "JSCSSMediaRule.h"
#include "JSCSSNamespaceRule.h"
#include "JSCSSNestedDeclarations.h"
#include "JSCSSNumericArray.h"
#include "JSCSSNumericValue.h"
#include "JSCSSOKLCH.h"
#include "JSCSSOKLab.h"
#include "JSCSSOMColor.h"
#include "JSCSSOMColorValue.h"
#include "JSCSSOMVariableReferenceValue.h"
#include "JSCSSPageDescriptors.h"
#include "JSCSSPageRule.h"
#include "JSCSSPerspective.h"
#include "JSCSSPositionTryDescriptors.h"
#include "JSCSSPositionTryRule.h"
#include "JSCSSPropertyRule.h"
#include "JSCSSRGB.h"
#include "JSCSSRotate.h"
#include "JSCSSRule.h"
#include "JSCSSRuleList.h"
#include "JSCSSScale.h"
#include "JSCSSScopeRule.h"
#include "JSCSSSkew.h"
#include "JSCSSSkewX.h"
#include "JSCSSSkewY.h"
#include "JSCSSStartingStyleRule.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSStyleImageValue.h"
#include "JSCSSStyleProperties.h"
#include "JSCSSStyleRule.h"
#include "JSCSSStyleSheet.h"
#include "JSCSSStyleValue.h"
#include "JSCSSSupportsRule.h"
#include "JSCSSTransformComponent.h"
#include "JSCSSTransformValue.h"
#include "JSCSSTransition.h"
#include "JSCSSTransitionEvent.h"
#include "JSCSSTranslate.h"
#include "JSCSSUnitValue.h"
#include "JSCSSUnparsedValue.h"
#include "JSCSSViewTransitionRule.h"
#include "JSCanvasGradient.h"
#include "JSCanvasPattern.h"
#include "JSCanvasRenderingContext2D.h"
#include "JSCaretPosition.h"
#include "JSCharacterData.h"
#include "JSClipboard.h"
#include "JSClipboardEvent.h"
#include "JSClipboardItem.h"
#include "JSCloseEvent.h"
#include "JSCloseWatcher.h"
#include "JSCommandEvent.h"
#include "JSComment.h"
#include "JSCompositionEvent.h"
#include "JSCompressionStream.h"
#include "JSCompressionStreamEncoder.h"
#include "JSContactsManager.h"
#include "JSContentVisibilityAutoStateChangeEvent.h"
#include "JSCookieChangeEvent.h"
#include "JSCookieStore.h"
#include "JSCookieStoreManager.h"
#include "JSCountQueuingStrategy.h"
#include "JSCrypto.h"
#include "JSCryptoKey.h"
#include "JSCustomEffect.h"
#include "JSCustomElementRegistry.h"
#include "JSCustomEvent.h"
#include "JSCustomStateSet.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMBindingSecurity.h"
#include "JSDOMBindingSecurityInlines.h"
#include "JSDOMCSSNamespace.h"
#include "JSDOMCache.h"
#include "JSDOMCacheStorage.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertAny.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertCallbacks.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertObject.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertScheduledAction.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMConvertVariadic.h"
#include "JSDOMException.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMFileSystem.h"
#include "JSDOMFormData.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMImplementation.h"
#include "JSDOMMatrix.h"
#include "JSDOMMatrixReadOnly.h"
#include "JSDOMMimeType.h"
#include "JSDOMMimeTypeArray.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMParser.h"
#include "JSDOMPlugin.h"
#include "JSDOMPluginArray.h"
#include "JSDOMPoint.h"
#include "JSDOMPointReadOnly.h"
#include "JSDOMQuad.h"
#include "JSDOMRect.h"
#include "JSDOMRectList.h"
#include "JSDOMRectReadOnly.h"
#include "JSDOMSelection.h"
#include "JSDOMStringList.h"
#include "JSDOMStringMap.h"
#include "JSDOMTokenList.h"
#include "JSDOMURL.h"
#include "JSDOMWindow.h"
#include "JSDOMWrapperCache.h"
#include "JSDataTransfer.h"
#include "JSDataTransferItem.h"
#include "JSDataTransferItemList.h"
#include "JSDatabase.h"
#include "JSDecompressionStream.h"
#include "JSDecompressionStreamDecoder.h"
#include "JSDeprecatedCSSOMCounter.h"
#include "JSDeprecatedCSSOMPrimitiveValue.h"
#include "JSDeprecatedCSSOMRGBColor.h"
#include "JSDeprecatedCSSOMRect.h"
#include "JSDeprecatedCSSOMValue.h"
#include "JSDeprecatedCSSOMValueList.h"
#include "JSDeprecationReportBody.h"
#include "JSDocument.h"
#include "JSDocumentFragment.h"
#include "JSDocumentTimeline.h"
#include "JSDocumentType.h"
#include "JSDragEvent.h"
#include "JSElement.h"
#include "JSElementInternals.h"
#include "JSErrorEvent.h"
#include "JSErrorHandler.h"
#include "JSEvent.h"
#include "JSEventCounts.h"
#include "JSEventListener.h"
#include "JSEventSource.h"
#include "JSEventTarget.h"
#include "JSFaceDetector.h"
#include "JSFetchHeaders.h"
#include "JSFetchRequest.h"
#include "JSFetchRequestInit.h"
#include "JSFetchResponse.h"
#include "JSFile.h"
#include "JSFileList.h"
#include "JSFileReader.h"
#include "JSFileSystemDirectoryEntry.h"
#include "JSFileSystemDirectoryHandle.h"
#include "JSFileSystemDirectoryReader.h"
#include "JSFileSystemEntry.h"
#include "JSFileSystemFileEntry.h"
#include "JSFileSystemFileHandle.h"
#include "JSFileSystemHandle.h"
#include "JSFileSystemWritableFileStream.h"
#include "JSFocusEvent.h"
#include "JSFontFace.h"
#include "JSFontFaceSet.h"
#include "JSFormDataEvent.h"
#include "JSFragmentDirective.h"
#include "JSGPU.h"
#include "JSGPUAdapter.h"
#include "JSGPUAdapterInfo.h"
#include "JSGPUBindGroup.h"
#include "JSGPUBindGroupLayout.h"
#include "JSGPUBuffer.h"
#include "JSGPUBufferUsage.h"
#include "JSGPUCanvasContext.h"
#include "JSGPUColorWrite.h"
#include "JSGPUCommandBuffer.h"
#include "JSGPUCommandEncoder.h"
#include "JSGPUCompilationInfo.h"
#include "JSGPUCompilationMessage.h"
#include "JSGPUComputePassEncoder.h"
#include "JSGPUComputePipeline.h"
#include "JSGPUDevice.h"
#include "JSGPUDeviceLostInfo.h"
#include "JSGPUExternalTexture.h"
#include "JSGPUInternalError.h"
#include "JSGPUMapMode.h"
#include "JSGPUOutOfMemoryError.h"
#include "JSGPUPipelineError.h"
#include "JSGPUPipelineLayout.h"
#include "JSGPUQuerySet.h"
#include "JSGPUQueue.h"
#include "JSGPURenderBundle.h"
#include "JSGPURenderBundleEncoder.h"
#include "JSGPURenderPassEncoder.h"
#include "JSGPURenderPipeline.h"
#include "JSGPUSampler.h"
#include "JSGPUShaderModule.h"
#include "JSGPUShaderStage.h"
#include "JSGPUSupportedFeatures.h"
#include "JSGPUSupportedLimits.h"
#include "JSGPUTexture.h"
#include "JSGPUTextureUsage.h"
#include "JSGPUTextureView.h"
#include "JSGPUUncapturedErrorEvent.h"
#include "JSGPUValidationError.h"
#include "JSHTMLAllCollection.h"
#include "JSHTMLAnchorElement.h"
#include "JSHTMLAreaElement.h"
#include "JSHTMLBRElement.h"
#include "JSHTMLBaseElement.h"
#include "JSHTMLBodyElement.h"
#include "JSHTMLButtonElement.h"
#include "JSHTMLCanvasElement.h"
#include "JSHTMLCollection.h"
#include "JSHTMLDListElement.h"
#include "JSHTMLDataElement.h"
#include "JSHTMLDataListElement.h"
#include "JSHTMLDetailsElement.h"
#include "JSHTMLDialogElement.h"
#include "JSHTMLDirectoryElement.h"
#include "JSHTMLDivElement.h"
#include "JSHTMLDocument.h"
#include "JSHTMLElement.h"
#include "JSHTMLEmbedElement.h"
#include "JSHTMLFieldSetElement.h"
#include "JSHTMLFontElement.h"
#include "JSHTMLFormControlsCollection.h"
#include "JSHTMLFormElement.h"
#include "JSHTMLFrameElement.h"
#include "JSHTMLFrameSetElement.h"
#include "JSHTMLHRElement.h"
#include "JSHTMLHeadElement.h"
#include "JSHTMLHeadingElement.h"
#include "JSHTMLHtmlElement.h"
#include "JSHTMLIFrameElement.h"
#include "JSHTMLImageElement.h"
#include "JSHTMLInputElement.h"
#include "JSHTMLLIElement.h"
#include "JSHTMLLabelElement.h"
#include "JSHTMLLegendElement.h"
#include "JSHTMLLinkElement.h"
#include "JSHTMLMapElement.h"
#include "JSHTMLMarqueeElement.h"
#include "JSHTMLMenuElement.h"
#include "JSHTMLMetaElement.h"
#include "JSHTMLMeterElement.h"
#include "JSHTMLModElement.h"
#include "JSHTMLOListElement.h"
#include "JSHTMLObjectElement.h"
#include "JSHTMLOptGroupElement.h"
#include "JSHTMLOptionElement.h"
#include "JSHTMLOptionsCollection.h"
#include "JSHTMLOutputElement.h"
#include "JSHTMLParagraphElement.h"
#include "JSHTMLParamElement.h"
#include "JSHTMLPictureElement.h"
#include "JSHTMLPreElement.h"
#include "JSHTMLProgressElement.h"
#include "JSHTMLQuoteElement.h"
#include "JSHTMLScriptElement.h"
#include "JSHTMLSelectElement.h"
#include "JSHTMLSlotElement.h"
#include "JSHTMLSourceElement.h"
#include "JSHTMLSpanElement.h"
#include "JSHTMLStyleElement.h"
#include "JSHTMLTableCaptionElement.h"
#include "JSHTMLTableCellElement.h"
#include "JSHTMLTableColElement.h"
#include "JSHTMLTableElement.h"
#include "JSHTMLTableRowElement.h"
#include "JSHTMLTableSectionElement.h"
#include "JSHTMLTemplateElement.h"
#include "JSHTMLTextAreaElement.h"
#include "JSHTMLTimeElement.h"
#include "JSHTMLTitleElement.h"
#include "JSHTMLUListElement.h"
#include "JSHTMLUnknownElement.h"
#include "JSHTMLVideoElement.h"
#include "JSHashChangeEvent.h"
#include "JSHighlight.h"
#include "JSHighlightRegistry.h"
#include "JSHistory.h"
#include "JSIDBCursor.h"
#include "JSIDBCursorWithValue.h"
#include "JSIDBDatabase.h"
#include "JSIDBFactory.h"
#include "JSIDBIndex.h"
#include "JSIDBKeyRange.h"
#include "JSIDBObjectStore.h"
#include "JSIDBOpenDBRequest.h"
#include "JSIDBRequest.h"
#include "JSIDBTransaction.h"
#include "JSIDBVersionChangeEvent.h"
#include "JSIdleDeadline.h"
#include "JSIdleRequestCallback.h"
#include "JSIdleRequestOptions.h"
#include "JSImageBitmap.h"
#include "JSImageBitmapOptions.h"
#include "JSImageBitmapRenderingContext.h"
#include "JSImageData.h"
#include "JSInputEvent.h"
#include "JSIntersectionObserver.h"
#include "JSIntersectionObserverEntry.h"
#include "JSKeyboardEvent.h"
#include "JSKeyframeEffect.h"
#include "JSLocation.h"
#include "JSMediaCapabilities.h"
#include "JSMediaList.h"
#include "JSMediaQueryList.h"
#include "JSMediaQueryListEvent.h"
#include "JSMessageChannel.h"
#include "JSMessageEvent.h"
#include "JSMessagePort.h"
#include "JSMouseEvent.h"
#include "JSMutationEvent.h"
#include "JSMutationObserver.h"
#include "JSMutationRecord.h"
#include "JSNamedNodeMap.h"
#include "JSNavigateEvent.h"
#include "JSNavigation.h"
#include "JSNavigationActivation.h"
#include "JSNavigationCurrentEntryChangeEvent.h"
#include "JSNavigationDestination.h"
#include "JSNavigationHistoryEntry.h"
#include "JSNavigationPreloadManager.h"
#include "JSNavigationTransition.h"
#include "JSNavigator.h"
#include "JSNavigatorUAData.h"
#include "JSNode.h"
#include "JSNodeFilter.h"
#include "JSNodeIterator.h"
#include "JSNodeList.h"
#include "JSObservable.h"
#include "JSOverflowEvent.h"
#include "JSPageRevealEvent.h"
#include "JSPageSwapEvent.h"
#include "JSPageTransitionEvent.h"
#include "JSPath2D.h"
#include "JSPerformance.h"
#include "JSPerformanceEntry.h"
#include "JSPerformanceEventTiming.h"
#include "JSPerformanceMark.h"
#include "JSPerformanceMeasure.h"
#include "JSPerformanceNavigation.h"
#include "JSPerformanceNavigationTiming.h"
#include "JSPerformanceObserver.h"
#include "JSPerformanceObserverEntryList.h"
#include "JSPerformancePaintTiming.h"
#include "JSPerformanceResourceTiming.h"
#include "JSPerformanceServerTiming.h"
#include "JSPerformanceTiming.h"
#include "JSPermissionStatus.h"
#include "JSPermissions.h"
#include "JSPointerEvent.h"
#include "JSPopStateEvent.h"
#include "JSProcessingInstruction.h"
#include "JSProgressEvent.h"
#include "JSPromiseRejectionEvent.h"
#include "JSPushManager.h"
#include "JSPushSubscription.h"
#include "JSPushSubscriptionOptions.h"
#include "JSRadioNodeList.h"
#include "JSRange.h"
#include "JSReadableByteStreamController.h"
#include "JSReadableStream.h"
#include "JSReadableStreamBYOBReader.h"
#include "JSReadableStreamBYOBRequest.h"
#include "JSReadableStreamDefaultController.h"
#include "JSReadableStreamDefaultReader.h"
#include "JSReport.h"
#include "JSReportBody.h"
#include "JSReportingObserver.h"
#include "JSRequestAnimationFrameCallback.h"
#include "JSResizeObserver.h"
#include "JSResizeObserverEntry.h"
#include "JSResizeObserverSize.h"
#include "JSSQLError.h"
#include "JSSQLResultSet.h"
#include "JSSQLResultSetRowList.h"
#include "JSSQLTransaction.h"
#include "JSSVGAElement.h"
#include "JSSVGAngle.h"
#include "JSSVGAnimateElement.h"
#include "JSSVGAnimateMotionElement.h"
#include "JSSVGAnimateTransformElement.h"
#include "JSSVGAnimatedAngle.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedInteger.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedLengthList.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedNumberList.h"
#include "JSSVGAnimatedPreserveAspectRatio.h"
#include "JSSVGAnimatedRect.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGAnimatedTransformList.h"
#include "JSSVGAnimationElement.h"
#include "JSSVGCircleElement.h"
#include "JSSVGClipPathElement.h"
#include "JSSVGComponentTransferFunctionElement.h"
#include "JSSVGDefsElement.h"
#include "JSSVGDescElement.h"
#include "JSSVGElement.h"
#include "JSSVGEllipseElement.h"
#include "JSSVGFEBlendElement.h"
#include "JSSVGFEColorMatrixElement.h"
#include "JSSVGFEComponentTransferElement.h"
#include "JSSVGFECompositeElement.h"
#include "JSSVGFEConvolveMatrixElement.h"
#include "JSSVGFEDiffuseLightingElement.h"
#include "JSSVGFEDisplacementMapElement.h"
#include "JSSVGFEDistantLightElement.h"
#include "JSSVGFEDropShadowElement.h"
#include "JSSVGFEFloodElement.h"
#include "JSSVGFEFuncAElement.h"
#include "JSSVGFEFuncBElement.h"
#include "JSSVGFEFuncGElement.h"
#include "JSSVGFEFuncRElement.h"
#include "JSSVGFEGaussianBlurElement.h"
#include "JSSVGFEImageElement.h"
#include "JSSVGFEMergeElement.h"
#include "JSSVGFEMergeNodeElement.h"
#include "JSSVGFEMorphologyElement.h"
#include "JSSVGFEOffsetElement.h"
#include "JSSVGFEPointLightElement.h"
#include "JSSVGFESpecularLightingElement.h"
#include "JSSVGFESpotLightElement.h"
#include "JSSVGFETileElement.h"
#include "JSSVGFETurbulenceElement.h"
#include "JSSVGFilterElement.h"
#include "JSSVGForeignObjectElement.h"
#include "JSSVGGElement.h"
#include "JSSVGGeometryElement.h"
#include "JSSVGGradientElement.h"
#include "JSSVGGraphicsElement.h"
#include "JSSVGImageElement.h"
#include "JSSVGLength.h"
#include "JSSVGLengthList.h"
#include "JSSVGLineElement.h"
#include "JSSVGLinearGradientElement.h"
#include "JSSVGMPathElement.h"
#include "JSSVGMarkerElement.h"
#include "JSSVGMaskElement.h"
#include "JSSVGMatrix.h"
#include "JSSVGMetadataElement.h"
#include "JSSVGNumber.h"
#include "JSSVGNumberList.h"
#include "JSSVGPathElement.h"
#include "JSSVGPathSeg.h"
#include "JSSVGPathSegArcAbs.h"
#include "JSSVGPathSegArcRel.h"
#include "JSSVGPathSegClosePath.h"
#include "JSSVGPathSegCurvetoCubicAbs.h"
#include "JSSVGPathSegCurvetoCubicRel.h"
#include "JSSVGPathSegCurvetoCubicSmoothAbs.h"
#include "JSSVGPathSegCurvetoCubicSmoothRel.h"
#include "JSSVGPathSegCurvetoQuadraticAbs.h"
#include "JSSVGPathSegCurvetoQuadraticRel.h"
#include "JSSVGPathSegCurvetoQuadraticSmoothAbs.h"
#include "JSSVGPathSegCurvetoQuadraticSmoothRel.h"
#include "JSSVGPathSegLinetoAbs.h"
#include "JSSVGPathSegLinetoHorizontalAbs.h"
#include "JSSVGPathSegLinetoHorizontalRel.h"
#include "JSSVGPathSegLinetoRel.h"
#include "JSSVGPathSegLinetoVerticalAbs.h"
#include "JSSVGPathSegLinetoVerticalRel.h"
#include "JSSVGPathSegList.h"
#include "JSSVGPathSegMovetoAbs.h"
#include "JSSVGPathSegMovetoRel.h"
#include "JSSVGPatternElement.h"
#include "JSSVGPoint.h"
#include "JSSVGPointList.h"
#include "JSSVGPolygonElement.h"
#include "JSSVGPolylineElement.h"
#include "JSSVGPreserveAspectRatio.h"
#include "JSSVGRadialGradientElement.h"
#include "JSSVGRect.h"
#include "JSSVGRectElement.h"
#include "JSSVGSVGElement.h"
#include "JSSVGScriptElement.h"
#include "JSSVGSetElement.h"
#include "JSSVGStopElement.h"
#include "JSSVGStringList.h"
#include "JSSVGStyleElement.h"
#include "JSSVGSwitchElement.h"
#include "JSSVGSymbolElement.h"
#include "JSSVGTSpanElement.h"
#include "JSSVGTextContentElement.h"
#include "JSSVGTextElement.h"
#include "JSSVGTextPathElement.h"
#include "JSSVGTextPositioningElement.h"
#include "JSSVGTitleElement.h"
#include "JSSVGTransform.h"
#include "JSSVGTransformList.h"
#include "JSSVGUnitTypes.h"
#include "JSSVGUseElement.h"
#include "JSSVGViewElement.h"
#include "JSSVGViewSpec.h"
#include "JSScreen.h"
#include "JSScreenOrientation.h"
#include "JSScrollTimeline.h"
#include "JSScrollToOptions.h"
#include "JSSecurityPolicyViolationEvent.h"
#include "JSServiceWorker.h"
#include "JSServiceWorkerContainer.h"
#include "JSServiceWorkerRegistration.h"
#include "JSShadowRoot.h"
#include "JSSharedWorker.h"
#include "JSSpeechRecognition.h"
#include "JSSpeechRecognitionAlternative.h"
#include "JSSpeechRecognitionErrorEvent.h"
#include "JSSpeechRecognitionEvent.h"
#include "JSSpeechRecognitionResult.h"
#include "JSSpeechRecognitionResultList.h"
#include "JSStaticRange.h"
#include "JSStorage.h"
#include "JSStorageEvent.h"
#include "JSStorageManager.h"
#include "JSStructuredSerializeOptions.h"
#include "JSStyleMedia.h"
#include "JSStylePropertyMap.h"
#include "JSStylePropertyMapReadOnly.h"
#include "JSStyleSheet.h"
#include "JSStyleSheetList.h"
#include "JSSubmitEvent.h"
#include "JSSubscriber.h"
#include "JSSubtleCrypto.h"
#include "JSText.h"
#include "JSTextDecoder.h"
#include "JSTextDecoderStream.h"
#include "JSTextDecoderStreamDecoder.h"
#include "JSTextDetector.h"
#include "JSTextEncoder.h"
#include "JSTextEncoderStream.h"
#include "JSTextEncoderStreamEncoder.h"
#include "JSTextEvent.h"
#include "JSTextMetrics.h"
#include "JSToggleEvent.h"
#include "JSTransformStream.h"
#include "JSTransformStreamDefaultController.h"
#include "JSTreeWalker.h"
#include "JSTrustedHTML.h"
#include "JSTrustedScript.h"
#include "JSTrustedScriptURL.h"
#include "JSTrustedTypePolicy.h"
#include "JSTrustedTypePolicyFactory.h"
#include "JSUIEvent.h"
#include "JSURLPattern.h"
#include "JSURLSearchParams.h"
#include "JSUndoItem.h"
#include "JSUndoManager.h"
#include "JSUserActivation.h"
#include "JSValidityState.h"
#include "JSViewTimeline.h"
#include "JSViewTransition.h"
#include "JSViewTransitionTypeSet.h"
#include "JSVisualViewport.h"
#include "JSWGSLLanguageFeatures.h"
#include "JSWakeLock.h"
#include "JSWakeLockSentinel.h"
#include "JSWebAnimation.h"
#include "JSWebKitNodeInfo.h"
#include "JSWebKitPoint.h"
#include "JSWebKitSerializedNode.h"
#include "JSWebLock.h"
#include "JSWebLockManager.h"
#include "JSWebSocket.h"
#include "JSWebTransport.h"
#include "JSWebTransportBidirectionalStream.h"
#include "JSWebTransportDatagramDuplexStream.h"
#include "JSWebTransportError.h"
#include "JSWebTransportReceiveStream.h"
#include "JSWebTransportSendStream.h"
#include "JSWheelEvent.h"
#include "JSWindowPostMessageOptions.h"
#include "JSWorker.h"
#include "JSWorklet.h"
#include "JSWritableStream.h"
#include "JSWritableStreamDefaultController.h"
#include "JSWritableStreamDefaultWriter.h"
#include "JSXMLDocument.h"
#include "JSXMLHttpRequest.h"
#include "JSXMLHttpRequestEventTarget.h"
#include "JSXMLHttpRequestProgressEvent.h"
#include "JSXMLHttpRequestUpload.h"
#include "JSXMLSerializer.h"
#include "JSXPathEvaluator.h"
#include "JSXPathExpression.h"
#include "JSXPathResult.h"
#include "LocalDOMWindow.h"
#include "Quirks.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include "WindowOrWorkerGlobalScopeCaches.h"
#include "WindowOrWorkerGlobalScopeFetch.h"
#include "WindowOrWorkerGlobalScopeIndexedDatabase.h"
#include "WindowOrWorkerGlobalScopeTrustedTypes.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/Variant.h>

#if ENABLE(ATTACHMENT_ELEMENT)
#include "JSHTMLAttachmentElement.h"
#endif

#if ENABLE(DEVICE_ORIENTATION)
#include "JSDeviceMotionEvent.h"
#include "JSDeviceOrientationEvent.h"
#endif

#if ENABLE(DOM_AUDIO_SESSION)
#include "JSDOMAudioSession.h"
#endif

#if ENABLE(ENCRYPTED_MEDIA)
#include "JSMediaEncryptedEvent.h"
#include "JSMediaKeyMessageEvent.h"
#include "JSMediaKeySession.h"
#include "JSMediaKeyStatusMap.h"
#include "JSMediaKeySystemAccess.h"
#include "JSMediaKeys.h"
#endif

#if ENABLE(GAMEPAD)
#include "JSGamepad.h"
#include "JSGamepadButton.h"
#include "JSGamepadEvent.h"
#include "JSGamepadHapticActuator.h"
#endif

#if ENABLE(GEOLOCATION)
#include "JSGeolocation.h"
#include "JSGeolocationCoordinates.h"
#include "JSGeolocationPosition.h"
#include "JSGeolocationPositionError.h"
#endif

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
#include "JSWebKitMediaKeyError.h"
#include "JSWebKitMediaKeyMessageEvent.h"
#include "JSWebKitMediaKeyNeededEvent.h"
#include "JSWebKitMediaKeySession.h"
#include "JSWebKitMediaKeys.h"
#endif

#if ENABLE(MATHML)
#include "JSMathMLElement.h"
#include "JSMathMLMathElement.h"
#endif

#if ENABLE(MEDIA_RECORDER)
#include "JSBlobEvent.h"
#include "JSMediaRecorder.h"
#include "JSMediaRecorderErrorEvent.h"
#endif

#if ENABLE(MEDIA_SESSION)
#include "JSMediaMetadata.h"
#include "JSMediaSession.h"
#endif

#if ENABLE(MEDIA_SESSION_COORDINATOR)
#include "JSMediaSessionCoordinator.h"
#endif

#if ENABLE(MEDIA_SOURCE)
#include "JSBufferedChangeEvent.h"
#include "JSManagedMediaSource.h"
#include "JSManagedSourceBuffer.h"
#include "JSMediaSource.h"
#include "JSSourceBuffer.h"
#include "JSSourceBufferList.h"
#endif

#if ENABLE(MEDIA_SOURCE_IN_WORKERS)
#include "JSMediaSourceHandle.h"
#endif

#if ENABLE(MEDIA_STREAM)
#include "JSCanvasCaptureMediaStreamTrack.h"
#include "JSImageCapture.h"
#include "JSInputDeviceInfo.h"
#include "JSMediaDeviceInfo.h"
#include "JSMediaDevices.h"
#include "JSMediaStream.h"
#include "JSMediaStreamTrack.h"
#include "JSMediaStreamTrackEvent.h"
#include "JSOverconstrainedError.h"
#include "JSOverconstrainedErrorEvent.h"
#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
#include "JSMediaStreamAudioDestinationNode.h"
#include "JSMediaStreamAudioSourceNode.h"
#endif

#if ENABLE(MODEL_ELEMENT)
#include "JSHTMLModelElement.h"
#endif

#if ENABLE(NOTIFICATIONS)
#include "JSNotification.h"
#endif

#if ENABLE(OFFSCREEN_CANVAS)
#include "JSOffscreenCanvas.h"
#include "JSOffscreenCanvasRenderingContext2D.h"
#endif

#if ENABLE(PAYMENT_REQUEST)
#include "JSMerchantValidationEvent.h"
#include "JSPaymentAddress.h"
#include "JSPaymentMethodChangeEvent.h"
#include "JSPaymentRequest.h"
#include "JSPaymentRequestUpdateEvent.h"
#include "JSPaymentResponse.h"
#endif

#if ENABLE(PICTURE_IN_PICTURE_API)
#include "JSPictureInPictureEvent.h"
#include "JSPictureInPictureWindow.h"
#endif

#if ENABLE(SPEECH_SYNTHESIS)
#include "JSSpeechSynthesis.h"
#include "JSSpeechSynthesisErrorEvent.h"
#include "JSSpeechSynthesisEvent.h"
#include "JSSpeechSynthesisUtterance.h"
#include "JSSpeechSynthesisVoice.h"
#include "LocalDOMWindowSpeechSynthesis.h"
#endif

#if ENABLE(TOUCH_EVENTS)
#include "JSTouch.h"
#include "JSTouchEvent.h"
#include "JSTouchList.h"
#endif

#if ENABLE(USER_MESSAGE_HANDLERS)
#include "JSUserMessageHandler.h"
#include "JSUserMessageHandlersNamespace.h"
#include "JSWebKitNamespace.h"
#endif

#if ENABLE(VIDEO)
#include "JSAudioTrack.h"
#include "JSAudioTrackConfiguration.h"
#include "JSAudioTrackList.h"
#include "JSDataCue.h"
#include "JSHTMLAudioElement.h"
#include "JSHTMLMediaElement.h"
#include "JSHTMLTrackElement.h"
#include "JSMediaController.h"
#include "JSMediaError.h"
#include "JSTextTrack.h"
#include "JSTextTrackCue.h"
#include "JSTextTrackCueList.h"
#include "JSTextTrackList.h"
#include "JSTimeRanges.h"
#include "JSTrackEvent.h"
#include "JSVTTCue.h"
#include "JSVTTRegion.h"
#include "JSVideoColorSpace.h"
#include "JSVideoPlaybackQuality.h"
#include "JSVideoTrack.h"
#include "JSVideoTrackConfiguration.h"
#include "JSVideoTrackList.h"
#endif

#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
#include "JSMediaElementAudioSourceNode.h"
#endif

#if ENABLE(WEBGL)
#include "JSWebGL2RenderingContext.h"
#include "JSWebGLActiveInfo.h"
#include "JSWebGLBuffer.h"
#include "JSWebGLContextEvent.h"
#include "JSWebGLFramebuffer.h"
#include "JSWebGLProgram.h"
#include "JSWebGLQuery.h"
#include "JSWebGLRenderbuffer.h"
#include "JSWebGLRenderingContext.h"
#include "JSWebGLSampler.h"
#include "JSWebGLShader.h"
#include "JSWebGLShaderPrecisionFormat.h"
#include "JSWebGLSync.h"
#include "JSWebGLTexture.h"
#include "JSWebGLTransformFeedback.h"
#include "JSWebGLUniformLocation.h"
#include "JSWebGLVertexArrayObject.h"
#endif

#if ENABLE(WEBXR)
#include "JSWebXRBoundedReferenceSpace.h"
#include "JSWebXRFrame.h"
#include "JSWebXRInputSource.h"
#include "JSWebXRInputSourceArray.h"
#include "JSWebXRLayer.h"
#include "JSWebXRPose.h"
#include "JSWebXRReferenceSpace.h"
#include "JSWebXRRenderState.h"
#include "JSWebXRRigidTransform.h"
#include "JSWebXRSession.h"
#include "JSWebXRSpace.h"
#include "JSWebXRSystem.h"
#include "JSWebXRView.h"
#include "JSWebXRViewerPose.h"
#include "JSWebXRViewport.h"
#include "JSWebXRWebGLLayer.h"
#include "JSXRInputSourceEvent.h"
#include "JSXRInputSourcesChangeEvent.h"
#include "JSXRReferenceSpaceEvent.h"
#include "JSXRSessionEvent.h"
#endif

#if ENABLE(WEBXR_HANDS)
#include "JSWebXRHand.h"
#include "JSWebXRJointPose.h"
#include "JSWebXRJointSpace.h"
#endif

#if ENABLE(WEBXR_LAYERS)
#include "JSXRCompositionLayer.h"
#include "JSXRCubeLayer.h"
#include "JSXRCylinderLayer.h"
#include "JSXREquirectLayer.h"
#include "JSXRGPUBinding.h"
#include "JSXRGPUSubImage.h"
#include "JSXRLayerEvent.h"
#include "JSXRProjectionLayer.h"
#include "JSXRQuadLayer.h"
#include "JSXRSubImage.h"
#include "JSXRWebGLBinding.h"
#include "JSXRWebGLSubImage.h"
#endif

#if ENABLE(WEB_AUDIO)
#include "JSAnalyserNode.h"
#include "JSAudioBuffer.h"
#include "JSAudioBufferSourceNode.h"
#include "JSAudioContext.h"
#include "JSAudioDestinationNode.h"
#include "JSAudioListener.h"
#include "JSAudioNode.h"
#include "JSAudioParam.h"
#include "JSAudioParamMap.h"
#include "JSAudioProcessingEvent.h"
#include "JSAudioScheduledSourceNode.h"
#include "JSAudioWorklet.h"
#include "JSAudioWorkletNode.h"
#include "JSBaseAudioContext.h"
#include "JSBiquadFilterNode.h"
#include "JSChannelMergerNode.h"
#include "JSChannelSplitterNode.h"
#include "JSConstantSourceNode.h"
#include "JSConvolverNode.h"
#include "JSDelayNode.h"
#include "JSDynamicsCompressorNode.h"
#include "JSGainNode.h"
#include "JSIIRFilterNode.h"
#include "JSOfflineAudioCompletionEvent.h"
#include "JSOfflineAudioContext.h"
#include "JSOscillatorNode.h"
#include "JSPannerNode.h"
#include "JSPeriodicWave.h"
#include "JSScriptProcessorNode.h"
#include "JSStereoPannerNode.h"
#include "JSWaveShaperNode.h"
#endif

#if ENABLE(WEB_AUTHN)
#include "JSAuthenticatorAssertionResponse.h"
#include "JSAuthenticatorAttestationResponse.h"
#include "JSAuthenticatorResponse.h"
#include "JSBasicCredential.h"
#include "JSCredentialsContainer.h"
#include "JSDigitalCredential.h"
#include "JSPublicKeyCredential.h"
#endif

#if ENABLE(WEB_CODECS)
#include "JSWebCodecsAudioData.h"
#include "JSWebCodecsAudioDecoder.h"
#include "JSWebCodecsAudioEncoder.h"
#include "JSWebCodecsEncodedAudioChunk.h"
#include "JSWebCodecsEncodedVideoChunk.h"
#include "JSWebCodecsVideoDecoder.h"
#include "JSWebCodecsVideoEncoder.h"
#include "JSWebCodecsVideoFrame.h"
#endif

#if ENABLE(WEB_RTC)
#include "JSRTCCertificate.h"
#include "JSRTCDTMFSender.h"
#include "JSRTCDTMFToneChangeEvent.h"
#include "JSRTCDataChannel.h"
#include "JSRTCDataChannelEvent.h"
#include "JSRTCDtlsTransport.h"
#include "JSRTCEncodedAudioFrame.h"
#include "JSRTCEncodedVideoFrame.h"
#include "JSRTCError.h"
#include "JSRTCErrorEvent.h"
#include "JSRTCIceCandidate.h"
#include "JSRTCIceTransport.h"
#include "JSRTCPeerConnection.h"
#include "JSRTCPeerConnectionIceErrorEvent.h"
#include "JSRTCPeerConnectionIceEvent.h"
#include "JSRTCRtpReceiver.h"
#include "JSRTCRtpSFrameTransform.h"
#include "JSRTCRtpSFrameTransformErrorEvent.h"
#include "JSRTCRtpScriptTransform.h"
#include "JSRTCRtpSender.h"
#include "JSRTCRtpTransceiver.h"
#include "JSRTCSctpTransport.h"
#include "JSRTCSessionDescription.h"
#include "JSRTCStatsReport.h"
#include "JSRTCTrackEvent.h"
#endif

#if ENABLE(WIRELESS_PLAYBACK_TARGET)
#include "JSRemotePlayback.h"
#endif

#if ENABLE(WIRELESS_PLAYBACK_TARGET_AVAILABILITY_API)
#include "JSWebKitPlaybackTargetAvailabilityEvent.h"
#endif

#if ENABLE(XSLT)
#include "JSXSLTProcessor.h"
#endif

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_close);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_focus);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_blur);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_postMessage);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_stop);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_open);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_alert);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_confirm);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_prompt);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_print);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_captureEvents);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_releaseEvents);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_find);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitRequestAnimationFrame);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitCancelAnimationFrame);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitCancelRequestAnimationFrame);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_getMatchedCSSRules);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitConvertPointFromPageToNode);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitConvertPointFromNodeToPage);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_collectMatchingElementsInFlatTree);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_matchingElementInFlatTree);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_requestAnimationFrame);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_cancelAnimationFrame);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_getComputedStyle);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_matchMedia);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_moveTo);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_moveBy);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_resizeTo);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_resizeBy);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_scroll);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_scrollTo);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_scrollBy);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_requestIdleCallback);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_cancelIdleCallback);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_getSelection);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_reportError);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_atob);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_btoa);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_setTimeout);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_clearTimeout);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_setInterval);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_clearInterval);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_queueMicrotask);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_createImageBitmap);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_structuredClone);
static JSC_DECLARE_HOST_FUNCTION(jsDOMWindowInstanceFunction_fetch);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindowConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_closed);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_location);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_location);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_window);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_self);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_self);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_opener);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_opener);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_frames);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_frames);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_length);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_length);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_top);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_parent);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_parent);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_document);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_name);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_name);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_history);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_navigation);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_customElements);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_locationbar);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_locationbar);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_menubar);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_menubar);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_personalbar);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_personalbar);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_scrollbars);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_scrollbars);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_statusbar);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_statusbar);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_toolbar);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_toolbar);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_status);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_status);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_frameElement);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_navigator);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_clientInformation);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_clientInformation);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_event);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_event);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_offscreenBuffering);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_offscreenBuffering);
#if ENABLE(IOS_GESTURE_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ongesturechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ongesturechange);
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ongestureend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ongestureend);
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ongesturestart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ongesturestart);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_cookieStore);
#if ENABLE(DECLARATIVE_WEB_PUSH)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_pushManager);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_speechSynthesis);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_openDatabase);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_openDatabase);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onabort);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onabort);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onauxclick);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onauxclick);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onbeforeinput);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onbeforeinput);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onbeforematch);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onbeforematch);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onbeforetoggle);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onbeforetoggle);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onblur);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onblur);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncancel);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncancel);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncanplay);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncanplay);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncanplaythrough);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncanplaythrough);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onchange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onclick);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onclick);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onclose);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onclose);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncommand);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncommand);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncontentvisibilityautostatechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncontentvisibilityautostatechange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncontextmenu);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncontextmenu);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncopy);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncopy);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncuechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncuechange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oncut);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oncut);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondblclick);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondblclick);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondrag);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondrag);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondragend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondragend);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondragenter);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondragenter);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondragleave);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondragleave);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondragover);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondragover);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondragstart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondragstart);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondrop);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondrop);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondurationchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondurationchange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onemptied);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onemptied);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onended);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onended);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onerror);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onerror);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onfocus);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onfocus);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onformdata);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onformdata);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oninput);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oninput);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_oninvalid);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_oninvalid);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onkeydown);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onkeydown);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onkeypress);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onkeypress);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onkeyup);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onkeyup);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onload);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onload);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onloadeddata);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onloadeddata);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onloadedmetadata);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onloadedmetadata);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onloadstart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onloadstart);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmousedown);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmousedown);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmouseenter);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmouseenter);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmouseleave);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmouseleave);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmousemove);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmousemove);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmouseout);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmouseout);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmouseover);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmouseover);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmouseup);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmouseup);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpaste);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpaste);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpause);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpause);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onplay);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onplay);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onplaying);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onplaying);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onprogress);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onprogress);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onratechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onratechange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onreset);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onreset);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onresize);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onresize);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onscroll);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onscroll);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onscrollend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onscrollend);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onsecuritypolicyviolation);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onsecuritypolicyviolation);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onseeked);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onseeked);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onseeking);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onseeking);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onselect);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onselect);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onslotchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onslotchange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onstalled);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onstalled);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onsubmit);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onsubmit);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onsuspend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onsuspend);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontimeupdate);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontimeupdate);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontoggle);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontoggle);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onvolumechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onvolumechange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwaiting);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwaiting);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkitanimationend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkitanimationend);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkitanimationiteration);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkitanimationiteration);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkitanimationstart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkitanimationstart);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkittransitionend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkittransitionend);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwheel);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwheel);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmousewheel);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmousewheel);
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontouchcancel);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontouchcancel);
#endif
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontouchend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontouchend);
#endif
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontouchmove);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontouchmove);
#endif
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontouchstart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontouchstart);
#endif
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontouchforcechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontouchforcechange);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforcechanged);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforcechanged);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforcedown);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforcedown);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforcewillbegin);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforcewillbegin);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforceup);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforceup);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onanimationstart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onanimationstart);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onanimationiteration);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onanimationiteration);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onanimationend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onanimationend);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onanimationcancel);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onanimationcancel);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontransitionrun);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontransitionrun);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontransitionstart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontransitionstart);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontransitionend);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontransitionend);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ontransitioncancel);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ontransitioncancel);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ongotpointercapture);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ongotpointercapture);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onlostpointercapture);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onlostpointercapture);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointerdown);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointerdown);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointermove);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointermove);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointerup);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointerup);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointercancel);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointercancel);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointerover);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointerover);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointerout);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointerout);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointerenter);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointerenter);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpointerleave);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpointerleave);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onselectstart);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onselectstart);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onselectionchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onselectionchange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_screen);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_screen);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_innerWidth);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_innerWidth);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_innerHeight);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_innerHeight);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_scrollX);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_scrollX);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_pageXOffset);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_pageXOffset);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_scrollY);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_scrollY);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_pageYOffset);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_pageYOffset);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_screenX);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_screenX);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_screenLeft);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_screenLeft);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_screenY);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_screenY);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_screenTop);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_screenTop);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_outerWidth);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_outerWidth);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_outerHeight);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_outerHeight);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_devicePixelRatio);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_devicePixelRatio);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_styleMedia);
#if ENABLE(ORIENTATION_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_orientation);
#endif
#if ENABLE(ORIENTATION_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onorientationchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onorientationchange);
#endif
#if ENABLE(DEVICE_ORIENTATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondevicemotion);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondevicemotion);
#endif
#if ENABLE(DEVICE_ORIENTATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ondeviceorientation);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ondeviceorientation);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_visualViewport);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_visualViewport);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onafterprint);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onafterprint);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onbeforeprint);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onbeforeprint);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onbeforeunload);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onbeforeunload);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onhashchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onhashchange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onlanguagechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onlanguagechange);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmessage);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmessage);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onmessageerror);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onmessageerror);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onoffline);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onoffline);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ononline);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ononline);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpagehide);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpagehide);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpagereveal);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpagereveal);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpageshow);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpageshow);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpageswap);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpageswap);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onpopstate);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onpopstate);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onrejectionhandled);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onrejectionhandled);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onstorage);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onstorage);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onunhandledrejection);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onunhandledrejection);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_onunload);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_onunload);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ongamepadconnected);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ongamepadconnected);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ongamepaddisconnected);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_ongamepaddisconnected);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_localStorage);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_origin);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_origin);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_isSecureContext);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_crossOriginIsolated);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_caches);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_indexedDB);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_webkitIndexedDB);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_trustedTypes);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_crypto);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_performance);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMWindow_performance);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_sessionStorage);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BarcodeDetectorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FaceDetectorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextDetectorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUAdapterConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUAdapterInfoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUBindGroupConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUBindGroupLayoutConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUBufferConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUBufferUsageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUColorWriteConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUCommandBufferConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUCommandEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUCompilationInfoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUCompilationMessageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUComputePassEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUComputePipelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUDeviceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUDeviceLostInfoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUExternalTextureConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUInternalErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUMapModeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUOutOfMemoryErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUPipelineErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUPipelineLayoutConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUQuerySetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUQueueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPURenderBundleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPURenderBundleEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPURenderPassEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPURenderPipelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUSamplerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUShaderModuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUShaderStageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUSupportedFeaturesConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUSupportedLimitsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUTextureConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUTextureUsageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUTextureViewConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUUncapturedErrorEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUValidationErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WGSLLanguageFeaturesConstructor);
#if ENABLE(WIRELESS_PLAYBACK_TARGET_AVAILABILITY_API)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitPlaybackTargetAvailabilityEventConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ClipboardConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ClipboardItemConstructor);
#if ENABLE(DOM_AUDIO_SESSION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioSessionConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CacheConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CacheStorageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CompressionStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CompressionStreamEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DecompressionStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DecompressionStreamDecoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ContactsManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CookieChangeEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CookieStoreConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CookieStoreManagerConstructor);
#if ENABLE(WEB_AUTHN)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CredentialConstructor);
#endif
#if ENABLE(WEB_AUTHN)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CredentialsContainerConstructor);
#endif
#if ENABLE(ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaKeyMessageEventConstructor);
#endif
#if ENABLE(ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaKeySessionConstructor);
#endif
#if ENABLE(ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaKeyStatusMapConstructor);
#endif
#if ENABLE(ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaKeySystemAccessConstructor);
#endif
#if ENABLE(ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaKeysConstructor);
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeyMessageEventConstructor);
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeyNeededEventConstructor);
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeySessionConstructor);
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeysConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemDirectoryEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemDirectoryReaderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemFileEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HeadersConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ResponseConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemDirectoryHandleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemFileHandleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemHandleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileSystemWritableFileStreamConstructor);
#if ENABLE(GAMEPAD)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GamepadConstructor);
#endif
#if ENABLE(GAMEPAD)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GamepadButtonConstructor);
#endif
#if ENABLE(GAMEPAD)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GamepadEventConstructor);
#endif
#if ENABLE(GAMEPAD)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GamepadHapticActuatorConstructor);
#endif
#if ENABLE(GEOLOCATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GeolocationConstructor);
#endif
#if ENABLE(GEOLOCATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GeolocationCoordinatesConstructor);
#endif
#if ENABLE(GEOLOCATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GeolocationPositionConstructor);
#endif
#if ENABLE(GEOLOCATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GeolocationPositionErrorConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HighlightConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HighlightRegistryConstructor);
#if ENABLE(WEB_AUTHN)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DigitalCredentialConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBCursorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBCursorWithValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBDatabaseConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBFactoryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBIndexConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBKeyRangeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBObjectStoreConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBOpenDBRequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBRequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBTransactionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IDBVersionChangeEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaCapabilitiesConstructor);
#if ENABLE(MEDIA_RECORDER)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BlobEventConstructor);
#endif
#if ENABLE(MEDIA_RECORDER)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaRecorderConstructor);
#endif
#if ENABLE(MEDIA_RECORDER)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaRecorderErrorEventConstructor);
#endif
#if ENABLE(MEDIA_SESSION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaMetadataConstructor);
#endif
#if ENABLE(MEDIA_SESSION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaSessionConstructor);
#endif
#if ENABLE(MEDIA_SESSION_COORDINATOR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaSessionCoordinatorConstructor);
#endif
#if ENABLE(MEDIA_SOURCE)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BufferedChangeEventConstructor);
#endif
#if ENABLE(MEDIA_SOURCE)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ManagedMediaSourceConstructor);
#endif
#if ENABLE(MEDIA_SOURCE)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ManagedSourceBufferConstructor);
#endif
#if ENABLE(MEDIA_SOURCE)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaSourceConstructor);
#endif
#if ENABLE(MEDIA_SOURCE_IN_WORKERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaSourceHandleConstructor);
#endif
#if ENABLE(MEDIA_SOURCE)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SourceBufferConstructor);
#endif
#if ENABLE(MEDIA_SOURCE)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SourceBufferListConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoPlaybackQualityConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CanvasCaptureMediaStreamTrackConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ImageCaptureConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_InputDeviceInfoConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaDeviceInfoConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaDevicesConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaStreamConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaStreamTrackConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaStreamTrackEventConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OverconstrainedErrorConstructor);
#endif
#if ENABLE(MEDIA_STREAM)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OverconstrainedErrorEventConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCCertificateConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCDTMFSenderConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCDTMFToneChangeEventConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCDataChannelConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCDataChannelEventConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCDtlsTransportConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCEncodedAudioFrameConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCEncodedVideoFrameConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCErrorConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCErrorEventConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCIceCandidateConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCIceTransportConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCPeerConnectionConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCPeerConnectionIceErrorEventConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCPeerConnectionIceEventConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCRtpReceiverConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SFrameTransformConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SFrameTransformErrorEventConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCRtpScriptTransformConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCRtpSenderConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCRtpTransceiverConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCSctpTransportConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCSessionDescriptionConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCStatsReportConstructor);
#endif
#if ENABLE(WEB_RTC)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RTCTrackEventConstructor);
#endif
#if ENABLE(MODEL_ELEMENT)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLModelElementConstructor);
#endif
#if ENABLE(NOTIFICATIONS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NotificationConstructor);
#endif
#if ENABLE(PAYMENT_REQUEST)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MerchantValidationEventConstructor);
#endif
#if ENABLE(PAYMENT_REQUEST)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PaymentAddressConstructor);
#endif
#if ENABLE(PAYMENT_REQUEST)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PaymentMethodChangeEventConstructor);
#endif
#if ENABLE(PAYMENT_REQUEST)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PaymentRequestConstructor);
#endif
#if ENABLE(PAYMENT_REQUEST)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PaymentRequestUpdateEventConstructor);
#endif
#if ENABLE(PAYMENT_REQUEST)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PaymentResponseConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PermissionStatusConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PermissionsConstructor);
#if ENABLE(PICTURE_IN_PICTURE_API)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PictureInPictureEventConstructor);
#endif
#if ENABLE(PICTURE_IN_PICTURE_API)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PictureInPictureWindowConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PushManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PushSubscriptionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PushSubscriptionOptionsConstructor);
#if ENABLE(WIRELESS_PLAYBACK_TARGET)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RemotePlaybackConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DeprecationReportBodyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReportConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReportBodyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReportingObserverConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WakeLockConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WakeLockSentinelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_webkitSpeechRecognitionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionAlternativeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionErrorEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionResultConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionResultListConstructor);
#if ENABLE(SPEECH_SYNTHESIS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisConstructor);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisErrorEventConstructor);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisEventConstructor);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisUtteranceConstructor);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisVoiceConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StorageManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ByteLengthQueuingStrategyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CountQueuingStrategyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReadableByteStreamControllerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamBYOBReaderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamBYOBRequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamDefaultControllerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamDefaultReaderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TransformStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TransformStreamDefaultControllerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WritableStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WritableStreamDefaultControllerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WritableStreamDefaultWriterConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_URLPatternConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_LockConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_LockManagerConstructor);
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AnalyserNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioBufferConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioBufferSourceNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioContextConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioDestinationNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioListenerConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioParamConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioParamMapConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioProcessingEventConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioScheduledSourceNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioWorkletConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioWorkletNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BaseAudioContextConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BiquadFilterNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ChannelMergerNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ChannelSplitterNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ConstantSourceNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ConvolverNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DelayNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DynamicsCompressorNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GainNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IIRFilterNodeConstructor);
#endif
#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaElementAudioSourceNodeConstructor);
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaStreamAudioDestinationNodeConstructor);
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaStreamAudioSourceNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OfflineAudioCompletionEventConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OfflineAudioContextConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OscillatorNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PannerNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PeriodicWaveConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ScriptProcessorNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StereoPannerNodeConstructor);
#endif
#if ENABLE(WEB_AUDIO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WaveShaperNodeConstructor);
#endif
#if ENABLE(WEB_AUTHN)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AuthenticatorAssertionResponseConstructor);
#endif
#if ENABLE(WEB_AUTHN)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AuthenticatorAttestationResponseConstructor);
#endif
#if ENABLE(WEB_AUTHN)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AuthenticatorResponseConstructor);
#endif
#if ENABLE(WEB_AUTHN)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PublicKeyCredentialConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoColorSpaceConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioDataConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioDecoderConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioEncoderConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_EncodedAudioChunkConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_EncodedVideoChunkConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoDecoderConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoEncoderConstructor);
#endif
#if ENABLE(WEB_CODECS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoFrameConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DatabaseConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SQLErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SQLResultSetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SQLResultSetRowListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SQLTransactionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CloseEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebSocketConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebTransportConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebTransportBidirectionalStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebTransportDatagramDuplexStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebTransportErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebTransportReceiveStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebTransportSendStreamConstructor);
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRBoundedReferenceSpaceConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRFrameConstructor);
#endif
#if ENABLE(WEBXR_HANDS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRHandConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRInputSourceConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRInputSourceArrayConstructor);
#endif
#if ENABLE(WEBXR_HANDS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRJointPoseConstructor);
#endif
#if ENABLE(WEBXR_HANDS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRJointSpaceConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRLayerConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRPoseConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRReferenceSpaceConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRRenderStateConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRRigidTransformConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRSessionConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRSpaceConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRSystemConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRViewConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRViewerPoseConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRViewportConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRWebGLLayerConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRCompositionLayerConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRCubeLayerConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRCylinderLayerConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XREquirectLayerConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRGPUBindingConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRGPUSubImageConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRInputSourceEventConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRInputSourcesChangeEventConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRLayerEventConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRProjectionLayerConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRQuadLayerConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRReferenceSpaceEventConstructor);
#endif
#if ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRSessionEventConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRSubImageConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRWebGLBindingConstructor);
#endif
#if ENABLE(WEBXR_LAYERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XRWebGLSubImageConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AnimationEffectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AnimationPlaybackEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AnimationTimelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSAnimationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AnimationEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSTransitionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TransitionEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CustomEffectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DocumentTimelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_KeyframeEffectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ScrollTimelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ViewTimelineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AnimationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CryptoKeyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SubtleCryptoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSConditionRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSContainerRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSCounterStyleRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSFontFaceDescriptorsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSFontFaceRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSFontFeatureValuesRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSFontPaletteValuesRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSGroupingRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSImportRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSKeyframeRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSKeyframesRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSLayerBlockRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSLayerStatementRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMediaRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSNamespaceRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSNestedDeclarationsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSPageDescriptorsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSPageRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSPositionTryDescriptorsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSPositionTryRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSPropertyRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSRuleListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSScopeRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSStartingStyleRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSStyleDeclarationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSStylePropertiesConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSStyleRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSStyleSheetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSSupportsRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSViewTransitionRuleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMMatrixConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitCSSMatrixConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMMatrixReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CounterConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSPrimitiveValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RGBColorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSValueListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FontFaceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FontFaceSetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaQueryListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaQueryListEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StyleSheetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StyleSheetListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSKeywordValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSNumericValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSVariableReferenceValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSImageValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSStyleValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSUnitValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSUnparsedValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StylePropertyMapConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StylePropertyMapReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSHSLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSHWBConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSLCHConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSLabConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSOKLCHConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSOKLabConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSColorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSColorValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSRGBConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathClampConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathInvertConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathMaxConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathMinConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathNegateConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathProductConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathSumConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMathValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSNumericArrayConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSMatrixComponentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSPerspectiveConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSRotateConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSScaleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSSkewConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSSkewXConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSSkewYConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSTransformComponentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSTransformValueConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSSTranslateConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AbortControllerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AbortSignalConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AbstractRangeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AttrConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BeforeUnloadEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BroadcastChannelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CDATASectionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CaretPositionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CharacterDataConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ClipboardEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CommandEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CommentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CompositionEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ContentVisibilityAutoStateChangeEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CustomElementRegistryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CustomEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CustomStateSetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMExceptionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMImplementationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMPointConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMPointReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMQuadConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMRectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMRectListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMRectReadOnlyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMStringListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMStringMapConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DataTransferConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DataTransferItemConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DataTransferItemListConstructor);
#if ENABLE(DEVICE_ORIENTATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DeviceMotionEventConstructor);
#endif
#if ENABLE(DEVICE_ORIENTATION)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DeviceOrientationEventConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DocumentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DocumentFragmentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DocumentTypeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DragEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ElementInternalsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ErrorEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_EventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_EventTargetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FocusEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FormDataEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HashChangeEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IdleDeadlineConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_InputEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_KeyboardEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MessageChannelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MessageEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MessagePortConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MouseEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MutationEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MutationObserverConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitMutationObserverConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MutationRecordConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NamedNodeMapConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NodeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NodeFilterConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NodeIteratorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NodeListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ObservableConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OverflowEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PageRevealEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PageSwapEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PageTransitionEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PointerEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PopStateEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ProcessingInstructionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ProgressEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PromiseRejectionEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RangeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SecurityPolicyViolationEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ShadowRootConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StaticRangeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SubscriberConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextDecoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextDecoderStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextDecoderStreamDecoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextEncoderStreamConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextEncoderStreamEncoderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ToggleEventConstructor);
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TouchConstructor);
#endif
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TouchEventConstructor);
#endif
#if ENABLE(TOUCH_EVENTS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TouchListConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TreeWalkerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TrustedHTMLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TrustedScriptConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TrustedScriptURLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TrustedTypePolicyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TrustedTypePolicyFactoryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_UIEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ViewTransitionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ViewTransitionTypeSetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WheelEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XMLDocumentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BlobConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FileReaderConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FormDataConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMTokenListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_URLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_webkitURLConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLAllCollectionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLAnchorElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLAreaElementConstructor);
#if ENABLE(ATTACHMENT_ELEMENT)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLAttachmentElementConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLAudioElementConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLBRElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLBaseElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLBodyElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLButtonElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLCanvasElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLCollectionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDListElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDataElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDataListElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDetailsElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDialogElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDirectoryElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDivElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLDocumentConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLEmbedElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLFieldSetElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLFontElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLFormControlsCollectionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLFormElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLFrameElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLFrameSetElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLHRElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLHeadElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLHeadingElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLHtmlElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLIFrameElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLImageElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ImageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLInputElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLLIElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLLabelElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLLegendElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLLinkElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLMapElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLMarqueeElementConstructor);
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLMediaElementConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLMenuElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLMetaElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLMeterElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLModElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLOListElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLObjectElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLOptGroupElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLOptionElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OptionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLOptionsCollectionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLOutputElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLParagraphElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLParamElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLPictureElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLPreElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLProgressElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLQuoteElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLScriptElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLSelectElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLSlotElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLSourceElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLSpanElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLStyleElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTableCaptionElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTableCellElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTableColElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTableElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTableRowElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTableSectionElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTemplateElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTextAreaElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTimeElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTitleElementConstructor);
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLTrackElementConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLUListElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLUnknownElementConstructor);
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HTMLVideoElementConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ImageBitmapConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ImageDataConstructor);
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaControllerConstructor);
#endif
#if ENABLE(ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaEncryptedEventConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MediaErrorConstructor);
#endif
#if ENABLE(OFFSCREEN_CANVAS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OffscreenCanvasConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_RadioNodeListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SubmitEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextMetricsConstructor);
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TimeRangesConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_URLSearchParamsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_UserActivationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ValidityStateConstructor);
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeyErrorConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CanvasGradientConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CanvasPatternConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CanvasRenderingContext2DConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_GPUCanvasContextConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ImageBitmapRenderingContextConstructor);
#if ENABLE(OFFSCREEN_CANVAS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_OffscreenCanvasRenderingContext2DConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_Path2DConstructor);
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGL2RenderingContextConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLActiveInfoConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLBufferConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLContextEventConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLFramebufferConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLProgramConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLQueryConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLRenderbufferConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLRenderingContextConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLSamplerConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLShaderConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLShaderPrecisionFormatConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLSyncConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLTextureConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLTransformFeedbackConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLUniformLocationConstructor);
#endif
#if ENABLE(WEBGL)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebGLVertexArrayObjectConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CloseWatcherConstructor);
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioTrackConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioTrackConfigurationConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_AudioTrackListConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DataCueConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextTrackConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextTrackCueConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextTrackCueListConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TextTrackListConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_TrackEventConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VTTCueConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VTTRegionConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoTrackConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoTrackConfigurationConstructor);
#endif
#if ENABLE(VIDEO)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VideoTrackListConstructor);
#endif
#if ENABLE(MATHML)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MathMLElementConstructor);
#endif
#if ENABLE(MATHML)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MathMLMathElementConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BarPropConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CryptoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SelectionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WindowConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_EventCountsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_EventSourceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_FragmentDirectiveConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_HistoryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IntersectionObserverConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_IntersectionObserverEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_LocationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigateEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigationActivationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigationCurrentEntryChangeEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigationDestinationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigationHistoryEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigationTransitionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigatorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigatorUADataConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceEventTimingConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceMarkConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceMeasureConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceNavigationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceNavigationTimingConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceObserverConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceObserverEntryListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformancePaintTimingConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceResourceTimingConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceServerTimingConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PerformanceTimingConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ResizeObserverConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ResizeObserverEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ResizeObserverSizeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ScreenConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ScreenOrientationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_UndoItemConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_UndoManagerConstructor);
#if ENABLE(USER_MESSAGE_HANDLERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_UserMessageHandlerConstructor);
#endif
#if ENABLE(USER_MESSAGE_HANDLERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_UserMessageHandlersNamespaceConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_VisualViewportConstructor);
#if ENABLE(USER_MESSAGE_HANDLERS)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitNamespaceConstructor);
#endif
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitNodeInfoConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitPointConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WebKitSerializedNodeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_CSPViolationReportBodyConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MimeTypeConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_MimeTypeArrayConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PluginConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_PluginArrayConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StorageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_StorageEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAngleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimateElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimateMotionElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimateTransformElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedAngleConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedBooleanConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedEnumerationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedIntegerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedLengthConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedLengthListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedNumberConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedNumberListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedPreserveAspectRatioConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedRectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedStringConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedTransformListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGAnimationElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGCircleElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGClipPathElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGComponentTransferFunctionElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGDefsElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGDescElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGEllipseElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEBlendElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEColorMatrixElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEComponentTransferElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFECompositeElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEConvolveMatrixElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEDiffuseLightingElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEDisplacementMapElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEDistantLightElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEDropShadowElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEFloodElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncAElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncBElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncGElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncRElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEGaussianBlurElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEImageElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEMergeElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEMergeNodeElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEMorphologyElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEOffsetElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFEPointLightElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFESpecularLightingElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFESpotLightElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFETileElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFETurbulenceElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGFilterElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGForeignObjectElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGGElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGGeometryElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGGradientElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGGraphicsElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGImageElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGLengthConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGLengthListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGLineElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGLinearGradientElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGMPathElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGMarkerElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGMaskElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGMatrixConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGMetadataElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGNumberConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGNumberListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegArcAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegArcRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegClosePathConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicSmoothAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicSmoothRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoHorizontalAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoHorizontalRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoVerticalAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoVerticalRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegMovetoAbsConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegMovetoRelConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPatternElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPointConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPointListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPolygonElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPolylineElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGPreserveAspectRatioConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGRadialGradientElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGRectConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGRectElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGSVGElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGScriptElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGSetElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGStopElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGStringListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGStyleElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGSwitchElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGSymbolElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTSpanElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTextContentElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTextElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTextPathElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTextPositioningElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTitleElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTransformConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGTransformListConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGUnitTypesConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGUseElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGViewElementConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SVGViewSpecConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WorkerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_NavigationPreloadManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ServiceWorkerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ServiceWorkerContainerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_ServiceWorkerRegistrationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchManagerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchRecordConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchRegistrationConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchUpdateUIEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_SharedWorkerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_WorkletConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_DOMParserConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestEventTargetConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestProgressEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestUploadConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XMLSerializerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XPathEvaluatorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XPathExpressionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XPathResultConstructor);
#if ENABLE(XSLT)
static JSC_DECLARE_CUSTOM_GETTER(jsDOMWindow_XSLTProcessorConstructor);
#endif

using JSDOMWindowDOMConstructor = JSDOMConstructorNotConstructable<JSDOMWindow>;

/* Hash table */

static const struct CompactHashIndex JSDOMWindowTableIndex[2147] = {
    { 672, -1 },
    { 449, -1 },
    { 269, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 497, -1 },
    { -1, -1 },
    { -1, -1 },
    { 683, -1 },
    { -1, -1 },
    { -1, -1 },
    { 492, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 312, -1 },
    { 203, -1 },
    { -1, -1 },
    { 348, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 116, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 519, -1 },
    { -1, -1 },
    { 680, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 193, -1 },
    { 107, 2061 },
    { -1, -1 },
    { 679, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 20, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 123, -1 },
    { 586, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 506, -1 },
    { -1, -1 },
    { 327, -1 },
    { 434, -1 },
    { -1, -1 },
    { 279, -1 },
    { 332, 2116 },
    { 499, -1 },
    { -1, -1 },
    { 351, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 358, 2101 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 45, -1 },
    { -1, -1 },
    { -1, -1 },
    { 642, -1 },
    { -1, -1 },
    { -1, -1 },
    { 511, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 181, -1 },
    { -1, -1 },
    { -1, -1 },
    { 535, -1 },
    { -1, -1 },
    { -1, -1 },
    { 271, -1 },
    { -1, -1 },
    { -1, -1 },
    { 545, -1 },
    { 302, -1 },
    { 398, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 22, 2055 },
    { 591, -1 },
    { -1, -1 },
    { 687, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 149, -1 },
    { 43, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 294, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 554, -1 },
    { 52, 2060 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 648, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 71, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 62, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 237, -1 },
    { -1, -1 },
    { -1, -1 },
    { 264, -1 },
    { -1, -1 },
    { -1, -1 },
    { 467, -1 },
    { -1, -1 },
    { 46, -1 },
    { -1, -1 },
    { 484, -1 },
    { -1, -1 },
    { 146, -1 },
    { -1, -1 },
    { -1, -1 },
    { 630, -1 },
    { 202, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 477, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 478, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 30, 2053 },
    { -1, -1 },
    { -1, -1 },
    { 262, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 182, -1 },
    { 11, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 634, -1 },
    { -1, -1 },
    { -1, -1 },
    { 7, 2130 },
    { -1, -1 },
    { 604, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 583, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 8, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 339, -1 },
    { 371, -1 },
    { -1, -1 },
    { -1, -1 },
    { 352, 2096 },
    { -1, -1 },
    { 664, -1 },
    { 435, -1 },
    { -1, -1 },
    { -1, -1 },
    { 510, -1 },
    { 109, -1 },
    { 411, -1 },
    { 155, 2058 },
    { 226, -1 },
    { 249, -1 },
    { -1, -1 },
    { 61, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 184, 2062 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 291, -1 },
    { -1, -1 },
    { -1, -1 },
    { 437, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 73, -1 },
    { -1, -1 },
    { 416, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 133, -1 },
    { 406, -1 },
    { -1, -1 },
    { -1, -1 },
    { 135, -1 },
    { -1, -1 },
    { 33, -1 },
    { -1, -1 },
    { -1, -1 },
    { 64, 2051 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 431, -1 },
    { -1, -1 },
    { -1, -1 },
    { 286, 2104 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 465, -1 },
    { -1, -1 },
    { 320, -1 },
    { 272, 2111 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 215, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 373, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 35, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 582, -1 },
    { -1, -1 },
    { 379, 2093 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 337, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 39, -1 },
    { 421, 2144 },
    { -1, -1 },
    { 368, -1 },
    { 185, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 95, -1 },
    { -1, -1 },
    { 335, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 259, -1 },
    { -1, -1 },
    { -1, -1 },
    { 349, -1 },
    { 244, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 224, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 74, -1 },
    { -1, -1 },
    { -1, -1 },
    { 685, -1 },
    { 120, 2109 },
    { 372, -1 },
    { -1, -1 },
    { 375, -1 },
    { 129, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 228, -1 },
    { -1, -1 },
    { 636, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 654, -1 },
    { -1, -1 },
    { -1, -1 },
    { 281, 2115 },
    { -1, -1 },
    { 299, -1 },
    { -1, -1 },
    { -1, -1 },
    { 509, -1 },
    { -1, -1 },
    { 329, 2118 },
    { -1, -1 },
    { 268, -1 },
    { -1, -1 },
    { -1, -1 },
    { 653, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 24, -1 },
    { 326, -1 },
    { -1, -1 },
    { 444, 2127 },
    { -1, -1 },
    { 285, -1 },
    { 81, 2077 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 208, -1 },
    { -1, -1 },
    { -1, -1 },
    { 113, -1 },
    { -1, -1 },
    { 261, 2075 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 514, -1 },
    { 423, -1 },
    { -1, -1 },
    { -1, -1 },
    { 51, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 390, -1 },
    { 380, -1 },
    { -1, -1 },
    { 363, -1 },
    { 626, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 663, -1 },
    { 468, -1 },
    { -1, -1 },
    { -1, -1 },
    { 91, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 377, -1 },
    { 614, -1 },
    { 266, 2089 },
    { -1, -1 },
    { -1, -1 },
    { 118, -1 },
    { 610, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 256, -1 },
    { 26, -1 },
    { -1, -1 },
    { 597, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 412, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 321, -1 },
    { -1, -1 },
    { -1, -1 },
    { 80, -1 },
    { -1, -1 },
    { -1, -1 },
    { 112, -1 },
    { 96, -1 },
    { -1, -1 },
    { -1, -1 },
    { 417, -1 },
    { 289, -1 },
    { 601, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 93, -1 },
    { 599, -1 },
    { -1, -1 },
    { 138, -1 },
    { -1, -1 },
    { 78, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 54, -1 },
    { 119, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 493, -1 },
    { 404, -1 },
    { 293, -1 },
    { 31, -1 },
    { -1, -1 },
    { -1, -1 },
    { 23, -1 },
    { -1, -1 },
    { -1, -1 },
    { 252, 2108 },
    { -1, -1 },
    { 127, -1 },
    { -1, -1 },
    { 171, 2072 },
    { -1, -1 },
    { -1, -1 },
    { 236, 2079 },
    { -1, -1 },
    { -1, -1 },
    { 150, -1 },
    { 154, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 621, -1 },
    { 42, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 661, -1 },
    { -1, -1 },
    { 589, -1 },
    { -1, -1 },
    { 592, -1 },
    { -1, -1 },
    { -1, -1 },
    { 153, -1 },
    { 265, -1 },
    { -1, -1 },
    { 481, -1 },
    { -1, -1 },
    { 365, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 216, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 547, -1 },
    { -1, -1 },
    { -1, -1 },
    { 637, -1 },
    { -1, -1 },
    { -1, -1 },
    { 143, -1 },
    { 342, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 564, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 555, -1 },
    { 158, 2076 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 392, -1 },
    { -1, -1 },
    { -1, -1 },
    { 106, -1 },
    { -1, -1 },
    { 86, -1 },
    { 247, 2095 },
    { -1, -1 },
    { -1, -1 },
    { 336, -1 },
    { -1, -1 },
    { -1, -1 },
    { 209, -1 },
    { -1, -1 },
    { -1, -1 },
    { 420, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 507, -1 },
    { -1, -1 },
    { -1, -1 },
    { 12, 2064 },
    { -1, -1 },
    { 25, 2048 },
    { 503, -1 },
    { -1, -1 },
    { -1, -1 },
    { 544, -1 },
    { -1, -1 },
    { -1, -1 },
    { 475, -1 },
    { 455, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 456, -1 },
    { 425, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 538, -1 },
    { -1, -1 },
    { -1, -1 },
    { 539, -1 },
    { -1, -1 },
    { -1, -1 },
    { 53, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 309, -1 },
    { -1, -1 },
    { -1, -1 },
    { 667, -1 },
    { 433, -1 },
    { 306, -1 },
    { -1, -1 },
    { -1, -1 },
    { 187, -1 },
    { 301, -1 },
    { 15, -1 },
    { -1, -1 },
    { -1, -1 },
    { 432, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 177, -1 },
    { -1, -1 },
    { -1, -1 },
    { 37, -1 },
    { -1, -1 },
    { 347, 2117 },
    { 19, 2122 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 205, -1 },
    { 77, 2080 },
    { 108, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 454, -1 },
    { 639, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 397, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 69, 2054 },
    { 238, -1 },
    { -1, -1 },
    { -1, -1 },
    { 688, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 441, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 115, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 557, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 196, -1 },
    { 405, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 66, -1 },
    { -1, -1 },
    { 570, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 325, -1 },
    { 579, -1 },
    { 130, 2099 },
    { 147, -1 },
    { -1, -1 },
    { 100, -1 },
    { -1, -1 },
    { 136, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 627, -1 },
    { 2, -1 },
    { 376, -1 },
    { 300, -1 },
    { 76, -1 },
    { 322, -1 },
    { -1, -1 },
    { 137, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 524, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 44, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 40, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 424, -1 },
    { 534, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 361, -1 },
    { -1, -1 },
    { 308, -1 },
    { -1, -1 },
    { -1, -1 },
    { 257, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 656, -1 },
    { -1, -1 },
    { 689, -1 },
    { -1, -1 },
    { 103, 2067 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 665, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 253, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 613, -1 },
    { 523, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 198, 2068 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 275, -1 },
    { 399, -1 },
    { 502, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 553, 2132 },
    { -1, -1 },
    { 176, -1 },
    { -1, -1 },
    { -1, -1 },
    { 676, -1 },
    { 532, -1 },
    { -1, -1 },
    { -1, -1 },
    { 318, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 38, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 587, -1 },
    { -1, -1 },
    { 122, -1 },
    { 311, 2090 },
    { -1, -1 },
    { -1, -1 },
    { 628, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 5, -1 },
    { -1, -1 },
    { -1, -1 },
    { 381, 2145 },
    { 489, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 194, -1 },
    { 157, 2107 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 173, -1 },
    { -1, -1 },
    { 87, 2128 },
    { 14, -1 },
    { 56, 2098 },
    { 92, -1 },
    { 522, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 131, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 6, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 248, 2134 },
    { 574, -1 },
    { 310, -1 },
    { 191, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 199, 2085 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 414, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 338, -1 },
    { -1, -1 },
    { 104, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 270, -1 },
    { 9, 2074 },
    { -1, -1 },
    { 32, 2049 },
    { 430, -1 },
    { 662, -1 },
    { 98, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 354, 2138 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 200, -1 },
    { -1, -1 },
    { 415, -1 },
    { -1, -1 },
    { 647, -1 },
    { 384, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 17, -1 },
    { -1, -1 },
    { -1, -1 },
    { 436, -1 },
    { -1, -1 },
    { -1, -1 },
    { 50, -1 },
    { 370, -1 },
    { 516, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 192, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 60, 2143 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 166, 2071 },
    { 673, -1 },
    { -1, -1 },
    { 217, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 633, -1 },
    { 67, 2056 },
    { 448, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 105, -1 },
    { 10, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 360, -1 },
    { 409, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 324, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 428, -1 },
    { -1, -1 },
    { -1, -1 },
    { 277, -1 },
    { -1, -1 },
    { 686, -1 },
    { 170, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 99, -1 },
    { 462, -1 },
    { -1, -1 },
    { -1, -1 },
    { 494, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 438, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 190, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 235, -1 },
    { 72, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 141, -1 },
    { 643, -1 },
    { 260, 2069 },
    { -1, -1 },
    { 48, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 142, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 213, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 27, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 512, -1 },
    { -1, -1 },
    { 464, -1 },
    { 684, -1 },
    { -1, -1 },
    { -1, -1 },
    { 111, -1 },
    { -1, -1 },
    { 382, -1 },
    { -1, -1 },
    { -1, -1 },
    { 163, -1 },
    { -1, -1 },
    { -1, -1 },
    { 132, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 515, -1 },
    { 566, -1 },
    { -1, -1 },
    { 47, 2092 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 669, -1 },
    { 345, -1 },
    { 206, -1 },
    { -1, -1 },
    { -1, -1 },
    { 331, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 180, -1 },
    { 641, -1 },
    { -1, -1 },
    { 419, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 3, 2070 },
    { -1, -1 },
    { -1, -1 },
    { 344, 2097 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 334, 2126 },
    { 427, -1 },
    { -1, -1 },
    { 460, -1 },
    { -1, -1 },
    { -1, -1 },
    { 528, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 233, -1 },
    { -1, -1 },
    { 607, -1 },
    { -1, -1 },
    { 498, -1 },
    { -1, -1 },
    { 609, -1 },
    { -1, -1 },
    { 480, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 606, 2142 },
    { -1, -1 },
    { -1, -1 },
    { 102, -1 },
    { -1, -1 },
    { 452, 2129 },
    { -1, -1 },
    { -1, -1 },
    { 156, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 526, -1 },
    { 307, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 189, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 541, -1 },
    { -1, -1 },
    { 461, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 152, -1 },
    { 556, -1 },
    { -1, -1 },
    { 161, -1 },
    { -1, -1 },
    { -1, -1 },
    { 214, -1 },
    { 418, -1 },
    { -1, -1 },
    { -1, -1 },
    { 243, -1 },
    { -1, -1 },
    { 297, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 383, -1 },
    { -1, -1 },
    { 219, -1 },
    { 366, -1 },
    { -1, -1 },
    { -1, -1 },
    { 551, -1 },
    { -1, -1 },
    { 240, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 394, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 446, -1 },
    { -1, -1 },
    { 490, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 395, 2094 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 353, -1 },
    { 125, -1 },
    { 440, 2119 },
    { -1, -1 },
    { -1, -1 },
    { 263, -1 },
    { -1, -1 },
    { 242, -1 },
    { -1, -1 },
    { -1, -1 },
    { 225, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 227, 2136 },
    { -1, -1 },
    { -1, -1 },
    { 117, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 220, -1 },
    { -1, -1 },
    { 649, -1 },
    { 508, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 212, 2088 },
    { -1, -1 },
    { 79, -1 },
    { -1, -1 },
    { 463, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 577, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 278, 2078 },
    { 581, -1 },
    { 501, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 75, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 162, -1 },
    { 426, -1 },
    { -1, -1 },
    { -1, -1 },
    { 453, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 13, -1 },
    { 210, -1 },
    { -1, -1 },
    { -1, -1 },
    { 576, -1 },
    { -1, -1 },
    { -1, -1 },
    { 443, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 362, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 374, -1 },
    { 204, -1 },
    { 486, -1 },
    { -1, -1 },
    { 612, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 276, -1 },
    { -1, -1 },
    { -1, -1 },
    { 350, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 565, -1 },
    { 677, -1 },
    { -1, -1 },
    { -1, -1 },
    { 548, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 403, -1 },
    { -1, -1 },
    { 274, 2081 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 533, -1 },
    { 520, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 179, -1 },
    { 221, -1 },
    { 387, -1 },
    { 675, -1 },
    { 567, -1 },
    { 1, -1 },
    { -1, -1 },
    { 90, -1 },
    { 16, 2050 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 385, 2114 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 305, -1 },
    { 561, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 396, -1 },
    { -1, -1 },
    { -1, -1 },
    { 4, 2065 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 58, -1 },
    { -1, -1 },
    { 429, -1 },
    { -1, -1 },
    { 615, -1 },
    { -1, -1 },
    { 400, -1 },
    { -1, -1 },
    { -1, -1 },
    { 229, 2063 },
    { -1, -1 },
    { 36, -1 },
    { 55, -1 },
    { 618, -1 },
    { -1, -1 },
    { 298, -1 },
    { -1, -1 },
    { 513, -1 },
    { 550, 2140 },
    { 525, -1 },
    { 0, -1 },
    { -1, -1 },
    { -1, -1 },
    { 251, -1 },
    { 640, -1 },
    { 231, -1 },
    { -1, -1 },
    { 21, -1 },
    { 505, -1 },
    { 369, -1 },
    { 164, -1 },
    { 595, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 645, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 655, -1 },
    { -1, -1 },
    { -1, -1 },
    { 70, -1 },
    { -1, -1 },
    { 101, -1 },
    { 304, 2103 },
    { -1, -1 },
    { 571, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 585, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 83, -1 },
    { 517, -1 },
    { -1, -1 },
    { -1, -1 },
    { 483, -1 },
    { 183, 2139 },
    { -1, -1 },
    { 128, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 290, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 250, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 518, -1 },
    { -1, -1 },
    { 28, -1 },
    { -1, -1 },
    { 355, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 165, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 593, -1 },
    { -1, -1 },
    { 287, 2100 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 343, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 401, -1 },
    { -1, -1 },
    { -1, -1 },
    { 160, -1 },
    { 536, 2137 },
    { 605, -1 },
    { -1, -1 },
    { 68, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 670, -1 },
    { 151, -1 },
    { -1, -1 },
    { -1, -1 },
    { 34, 2087 },
    { -1, -1 },
    { 487, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 283, 2123 },
    { -1, -1 },
    { 531, -1 },
    { -1, -1 },
    { -1, -1 },
    { 542, -1 },
    { 295, -1 },
    { 393, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 258, -1 },
    { -1, -1 },
    { 616, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 145, -1 },
    { 540, -1 },
    { 172, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 678, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 466, -1 },
    { 568, -1 },
    { -1, -1 },
    { 341, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 573, -1 },
    { -1, -1 },
    { -1, -1 },
    { 450, 2105 },
    { -1, -1 },
    { -1, -1 },
    { 88, -1 },
    { -1, -1 },
    { -1, -1 },
    { 207, -1 },
    { -1, -1 },
    { -1, -1 },
    { 273, -1 },
    { -1, -1 },
    { -1, -1 },
    { 89, 2052 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 234, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 671, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 239, 2082 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 389, -1 },
    { -1, -1 },
    { 218, -1 },
    { 631, -1 },
    { 625, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 422, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 288, 2113 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 657, -1 },
    { 560, -1 },
    { -1, -1 },
    { 650, -1 },
    { 59, 2102 },
    { 63, -1 },
    { -1, -1 },
    { -1, -1 },
    { 18, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 85, -1 },
    { -1, -1 },
    { -1, -1 },
    { 476, -1 },
    { -1, -1 },
    { -1, -1 },
    { 174, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 472, 2125 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 319, 2091 },
    { -1, -1 },
    { 619, -1 },
    { -1, -1 },
    { -1, -1 },
    { 620, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 447, -1 },
    { -1, -1 },
    { 623, -1 },
    { -1, -1 },
    { -1, -1 },
    { 168, -1 },
    { -1, -1 },
    { 496, -1 },
    { 230, 2146 },
    { -1, -1 },
    { 482, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 378, -1 },
    { 317, 2110 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 169, -1 },
    { 29, -1 },
    { 144, 2083 },
    { -1, -1 },
    { 114, -1 },
    { 313, 2141 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 594, -1 },
    { -1, -1 },
    { 41, -1 },
    { 97, -1 },
    { 280, -1 },
    { 134, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 126, 2059 },
    { -1, -1 },
    { -1, -1 },
    { 121, 2124 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 175, -1 },
    { 167, -1 },
    { -1, -1 },
    { 474, -1 },
    { -1, -1 },
    { -1, -1 },
    { 451, -1 },
    { 549, -1 },
    { 201, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 211, -1 },
    { -1, -1 },
    { 598, -1 },
    { 94, -1 },
    { -1, -1 },
    { -1, -1 },
    { 580, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 223, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 315, 2073 },
    { 651, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 232, -1 },
    { -1, -1 },
    { 65, 2112 },
    { -1, -1 },
    { 57, -1 },
    { -1, -1 },
    { 459, -1 },
    { 578, -1 },
    { 646, -1 },
    { 186, 2121 },
    { -1, -1 },
    { 485, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 652, -1 },
    { 558, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 255, -1 },
    { 49, -1 },
    { 82, -1 },
    { 84, -1 },
    { 110, -1 },
    { 124, -1 },
    { 139, 2057 },
    { 140, -1 },
    { 148, -1 },
    { 159, -1 },
    { 178, -1 },
    { 188, -1 },
    { 195, 2106 },
    { 197, -1 },
    { 222, 2086 },
    { 241, -1 },
    { 245, -1 },
    { 246, 2066 },
    { 254, -1 },
    { 267, -1 },
    { 282, -1 },
    { 284, 2135 },
    { 292, -1 },
    { 296, -1 },
    { 303, -1 },
    { 314, -1 },
    { 316, -1 },
    { 323, -1 },
    { 328, -1 },
    { 330, -1 },
    { 333, 2084 },
    { 340, -1 },
    { 346, -1 },
    { 356, -1 },
    { 357, -1 },
    { 359, -1 },
    { 364, -1 },
    { 367, -1 },
    { 386, -1 },
    { 388, -1 },
    { 391, -1 },
    { 402, -1 },
    { 407, -1 },
    { 408, 2120 },
    { 410, -1 },
    { 413, -1 },
    { 439, 2131 },
    { 442, -1 },
    { 445, -1 },
    { 457, -1 },
    { 458, -1 },
    { 469, -1 },
    { 470, -1 },
    { 471, -1 },
    { 473, -1 },
    { 479, -1 },
    { 488, -1 },
    { 491, -1 },
    { 495, -1 },
    { 500, -1 },
    { 504, -1 },
    { 521, -1 },
    { 527, -1 },
    { 529, -1 },
    { 530, -1 },
    { 537, -1 },
    { 543, -1 },
    { 546, -1 },
    { 552, -1 },
    { 559, -1 },
    { 562, -1 },
    { 563, -1 },
    { 569, -1 },
    { 572, -1 },
    { 575, -1 },
    { 584, -1 },
    { 588, -1 },
    { 590, -1 },
    { 596, -1 },
    { 600, -1 },
    { 602, 2133 },
    { 603, -1 },
    { 608, -1 },
    { 611, -1 },
    { 617, -1 },
    { 622, -1 },
    { 624, -1 },
    { 629, -1 },
    { 632, -1 },
    { 635, -1 },
    { 638, -1 },
    { 644, -1 },
    { 658, -1 },
    { 659, -1 },
    { 660, -1 },
    { 666, -1 },
    { 668, -1 },
    { 674, -1 },
    { 681, -1 },
    { 682, -1 },
};


static const std::array<HashTableValue, 690> JSDOMWindowTableValues {
    HashTableValue { "closed"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_closed, 0 } },
    HashTableValue { "location"_s, JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_location, setJSDOMWindow_location } },
    HashTableValue { "window"_s, JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_window, 0 } },
    HashTableValue { "self"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_self, setJSDOMWindow_self } },
    HashTableValue { "opener"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_opener, setJSDOMWindow_opener } },
    HashTableValue { "frames"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_frames, setJSDOMWindow_frames } },
    HashTableValue { "length"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_length, setJSDOMWindow_length } },
    HashTableValue { "top"_s, JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_top, 0 } },
    HashTableValue { "parent"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_parent, setJSDOMWindow_parent } },
    HashTableValue { "document"_s, JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_document, 0 } },
    HashTableValue { "name"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_name, setJSDOMWindow_name } },
    HashTableValue { "history"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_history, 0 } },
    HashTableValue { "customElements"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_customElements, 0 } },
    HashTableValue { "locationbar"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_locationbar, setJSDOMWindow_locationbar } },
    HashTableValue { "menubar"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_menubar, setJSDOMWindow_menubar } },
    HashTableValue { "personalbar"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_personalbar, setJSDOMWindow_personalbar } },
    HashTableValue { "scrollbars"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_scrollbars, setJSDOMWindow_scrollbars } },
    HashTableValue { "statusbar"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_statusbar, setJSDOMWindow_statusbar } },
    HashTableValue { "toolbar"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_toolbar, setJSDOMWindow_toolbar } },
    HashTableValue { "status"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_status, setJSDOMWindow_status } },
    HashTableValue { "frameElement"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_frameElement, 0 } },
    HashTableValue { "navigator"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_navigator, 0 } },
    HashTableValue { "clientInformation"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_clientInformation, setJSDOMWindow_clientInformation } },
    HashTableValue { "event"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_event, setJSDOMWindow_event } },
    HashTableValue { "offscreenBuffering"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_offscreenBuffering, setJSDOMWindow_offscreenBuffering } },
#if ENABLE(IOS_GESTURE_EVENTS)
    HashTableValue { "ongesturechange"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ongesturechange, setJSDOMWindow_ongesturechange } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
    HashTableValue { "ongestureend"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ongestureend, setJSDOMWindow_ongestureend } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
    HashTableValue { "ongesturestart"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ongesturestart, setJSDOMWindow_ongesturestart } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    HashTableValue { "speechSynthesis"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_speechSynthesis, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "openDatabase"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_openDatabase, setJSDOMWindow_openDatabase } },
    HashTableValue { "onabort"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onabort, setJSDOMWindow_onabort } },
    HashTableValue { "onauxclick"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onauxclick, setJSDOMWindow_onauxclick } },
    HashTableValue { "onbeforeinput"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onbeforeinput, setJSDOMWindow_onbeforeinput } },
    HashTableValue { "onbeforetoggle"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onbeforetoggle, setJSDOMWindow_onbeforetoggle } },
    HashTableValue { "onblur"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onblur, setJSDOMWindow_onblur } },
    HashTableValue { "oncancel"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncancel, setJSDOMWindow_oncancel } },
    HashTableValue { "oncanplay"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncanplay, setJSDOMWindow_oncanplay } },
    HashTableValue { "oncanplaythrough"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncanplaythrough, setJSDOMWindow_oncanplaythrough } },
    HashTableValue { "onchange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onchange, setJSDOMWindow_onchange } },
    HashTableValue { "onclick"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onclick, setJSDOMWindow_onclick } },
    HashTableValue { "onclose"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onclose, setJSDOMWindow_onclose } },
    HashTableValue { "oncontentvisibilityautostatechange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncontentvisibilityautostatechange, setJSDOMWindow_oncontentvisibilityautostatechange } },
    HashTableValue { "oncontextmenu"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncontextmenu, setJSDOMWindow_oncontextmenu } },
    HashTableValue { "oncopy"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncopy, setJSDOMWindow_oncopy } },
    HashTableValue { "oncuechange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncuechange, setJSDOMWindow_oncuechange } },
    HashTableValue { "oncut"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oncut, setJSDOMWindow_oncut } },
    HashTableValue { "ondblclick"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondblclick, setJSDOMWindow_ondblclick } },
    HashTableValue { "ondrag"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondrag, setJSDOMWindow_ondrag } },
    HashTableValue { "ondragend"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondragend, setJSDOMWindow_ondragend } },
    HashTableValue { "ondragenter"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondragenter, setJSDOMWindow_ondragenter } },
    HashTableValue { "ondragleave"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondragleave, setJSDOMWindow_ondragleave } },
    HashTableValue { "ondragover"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondragover, setJSDOMWindow_ondragover } },
    HashTableValue { "ondragstart"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondragstart, setJSDOMWindow_ondragstart } },
    HashTableValue { "ondrop"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondrop, setJSDOMWindow_ondrop } },
    HashTableValue { "ondurationchange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondurationchange, setJSDOMWindow_ondurationchange } },
    HashTableValue { "onemptied"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onemptied, setJSDOMWindow_onemptied } },
    HashTableValue { "onended"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onended, setJSDOMWindow_onended } },
    HashTableValue { "onerror"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onerror, setJSDOMWindow_onerror } },
    HashTableValue { "onfocus"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onfocus, setJSDOMWindow_onfocus } },
    HashTableValue { "onformdata"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onformdata, setJSDOMWindow_onformdata } },
    HashTableValue { "oninput"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oninput, setJSDOMWindow_oninput } },
    HashTableValue { "oninvalid"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_oninvalid, setJSDOMWindow_oninvalid } },
    HashTableValue { "onkeydown"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onkeydown, setJSDOMWindow_onkeydown } },
    HashTableValue { "onkeypress"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onkeypress, setJSDOMWindow_onkeypress } },
    HashTableValue { "onkeyup"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onkeyup, setJSDOMWindow_onkeyup } },
    HashTableValue { "onload"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onload, setJSDOMWindow_onload } },
    HashTableValue { "onloadeddata"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onloadeddata, setJSDOMWindow_onloadeddata } },
    HashTableValue { "onloadedmetadata"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onloadedmetadata, setJSDOMWindow_onloadedmetadata } },
    HashTableValue { "onloadstart"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onloadstart, setJSDOMWindow_onloadstart } },
    HashTableValue { "onmousedown"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmousedown, setJSDOMWindow_onmousedown } },
    HashTableValue { "onmouseenter"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmouseenter, setJSDOMWindow_onmouseenter } },
    HashTableValue { "onmouseleave"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmouseleave, setJSDOMWindow_onmouseleave } },
    HashTableValue { "onmousemove"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmousemove, setJSDOMWindow_onmousemove } },
    HashTableValue { "onmouseout"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmouseout, setJSDOMWindow_onmouseout } },
    HashTableValue { "onmouseover"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmouseover, setJSDOMWindow_onmouseover } },
    HashTableValue { "onmouseup"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmouseup, setJSDOMWindow_onmouseup } },
    HashTableValue { "onpaste"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpaste, setJSDOMWindow_onpaste } },
    HashTableValue { "onpause"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpause, setJSDOMWindow_onpause } },
    HashTableValue { "onplay"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onplay, setJSDOMWindow_onplay } },
    HashTableValue { "onplaying"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onplaying, setJSDOMWindow_onplaying } },
    HashTableValue { "onprogress"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onprogress, setJSDOMWindow_onprogress } },
    HashTableValue { "onratechange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onratechange, setJSDOMWindow_onratechange } },
    HashTableValue { "onreset"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onreset, setJSDOMWindow_onreset } },
    HashTableValue { "onresize"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onresize, setJSDOMWindow_onresize } },
    HashTableValue { "onscroll"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onscroll, setJSDOMWindow_onscroll } },
    HashTableValue { "onsecuritypolicyviolation"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onsecuritypolicyviolation, setJSDOMWindow_onsecuritypolicyviolation } },
    HashTableValue { "onseeked"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onseeked, setJSDOMWindow_onseeked } },
    HashTableValue { "onseeking"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onseeking, setJSDOMWindow_onseeking } },
    HashTableValue { "onselect"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onselect, setJSDOMWindow_onselect } },
    HashTableValue { "onslotchange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onslotchange, setJSDOMWindow_onslotchange } },
    HashTableValue { "onstalled"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onstalled, setJSDOMWindow_onstalled } },
    HashTableValue { "onsubmit"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onsubmit, setJSDOMWindow_onsubmit } },
    HashTableValue { "onsuspend"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onsuspend, setJSDOMWindow_onsuspend } },
    HashTableValue { "ontimeupdate"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ontimeupdate, setJSDOMWindow_ontimeupdate } },
    HashTableValue { "ontoggle"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ontoggle, setJSDOMWindow_ontoggle } },
    HashTableValue { "onvolumechange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onvolumechange, setJSDOMWindow_onvolumechange } },
    HashTableValue { "onwaiting"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwaiting, setJSDOMWindow_onwaiting } },
    HashTableValue { "onwebkitanimationend"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkitanimationend, setJSDOMWindow_onwebkitanimationend } },
    HashTableValue { "onwebkitanimationiteration"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkitanimationiteration, setJSDOMWindow_onwebkitanimationiteration } },
    HashTableValue { "onwebkitanimationstart"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkitanimationstart, setJSDOMWindow_onwebkitanimationstart } },
    HashTableValue { "onwebkittransitionend"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkittransitionend, setJSDOMWindow_onwebkittransitionend } },
    HashTableValue { "onwheel"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwheel, setJSDOMWindow_onwheel } },
    HashTableValue { "onmousewheel"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmousewheel, setJSDOMWindow_onmousewheel } },
    HashTableValue { "onwebkitmouseforcechanged"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkitmouseforcechanged, setJSDOMWindow_onwebkitmouseforcechanged } },
    HashTableValue { "onwebkitmouseforcedown"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkitmouseforcedown, setJSDOMWindow_onwebkitmouseforcedown } },
    HashTableValue { "onwebkitmouseforcewillbegin"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkitmouseforcewillbegin, setJSDOMWindow_onwebkitmouseforcewillbegin } },
    HashTableValue { "onwebkitmouseforceup"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onwebkitmouseforceup, setJSDOMWindow_onwebkitmouseforceup } },
    HashTableValue { "onanimationstart"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onanimationstart, setJSDOMWindow_onanimationstart } },
    HashTableValue { "onanimationiteration"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onanimationiteration, setJSDOMWindow_onanimationiteration } },
    HashTableValue { "onanimationend"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onanimationend, setJSDOMWindow_onanimationend } },
    HashTableValue { "onanimationcancel"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onanimationcancel, setJSDOMWindow_onanimationcancel } },
    HashTableValue { "ontransitionrun"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ontransitionrun, setJSDOMWindow_ontransitionrun } },
    HashTableValue { "ontransitionstart"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ontransitionstart, setJSDOMWindow_ontransitionstart } },
    HashTableValue { "ontransitionend"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ontransitionend, setJSDOMWindow_ontransitionend } },
    HashTableValue { "ontransitioncancel"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ontransitioncancel, setJSDOMWindow_ontransitioncancel } },
    HashTableValue { "ongotpointercapture"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ongotpointercapture, setJSDOMWindow_ongotpointercapture } },
    HashTableValue { "onlostpointercapture"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onlostpointercapture, setJSDOMWindow_onlostpointercapture } },
    HashTableValue { "onpointerdown"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointerdown, setJSDOMWindow_onpointerdown } },
    HashTableValue { "onpointermove"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointermove, setJSDOMWindow_onpointermove } },
    HashTableValue { "onpointerup"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointerup, setJSDOMWindow_onpointerup } },
    HashTableValue { "onpointercancel"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointercancel, setJSDOMWindow_onpointercancel } },
    HashTableValue { "onpointerover"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointerover, setJSDOMWindow_onpointerover } },
    HashTableValue { "onpointerout"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointerout, setJSDOMWindow_onpointerout } },
    HashTableValue { "onpointerenter"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointerenter, setJSDOMWindow_onpointerenter } },
    HashTableValue { "onpointerleave"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpointerleave, setJSDOMWindow_onpointerleave } },
    HashTableValue { "onselectstart"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onselectstart, setJSDOMWindow_onselectstart } },
    HashTableValue { "onselectionchange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onselectionchange, setJSDOMWindow_onselectionchange } },
    HashTableValue { "screen"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_screen, setJSDOMWindow_screen } },
    HashTableValue { "innerWidth"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_innerWidth, setJSDOMWindow_innerWidth } },
    HashTableValue { "innerHeight"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_innerHeight, setJSDOMWindow_innerHeight } },
    HashTableValue { "scrollX"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_scrollX, setJSDOMWindow_scrollX } },
    HashTableValue { "pageXOffset"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_pageXOffset, setJSDOMWindow_pageXOffset } },
    HashTableValue { "scrollY"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_scrollY, setJSDOMWindow_scrollY } },
    HashTableValue { "pageYOffset"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_pageYOffset, setJSDOMWindow_pageYOffset } },
    HashTableValue { "screenX"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_screenX, setJSDOMWindow_screenX } },
    HashTableValue { "screenLeft"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_screenLeft, setJSDOMWindow_screenLeft } },
    HashTableValue { "screenY"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_screenY, setJSDOMWindow_screenY } },
    HashTableValue { "screenTop"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_screenTop, setJSDOMWindow_screenTop } },
    HashTableValue { "outerWidth"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_outerWidth, setJSDOMWindow_outerWidth } },
    HashTableValue { "outerHeight"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_outerHeight, setJSDOMWindow_outerHeight } },
    HashTableValue { "devicePixelRatio"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_devicePixelRatio, setJSDOMWindow_devicePixelRatio } },
    HashTableValue { "styleMedia"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_styleMedia, 0 } },
#if ENABLE(ORIENTATION_EVENTS)
    HashTableValue { "orientation"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_orientation, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(ORIENTATION_EVENTS)
    HashTableValue { "onorientationchange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onorientationchange, setJSDOMWindow_onorientationchange } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    HashTableValue { "ondevicemotion"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondevicemotion, setJSDOMWindow_ondevicemotion } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    HashTableValue { "ondeviceorientation"_s, JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ondeviceorientation, setJSDOMWindow_ondeviceorientation } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "onafterprint"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onafterprint, setJSDOMWindow_onafterprint } },
    HashTableValue { "onbeforeprint"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onbeforeprint, setJSDOMWindow_onbeforeprint } },
    HashTableValue { "onbeforeunload"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onbeforeunload, setJSDOMWindow_onbeforeunload } },
    HashTableValue { "onhashchange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onhashchange, setJSDOMWindow_onhashchange } },
    HashTableValue { "onlanguagechange"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onlanguagechange, setJSDOMWindow_onlanguagechange } },
    HashTableValue { "onmessage"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmessage, setJSDOMWindow_onmessage } },
    HashTableValue { "onmessageerror"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onmessageerror, setJSDOMWindow_onmessageerror } },
    HashTableValue { "onoffline"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onoffline, setJSDOMWindow_onoffline } },
    HashTableValue { "ononline"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ononline, setJSDOMWindow_ononline } },
    HashTableValue { "onpagehide"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpagehide, setJSDOMWindow_onpagehide } },
    HashTableValue { "onpagereveal"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpagereveal, setJSDOMWindow_onpagereveal } },
    HashTableValue { "onpageshow"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpageshow, setJSDOMWindow_onpageshow } },
    HashTableValue { "onpageswap"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpageswap, setJSDOMWindow_onpageswap } },
    HashTableValue { "onpopstate"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onpopstate, setJSDOMWindow_onpopstate } },
    HashTableValue { "onrejectionhandled"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onrejectionhandled, setJSDOMWindow_onrejectionhandled } },
    HashTableValue { "onstorage"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onstorage, setJSDOMWindow_onstorage } },
    HashTableValue { "onunhandledrejection"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onunhandledrejection, setJSDOMWindow_onunhandledrejection } },
    HashTableValue { "onunload"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_onunload, setJSDOMWindow_onunload } },
    HashTableValue { "ongamepadconnected"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ongamepadconnected, setJSDOMWindow_ongamepadconnected } },
    HashTableValue { "ongamepaddisconnected"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ongamepaddisconnected, setJSDOMWindow_ongamepaddisconnected } },
    HashTableValue { "localStorage"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_localStorage, 0 } },
    HashTableValue { "origin"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_origin, setJSDOMWindow_origin } },
    HashTableValue { "isSecureContext"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_isSecureContext, 0 } },
    HashTableValue { "crypto"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_crypto, 0 } },
    HashTableValue { "performance"_s, static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_performance, setJSDOMWindow_performance } },
    HashTableValue { "sessionStorage"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_sessionStorage, 0 } },
#if ENABLE(WIRELESS_PLAYBACK_TARGET_AVAILABILITY_API)
    HashTableValue { "WebKitPlaybackTargetAvailabilityEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WebKitPlaybackTargetAvailabilityEventConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "Headers"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HeadersConstructor, 0 } },
    HashTableValue { "Request"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_RequestConstructor, 0 } },
    HashTableValue { "Response"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ResponseConstructor, 0 } },
    HashTableValue { "Highlight"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HighlightConstructor, 0 } },
    HashTableValue { "HighlightRegistry"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HighlightRegistryConstructor, 0 } },
#if ENABLE(MEDIA_SESSION)
    HashTableValue { "MediaMetadata"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaMetadataConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_SESSION)
    HashTableValue { "MediaSession"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaSessionConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VideoPlaybackQuality"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_VideoPlaybackQualityConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_STREAM)
    HashTableValue { "CanvasCaptureMediaStreamTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CanvasCaptureMediaStreamTrackConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_STREAM)
    HashTableValue { "MediaDeviceInfo"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaDeviceInfoConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_STREAM)
    HashTableValue { "MediaStream"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaStreamConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_STREAM)
    HashTableValue { "MediaStreamTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaStreamTrackConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_STREAM)
    HashTableValue { "MediaStreamTrackEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaStreamTrackEventConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_STREAM)
    HashTableValue { "OverconstrainedError"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_OverconstrainedErrorConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_STREAM)
    HashTableValue { "OverconstrainedErrorEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_OverconstrainedErrorEventConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "Report"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ReportConstructor, 0 } },
    HashTableValue { "ReportBody"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ReportBodyConstructor, 0 } },
    HashTableValue { "ReportingObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ReportingObserverConstructor, 0 } },
    HashTableValue { "ByteLengthQueuingStrategy"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ByteLengthQueuingStrategyConstructor, 0 } },
    HashTableValue { "CountQueuingStrategy"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CountQueuingStrategyConstructor, 0 } },
    HashTableValue { "ReadableStream"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ReadableStreamConstructor, 0 } },
    HashTableValue { "ReadableStreamDefaultController"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ReadableStreamDefaultControllerConstructor, 0 } },
    HashTableValue { "ReadableStreamDefaultReader"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ReadableStreamDefaultReaderConstructor, 0 } },
    HashTableValue { "TransformStream"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TransformStreamConstructor, 0 } },
    HashTableValue { "TransformStreamDefaultController"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TransformStreamDefaultControllerConstructor, 0 } },
    HashTableValue { "WritableStream"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WritableStreamConstructor, 0 } },
    HashTableValue { "WritableStreamDefaultController"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WritableStreamDefaultControllerConstructor, 0 } },
    HashTableValue { "WritableStreamDefaultWriter"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WritableStreamDefaultWriterConstructor, 0 } },
#if ENABLE(WEB_AUDIO)
    HashTableValue { "ScriptProcessorNode"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ScriptProcessorNodeConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VideoColorSpace"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_VideoColorSpaceConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "SQLTransaction"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SQLTransactionConstructor, 0 } },
    HashTableValue { "CloseEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CloseEventConstructor, 0 } },
    HashTableValue { "AnimationEffect"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AnimationEffectConstructor, 0 } },
    HashTableValue { "AnimationPlaybackEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AnimationPlaybackEventConstructor, 0 } },
    HashTableValue { "AnimationTimeline"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AnimationTimelineConstructor, 0 } },
    HashTableValue { "CSSAnimation"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSAnimationConstructor, 0 } },
    HashTableValue { "AnimationEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AnimationEventConstructor, 0 } },
    HashTableValue { "CSSTransition"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSTransitionConstructor, 0 } },
    HashTableValue { "TransitionEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TransitionEventConstructor, 0 } },
    HashTableValue { "DocumentTimeline"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DocumentTimelineConstructor, 0 } },
    HashTableValue { "KeyframeEffect"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_KeyframeEffectConstructor, 0 } },
    HashTableValue { "Animation"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AnimationConstructor, 0 } },
    HashTableValue { "CSSConditionRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSConditionRuleConstructor, 0 } },
    HashTableValue { "CSSContainerRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSContainerRuleConstructor, 0 } },
    HashTableValue { "CSSCounterStyleRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSCounterStyleRuleConstructor, 0 } },
    HashTableValue { "CSSFontFaceDescriptors"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSFontFaceDescriptorsConstructor, 0 } },
    HashTableValue { "CSSFontFaceRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSFontFaceRuleConstructor, 0 } },
    HashTableValue { "CSSFontFeatureValuesRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSFontFeatureValuesRuleConstructor, 0 } },
    HashTableValue { "CSSFontPaletteValuesRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSFontPaletteValuesRuleConstructor, 0 } },
    HashTableValue { "CSSGroupingRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSGroupingRuleConstructor, 0 } },
    HashTableValue { "CSSImportRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSImportRuleConstructor, 0 } },
    HashTableValue { "CSSKeyframeRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSKeyframeRuleConstructor, 0 } },
    HashTableValue { "CSSKeyframesRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSKeyframesRuleConstructor, 0 } },
    HashTableValue { "CSSLayerBlockRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSLayerBlockRuleConstructor, 0 } },
    HashTableValue { "CSSLayerStatementRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSLayerStatementRuleConstructor, 0 } },
    HashTableValue { "CSSMediaRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMediaRuleConstructor, 0 } },
    HashTableValue { "CSSNamespaceRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSNamespaceRuleConstructor, 0 } },
    HashTableValue { "CSSNestedDeclarations"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSNestedDeclarationsConstructor, 0 } },
    HashTableValue { "CSSPageDescriptors"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSPageDescriptorsConstructor, 0 } },
    HashTableValue { "CSSPageRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSPageRuleConstructor, 0 } },
    HashTableValue { "CSSPropertyRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSPropertyRuleConstructor, 0 } },
    HashTableValue { "CSSRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSRuleConstructor, 0 } },
    HashTableValue { "CSSRuleList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSRuleListConstructor, 0 } },
    HashTableValue { "CSSScopeRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSScopeRuleConstructor, 0 } },
    HashTableValue { "CSSStartingStyleRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSStartingStyleRuleConstructor, 0 } },
    HashTableValue { "CSSStyleDeclaration"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSStyleDeclarationConstructor, 0 } },
    HashTableValue { "CSSStyleProperties"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSStylePropertiesConstructor, 0 } },
    HashTableValue { "CSSStyleRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSStyleRuleConstructor, 0 } },
    HashTableValue { "CSSStyleSheet"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSStyleSheetConstructor, 0 } },
    HashTableValue { "CSSSupportsRule"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSSupportsRuleConstructor, 0 } },
    HashTableValue { "CSS"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSConstructor, 0 } },
    HashTableValue { "DOMMatrix"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMMatrixConstructor, 0 } },
    HashTableValue { "WebKitCSSMatrix"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WebKitCSSMatrixConstructor, 0 } },
    HashTableValue { "DOMMatrixReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMMatrixReadOnlyConstructor, 0 } },
    HashTableValue { "Counter"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CounterConstructor, 0 } },
    HashTableValue { "CSSPrimitiveValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSPrimitiveValueConstructor, 0 } },
    HashTableValue { "RGBColor"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_RGBColorConstructor, 0 } },
    HashTableValue { "Rect"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_RectConstructor, 0 } },
    HashTableValue { "CSSValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSValueConstructor, 0 } },
    HashTableValue { "CSSValueList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSValueListConstructor, 0 } },
    HashTableValue { "FontFace"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_FontFaceConstructor, 0 } },
    HashTableValue { "FontFaceSet"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_FontFaceSetConstructor, 0 } },
    HashTableValue { "MediaList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaListConstructor, 0 } },
    HashTableValue { "MediaQueryList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaQueryListConstructor, 0 } },
    HashTableValue { "MediaQueryListEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaQueryListEventConstructor, 0 } },
    HashTableValue { "StyleSheet"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_StyleSheetConstructor, 0 } },
    HashTableValue { "StyleSheetList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_StyleSheetListConstructor, 0 } },
    HashTableValue { "CSSKeywordValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSKeywordValueConstructor, 0 } },
    HashTableValue { "CSSNumericValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSNumericValueConstructor, 0 } },
    HashTableValue { "CSSVariableReferenceValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSVariableReferenceValueConstructor, 0 } },
    HashTableValue { "CSSImageValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSImageValueConstructor, 0 } },
    HashTableValue { "CSSStyleValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSStyleValueConstructor, 0 } },
    HashTableValue { "CSSUnitValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSUnitValueConstructor, 0 } },
    HashTableValue { "CSSUnparsedValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSUnparsedValueConstructor, 0 } },
    HashTableValue { "StylePropertyMap"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_StylePropertyMapConstructor, 0 } },
    HashTableValue { "StylePropertyMapReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_StylePropertyMapReadOnlyConstructor, 0 } },
    HashTableValue { "CSSMathClamp"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathClampConstructor, 0 } },
    HashTableValue { "CSSMathInvert"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathInvertConstructor, 0 } },
    HashTableValue { "CSSMathMax"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathMaxConstructor, 0 } },
    HashTableValue { "CSSMathMin"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathMinConstructor, 0 } },
    HashTableValue { "CSSMathNegate"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathNegateConstructor, 0 } },
    HashTableValue { "CSSMathProduct"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathProductConstructor, 0 } },
    HashTableValue { "CSSMathSum"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathSumConstructor, 0 } },
    HashTableValue { "CSSMathValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMathValueConstructor, 0 } },
    HashTableValue { "CSSNumericArray"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSNumericArrayConstructor, 0 } },
    HashTableValue { "CSSMatrixComponent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSMatrixComponentConstructor, 0 } },
    HashTableValue { "CSSPerspective"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSPerspectiveConstructor, 0 } },
    HashTableValue { "CSSRotate"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSRotateConstructor, 0 } },
    HashTableValue { "CSSScale"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSScaleConstructor, 0 } },
    HashTableValue { "CSSSkew"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSSkewConstructor, 0 } },
    HashTableValue { "CSSSkewX"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSSkewXConstructor, 0 } },
    HashTableValue { "CSSSkewY"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSSkewYConstructor, 0 } },
    HashTableValue { "CSSTransformComponent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSTransformComponentConstructor, 0 } },
    HashTableValue { "CSSTransformValue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSTransformValueConstructor, 0 } },
    HashTableValue { "CSSTranslate"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSSTranslateConstructor, 0 } },
    HashTableValue { "AbortController"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AbortControllerConstructor, 0 } },
    HashTableValue { "AbortSignal"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AbortSignalConstructor, 0 } },
    HashTableValue { "AbstractRange"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AbstractRangeConstructor, 0 } },
    HashTableValue { "Attr"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AttrConstructor, 0 } },
    HashTableValue { "BeforeUnloadEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_BeforeUnloadEventConstructor, 0 } },
    HashTableValue { "CDATASection"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CDATASectionConstructor, 0 } },
    HashTableValue { "CharacterData"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CharacterDataConstructor, 0 } },
    HashTableValue { "ClipboardEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ClipboardEventConstructor, 0 } },
    HashTableValue { "Comment"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CommentConstructor, 0 } },
    HashTableValue { "CompositionEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CompositionEventConstructor, 0 } },
    HashTableValue { "ContentVisibilityAutoStateChangeEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ContentVisibilityAutoStateChangeEventConstructor, 0 } },
    HashTableValue { "CustomElementRegistry"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CustomElementRegistryConstructor, 0 } },
    HashTableValue { "CustomEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CustomEventConstructor, 0 } },
    HashTableValue { "CustomStateSet"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CustomStateSetConstructor, 0 } },
    HashTableValue { "DOMException"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMExceptionConstructor, 0 } },
    HashTableValue { "DOMImplementation"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMImplementationConstructor, 0 } },
    HashTableValue { "DOMPoint"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMPointConstructor, 0 } },
    HashTableValue { "DOMPointReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMPointReadOnlyConstructor, 0 } },
    HashTableValue { "DOMQuad"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMQuadConstructor, 0 } },
    HashTableValue { "DOMRect"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMRectConstructor, 0 } },
    HashTableValue { "DOMRectList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMRectListConstructor, 0 } },
    HashTableValue { "DOMRectReadOnly"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMRectReadOnlyConstructor, 0 } },
    HashTableValue { "DOMStringList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMStringListConstructor, 0 } },
    HashTableValue { "DOMStringMap"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMStringMapConstructor, 0 } },
    HashTableValue { "DataTransfer"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DataTransferConstructor, 0 } },
#if ENABLE(DEVICE_ORIENTATION)
    HashTableValue { "DeviceMotionEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DeviceMotionEventConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    HashTableValue { "DeviceOrientationEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DeviceOrientationEventConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "Document"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DocumentConstructor, 0 } },
    HashTableValue { "DocumentFragment"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DocumentFragmentConstructor, 0 } },
    HashTableValue { "DocumentType"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DocumentTypeConstructor, 0 } },
    HashTableValue { "DragEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DragEventConstructor, 0 } },
    HashTableValue { "Element"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ElementConstructor, 0 } },
    HashTableValue { "ElementInternals"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ElementInternalsConstructor, 0 } },
    HashTableValue { "ErrorEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ErrorEventConstructor, 0 } },
    HashTableValue { "Event"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_EventConstructor, 0 } },
    HashTableValue { "EventTarget"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_EventTargetConstructor, 0 } },
    HashTableValue { "FocusEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_FocusEventConstructor, 0 } },
    HashTableValue { "FormDataEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_FormDataEventConstructor, 0 } },
    HashTableValue { "HashChangeEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HashChangeEventConstructor, 0 } },
    HashTableValue { "InputEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_InputEventConstructor, 0 } },
    HashTableValue { "KeyboardEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_KeyboardEventConstructor, 0 } },
    HashTableValue { "MessageChannel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MessageChannelConstructor, 0 } },
    HashTableValue { "MessageEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MessageEventConstructor, 0 } },
    HashTableValue { "MessagePort"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MessagePortConstructor, 0 } },
    HashTableValue { "MouseEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MouseEventConstructor, 0 } },
    HashTableValue { "MutationObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MutationObserverConstructor, 0 } },
    HashTableValue { "WebKitMutationObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WebKitMutationObserverConstructor, 0 } },
    HashTableValue { "MutationRecord"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MutationRecordConstructor, 0 } },
    HashTableValue { "NamedNodeMap"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_NamedNodeMapConstructor, 0 } },
    HashTableValue { "Node"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_NodeConstructor, 0 } },
    HashTableValue { "NodeFilter"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_NodeFilterConstructor, 0 } },
    HashTableValue { "NodeIterator"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_NodeIteratorConstructor, 0 } },
    HashTableValue { "NodeList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_NodeListConstructor, 0 } },
    HashTableValue { "OverflowEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_OverflowEventConstructor, 0 } },
    HashTableValue { "PageRevealEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PageRevealEventConstructor, 0 } },
    HashTableValue { "PageSwapEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PageSwapEventConstructor, 0 } },
    HashTableValue { "PageTransitionEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PageTransitionEventConstructor, 0 } },
    HashTableValue { "PopStateEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PopStateEventConstructor, 0 } },
    HashTableValue { "ProcessingInstruction"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ProcessingInstructionConstructor, 0 } },
    HashTableValue { "ProgressEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ProgressEventConstructor, 0 } },
    HashTableValue { "PromiseRejectionEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PromiseRejectionEventConstructor, 0 } },
    HashTableValue { "Range"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_RangeConstructor, 0 } },
    HashTableValue { "SecurityPolicyViolationEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SecurityPolicyViolationEventConstructor, 0 } },
    HashTableValue { "ShadowRoot"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ShadowRootConstructor, 0 } },
    HashTableValue { "StaticRange"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_StaticRangeConstructor, 0 } },
    HashTableValue { "Text"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextConstructor, 0 } },
    HashTableValue { "TextDecoder"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextDecoderConstructor, 0 } },
    HashTableValue { "TextDecoderStream"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextDecoderStreamConstructor, 0 } },
    HashTableValue { "TextEncoder"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextEncoderConstructor, 0 } },
    HashTableValue { "TextEncoderStream"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextEncoderStreamConstructor, 0 } },
    HashTableValue { "TextEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextEventConstructor, 0 } },
    HashTableValue { "ToggleEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ToggleEventConstructor, 0 } },
#if ENABLE(TOUCH_EVENTS)
    HashTableValue { "Touch"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TouchConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(TOUCH_EVENTS)
    HashTableValue { "TouchEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TouchEventConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(TOUCH_EVENTS)
    HashTableValue { "TouchList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TouchListConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "TreeWalker"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TreeWalkerConstructor, 0 } },
    HashTableValue { "UIEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_UIEventConstructor, 0 } },
    HashTableValue { "WheelEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WheelEventConstructor, 0 } },
    HashTableValue { "XMLDocument"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XMLDocumentConstructor, 0 } },
    HashTableValue { "Blob"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_BlobConstructor, 0 } },
    HashTableValue { "File"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_FileConstructor, 0 } },
    HashTableValue { "FileList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_FileListConstructor, 0 } },
    HashTableValue { "FormData"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_FormDataConstructor, 0 } },
    HashTableValue { "DOMTokenList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMTokenListConstructor, 0 } },
    HashTableValue { "URL"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_URLConstructor, 0 } },
    HashTableValue { "webkitURL"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_webkitURLConstructor, 0 } },
    HashTableValue { "HTMLAllCollection"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLAllCollectionConstructor, 0 } },
    HashTableValue { "HTMLAnchorElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLAnchorElementConstructor, 0 } },
    HashTableValue { "HTMLAreaElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLAreaElementConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "HTMLAudioElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLAudioElementConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "Audio"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AudioConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "HTMLBRElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLBRElementConstructor, 0 } },
    HashTableValue { "HTMLBaseElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLBaseElementConstructor, 0 } },
    HashTableValue { "HTMLBodyElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLBodyElementConstructor, 0 } },
    HashTableValue { "HTMLButtonElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLButtonElementConstructor, 0 } },
    HashTableValue { "HTMLCanvasElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLCanvasElementConstructor, 0 } },
    HashTableValue { "HTMLCollection"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLCollectionConstructor, 0 } },
    HashTableValue { "HTMLDListElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLDListElementConstructor, 0 } },
    HashTableValue { "HTMLDataElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLDataElementConstructor, 0 } },
    HashTableValue { "HTMLDetailsElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLDetailsElementConstructor, 0 } },
    HashTableValue { "HTMLDialogElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLDialogElementConstructor, 0 } },
    HashTableValue { "HTMLDirectoryElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLDirectoryElementConstructor, 0 } },
    HashTableValue { "HTMLDivElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLDivElementConstructor, 0 } },
    HashTableValue { "HTMLDocument"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLDocumentConstructor, 0 } },
    HashTableValue { "HTMLElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLElementConstructor, 0 } },
    HashTableValue { "HTMLFieldSetElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLFieldSetElementConstructor, 0 } },
    HashTableValue { "HTMLFontElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLFontElementConstructor, 0 } },
    HashTableValue { "HTMLFormControlsCollection"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLFormControlsCollectionConstructor, 0 } },
    HashTableValue { "HTMLFormElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLFormElementConstructor, 0 } },
    HashTableValue { "HTMLFrameElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLFrameElementConstructor, 0 } },
    HashTableValue { "HTMLFrameSetElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLFrameSetElementConstructor, 0 } },
    HashTableValue { "HTMLHRElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLHRElementConstructor, 0 } },
    HashTableValue { "HTMLHeadElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLHeadElementConstructor, 0 } },
    HashTableValue { "HTMLHeadingElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLHeadingElementConstructor, 0 } },
    HashTableValue { "HTMLHtmlElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLHtmlElementConstructor, 0 } },
    HashTableValue { "HTMLIFrameElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLIFrameElementConstructor, 0 } },
    HashTableValue { "HTMLImageElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLImageElementConstructor, 0 } },
    HashTableValue { "Image"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ImageConstructor, 0 } },
    HashTableValue { "HTMLInputElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLInputElementConstructor, 0 } },
    HashTableValue { "HTMLLIElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLLIElementConstructor, 0 } },
    HashTableValue { "HTMLLabelElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLLabelElementConstructor, 0 } },
    HashTableValue { "HTMLLegendElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLLegendElementConstructor, 0 } },
    HashTableValue { "HTMLLinkElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLLinkElementConstructor, 0 } },
    HashTableValue { "HTMLMapElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLMapElementConstructor, 0 } },
    HashTableValue { "HTMLMarqueeElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLMarqueeElementConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "HTMLMediaElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLMediaElementConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "HTMLMenuElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLMenuElementConstructor, 0 } },
    HashTableValue { "HTMLMetaElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLMetaElementConstructor, 0 } },
    HashTableValue { "HTMLMeterElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLMeterElementConstructor, 0 } },
    HashTableValue { "HTMLModElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLModElementConstructor, 0 } },
    HashTableValue { "HTMLOListElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLOListElementConstructor, 0 } },
    HashTableValue { "HTMLObjectElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLObjectElementConstructor, 0 } },
    HashTableValue { "HTMLOptGroupElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLOptGroupElementConstructor, 0 } },
    HashTableValue { "HTMLOptionElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLOptionElementConstructor, 0 } },
    HashTableValue { "Option"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_OptionConstructor, 0 } },
    HashTableValue { "HTMLOptionsCollection"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLOptionsCollectionConstructor, 0 } },
    HashTableValue { "HTMLOutputElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLOutputElementConstructor, 0 } },
    HashTableValue { "HTMLParagraphElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLParagraphElementConstructor, 0 } },
    HashTableValue { "HTMLParamElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLParamElementConstructor, 0 } },
    HashTableValue { "HTMLPictureElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLPictureElementConstructor, 0 } },
    HashTableValue { "HTMLPreElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLPreElementConstructor, 0 } },
    HashTableValue { "HTMLProgressElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLProgressElementConstructor, 0 } },
    HashTableValue { "HTMLQuoteElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLQuoteElementConstructor, 0 } },
    HashTableValue { "HTMLScriptElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLScriptElementConstructor, 0 } },
    HashTableValue { "HTMLSelectElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLSelectElementConstructor, 0 } },
    HashTableValue { "HTMLSlotElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLSlotElementConstructor, 0 } },
    HashTableValue { "HTMLSourceElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLSourceElementConstructor, 0 } },
    HashTableValue { "HTMLSpanElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLSpanElementConstructor, 0 } },
    HashTableValue { "HTMLStyleElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLStyleElementConstructor, 0 } },
    HashTableValue { "HTMLTableCaptionElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTableCaptionElementConstructor, 0 } },
    HashTableValue { "HTMLTableCellElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTableCellElementConstructor, 0 } },
    HashTableValue { "HTMLTableColElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTableColElementConstructor, 0 } },
    HashTableValue { "HTMLTableElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTableElementConstructor, 0 } },
    HashTableValue { "HTMLTableRowElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTableRowElementConstructor, 0 } },
    HashTableValue { "HTMLTableSectionElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTableSectionElementConstructor, 0 } },
    HashTableValue { "HTMLTemplateElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTemplateElementConstructor, 0 } },
    HashTableValue { "HTMLTextAreaElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTextAreaElementConstructor, 0 } },
    HashTableValue { "HTMLTimeElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTimeElementConstructor, 0 } },
    HashTableValue { "HTMLTitleElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTitleElementConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "HTMLTrackElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLTrackElementConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "HTMLUListElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLUListElementConstructor, 0 } },
    HashTableValue { "HTMLUnknownElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLUnknownElementConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "HTMLVideoElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HTMLVideoElementConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "ImageBitmap"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ImageBitmapConstructor, 0 } },
    HashTableValue { "ImageData"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ImageDataConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "MediaController"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaControllerConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "MediaError"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MediaErrorConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "RadioNodeList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_RadioNodeListConstructor, 0 } },
    HashTableValue { "SubmitEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SubmitEventConstructor, 0 } },
    HashTableValue { "TextMetrics"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextMetricsConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "TimeRanges"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TimeRangesConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "URLSearchParams"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_URLSearchParamsConstructor, 0 } },
    HashTableValue { "UserActivation"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_UserActivationConstructor, 0 } },
    HashTableValue { "ValidityState"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ValidityStateConstructor, 0 } },
    HashTableValue { "CanvasGradient"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CanvasGradientConstructor, 0 } },
    HashTableValue { "CanvasPattern"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CanvasPatternConstructor, 0 } },
    HashTableValue { "CanvasRenderingContext2D"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CanvasRenderingContext2DConstructor, 0 } },
    HashTableValue { "ImageBitmapRenderingContext"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ImageBitmapRenderingContextConstructor, 0 } },
    HashTableValue { "Path2D"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_Path2DConstructor, 0 } },
#if ENABLE(VIDEO)
    HashTableValue { "AudioTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AudioTrackConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "AudioTrackConfiguration"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AudioTrackConfigurationConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "AudioTrackList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_AudioTrackListConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "DataCue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DataCueConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "TextTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextTrackConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "TextTrackCue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextTrackCueConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "TextTrackCueList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextTrackCueListConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "TextTrackList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TextTrackListConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "TrackEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_TrackEventConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VTTCue"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_VTTCueConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VTTRegion"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_VTTRegionConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VideoTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_VideoTrackConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VideoTrackConfiguration"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_VideoTrackConfigurationConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(VIDEO)
    HashTableValue { "VideoTrackList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_VideoTrackListConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "BarProp"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_BarPropConstructor, 0 } },
    HashTableValue { "Crypto"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CryptoConstructor, 0 } },
    HashTableValue { "Selection"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SelectionConstructor, 0 } },
    HashTableValue { "Window"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WindowConstructor, 0 } },
    HashTableValue { "EventSource"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_EventSourceConstructor, 0 } },
    HashTableValue { "History"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_HistoryConstructor, 0 } },
    HashTableValue { "IntersectionObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_IntersectionObserverConstructor, 0 } },
    HashTableValue { "IntersectionObserverEntry"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_IntersectionObserverEntryConstructor, 0 } },
    HashTableValue { "Location"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_LocationConstructor, 0 } },
    HashTableValue { "NavigationActivation"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_NavigationActivationConstructor, 0 } },
    HashTableValue { "Navigator"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_NavigatorConstructor, 0 } },
    HashTableValue { "Performance"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceConstructor, 0 } },
    HashTableValue { "PerformanceEntry"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceEntryConstructor, 0 } },
    HashTableValue { "PerformanceMark"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceMarkConstructor, 0 } },
    HashTableValue { "PerformanceMeasure"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceMeasureConstructor, 0 } },
    HashTableValue { "PerformanceNavigation"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceNavigationConstructor, 0 } },
    HashTableValue { "PerformanceNavigationTiming"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceNavigationTimingConstructor, 0 } },
    HashTableValue { "PerformanceObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceObserverConstructor, 0 } },
    HashTableValue { "PerformanceObserverEntryList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceObserverEntryListConstructor, 0 } },
    HashTableValue { "PerformancePaintTiming"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformancePaintTimingConstructor, 0 } },
    HashTableValue { "PerformanceResourceTiming"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceResourceTimingConstructor, 0 } },
    HashTableValue { "PerformanceServerTiming"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceServerTimingConstructor, 0 } },
    HashTableValue { "PerformanceTiming"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PerformanceTimingConstructor, 0 } },
    HashTableValue { "ResizeObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ResizeObserverConstructor, 0 } },
    HashTableValue { "ResizeObserverEntry"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ResizeObserverEntryConstructor, 0 } },
    HashTableValue { "ResizeObserverSize"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ResizeObserverSizeConstructor, 0 } },
    HashTableValue { "Screen"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_ScreenConstructor, 0 } },
#if ENABLE(USER_MESSAGE_HANDLERS)
    HashTableValue { "UserMessageHandler"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_UserMessageHandlerConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(USER_MESSAGE_HANDLERS)
    HashTableValue { "UserMessageHandlersNamespace"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_UserMessageHandlersNamespaceConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(USER_MESSAGE_HANDLERS)
    HashTableValue { "WebKitNamespace"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WebKitNamespaceConstructor, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
    HashTableValue { "WebKitPoint"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WebKitPointConstructor, 0 } },
    HashTableValue { "CSPViolationReportBody"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_CSPViolationReportBodyConstructor, 0 } },
    HashTableValue { "MimeType"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MimeTypeConstructor, 0 } },
    HashTableValue { "MimeTypeArray"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_MimeTypeArrayConstructor, 0 } },
    HashTableValue { "Plugin"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PluginConstructor, 0 } },
    HashTableValue { "PluginArray"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_PluginArrayConstructor, 0 } },
    HashTableValue { "Storage"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_StorageConstructor, 0 } },
    HashTableValue { "StorageEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_StorageEventConstructor, 0 } },
    HashTableValue { "SVGAElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAElementConstructor, 0 } },
    HashTableValue { "SVGAngle"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAngleConstructor, 0 } },
    HashTableValue { "SVGAnimateElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimateElementConstructor, 0 } },
    HashTableValue { "SVGAnimateMotionElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimateMotionElementConstructor, 0 } },
    HashTableValue { "SVGAnimateTransformElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimateTransformElementConstructor, 0 } },
    HashTableValue { "SVGAnimatedAngle"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedAngleConstructor, 0 } },
    HashTableValue { "SVGAnimatedBoolean"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedBooleanConstructor, 0 } },
    HashTableValue { "SVGAnimatedEnumeration"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedEnumerationConstructor, 0 } },
    HashTableValue { "SVGAnimatedInteger"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedIntegerConstructor, 0 } },
    HashTableValue { "SVGAnimatedLength"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedLengthConstructor, 0 } },
    HashTableValue { "SVGAnimatedLengthList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedLengthListConstructor, 0 } },
    HashTableValue { "SVGAnimatedNumber"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedNumberConstructor, 0 } },
    HashTableValue { "SVGAnimatedNumberList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedNumberListConstructor, 0 } },
    HashTableValue { "SVGAnimatedPreserveAspectRatio"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedPreserveAspectRatioConstructor, 0 } },
    HashTableValue { "SVGAnimatedRect"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedRectConstructor, 0 } },
    HashTableValue { "SVGAnimatedString"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedStringConstructor, 0 } },
    HashTableValue { "SVGAnimatedTransformList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimatedTransformListConstructor, 0 } },
    HashTableValue { "SVGAnimationElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGAnimationElementConstructor, 0 } },
    HashTableValue { "SVGCircleElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGCircleElementConstructor, 0 } },
    HashTableValue { "SVGClipPathElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGClipPathElementConstructor, 0 } },
    HashTableValue { "SVGComponentTransferFunctionElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGComponentTransferFunctionElementConstructor, 0 } },
    HashTableValue { "SVGDefsElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGDefsElementConstructor, 0 } },
    HashTableValue { "SVGDescElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGDescElementConstructor, 0 } },
    HashTableValue { "SVGElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGElementConstructor, 0 } },
    HashTableValue { "SVGEllipseElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGEllipseElementConstructor, 0 } },
    HashTableValue { "SVGFEBlendElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEBlendElementConstructor, 0 } },
    HashTableValue { "SVGFEColorMatrixElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEColorMatrixElementConstructor, 0 } },
    HashTableValue { "SVGFEComponentTransferElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEComponentTransferElementConstructor, 0 } },
    HashTableValue { "SVGFECompositeElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFECompositeElementConstructor, 0 } },
    HashTableValue { "SVGFEConvolveMatrixElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEConvolveMatrixElementConstructor, 0 } },
    HashTableValue { "SVGFEDiffuseLightingElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEDiffuseLightingElementConstructor, 0 } },
    HashTableValue { "SVGFEDisplacementMapElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEDisplacementMapElementConstructor, 0 } },
    HashTableValue { "SVGFEDistantLightElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEDistantLightElementConstructor, 0 } },
    HashTableValue { "SVGFEDropShadowElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEDropShadowElementConstructor, 0 } },
    HashTableValue { "SVGFEFloodElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEFloodElementConstructor, 0 } },
    HashTableValue { "SVGFEFuncAElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEFuncAElementConstructor, 0 } },
    HashTableValue { "SVGFEFuncBElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEFuncBElementConstructor, 0 } },
    HashTableValue { "SVGFEFuncGElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEFuncGElementConstructor, 0 } },
    HashTableValue { "SVGFEFuncRElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEFuncRElementConstructor, 0 } },
    HashTableValue { "SVGFEGaussianBlurElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEGaussianBlurElementConstructor, 0 } },
    HashTableValue { "SVGFEImageElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEImageElementConstructor, 0 } },
    HashTableValue { "SVGFEMergeElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEMergeElementConstructor, 0 } },
    HashTableValue { "SVGFEMergeNodeElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEMergeNodeElementConstructor, 0 } },
    HashTableValue { "SVGFEMorphologyElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEMorphologyElementConstructor, 0 } },
    HashTableValue { "SVGFEOffsetElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEOffsetElementConstructor, 0 } },
    HashTableValue { "SVGFEPointLightElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFEPointLightElementConstructor, 0 } },
    HashTableValue { "SVGFESpecularLightingElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFESpecularLightingElementConstructor, 0 } },
    HashTableValue { "SVGFESpotLightElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFESpotLightElementConstructor, 0 } },
    HashTableValue { "SVGFETileElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFETileElementConstructor, 0 } },
    HashTableValue { "SVGFETurbulenceElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFETurbulenceElementConstructor, 0 } },
    HashTableValue { "SVGFilterElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGFilterElementConstructor, 0 } },
    HashTableValue { "SVGForeignObjectElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGForeignObjectElementConstructor, 0 } },
    HashTableValue { "SVGGElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGGElementConstructor, 0 } },
    HashTableValue { "SVGGeometryElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGGeometryElementConstructor, 0 } },
    HashTableValue { "SVGGradientElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGGradientElementConstructor, 0 } },
    HashTableValue { "SVGGraphicsElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGGraphicsElementConstructor, 0 } },
    HashTableValue { "SVGImageElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGImageElementConstructor, 0 } },
    HashTableValue { "SVGLength"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGLengthConstructor, 0 } },
    HashTableValue { "SVGLengthList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGLengthListConstructor, 0 } },
    HashTableValue { "SVGLineElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGLineElementConstructor, 0 } },
    HashTableValue { "SVGLinearGradientElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGLinearGradientElementConstructor, 0 } },
    HashTableValue { "SVGMPathElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGMPathElementConstructor, 0 } },
    HashTableValue { "SVGMarkerElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGMarkerElementConstructor, 0 } },
    HashTableValue { "SVGMaskElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGMaskElementConstructor, 0 } },
    HashTableValue { "SVGMatrix"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGMatrixConstructor, 0 } },
    HashTableValue { "SVGMetadataElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGMetadataElementConstructor, 0 } },
    HashTableValue { "SVGNumber"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGNumberConstructor, 0 } },
    HashTableValue { "SVGNumberList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGNumberListConstructor, 0 } },
    HashTableValue { "SVGPathElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathElementConstructor, 0 } },
    HashTableValue { "SVGPathSeg"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegConstructor, 0 } },
    HashTableValue { "SVGPathSegArcAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegArcAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegArcRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegArcRelConstructor, 0 } },
    HashTableValue { "SVGPathSegClosePath"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegClosePathConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoCubicAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoCubicAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoCubicRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoCubicRelConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoCubicSmoothAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoCubicSmoothAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoCubicSmoothRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoCubicSmoothRelConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoQuadraticAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoQuadraticAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoQuadraticRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoQuadraticRelConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoQuadraticSmoothAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegCurvetoQuadraticSmoothRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothRelConstructor, 0 } },
    HashTableValue { "SVGPathSegLinetoAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegLinetoAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegLinetoHorizontalAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegLinetoHorizontalAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegLinetoHorizontalRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegLinetoHorizontalRelConstructor, 0 } },
    HashTableValue { "SVGPathSegLinetoRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegLinetoRelConstructor, 0 } },
    HashTableValue { "SVGPathSegLinetoVerticalAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegLinetoVerticalAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegLinetoVerticalRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegLinetoVerticalRelConstructor, 0 } },
    HashTableValue { "SVGPathSegList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegListConstructor, 0 } },
    HashTableValue { "SVGPathSegMovetoAbs"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegMovetoAbsConstructor, 0 } },
    HashTableValue { "SVGPathSegMovetoRel"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPathSegMovetoRelConstructor, 0 } },
    HashTableValue { "SVGPatternElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPatternElementConstructor, 0 } },
    HashTableValue { "SVGPoint"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPointConstructor, 0 } },
    HashTableValue { "SVGPointList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPointListConstructor, 0 } },
    HashTableValue { "SVGPolygonElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPolygonElementConstructor, 0 } },
    HashTableValue { "SVGPolylineElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPolylineElementConstructor, 0 } },
    HashTableValue { "SVGPreserveAspectRatio"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGPreserveAspectRatioConstructor, 0 } },
    HashTableValue { "SVGRadialGradientElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGRadialGradientElementConstructor, 0 } },
    HashTableValue { "SVGRect"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGRectConstructor, 0 } },
    HashTableValue { "SVGRectElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGRectElementConstructor, 0 } },
    HashTableValue { "SVGSVGElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGSVGElementConstructor, 0 } },
    HashTableValue { "SVGScriptElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGScriptElementConstructor, 0 } },
    HashTableValue { "SVGSetElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGSetElementConstructor, 0 } },
    HashTableValue { "SVGStopElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGStopElementConstructor, 0 } },
    HashTableValue { "SVGStringList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGStringListConstructor, 0 } },
    HashTableValue { "SVGStyleElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGStyleElementConstructor, 0 } },
    HashTableValue { "SVGSwitchElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGSwitchElementConstructor, 0 } },
    HashTableValue { "SVGSymbolElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGSymbolElementConstructor, 0 } },
    HashTableValue { "SVGTSpanElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTSpanElementConstructor, 0 } },
    HashTableValue { "SVGTextContentElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTextContentElementConstructor, 0 } },
    HashTableValue { "SVGTextElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTextElementConstructor, 0 } },
    HashTableValue { "SVGTextPathElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTextPathElementConstructor, 0 } },
    HashTableValue { "SVGTextPositioningElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTextPositioningElementConstructor, 0 } },
    HashTableValue { "SVGTitleElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTitleElementConstructor, 0 } },
    HashTableValue { "SVGTransform"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTransformConstructor, 0 } },
    HashTableValue { "SVGTransformList"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGTransformListConstructor, 0 } },
    HashTableValue { "SVGUnitTypes"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGUnitTypesConstructor, 0 } },
    HashTableValue { "SVGUseElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGUseElementConstructor, 0 } },
    HashTableValue { "SVGViewElement"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGViewElementConstructor, 0 } },
    HashTableValue { "SVGViewSpec"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_SVGViewSpecConstructor, 0 } },
    HashTableValue { "Worker"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WorkerConstructor, 0 } },
    HashTableValue { "Worklet"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_WorkletConstructor, 0 } },
    HashTableValue { "DOMParser"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_DOMParserConstructor, 0 } },
    HashTableValue { "XMLHttpRequest"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XMLHttpRequestConstructor, 0 } },
    HashTableValue { "XMLHttpRequestEventTarget"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XMLHttpRequestEventTargetConstructor, 0 } },
    HashTableValue { "XMLHttpRequestProgressEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XMLHttpRequestProgressEventConstructor, 0 } },
    HashTableValue { "XMLHttpRequestUpload"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XMLHttpRequestUploadConstructor, 0 } },
    HashTableValue { "XMLSerializer"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XMLSerializerConstructor, 0 } },
    HashTableValue { "XPathEvaluator"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XPathEvaluatorConstructor, 0 } },
    HashTableValue { "XPathExpression"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XPathExpressionConstructor, 0 } },
    HashTableValue { "XPathResult"_s, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindow_XPathResultConstructor, 0 } },
    HashTableValue { "close"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_close, 0 } },
    HashTableValue { "focus"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_focus, 0 } },
    HashTableValue { "blur"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_blur, 0 } },
    HashTableValue { "postMessage"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_postMessage, 1 } },
    HashTableValue { "stop"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_stop, 0 } },
    HashTableValue { "open"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_open, 0 } },
    HashTableValue { "alert"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_alert, 0 } },
    HashTableValue { "confirm"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_confirm, 0 } },
    HashTableValue { "prompt"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_prompt, 0 } },
    HashTableValue { "print"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_print, 0 } },
    HashTableValue { "captureEvents"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_captureEvents, 0 } },
    HashTableValue { "releaseEvents"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_releaseEvents, 0 } },
    HashTableValue { "find"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_find, 0 } },
    HashTableValue { "webkitRequestAnimationFrame"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_webkitRequestAnimationFrame, 1 } },
    HashTableValue { "webkitCancelAnimationFrame"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_webkitCancelAnimationFrame, 1 } },
    HashTableValue { "webkitCancelRequestAnimationFrame"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_webkitCancelRequestAnimationFrame, 1 } },
    HashTableValue { "webkitConvertPointFromPageToNode"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_webkitConvertPointFromPageToNode, 0 } },
    HashTableValue { "webkitConvertPointFromNodeToPage"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_webkitConvertPointFromNodeToPage, 0 } },
    HashTableValue { "requestAnimationFrame"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_requestAnimationFrame, 1 } },
    HashTableValue { "cancelAnimationFrame"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_cancelAnimationFrame, 1 } },
    HashTableValue { "getComputedStyle"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_getComputedStyle, 1 } },
    HashTableValue { "matchMedia"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_matchMedia, 1 } },
    HashTableValue { "moveTo"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_moveTo, 2 } },
    HashTableValue { "moveBy"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_moveBy, 2 } },
    HashTableValue { "resizeTo"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_resizeTo, 2 } },
    HashTableValue { "resizeBy"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_resizeBy, 2 } },
    HashTableValue { "scroll"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_scroll, 0 } },
    HashTableValue { "scrollTo"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_scrollTo, 0 } },
    HashTableValue { "scrollBy"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_scrollBy, 0 } },
    HashTableValue { "getSelection"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_getSelection, 0 } },
    HashTableValue { "reportError"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_reportError, 1 } },
    HashTableValue { "atob"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_atob, 1 } },
    HashTableValue { "btoa"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_btoa, 1 } },
    HashTableValue { "setTimeout"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_setTimeout, 1 } },
    HashTableValue { "clearTimeout"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_clearTimeout, 0 } },
    HashTableValue { "setInterval"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_setInterval, 1 } },
    HashTableValue { "clearInterval"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_clearInterval, 0 } },
    HashTableValue { "queueMicrotask"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_queueMicrotask, 1 } },
    HashTableValue { "createImageBitmap"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_createImageBitmap, 1 } },
    HashTableValue { "structuredClone"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_structuredClone, 1 } },
    HashTableValue { "fetch"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDOMWindowInstanceFunction_fetch, 1 } },
};

static const HashTable JSDOMWindowTable = { 690, 2047, static_cast<uint8_t>(JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::Function | JSC::PropertyAttribute::ReadOnly), JSDOMWindow::info(), JSDOMWindowTableValues.data(), JSDOMWindowTableIndex };
template<> const ClassInfo JSDOMWindowDOMConstructor::s_info = { "Window"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDOMWindowDOMConstructor) };

template<> JSValue JSDOMWindowDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSDOMWindowDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "Window"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, globalObject.getPrototypeDirect(), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const struct CompactHashIndex JSDOMWindowPrototypeTableIndex[2] = {
    { -1, -1 },
    { 0, -1 },
};


static const std::array<HashTableValue, 1> JSDOMWindowPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMWindowConstructor, 0 } },
};

static const HashTable JSDOMWindowPrototypeTable = { 1, 1, static_cast<uint8_t>(static_cast<unsigned>(PropertyAttribute::DontEnum)), JSDOMWindow::info(), JSDOMWindowPrototypeTableValues.data(), JSDOMWindowPrototypeTableIndex };
const ClassInfo JSDOMWindowPrototype::s_info = { "Window"_s, &Base::s_info, &JSDOMWindowPrototypeTable, nullptr, CREATE_METHOD_TABLE(JSDOMWindowPrototype) };

void JSDOMWindowPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSDOMWindow::s_info = { "Window"_s, &Base::s_info, &JSDOMWindowTable, nullptr, CREATE_METHOD_TABLE(JSDOMWindow) };

JSDOMWindow::JSDOMWindow(VM& vm, Structure* structure, Ref<DOMWindow>&& impl, JSWindowProxy* proxy)
    : JSDOMWindowBase(vm, structure, WTFMove(impl), proxy)
{
}

Ref<DOMWindow> JSDOMWindow::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, DOMWindow>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

void JSDOMWindow::finishCreation(VM& vm, JSWindowProxy* proxy)
{
    Base::finishCreation(vm, proxy);

    auto* scriptExecutionContext = jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext();

    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).navigationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_navigation, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cookieStoreAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).cookieStorePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_cookieStore, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
#if ENABLE(DECLARATIVE_WEB_PUSH)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().declarativeWebPush))
        putDirectCustomAccessor(vm, builtinNames(vm).pushManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_pushManager, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().hiddenUntilFoundEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).onbeforematchPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_onbeforematch, setJSDOMWindow_onbeforematch), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().commandAttributesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).oncommandPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_oncommand, setJSDOMWindow_oncommand), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().scrollendEventEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).onscrollendPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_onscrollend, setJSDOMWindow_onscrollend), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor)));
#if ENABLE(TOUCH_EVENTS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().touchEventDOMAttributesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ontouchcancelPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ontouchcancel, setJSDOMWindow_ontouchcancel), attributesForStructure(JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor));
#endif
#if ENABLE(TOUCH_EVENTS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().touchEventDOMAttributesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ontouchendPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ontouchend, setJSDOMWindow_ontouchend), attributesForStructure(JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor));
#endif
#if ENABLE(TOUCH_EVENTS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().touchEventDOMAttributesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ontouchmovePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ontouchmove, setJSDOMWindow_ontouchmove), attributesForStructure(JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor));
#endif
#if ENABLE(TOUCH_EVENTS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().touchEventDOMAttributesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ontouchstartPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ontouchstart, setJSDOMWindow_ontouchstart), attributesForStructure(JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor));
#endif
#if ENABLE(TOUCH_EVENTS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().touchEventDOMAttributesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ontouchforcechangePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ontouchforcechange, setJSDOMWindow_ontouchforcechange), attributesForStructure(JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::CustomAccessor));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().visualViewportAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).visualViewportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_visualViewport, setJSDOMWindow_visualViewport), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::CustomAccessor)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().crossOriginOpenerPolicyEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).crossOriginIsolatedPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_crossOriginIsolated, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cacheAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).cachesPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_caches, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).indexedDBPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_indexedDB, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
    if (((globalObject())->inherits<JSDOMWindowBase>() && (scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).webkitIndexedDBPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_webkitIndexedDB, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().trustedTypesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).trustedTypesPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_trustedTypes, nullptr), attributesForStructure(JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().shapeDetection)))
        putDirectCustomAccessor(vm, builtinNames(vm).BarcodeDetectorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BarcodeDetectorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().shapeDetection)))
        putDirectCustomAccessor(vm, builtinNames(vm).FaceDetectorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FaceDetectorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().shapeDetection)))
        putDirectCustomAccessor(vm, builtinNames(vm).TextDetectorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_TextDetectorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUAdapterPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUAdapterConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUAdapterInfoPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUAdapterInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBindGroupPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUBindGroupConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBindGroupLayoutPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUBindGroupLayoutConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUBufferUsagePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUBufferUsageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUColorWritePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUColorWriteConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCommandBufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUCommandBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCommandEncoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUCommandEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCompilationInfoPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUCompilationInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCompilationMessagePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUCompilationMessageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUComputePassEncoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUComputePassEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUComputePipelinePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUComputePipelineConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUDevicePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUDeviceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUDeviceLostInfoPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUDeviceLostInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUExternalTexturePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUExternalTextureConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUInternalErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUInternalErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUMapModePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUMapModeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUOutOfMemoryErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUOutOfMemoryErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUPipelineErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUPipelineErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUPipelineLayoutPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUPipelineLayoutConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUQuerySetPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUQuerySetConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUQueuePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUQueueConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderBundlePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPURenderBundleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderBundleEncoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPURenderBundleEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderPassEncoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPURenderPassEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPURenderPipelinePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPURenderPipelineConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUSamplerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUSamplerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUShaderModulePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUShaderModuleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUShaderStagePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUShaderStageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUSupportedFeaturesPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUSupportedFeaturesConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUSupportedLimitsPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUSupportedLimitsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUTexturePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUTextureConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUTextureUsagePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUTextureUsageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUTextureViewPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUTextureViewConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUUncapturedErrorEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUUncapturedErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUValidationErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUValidationErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WGSLLanguageFeaturesPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WGSLLanguageFeaturesConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().asyncClipboardAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).ClipboardPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ClipboardConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().asyncClipboardAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).ClipboardItemPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ClipboardItemConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(DOM_AUDIO_SESSION)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().domAudioSessionEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().shouldDisableDOMAudioSessionQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioSessionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioSessionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cacheAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).CachePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CacheConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cacheAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).CacheStoragePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CacheStorageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().compressionStreamEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CompressionStreamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CompressionStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().compressionStreamEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CompressionStreamEncoderPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_CompressionStreamEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().compressionStreamEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).DecompressionStreamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DecompressionStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().compressionStreamEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).DecompressionStreamDecoderPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_DecompressionStreamDecoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().contactPickerAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).ContactsManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ContactsManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cookieStoreAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).CookieChangeEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CookieChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cookieStoreAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).CookieStorePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CookieStoreConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cookieStoreAPIEnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().cookieStoreManagerEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).CookieStoreManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CookieStoreManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(WEB_AUTHN)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAuthenticationEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).CredentialPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CredentialConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUTHN)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAuthenticationEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).CredentialsContainerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CredentialsContainerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(ENCRYPTED_MEDIA)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().encryptedMediaAPIEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().hasBrokenEncryptedMediaAPISupportQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaKeyMessageEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaKeyMessageEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(ENCRYPTED_MEDIA)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().encryptedMediaAPIEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().hasBrokenEncryptedMediaAPISupportQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaKeySessionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaKeySessionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(ENCRYPTED_MEDIA)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().encryptedMediaAPIEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().hasBrokenEncryptedMediaAPISupportQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaKeyStatusMapPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaKeyStatusMapConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(ENCRYPTED_MEDIA)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().encryptedMediaAPIEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().hasBrokenEncryptedMediaAPISupportQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaKeySystemAccessPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaKeySystemAccessConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(ENCRYPTED_MEDIA)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().encryptedMediaAPIEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().hasBrokenEncryptedMediaAPISupportQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaKeysPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaKeysConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().legacyEncryptedMediaAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebKitMediaKeyMessageEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebKitMediaKeyMessageEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().legacyEncryptedMediaAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebKitMediaKeyNeededEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebKitMediaKeyNeededEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().legacyEncryptedMediaAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebKitMediaKeySessionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebKitMediaKeySessionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().legacyEncryptedMediaAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebKitMediaKeysPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebKitMediaKeysConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().directoryUploadEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().directoryUploadEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemDirectoryEntryPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemDirectoryEntryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().directoryUploadEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemDirectoryReaderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemDirectoryReaderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().directoryUploadEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemEntryPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemEntryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().directoryUploadEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemFileEntryPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemFileEntryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().fileSystemEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemDirectoryHandlePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemDirectoryHandleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().fileSystemEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemFileHandlePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemFileHandleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().fileSystemEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemHandlePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemHandleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().fileSystemWritableStreamEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).FileSystemWritableFileStreamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileSystemWritableFileStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(GAMEPAD)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().gamepadsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GamepadPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GamepadConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(GAMEPAD)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().gamepadsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GamepadButtonPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GamepadButtonConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(GAMEPAD)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().gamepadsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GamepadEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GamepadEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(GAMEPAD)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().gamepadVibrationActuatorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GamepadHapticActuatorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GamepadHapticActuatorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(GEOLOCATION)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().geolocationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GeolocationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GeolocationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(GEOLOCATION)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().geolocationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GeolocationCoordinatesPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GeolocationCoordinatesConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(GEOLOCATION)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().geolocationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GeolocationPositionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GeolocationPositionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(GEOLOCATION)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().geolocationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GeolocationPositionErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GeolocationPositionErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUTHN)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().digitalCredentialsEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).DigitalCredentialPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DigitalCredentialConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBCursorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBCursorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBCursorWithValuePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBCursorWithValueConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBDatabasePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBDatabaseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBFactoryPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBFactoryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBIndexPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBIndexConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBKeyRangePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBKeyRangeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBObjectStorePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBObjectStoreConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBOpenDBRequestPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBOpenDBRequestConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBRequestPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBRequestConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBTransactionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBTransactionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().indexedDBAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IDBVersionChangeEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IDBVersionChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaCapabilitiesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaCapabilitiesPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaCapabilitiesConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(MEDIA_RECORDER)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaRecorderEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BlobEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BlobEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_RECORDER)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaRecorderEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaRecorderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaRecorderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_RECORDER)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaRecorderEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaRecorderErrorEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaRecorderErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SESSION_COORDINATOR)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaSessionCoordinatorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaSessionCoordinatorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaSessionCoordinatorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SOURCE)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().managedMediaSourceEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BufferedChangeEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BufferedChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SOURCE)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().managedMediaSourceEnabled) && ManagedMediaSource::enabledForContext(*jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())))
        putDirectCustomAccessor(vm, builtinNames(vm).ManagedMediaSourcePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ManagedMediaSourceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SOURCE)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().managedMediaSourceEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ManagedSourceBufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ManagedSourceBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SOURCE)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaSourceEnabled) && MediaSource::enabledForContext(*jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaSourcePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaSourceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SOURCE_IN_WORKERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaSourceInWorkerEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaSourceHandlePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaSourceHandleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SOURCE)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaSourceEnabled) && SourceBuffer::enabledForContext(*jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())))
        putDirectCustomAccessor(vm, builtinNames(vm).SourceBufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SourceBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_SOURCE)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().mediaSourceEnabled) || (scriptExecutionContext && scriptExecutionContext->settingsValues().managedMediaSourceEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).SourceBufferListPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SourceBufferListConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_STREAM)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().imageCaptureEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().shouldDisableImageCaptureQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).ImageCapturePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ImageCaptureConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_STREAM)
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).InputDeviceInfoPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_InputDeviceInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_STREAM)
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaDevicesPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaDevicesConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCCertificatePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCCertificateConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCDTMFSenderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCDTMFSenderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCDTMFToneChangeEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCDTMFToneChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCDataChannelPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCDataChannelConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCDataChannelEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCDataChannelEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCDtlsTransportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCDtlsTransportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webRTCEncodedTransformEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCEncodedAudioFramePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCEncodedAudioFrameConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webRTCEncodedTransformEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCEncodedVideoFramePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCEncodedVideoFrameConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCErrorEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCIceCandidatePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCIceCandidateConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCIceTransportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCIceTransportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCPeerConnectionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCPeerConnectionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCPeerConnectionIceErrorEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCPeerConnectionIceErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCPeerConnectionIceEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCPeerConnectionIceEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCRtpReceiverPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCRtpReceiverConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webRTCSFrameTransformEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SFrameTransformPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SFrameTransformConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webRTCSFrameTransformEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SFrameTransformErrorEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SFrameTransformErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webRTCEncodedTransformEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCRtpScriptTransformPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCRtpScriptTransformConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCRtpSenderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCRtpSenderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCRtpTransceiverPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCRtpTransceiverConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCSctpTransportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCSctpTransportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled)) {
        putDirectCustomAccessor(vm, builtinNames(vm).RTCSessionDescriptionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCSessionDescriptionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
        putDirectCustomAccessor(vm, builtinNames(vm).RTCSessionDescriptionPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCSessionDescriptionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    }
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCStatsReportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCStatsReportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_RTC)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().peerConnectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RTCTrackEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RTCTrackEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MODEL_ELEMENT)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().modelElementEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).HTMLModelElementPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_HTMLModelElementConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(NOTIFICATIONS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().notificationsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NotificationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NotificationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(PAYMENT_REQUEST)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().paymentRequestEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).MerchantValidationEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MerchantValidationEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(PAYMENT_REQUEST)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().paymentRequestEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PaymentAddressPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PaymentAddressConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(PAYMENT_REQUEST)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().paymentRequestEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PaymentMethodChangeEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PaymentMethodChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(PAYMENT_REQUEST)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().paymentRequestEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PaymentRequestPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PaymentRequestConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(PAYMENT_REQUEST)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().paymentRequestEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PaymentRequestUpdateEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PaymentRequestUpdateEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(PAYMENT_REQUEST)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().paymentRequestEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PaymentResponsePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PaymentResponseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().permissionsAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PermissionStatusPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PermissionStatusConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().permissionsAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PermissionsPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PermissionsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(PICTURE_IN_PICTURE_API)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().pictureInPictureAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PictureInPictureEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PictureInPictureEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(PICTURE_IN_PICTURE_API)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().pictureInPictureAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PictureInPictureWindowPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PictureInPictureWindowConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().pushAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PushManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PushManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().pushAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PushSubscriptionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PushSubscriptionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().pushAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PushSubscriptionOptionsPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PushSubscriptionOptionsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(WIRELESS_PLAYBACK_TARGET)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().remotePlaybackEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).RemotePlaybackPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_RemotePlaybackConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().deprecationReportingEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).DeprecationReportBodyPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DeprecationReportBodyConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().screenWakeLockAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WakeLockPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WakeLockConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().screenWakeLockAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WakeLockSentinelPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WakeLockSentinelConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().speechRecognitionEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).webkitSpeechRecognitionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_webkitSpeechRecognitionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().speechRecognitionEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechRecognitionAlternativePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechRecognitionAlternativeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().speechRecognitionEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechRecognitionErrorEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechRecognitionErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().speechRecognitionEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechRecognitionEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechRecognitionEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().speechRecognitionEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechRecognitionResultPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechRecognitionResultConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().speechRecognitionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechRecognitionResultListPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechRecognitionResultListConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(SPEECH_SYNTHESIS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().speechSynthesisAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechSynthesisPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechSynthesisConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().speechSynthesisAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechSynthesisErrorEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechSynthesisErrorEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().speechSynthesisAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechSynthesisEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechSynthesisEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().speechSynthesisAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechSynthesisUtterancePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechSynthesisUtteranceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().speechSynthesisAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SpeechSynthesisVoicePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SpeechSynthesisVoiceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().storageAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).StorageManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_StorageManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().urlPatternAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).URLPatternPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_URLPatternConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webLocksAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).LockPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_LockConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webLocksAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).LockManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_LockManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AnalyserNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AnalyserNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioBufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioBufferSourceNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioBufferSourceNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioContextPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioDestinationNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioDestinationNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioListenerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioListenerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioParamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioParamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioParamMapPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioParamMapConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioProcessingEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioProcessingEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioScheduledSourceNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioScheduledSourceNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioWorkletPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioWorkletConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioWorkletNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioWorkletNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BaseAudioContextPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BaseAudioContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BiquadFilterNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BiquadFilterNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ChannelMergerNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ChannelMergerNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ChannelSplitterNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ChannelSplitterNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ConstantSourceNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ConstantSourceNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ConvolverNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ConvolverNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).DelayNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DelayNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).DynamicsCompressorNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DynamicsCompressorNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).GainNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GainNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IIRFilterNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IIRFilterNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaElementAudioSourceNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaElementAudioSourceNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaStreamAudioDestinationNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaStreamAudioDestinationNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaStreamAudioSourceNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaStreamAudioSourceNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).OfflineAudioCompletionEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_OfflineAudioCompletionEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).OfflineAudioContextPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_OfflineAudioContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).OscillatorNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_OscillatorNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PannerNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PannerNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PeriodicWavePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PeriodicWaveConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).StereoPannerNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_StereoPannerNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUDIO)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WaveShaperNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WaveShaperNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUTHN)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAuthenticationEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).AuthenticatorAssertionResponsePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AuthenticatorAssertionResponseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUTHN)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAuthenticationEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).AuthenticatorAttestationResponsePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AuthenticatorAttestationResponseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUTHN)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAuthenticationEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).AuthenticatorResponsePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AuthenticatorResponseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_AUTHN)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webAuthenticationEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).PublicKeyCredentialPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PublicKeyCredentialConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioDataPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioDataConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioDecoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioDecoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).AudioEncoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_AudioEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsAudioEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).EncodedAudioChunkPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_EncodedAudioChunkConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsVideoEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).EncodedVideoChunkPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_EncodedVideoChunkConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsVideoEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).VideoDecoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_VideoDecoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsVideoEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).VideoEncoderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_VideoEncoderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEB_CODECS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webCodecsVideoEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).VideoFramePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_VideoFrameConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if (DeprecatedGlobalSettings::webSQLEnabled())
        putDirectCustomAccessor(vm, builtinNames(vm).DatabasePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DatabaseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (DeprecatedGlobalSettings::webSQLEnabled())
        putDirectCustomAccessor(vm, builtinNames(vm).SQLErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SQLErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (DeprecatedGlobalSettings::webSQLEnabled())
        putDirectCustomAccessor(vm, builtinNames(vm).SQLResultSetPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SQLResultSetConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (DeprecatedGlobalSettings::webSQLEnabled())
        putDirectCustomAccessor(vm, builtinNames(vm).SQLResultSetRowListPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SQLResultSetRowListConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webSocketEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebSocketPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebSocketConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webTransportEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebTransportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webTransportEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportBidirectionalStreamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebTransportBidirectionalStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webTransportEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportDatagramDuplexStreamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebTransportDatagramDuplexStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webTransportEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebTransportErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webTransportEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportReceiveStreamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebTransportReceiveStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webTransportEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).WebTransportSendStreamPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebTransportSendStreamConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRBoundedReferenceSpacePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRBoundedReferenceSpaceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRFramePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRFrameConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_HANDS)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXRHandInputModuleEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRHandPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRHandConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRInputSourcePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRInputSourceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRInputSourceArrayPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRInputSourceArrayConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_HANDS)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXRHandInputModuleEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRJointPosePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRJointPoseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_HANDS)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXRHandInputModuleEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRJointSpacePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRJointSpaceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRPosePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRPoseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRReferenceSpacePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRReferenceSpaceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRRenderStatePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRRenderStateConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRRigidTransformPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRRigidTransformConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRSessionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRSessionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRSpacePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRSpaceConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRSystemPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRSystemConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRViewPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRViewConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRViewerPosePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRViewerPoseConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRViewportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRViewportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRWebGLLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRWebGLLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRCompositionLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRCompositionLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRCubeLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRCubeLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRCylinderLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRCylinderLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XREquirectLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XREquirectLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRWebGPUBindingsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRGPUBindingPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRGPUBindingConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRWebGPUBindingsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRGPUSubImagePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRGPUSubImageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRInputSourceEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRInputSourceEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRInputSourcesChangeEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRInputSourcesChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRLayerEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRLayerEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRProjectionLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRProjectionLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRQuadLayerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRQuadLayerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRReferenceSpaceEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRReferenceSpaceEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR)
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webXREnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).XRSessionEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRSessionEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRSubImagePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRSubImageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRWebGLBindingPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRWebGLBindingConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBXR_LAYERS)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webXRLayersAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XRWebGLSubImagePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XRWebGLSubImageConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webAnimationsCustomEffectsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CustomEffectPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CustomEffectConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().scrollDrivenAnimationsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ScrollTimelinePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ScrollTimelineConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().scrollDrivenAnimationsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ViewTimelinePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ViewTimelineConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).CryptoKeyPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CryptoKeyConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->isSecureContext()))
        putDirectCustomAccessor(vm, builtinNames(vm).SubtleCryptoPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SubtleCryptoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssAnchorPositioningEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSPositionTryDescriptorsPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSPositionTryDescriptorsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssAnchorPositioningEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSPositionTryRulePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSPositionTryRuleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().crossDocumentViewTransitionsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSViewTransitionRulePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSViewTransitionRuleConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSHSLPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSHSLConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSHWBPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSHWBConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSLCHPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSLCHConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSLabPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSLabConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSOKLCHPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSOKLCHConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSOKLabPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSOKLabConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSColorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSColorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSColorValuePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSColorValueConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().cssTypedOMColorEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CSSRGBPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CSSRGBConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().broadcastChannelEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).BroadcastChannelPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BroadcastChannelConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().caretPositionFromPointEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CaretPositionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CaretPositionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().commandAttributesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CommandEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CommandEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().dataTransferItemsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).DataTransferItemPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DataTransferItemConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().dataTransferItemsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).DataTransferItemListPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_DataTransferItemListConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().requestIdleCallbackEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).IdleDeadlinePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_IdleDeadlineConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mutationEventsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MutationEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MutationEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().observableEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ObservablePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ObservableConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().shouldDisablePointerEventsQuirk()))
        putDirectCustomAccessor(vm, builtinNames(vm).PointerEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PointerEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().observableEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SubscriberPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SubscriberConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().trustedTypesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedHTMLPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_TrustedHTMLConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().trustedTypesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedScriptPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_TrustedScriptConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().trustedTypesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedScriptURLPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_TrustedScriptURLConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().trustedTypesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedTypePolicyPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_TrustedTypePolicyConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().trustedTypesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).TrustedTypePolicyFactoryPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_TrustedTypePolicyFactoryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().viewTransitionsEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ViewTransitionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ViewTransitionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().viewTransitionTypesEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ViewTransitionTypeSetPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ViewTransitionTypeSetConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().fileReaderAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FileReaderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FileReaderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(ATTACHMENT_ELEMENT)
    if (DeprecatedGlobalSettings::attachmentElementEnabled())
        putDirectCustomAccessor(vm, builtinNames(vm).HTMLAttachmentElementPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_HTMLAttachmentElementConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().dataListElementEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).HTMLDataListElementPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_HTMLDataListElementConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().embedElementEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).HTMLEmbedElementPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_HTMLEmbedElementConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(ENCRYPTED_MEDIA)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().encryptedMediaAPIEnabled) && (!scriptExecutionContext || !downcast<Document>(scriptExecutionContext)->quirks().hasBrokenEncryptedMediaAPISupportQuirk())))
        putDirectCustomAccessor(vm, builtinNames(vm).MediaEncryptedEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaEncryptedEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(OFFSCREEN_CANVAS)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().offscreenCanvasEnabled) && OffscreenCanvas::enabledForContext(*jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())))
        putDirectCustomAccessor(vm, builtinNames(vm).OffscreenCanvasPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_OffscreenCanvasConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().legacyEncryptedMediaAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebKitMediaKeyErrorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebKitMediaKeyErrorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().webGPUEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).GPUCanvasContextPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_GPUCanvasContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(OFFSCREEN_CANVAS)
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().offscreenCanvasEnabled) && OffscreenCanvasRenderingContext2D::enabledForContext(*jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())))
        putDirectCustomAccessor(vm, builtinNames(vm).OffscreenCanvasRenderingContext2DPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_OffscreenCanvasRenderingContext2DConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGL2RenderingContextPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGL2RenderingContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLActiveInfoPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLActiveInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLBufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLBufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLContextEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLContextEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLFramebufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLFramebufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLProgramPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLProgramConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLQueryPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLQueryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLRenderbufferPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLRenderbufferConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLRenderingContextPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLRenderingContextConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLSamplerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLSamplerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLShaderPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLShaderConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLShaderPrecisionFormatPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLShaderPrecisionFormatConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLSyncPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLSyncConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLTexturePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLTextureConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLTransformFeedbackPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLTransformFeedbackConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLUniformLocationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLUniformLocationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(WEBGL)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().webGLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).WebGLVertexArrayObjectPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebGLVertexArrayObjectConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().closeWatcherEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).CloseWatcherPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_CloseWatcherConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(MATHML)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mathMLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MathMLElementPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MathMLElementConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MATHML)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().mathMLEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).MathMLMathElementPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_MathMLMathElementConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().eventTimingEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).EventCountsPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_EventCountsConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().scrollToTextFragmentFeatureDetectionEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).FragmentDirectivePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_FragmentDirectiveConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigateEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigateEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigationCurrentEntryChangeEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigationCurrentEntryChangeEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigationDestinationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigationDestinationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigationHistoryEntryPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigationHistoryEntryConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigationTransitionPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigationTransitionConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().navigatorUserAgentDataJavaScriptAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigatorUADataPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigatorUADataConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().eventTimingEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).PerformanceEventTimingPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_PerformanceEventTimingConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().screenOrientationAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).ScreenOrientationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ScreenOrientationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().undoManagerAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).UndoItemPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_UndoItemConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().undoManagerAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).UndoManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_UndoManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().visualViewportAPIEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).VisualViewportPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_VisualViewportConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (worldForDOMObject(*this).nodeInfoEnabled())
        putDirectCustomAccessor(vm, builtinNames(vm).WebKitNodeInfoPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebKitNodeInfoConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (worldForDOMObject(*this).nodeInfoEnabled())
        putDirectCustomAccessor(vm, builtinNames(vm).WebKitSerializedNodePublicName(), CustomGetterSetter::create(vm, jsDOMWindow_WebKitSerializedNodeConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkerNavigationPreloadEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).NavigationPreloadManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_NavigationPreloadManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkersEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).ServiceWorkerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ServiceWorkerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkersEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).ServiceWorkerContainerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ServiceWorkerContainerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->isSecureContext()) && (scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkersEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).ServiceWorkerRegistrationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_ServiceWorkerRegistrationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkersEnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().backgroundFetchAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchManagerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BackgroundFetchManagerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkersEnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().backgroundFetchAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchRecordPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BackgroundFetchRecordConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkersEnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().backgroundFetchAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchRegistrationPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BackgroundFetchRegistrationConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if (((scriptExecutionContext && scriptExecutionContext->settingsValues().serviceWorkersEnabled) && (scriptExecutionContext && scriptExecutionContext->settingsValues().backgroundFetchAPIEnabled)))
        putDirectCustomAccessor(vm, builtinNames(vm).BackgroundFetchUpdateUIEventPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_BackgroundFetchUpdateUIEventConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().sharedWorkerEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).SharedWorkerPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_SharedWorkerConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#if ENABLE(XSLT)
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().xsltEnabled))
        putDirectCustomAccessor(vm, builtinNames(vm).XSLTProcessorPublicName(), CustomGetterSetter::create(vm, jsDOMWindow_XSLTProcessorConstructor, nullptr), attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::DontEnum)));
#endif
#if ENABLE(MEDIA_STREAM)
    putDirectCustomAccessor(vm, builtinNames(vm).MediaStreamPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaStreamConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
#endif
#if ENABLE(MEDIA_STREAM)
    putDirectCustomAccessor(vm, builtinNames(vm).MediaStreamTrackPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_MediaStreamTrackConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
#endif
    putDirectCustomAccessor(vm, builtinNames(vm).ReadableByteStreamControllerPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_ReadableByteStreamControllerConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).ReadableStreamPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_ReadableStreamConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).ReadableStreamBYOBReaderPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_ReadableStreamBYOBReaderConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).ReadableStreamBYOBRequestPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_ReadableStreamBYOBRequestConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).ReadableStreamDefaultControllerPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_ReadableStreamDefaultControllerConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).ReadableStreamDefaultReaderPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_ReadableStreamDefaultReaderConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).TransformStreamPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_TransformStreamConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).TransformStreamDefaultControllerPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_TransformStreamDefaultControllerConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).WritableStreamPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_WritableStreamConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).WritableStreamDefaultControllerPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_WritableStreamDefaultControllerConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).WritableStreamDefaultWriterPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_WritableStreamDefaultWriterConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).AbortSignalPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_AbortSignalConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).TextDecoderStreamDecoderPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_TextDecoderStreamDecoderConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    putDirectCustomAccessor(vm, builtinNames(vm).TextEncoderStreamEncoderPrivateName(), CustomGetterSetter::create(vm, jsDOMWindow_TextEncoderStreamEncoderConstructor, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));
    if (worldForDOMObject(*this).isUser())
        putDirectNativeFunction(vm, this, builtinNames(vm).getMatchedCSSRulesPublicName(), 0, jsDOMWindowInstanceFunction_getMatchedCSSRules, ImplementationVisibility::Public, NoIntrinsic, attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::Function)));
    if (worldForDOMObject(*this).shadowRootIsAlwaysOpen())
        putDirectNativeFunction(vm, this, builtinNames(vm).collectMatchingElementsInFlatTreePublicName(), 2, jsDOMWindowInstanceFunction_collectMatchingElementsInFlatTree, ImplementationVisibility::Public, NoIntrinsic, attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::Function)));
    if (worldForDOMObject(*this).shadowRootIsAlwaysOpen())
        putDirectNativeFunction(vm, this, builtinNames(vm).matchingElementInFlatTreePublicName(), 2, jsDOMWindowInstanceFunction_matchingElementInFlatTree, ImplementationVisibility::Public, NoIntrinsic, attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::Function)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().requestIdleCallbackEnabled))
        putDirectNativeFunction(vm, this, builtinNames(vm).requestIdleCallbackPublicName(), 1, jsDOMWindowInstanceFunction_requestIdleCallback, ImplementationVisibility::Public, NoIntrinsic, attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::Function)));
    if ((scriptExecutionContext && scriptExecutionContext->settingsValues().requestIdleCallbackEnabled))
        putDirectNativeFunction(vm, this, builtinNames(vm).cancelIdleCallbackPublicName(), 1, jsDOMWindowInstanceFunction_cancelIdleCallback, ImplementationVisibility::Public, NoIntrinsic, attributesForStructure(static_cast<unsigned>(JSC::PropertyAttribute::Function)));
}

JSValue JSDOMWindow::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMWindowDOMConstructor, DOMConstructorID::DOMWindow>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindowConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSDOMWindowPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSDOMWindow::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsDOMWindow_closedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.closed())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_closed, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_closedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_locationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Location>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.location())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_location, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_locationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_locationSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto id = Identifier::fromString(vm, "location"_s);
    auto valueToForwardTo = thisObject.get(&lexicalGlobalObject, id);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!valueToForwardTo.isObject()) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return false;
    }
    auto forwardId = Identifier::fromString(vm, "href"_s);
    PutPropertySlot slot(valueToForwardTo, false);
    asObject(valueToForwardTo)->methodTable()->put(asObject(valueToForwardTo), &lexicalGlobalObject, forwardId, value, slot);
    RETURN_IF_EXCEPTION(throwScope, false);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_location, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_locationSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_windowGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return thisObject.window(lexicalGlobalObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_window, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_windowGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_selfGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return thisObject.self(lexicalGlobalObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_self, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_selfGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_selfSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_self, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_selfSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_openerGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<WindowProxy>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.opener())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_opener, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_openerGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_openerSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    thisObject.setOpener(lexicalGlobalObject, value);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_opener, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_openerSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_framesGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return thisObject.frames(lexicalGlobalObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_frames, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_framesGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_framesSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_frames, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_framesSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_lengthGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.length())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_length, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_lengthGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_lengthSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_length, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_lengthSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_topGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<WindowProxy>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.top())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_top, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_topGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_parentGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<WindowProxy>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.parent())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_parent, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_parentGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_parentSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_parent, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_parentSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_documentGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Document>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.document())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_document, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_documentGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_nameGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLAtomStringAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.name())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_name, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_nameGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_nameSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLAtomStringAdaptor<IDLDOMString>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setName(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_name, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_nameSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_historyGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<History>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.history())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_history, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_historyGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_navigationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Navigation>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.navigation())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_navigation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_navigationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_customElementsGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<CustomElementRegistry>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.ensureCustomElementRegistry())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_customElements, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_customElementsGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_locationbarGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<BarProp>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.locationbar())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_locationbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_locationbarGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_locationbarSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_locationbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_locationbarSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_menubarGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<BarProp>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.menubar())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_menubar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_menubarGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_menubarSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_menubar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_menubarSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_personalbarGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<BarProp>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.personalbar())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_personalbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_personalbarGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_personalbarSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_personalbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_personalbarSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_scrollbarsGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<BarProp>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.scrollbars())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_scrollbars, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_scrollbarsGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_scrollbarsSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_scrollbars, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_scrollbarsSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_statusbarGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<BarProp>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.statusbar())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_statusbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_statusbarGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_statusbarSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_statusbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_statusbarSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_toolbarGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<BarProp>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.toolbar())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_toolbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_toolbarGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_toolbarSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_toolbar, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_toolbarSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_statusGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.status())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_status, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_statusGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_statusSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLDOMString>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setStatus(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_status, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_statusSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_frameElementGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<Element>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, BindingSecurity::checkSecurityForNode(lexicalGlobalObject, impl.frameElement()))));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_frameElement, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_frameElementGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_navigatorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Navigator>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.navigator())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_navigator, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_navigatorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_clientInformationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Navigator>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.navigator())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_clientInformation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_clientInformationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_clientInformationSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_clientInformation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_clientInformationSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_eventGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return thisObject.event(lexicalGlobalObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_event, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_eventGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_eventSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_event, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_eventSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_offscreenBufferingGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.offscreenBuffering())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_offscreenBuffering, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_offscreenBufferingGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_offscreenBufferingSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_offscreenBuffering, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_offscreenBufferingSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#if ENABLE(IOS_GESTURE_EVENTS)
static inline JSValue jsDOMWindow_ongesturechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().gesturechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ongesturechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ongesturechangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline bool setJSDOMWindow_ongesturechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().gesturechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ongesturechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ongesturechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline JSValue jsDOMWindow_ongestureendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().gestureendEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ongestureend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ongestureendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline bool setJSDOMWindow_ongestureendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().gestureendEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ongestureend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ongestureendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline JSValue jsDOMWindow_ongesturestartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().gesturestartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ongesturestart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ongesturestartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline bool setJSDOMWindow_ongesturestartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().gesturestartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ongesturestart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ongesturestartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_cookieStoreGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<CookieStore>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.cookieStore())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_cookieStore, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_cookieStoreGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(DECLARATIVE_WEB_PUSH)
static inline JSValue jsDOMWindow_pushManagerGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<PushManager>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.pushManager())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_pushManager, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_pushManagerGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindow_speechSynthesisGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<SpeechSynthesis>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::LocalDOMWindowSpeechSynthesis::speechSynthesis(impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_speechSynthesis, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_speechSynthesisGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_openDatabaseGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return thisObject.openDatabase(lexicalGlobalObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_openDatabase, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_openDatabaseGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_openDatabaseSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    thisObject.setOpenDatabase(lexicalGlobalObject, value);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_openDatabase, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_openDatabaseSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onabortGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().abortEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onabort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onabortGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onabortSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().abortEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onabort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onabortSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onauxclickGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().auxclickEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onauxclick, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onauxclickGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onauxclickSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().auxclickEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onauxclick, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onauxclickSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onbeforeinputGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().beforeinputEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onbeforeinput, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onbeforeinputGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onbeforeinputSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().beforeinputEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onbeforeinput, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onbeforeinputSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onbeforematchGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().beforematchEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onbeforematch, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onbeforematchGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onbeforematchSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().beforematchEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onbeforematch, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onbeforematchSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onbeforetoggleGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().beforetoggleEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onbeforetoggle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onbeforetoggleGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onbeforetoggleSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().beforetoggleEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onbeforetoggle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onbeforetoggleSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onblurGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().blurEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onblur, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onblurGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onblurSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().blurEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onblur, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onblurSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncancelGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().cancelEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncancelGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncancelSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().cancelEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncancelSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncanplayGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().canplayEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncanplay, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncanplayGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncanplaySetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().canplayEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncanplay, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncanplaySetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncanplaythroughGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().canplaythroughEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncanplaythrough, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncanplaythroughGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncanplaythroughSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().canplaythroughEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncanplaythrough, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncanplaythroughSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onchangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().changeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onchangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onchangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().changeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onclickGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().clickEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onclick, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onclickGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onclickSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().clickEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onclick, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onclickSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncloseGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().closeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onclose, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncloseGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncloseSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().closeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onclose, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncloseSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncommandGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().commandEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncommand, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncommandGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncommandSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().commandEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncommand, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncommandSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncontentvisibilityautostatechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().contentvisibilityautostatechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncontentvisibilityautostatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncontentvisibilityautostatechangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncontentvisibilityautostatechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().contentvisibilityautostatechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncontentvisibilityautostatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncontentvisibilityautostatechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncontextmenuGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().contextmenuEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncontextmenu, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncontextmenuGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncontextmenuSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().contextmenuEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncontextmenu, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncontextmenuSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncopyGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().copyEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncopy, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncopyGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncopySetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().copyEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncopy, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncopySetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncuechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().cuechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncuechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncuechangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncuechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().cuechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncuechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncuechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oncutGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().cutEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oncut, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oncutGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oncutSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().cutEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oncut, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oncutSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondblclickGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dblclickEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondblclick, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondblclickGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondblclickSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dblclickEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondblclick, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondblclickSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondragGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dragEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondrag, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondragGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondragSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dragEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondrag, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondragSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondragendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dragendEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondragend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondragendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondragendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dragendEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondragend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondragendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondragenterGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dragenterEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondragenter, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondragenterGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondragenterSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dragenterEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondragenter, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondragenterSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondragleaveGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dragleaveEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondragleave, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondragleaveGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondragleaveSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dragleaveEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondragleave, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondragleaveSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondragoverGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dragoverEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondragover, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondragoverGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondragoverSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dragoverEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondragover, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondragoverSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondragstartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dragstartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondragstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondragstartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondragstartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dragstartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondragstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondragstartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondropGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().dropEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondrop, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondropGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondropSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().dropEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondrop, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondropSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ondurationchangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().durationchangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondurationchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondurationchangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ondurationchangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().durationchangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondurationchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondurationchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onemptiedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().emptiedEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onemptied, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onemptiedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onemptiedSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().emptiedEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onemptied, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onemptiedSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onendedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().endedEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onended, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onendedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onendedSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().endedEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onended, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onendedSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onerrorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().errorEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onerrorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onerrorSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSErrorHandler>(thisObject.protectedWrapped(), eventNames().errorEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onerrorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onfocusGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().focusEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onfocus, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onfocusGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onfocusSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().focusEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onfocus, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onfocusSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onformdataGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().formdataEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onformdata, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onformdataGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onformdataSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().formdataEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onformdata, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onformdataSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oninputGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().inputEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oninput, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oninputGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oninputSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().inputEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oninput, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oninputSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_oninvalidGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().invalidEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_oninvalid, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_oninvalidGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_oninvalidSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().invalidEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_oninvalid, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_oninvalidSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onkeydownGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().keydownEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onkeydown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onkeydownGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onkeydownSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().keydownEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onkeydown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onkeydownSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onkeypressGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().keypressEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onkeypress, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onkeypressGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onkeypressSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().keypressEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onkeypress, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onkeypressSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onkeyupGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().keyupEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onkeyup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onkeyupGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onkeyupSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().keyupEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onkeyup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onkeyupSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onloadGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().loadEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onload, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onloadGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onloadSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().loadEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onload, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onloadSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onloadeddataGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().loadeddataEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onloadeddata, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onloadeddataGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onloadeddataSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().loadeddataEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onloadeddata, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onloadeddataSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onloadedmetadataGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().loadedmetadataEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onloadedmetadata, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onloadedmetadataGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onloadedmetadataSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().loadedmetadataEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onloadedmetadata, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onloadedmetadataSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onloadstartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().loadstartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onloadstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onloadstartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onloadstartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().loadstartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onloadstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onloadstartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmousedownGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mousedownEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmousedown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmousedownGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmousedownSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mousedownEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmousedown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmousedownSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmouseenterGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mouseenterEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmouseenter, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmouseenterGetter, CastedThisErrorBehavior::ReturnEarly>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmouseenterSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mouseenterEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmouseenter, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmouseenterSetter, CastedThisErrorBehavior::ReturnEarly>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmouseleaveGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mouseleaveEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmouseleave, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmouseleaveGetter, CastedThisErrorBehavior::ReturnEarly>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmouseleaveSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mouseleaveEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmouseleave, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmouseleaveSetter, CastedThisErrorBehavior::ReturnEarly>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmousemoveGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mousemoveEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmousemove, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmousemoveGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmousemoveSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mousemoveEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmousemove, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmousemoveSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmouseoutGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mouseoutEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmouseout, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmouseoutGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmouseoutSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mouseoutEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmouseout, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmouseoutSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmouseoverGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mouseoverEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmouseover, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmouseoverGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmouseoverSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mouseoverEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmouseover, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmouseoverSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmouseupGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mouseupEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmouseup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmouseupGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmouseupSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mouseupEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmouseup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmouseupSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpasteGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pasteEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpaste, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpasteGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpasteSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pasteEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpaste, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpasteSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpauseGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pauseEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpause, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpauseGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpauseSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pauseEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpause, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpauseSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onplayGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().playEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onplay, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onplayGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onplaySetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().playEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onplay, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onplaySetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onplayingGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().playingEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onplaying, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onplayingGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onplayingSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().playingEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onplaying, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onplayingSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onprogressGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().progressEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onprogress, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onprogressGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onprogressSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().progressEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onprogress, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onprogressSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onratechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().ratechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onratechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onratechangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onratechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().ratechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onratechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onratechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onresetGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().resetEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onreset, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onresetGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onresetSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().resetEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onreset, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onresetSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onresizeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().resizeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onresize, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onresizeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onresizeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().resizeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onresize, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onresizeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onscrollGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().scrollEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onscroll, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onscrollGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onscrollSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().scrollEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onscroll, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onscrollSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onscrollendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().scrollendEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onscrollend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onscrollendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onscrollendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().scrollendEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onscrollend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onscrollendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onsecuritypolicyviolationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().securitypolicyviolationEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onsecuritypolicyviolation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onsecuritypolicyviolationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onsecuritypolicyviolationSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().securitypolicyviolationEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onsecuritypolicyviolation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onsecuritypolicyviolationSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onseekedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().seekedEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onseeked, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onseekedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onseekedSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().seekedEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onseeked, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onseekedSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onseekingGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().seekingEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onseeking, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onseekingGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onseekingSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().seekingEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onseeking, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onseekingSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onselectGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().selectEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onselect, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onselectGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onselectSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().selectEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onselect, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onselectSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onslotchangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().slotchangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onslotchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onslotchangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onslotchangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().slotchangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onslotchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onslotchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onstalledGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().stalledEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onstalled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onstalledGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onstalledSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().stalledEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onstalled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onstalledSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onsubmitGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().submitEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onsubmit, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onsubmitGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onsubmitSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().submitEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onsubmit, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onsubmitSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onsuspendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().suspendEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onsuspend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onsuspendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onsuspendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().suspendEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onsuspend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onsuspendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ontimeupdateGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().timeupdateEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontimeupdate, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontimeupdateGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ontimeupdateSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().timeupdateEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontimeupdate, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontimeupdateSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ontoggleGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().toggleEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontoggle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontoggleGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ontoggleSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().toggleEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontoggle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontoggleSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onvolumechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().volumechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onvolumechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onvolumechangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onvolumechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().volumechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onvolumechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onvolumechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwaitingGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().waitingEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwaiting, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwaitingGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwaitingSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().waitingEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwaiting, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwaitingSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwebkitanimationendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitAnimationEndEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkitanimationend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkitanimationendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkitanimationendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitAnimationEndEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkitanimationend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkitanimationendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwebkitanimationiterationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitAnimationIterationEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkitanimationiteration, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkitanimationiterationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkitanimationiterationSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitAnimationIterationEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkitanimationiteration, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkitanimationiterationSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwebkitanimationstartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitAnimationStartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkitanimationstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkitanimationstartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkitanimationstartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitAnimationStartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkitanimationstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkitanimationstartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwebkittransitionendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitTransitionEndEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkittransitionend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkittransitionendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkittransitionendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitTransitionEndEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkittransitionend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkittransitionendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwheelGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().wheelEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwheel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwheelGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwheelSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().wheelEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwheel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwheelSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmousewheelGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().mousewheelEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmousewheel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmousewheelGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmousewheelSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().mousewheelEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmousewheel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmousewheelSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_ontouchcancelGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().touchcancelEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontouchcancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontouchcancelGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindow_ontouchcancelSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().touchcancelEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontouchcancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontouchcancelSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_ontouchendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().touchendEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontouchend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontouchendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindow_ontouchendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().touchendEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontouchend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontouchendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_ontouchmoveGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().touchmoveEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontouchmove, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontouchmoveGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindow_ontouchmoveSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().touchmoveEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontouchmove, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontouchmoveSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_ontouchstartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().touchstartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontouchstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontouchstartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindow_ontouchstartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().touchstartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontouchstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontouchstartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_ontouchforcechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().touchforcechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontouchforcechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontouchforcechangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindow_ontouchforcechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().touchforcechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontouchforcechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontouchforcechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_onwebkitmouseforcechangedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitmouseforcechangedEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforcechanged, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkitmouseforcechangedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkitmouseforcechangedSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitmouseforcechangedEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforcechanged, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkitmouseforcechangedSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwebkitmouseforcedownGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitmouseforcedownEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforcedown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkitmouseforcedownGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkitmouseforcedownSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitmouseforcedownEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforcedown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkitmouseforcedownSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwebkitmouseforcewillbeginGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitmouseforcewillbeginEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforcewillbegin, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkitmouseforcewillbeginGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkitmouseforcewillbeginSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitmouseforcewillbeginEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforcewillbegin, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkitmouseforcewillbeginSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onwebkitmouseforceupGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitmouseforceupEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onwebkitmouseforceup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onwebkitmouseforceupGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onwebkitmouseforceupSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitmouseforceupEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onwebkitmouseforceup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onwebkitmouseforceupSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onanimationstartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().animationstartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onanimationstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onanimationstartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onanimationstartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().animationstartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onanimationstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onanimationstartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onanimationiterationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().animationiterationEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onanimationiteration, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onanimationiterationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onanimationiterationSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().animationiterationEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onanimationiteration, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onanimationiterationSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onanimationendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().animationendEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onanimationend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onanimationendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onanimationendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().animationendEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onanimationend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onanimationendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onanimationcancelGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().animationcancelEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onanimationcancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onanimationcancelGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onanimationcancelSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().animationcancelEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onanimationcancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onanimationcancelSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ontransitionrunGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().transitionrunEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontransitionrun, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontransitionrunGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ontransitionrunSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().transitionrunEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontransitionrun, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontransitionrunSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ontransitionstartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().transitionstartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontransitionstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontransitionstartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ontransitionstartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().transitionstartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontransitionstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontransitionstartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ontransitionendGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().transitionendEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontransitionend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontransitionendGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ontransitionendSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().transitionendEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontransitionend, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontransitionendSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ontransitioncancelGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().transitioncancelEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ontransitioncancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ontransitioncancelGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ontransitioncancelSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().transitioncancelEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ontransitioncancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ontransitioncancelSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ongotpointercaptureGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().gotpointercaptureEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ongotpointercapture, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ongotpointercaptureGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ongotpointercaptureSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().gotpointercaptureEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ongotpointercapture, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ongotpointercaptureSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onlostpointercaptureGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().lostpointercaptureEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onlostpointercapture, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onlostpointercaptureGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onlostpointercaptureSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().lostpointercaptureEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onlostpointercapture, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onlostpointercaptureSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointerdownGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointerdownEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointerdown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointerdownGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointerdownSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointerdownEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointerdown, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointerdownSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointermoveGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointermoveEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointermove, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointermoveGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointermoveSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointermoveEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointermove, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointermoveSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointerupGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointerupEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointerup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointerupGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointerupSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointerupEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointerup, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointerupSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointercancelGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointercancelEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointercancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointercancelGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointercancelSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointercancelEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointercancel, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointercancelSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointeroverGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointeroverEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointerover, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointeroverGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointeroverSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointeroverEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointerover, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointeroverSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointeroutGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointeroutEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointerout, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointeroutGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointeroutSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointeroutEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointerout, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointeroutSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointerenterGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointerenterEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointerenter, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointerenterGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointerenterSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointerenterEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointerenter, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointerenterSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpointerleaveGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pointerleaveEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpointerleave, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpointerleaveGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpointerleaveSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pointerleaveEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpointerleave, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpointerleaveSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onselectstartGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().selectstartEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onselectstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onselectstartGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onselectstartSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().selectstartEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onselectstart, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onselectstartSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onselectionchangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().selectionchangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onselectionchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onselectionchangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onselectionchangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().selectionchangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onselectionchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onselectionchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_screenGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Screen>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.screen())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_screen, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_screenGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_screenSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_screen, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_screenSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_innerWidthGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.innerWidth())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_innerWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_innerWidthGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_innerWidthSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_innerWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_innerWidthSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_innerHeightGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.innerHeight())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_innerHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_innerHeightGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_innerHeightSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_innerHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_innerHeightSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_scrollXGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDouble>(lexicalGlobalObject, throwScope, impl.scrollX())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_scrollX, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_scrollXGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_scrollXSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_scrollX, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_scrollXSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_pageXOffsetGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDouble>(lexicalGlobalObject, throwScope, impl.scrollX())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_pageXOffset, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_pageXOffsetGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_pageXOffsetSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_pageXOffset, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_pageXOffsetSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_scrollYGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDouble>(lexicalGlobalObject, throwScope, impl.scrollY())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_scrollY, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_scrollYGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_scrollYSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_scrollY, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_scrollYSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_pageYOffsetGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDouble>(lexicalGlobalObject, throwScope, impl.scrollY())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_pageYOffset, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_pageYOffsetGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_pageYOffsetSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_pageYOffset, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_pageYOffsetSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_screenXGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.screenX())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_screenX, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_screenXGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_screenXSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_screenX, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_screenXSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_screenLeftGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.screenLeft())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_screenLeft, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_screenLeftGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_screenLeftSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_screenLeft, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_screenLeftSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_screenYGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.screenY())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_screenY, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_screenYGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_screenYSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_screenY, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_screenYSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_screenTopGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.screenTop())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_screenTop, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_screenTopGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_screenTopSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_screenTop, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_screenTopSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_outerWidthGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.outerWidth())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_outerWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_outerWidthGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_outerWidthSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_outerWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_outerWidthSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_outerHeightGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.outerHeight())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_outerHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_outerHeightGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_outerHeightSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_outerHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_outerHeightSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_devicePixelRatioGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDouble>(lexicalGlobalObject, throwScope, impl.devicePixelRatio())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_devicePixelRatio, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_devicePixelRatioGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_devicePixelRatioSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_devicePixelRatio, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_devicePixelRatioSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_styleMediaGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<StyleMedia>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.styleMedia())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_styleMedia, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_styleMediaGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(ORIENTATION_EVENTS)
static inline JSValue jsDOMWindow_orientationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLShort>(lexicalGlobalObject, throwScope, impl.orientation())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_orientation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_orientationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ORIENTATION_EVENTS)
static inline JSValue jsDOMWindow_onorientationchangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().orientationchangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onorientationchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onorientationchangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ORIENTATION_EVENTS)
static inline bool setJSDOMWindow_onorientationchangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().orientationchangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onorientationchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onorientationchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindow_ondevicemotionGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().devicemotionEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondevicemotion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondevicemotionGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline bool setJSDOMWindow_ondevicemotionSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().devicemotionEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondevicemotion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondevicemotionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindow_ondeviceorientationGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().deviceorientationEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ondeviceorientation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ondeviceorientationGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline bool setJSDOMWindow_ondeviceorientationSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().deviceorientationEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ondeviceorientation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ondeviceorientationSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_visualViewportGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<VisualViewport>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.visualViewport())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_visualViewport, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_visualViewportGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_visualViewportSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_visualViewport, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_visualViewportSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onafterprintGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().afterprintEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onafterprint, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onafterprintGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onafterprintSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().afterprintEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onafterprint, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onafterprintSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onbeforeprintGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().beforeprintEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onbeforeprint, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onbeforeprintGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onbeforeprintSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().beforeprintEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onbeforeprint, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onbeforeprintSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onbeforeunloadGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().beforeunloadEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onbeforeunload, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onbeforeunloadGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onbeforeunloadSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().beforeunloadEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onbeforeunload, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onbeforeunloadSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onhashchangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().hashchangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onhashchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onhashchangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onhashchangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().hashchangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onhashchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onhashchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onlanguagechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().languagechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onlanguagechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onlanguagechangeGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onlanguagechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().languagechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onlanguagechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onlanguagechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmessageGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().messageEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmessage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmessageGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmessageSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().messageEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmessage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmessageSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onmessageerrorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().messageerrorEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onmessageerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onmessageerrorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onmessageerrorSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().messageerrorEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onmessageerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onmessageerrorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onofflineGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().offlineEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onoffline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onofflineGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onofflineSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().offlineEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onoffline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onofflineSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ononlineGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().onlineEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ononline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ononlineGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ononlineSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().onlineEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ononline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ononlineSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpagehideGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pagehideEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpagehide, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpagehideGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpagehideSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pagehideEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpagehide, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpagehideSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpagerevealGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pagerevealEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpagereveal, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpagerevealGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpagerevealSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pagerevealEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpagereveal, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpagerevealSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpageshowGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pageshowEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpageshow, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpageshowGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpageshowSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pageshowEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpageshow, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpageshowSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpageswapGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().pageswapEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpageswap, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpageswapGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpageswapSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().pageswapEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpageswap, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpageswapSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onpopstateGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().popstateEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onpopstate, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onpopstateGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onpopstateSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().popstateEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onpopstate, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onpopstateSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onrejectionhandledGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().rejectionhandledEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onrejectionhandled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onrejectionhandledGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onrejectionhandledSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().rejectionhandledEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onrejectionhandled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onrejectionhandledSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onstorageGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().storageEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onstorage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onstorageGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onstorageSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().storageEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onstorage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onstorageSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onunhandledrejectionGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().unhandledrejectionEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onunhandledrejection, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onunhandledrejectionGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onunhandledrejectionSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().unhandledrejectionEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onunhandledrejection, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onunhandledrejectionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_onunloadGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().unloadEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_onunload, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_onunloadGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_onunloadSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().unloadEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_onunload, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_onunloadSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ongamepadconnectedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().gamepadconnectedEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ongamepadconnected, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ongamepadconnectedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ongamepadconnectedSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().gamepadconnectedEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ongamepadconnected, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ongamepadconnectedSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_ongamepaddisconnectedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.protectedWrapped(), eventNames().gamepaddisconnectedEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ongamepaddisconnected, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ongamepaddisconnectedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_ongamepaddisconnectedSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    setWindowEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().gamepaddisconnectedEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_ongamepaddisconnected, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::set<setJSDOMWindow_ongamepaddisconnectedSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_localStorageGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Storage>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.localStorage())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_localStorage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_localStorageGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_originGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUSVString>(lexicalGlobalObject, throwScope, impl.origin())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_origin, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_originGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_originSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_origin, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_originSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_isSecureContextGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.isSecureContext())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_isSecureContext, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_isSecureContextGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_crossOriginIsolatedGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.crossOriginIsolated())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_crossOriginIsolated, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_crossOriginIsolatedGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_cachesGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    auto* context = jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<DOMCacheStorage>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::WindowOrWorkerGlobalScopeCaches::caches(*context, impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_caches, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_cachesGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_indexedDBGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<IDBFactory>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::WindowOrWorkerGlobalScopeIndexedDatabase::indexedDB(impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_indexedDB, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_indexedDBGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_webkitIndexedDBGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<IDBFactory>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::WindowOrWorkerGlobalScopeIndexedDatabase::indexedDB(impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_webkitIndexedDB, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_webkitIndexedDBGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_trustedTypesGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<TrustedTypePolicyFactory>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, WebCore::WindowOrWorkerGlobalScopeTrustedTypes::trustedTypes(impl))));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_trustedTypes, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_trustedTypesGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_cryptoGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Crypto>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.crypto())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_crypto, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_cryptoGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_performanceGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Performance>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.performance())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_performance, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_performanceGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMWindow_performanceSetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject, JSValue value, PropertyName propertyName)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return false;
    throwScope.release();
    bool shouldThrow = true;
    thisObject.createDataProperty(&lexicalGlobalObject, propertyName, value, shouldThrow);
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMWindow_performance, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::setPassingPropertyName<setJSDOMWindow_performanceSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMWindow_sessionStorageGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<Storage>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.sessionStorage())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_sessionStorage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_sessionStorageGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BarcodeDetectorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBarcodeDetector::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BarcodeDetectorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BarcodeDetectorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FaceDetectorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFaceDetector::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FaceDetectorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FaceDetectorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextDetectorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextDetector::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextDetectorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextDetectorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPU::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUAdapterConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUAdapter::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUAdapterConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUAdapterConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUAdapterInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUAdapterInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUAdapterInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUAdapterInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUBindGroupConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUBindGroup::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUBindGroupConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUBindGroupConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUBindGroupLayoutConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUBindGroupLayout::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUBindGroupLayoutConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUBindGroupLayoutConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUBufferUsageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUBufferUsage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUBufferUsageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUBufferUsageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUColorWriteConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUColorWrite::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUColorWriteConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUColorWriteConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUCommandBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUCommandBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUCommandBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUCommandBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUCommandEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUCommandEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUCommandEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUCommandEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUCompilationInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUCompilationInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUCompilationInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUCompilationInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUCompilationMessageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUCompilationMessage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUCompilationMessageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUCompilationMessageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUComputePassEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUComputePassEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUComputePassEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUComputePassEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUComputePipelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUComputePipeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUComputePipelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUComputePipelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUDeviceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUDevice::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUDeviceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUDeviceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUDeviceLostInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUDeviceLostInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUDeviceLostInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUDeviceLostInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUExternalTextureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUExternalTexture::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUExternalTextureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUExternalTextureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUInternalErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUInternalError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUInternalErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUInternalErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUMapModeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUMapMode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUMapModeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUMapModeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUOutOfMemoryErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUOutOfMemoryError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUOutOfMemoryErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUOutOfMemoryErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUPipelineErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUPipelineError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUPipelineErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUPipelineErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUPipelineLayoutConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUPipelineLayout::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUPipelineLayoutConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUPipelineLayoutConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUQuerySetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUQuerySet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUQuerySetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUQuerySetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUQueueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUQueue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUQueueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUQueueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPURenderBundleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPURenderBundle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPURenderBundleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPURenderBundleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPURenderBundleEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPURenderBundleEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPURenderBundleEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPURenderBundleEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPURenderPassEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPURenderPassEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPURenderPassEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPURenderPassEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPURenderPipelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPURenderPipeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPURenderPipelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPURenderPipelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUSamplerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUSampler::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUSamplerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUSamplerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUShaderModuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUShaderModule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUShaderModuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUShaderModuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUShaderStageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUShaderStage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUShaderStageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUShaderStageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUSupportedFeaturesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUSupportedFeatures::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUSupportedFeaturesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUSupportedFeaturesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUSupportedLimitsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUSupportedLimits::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUSupportedLimitsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUSupportedLimitsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUTextureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUTexture::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUTextureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUTextureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUTextureUsageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUTextureUsage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUTextureUsageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUTextureUsageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUTextureViewConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUTextureView::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUTextureViewConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUTextureViewConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUUncapturedErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUUncapturedErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUUncapturedErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUUncapturedErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUValidationErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUValidationError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUValidationErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUValidationErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WGSLLanguageFeaturesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWGSLLanguageFeatures::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WGSLLanguageFeaturesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WGSLLanguageFeaturesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WIRELESS_PLAYBACK_TARGET_AVAILABILITY_API)
static inline JSValue jsDOMWindow_WebKitPlaybackTargetAvailabilityEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitPlaybackTargetAvailabilityEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitPlaybackTargetAvailabilityEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitPlaybackTargetAvailabilityEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_ClipboardConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSClipboard::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ClipboardConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ClipboardConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ClipboardItemConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSClipboardItem::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ClipboardItemConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ClipboardItemConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(DOM_AUDIO_SESSION)
static inline JSValue jsDOMWindow_AudioSessionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMAudioSession::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioSessionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioSessionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_CacheConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMCache::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CacheConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CacheConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CacheStorageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMCacheStorage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CacheStorageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CacheStorageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CompressionStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCompressionStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CompressionStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CompressionStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CompressionStreamEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCompressionStreamEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CompressionStreamEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CompressionStreamEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DecompressionStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDecompressionStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DecompressionStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DecompressionStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DecompressionStreamDecoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDecompressionStreamDecoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DecompressionStreamDecoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DecompressionStreamDecoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ContactsManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSContactsManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ContactsManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ContactsManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CookieChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCookieChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CookieChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CookieChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CookieStoreConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCookieStore::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CookieStoreConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CookieStoreConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CookieStoreManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCookieStoreManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CookieStoreManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CookieStoreManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEB_AUTHN)
static inline JSValue jsDOMWindow_CredentialConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBasicCredential::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CredentialConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CredentialConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUTHN)
static inline JSValue jsDOMWindow_CredentialsContainerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCredentialsContainer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CredentialsContainerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CredentialsContainerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_MediaKeyMessageEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaKeyMessageEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaKeyMessageEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaKeyMessageEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_MediaKeySessionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaKeySession::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaKeySessionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaKeySessionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_MediaKeyStatusMapConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaKeyStatusMap::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaKeyStatusMapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaKeyStatusMapConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_MediaKeySystemAccessConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaKeySystemAccess::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaKeySystemAccessConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaKeySystemAccessConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_MediaKeysConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaKeys::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaKeysConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaKeysConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_WebKitMediaKeyMessageEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitMediaKeyMessageEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeyMessageEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitMediaKeyMessageEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_WebKitMediaKeyNeededEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitMediaKeyNeededEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeyNeededEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitMediaKeyNeededEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_WebKitMediaKeySessionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitMediaKeySession::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeySessionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitMediaKeySessionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_WebKitMediaKeysConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitMediaKeys::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeysConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitMediaKeysConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_FileSystemConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMFileSystem::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemDirectoryEntryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemDirectoryEntry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemDirectoryEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemDirectoryEntryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemDirectoryReaderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemDirectoryReader::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemDirectoryReaderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemDirectoryReaderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemEntryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemEntry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemEntryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemFileEntryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemFileEntry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemFileEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemFileEntryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HeadersConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFetchHeaders::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HeadersConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HeadersConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_RequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFetchRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ResponseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFetchResponse::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ResponseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemDirectoryHandleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemDirectoryHandle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemDirectoryHandleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemDirectoryHandleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemFileHandleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemFileHandle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemFileHandleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemFileHandleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemHandleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemHandle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemHandleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemHandleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileSystemWritableFileStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileSystemWritableFileStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileSystemWritableFileStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileSystemWritableFileStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(GAMEPAD)
static inline JSValue jsDOMWindow_GamepadConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGamepad::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GamepadConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GamepadConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(GAMEPAD)
static inline JSValue jsDOMWindow_GamepadButtonConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGamepadButton::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GamepadButtonConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GamepadButtonConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(GAMEPAD)
static inline JSValue jsDOMWindow_GamepadEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGamepadEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GamepadEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GamepadEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(GAMEPAD)
static inline JSValue jsDOMWindow_GamepadHapticActuatorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGamepadHapticActuator::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GamepadHapticActuatorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GamepadHapticActuatorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(GEOLOCATION)
static inline JSValue jsDOMWindow_GeolocationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGeolocation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GeolocationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GeolocationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(GEOLOCATION)
static inline JSValue jsDOMWindow_GeolocationCoordinatesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGeolocationCoordinates::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GeolocationCoordinatesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GeolocationCoordinatesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(GEOLOCATION)
static inline JSValue jsDOMWindow_GeolocationPositionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGeolocationPosition::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GeolocationPositionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GeolocationPositionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(GEOLOCATION)
static inline JSValue jsDOMWindow_GeolocationPositionErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGeolocationPositionError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GeolocationPositionErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GeolocationPositionErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_HighlightConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHighlight::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HighlightConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HighlightConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HighlightRegistryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHighlightRegistry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HighlightRegistryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HighlightRegistryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEB_AUTHN)
static inline JSValue jsDOMWindow_DigitalCredentialConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDigitalCredential::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DigitalCredentialConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DigitalCredentialConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_IDBCursorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBCursor::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBCursorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBCursorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBCursorWithValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBCursorWithValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBCursorWithValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBCursorWithValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBDatabaseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBDatabase::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBDatabaseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBDatabaseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBFactoryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBFactory::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBFactoryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBFactoryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBIndexConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBIndex::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBIndexConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBIndexConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBKeyRangeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBKeyRange::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBKeyRangeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBKeyRangeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBObjectStoreConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBObjectStore::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBObjectStoreConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBObjectStoreConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBOpenDBRequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBOpenDBRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBOpenDBRequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBOpenDBRequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBRequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBRequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBRequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBTransactionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBTransaction::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBTransactionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBTransactionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IDBVersionChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIDBVersionChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IDBVersionChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IDBVersionChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MediaCapabilitiesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaCapabilities::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaCapabilitiesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaCapabilitiesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(MEDIA_RECORDER)
static inline JSValue jsDOMWindow_BlobEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBlobEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BlobEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BlobEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_RECORDER)
static inline JSValue jsDOMWindow_MediaRecorderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaRecorder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaRecorderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaRecorderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_RECORDER)
static inline JSValue jsDOMWindow_MediaRecorderErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaRecorderErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaRecorderErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaRecorderErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SESSION)
static inline JSValue jsDOMWindow_MediaMetadataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaMetadata::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaMetadataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaMetadataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SESSION)
static inline JSValue jsDOMWindow_MediaSessionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaSession::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaSessionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaSessionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SESSION_COORDINATOR)
static inline JSValue jsDOMWindow_MediaSessionCoordinatorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaSessionCoordinator::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaSessionCoordinatorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaSessionCoordinatorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindow_BufferedChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBufferedChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BufferedChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BufferedChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindow_ManagedMediaSourceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSManagedMediaSource::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ManagedMediaSourceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ManagedMediaSourceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindow_ManagedSourceBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSManagedSourceBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ManagedSourceBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ManagedSourceBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindow_MediaSourceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaSource::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaSourceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaSourceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SOURCE_IN_WORKERS)
static inline JSValue jsDOMWindow_MediaSourceHandleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaSourceHandle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaSourceHandleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaSourceHandleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindow_SourceBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSourceBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SourceBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SourceBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindow_SourceBufferListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSourceBufferList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SourceBufferListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SourceBufferListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_VideoPlaybackQualityConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVideoPlaybackQuality::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoPlaybackQualityConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoPlaybackQualityConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_CanvasCaptureMediaStreamTrackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCanvasCaptureMediaStreamTrack::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CanvasCaptureMediaStreamTrackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CanvasCaptureMediaStreamTrackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_ImageCaptureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSImageCapture::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ImageCaptureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ImageCaptureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_InputDeviceInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSInputDeviceInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_InputDeviceInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_InputDeviceInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_MediaDeviceInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaDeviceInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaDeviceInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaDeviceInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_MediaDevicesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaDevices::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaDevicesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaDevicesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_MediaStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_MediaStreamTrackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaStreamTrack::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaStreamTrackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaStreamTrackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_MediaStreamTrackEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaStreamTrackEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaStreamTrackEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaStreamTrackEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_OverconstrainedErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOverconstrainedError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OverconstrainedErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OverconstrainedErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindow_OverconstrainedErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOverconstrainedErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OverconstrainedErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OverconstrainedErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCCertificateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCCertificate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCCertificateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCCertificateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCDTMFSenderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCDTMFSender::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCDTMFSenderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCDTMFSenderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCDTMFToneChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCDTMFToneChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCDTMFToneChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCDTMFToneChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCDataChannelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCDataChannel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCDataChannelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCDataChannelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCDataChannelEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCDataChannelEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCDataChannelEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCDataChannelEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCDtlsTransportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCDtlsTransport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCDtlsTransportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCDtlsTransportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCEncodedAudioFrameConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCEncodedAudioFrame::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCEncodedAudioFrameConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCEncodedAudioFrameConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCEncodedVideoFrameConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCEncodedVideoFrame::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCEncodedVideoFrameConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCEncodedVideoFrameConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCIceCandidateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCIceCandidate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCIceCandidateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCIceCandidateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCIceTransportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCIceTransport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCIceTransportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCIceTransportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCPeerConnectionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCPeerConnection::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCPeerConnectionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCPeerConnectionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCPeerConnectionIceErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCPeerConnectionIceErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCPeerConnectionIceErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCPeerConnectionIceErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCPeerConnectionIceEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCPeerConnectionIceEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCPeerConnectionIceEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCPeerConnectionIceEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCRtpReceiverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCRtpReceiver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCRtpReceiverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCRtpReceiverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_SFrameTransformConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCRtpSFrameTransform::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SFrameTransformConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SFrameTransformConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_SFrameTransformErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCRtpSFrameTransformErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SFrameTransformErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SFrameTransformErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCRtpScriptTransformConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCRtpScriptTransform::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCRtpScriptTransformConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCRtpScriptTransformConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCRtpSenderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCRtpSender::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCRtpSenderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCRtpSenderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCRtpTransceiverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCRtpTransceiver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCRtpTransceiverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCRtpTransceiverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCSctpTransportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCSctpTransport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCSctpTransportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCSctpTransportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCSessionDescriptionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCSessionDescription::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCSessionDescriptionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCSessionDescriptionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCStatsReportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCStatsReport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCStatsReportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCStatsReportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindow_RTCTrackEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRTCTrackEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RTCTrackEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RTCTrackEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MODEL_ELEMENT)
static inline JSValue jsDOMWindow_HTMLModelElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLModelElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLModelElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLModelElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(NOTIFICATIONS)
static inline JSValue jsDOMWindow_NotificationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNotification::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NotificationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NotificationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(PAYMENT_REQUEST)
static inline JSValue jsDOMWindow_MerchantValidationEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMerchantValidationEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MerchantValidationEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MerchantValidationEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(PAYMENT_REQUEST)
static inline JSValue jsDOMWindow_PaymentAddressConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPaymentAddress::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PaymentAddressConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PaymentAddressConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(PAYMENT_REQUEST)
static inline JSValue jsDOMWindow_PaymentMethodChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPaymentMethodChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PaymentMethodChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PaymentMethodChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(PAYMENT_REQUEST)
static inline JSValue jsDOMWindow_PaymentRequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPaymentRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PaymentRequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PaymentRequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(PAYMENT_REQUEST)
static inline JSValue jsDOMWindow_PaymentRequestUpdateEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPaymentRequestUpdateEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PaymentRequestUpdateEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PaymentRequestUpdateEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(PAYMENT_REQUEST)
static inline JSValue jsDOMWindow_PaymentResponseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPaymentResponse::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PaymentResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PaymentResponseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_PermissionStatusConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPermissionStatus::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PermissionStatusConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PermissionStatusConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PermissionsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPermissions::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PermissionsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PermissionsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(PICTURE_IN_PICTURE_API)
static inline JSValue jsDOMWindow_PictureInPictureEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPictureInPictureEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PictureInPictureEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PictureInPictureEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(PICTURE_IN_PICTURE_API)
static inline JSValue jsDOMWindow_PictureInPictureWindowConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPictureInPictureWindow::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PictureInPictureWindowConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PictureInPictureWindowConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_PushManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPushManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PushManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PushManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PushSubscriptionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPushSubscription::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PushSubscriptionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PushSubscriptionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PushSubscriptionOptionsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPushSubscriptionOptions::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PushSubscriptionOptionsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PushSubscriptionOptionsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WIRELESS_PLAYBACK_TARGET)
static inline JSValue jsDOMWindow_RemotePlaybackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRemotePlayback::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RemotePlaybackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RemotePlaybackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_DeprecationReportBodyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeprecationReportBody::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DeprecationReportBodyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DeprecationReportBodyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReportBodyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReportBody::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReportBodyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReportBodyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReportingObserverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReportingObserver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReportingObserverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReportingObserverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WakeLockConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWakeLock::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WakeLockConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WakeLockConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WakeLockSentinelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWakeLockSentinel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WakeLockSentinelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WakeLockSentinelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_webkitSpeechRecognitionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechRecognition::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_webkitSpeechRecognitionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_webkitSpeechRecognitionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SpeechRecognitionAlternativeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechRecognitionAlternative::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionAlternativeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechRecognitionAlternativeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SpeechRecognitionErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechRecognitionErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechRecognitionErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SpeechRecognitionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechRecognitionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechRecognitionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SpeechRecognitionResultConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechRecognitionResult::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionResultConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechRecognitionResultConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SpeechRecognitionResultListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechRecognitionResultList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechRecognitionResultListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechRecognitionResultListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindow_SpeechSynthesisConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechSynthesis::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechSynthesisConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindow_SpeechSynthesisErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechSynthesisErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechSynthesisErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindow_SpeechSynthesisEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechSynthesisEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechSynthesisEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindow_SpeechSynthesisUtteranceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechSynthesisUtterance::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisUtteranceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechSynthesisUtteranceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindow_SpeechSynthesisVoiceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSpeechSynthesisVoice::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SpeechSynthesisVoiceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SpeechSynthesisVoiceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_StorageManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStorageManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StorageManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StorageManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ByteLengthQueuingStrategyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSByteLengthQueuingStrategy::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ByteLengthQueuingStrategyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ByteLengthQueuingStrategyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CountQueuingStrategyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCountQueuingStrategy::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CountQueuingStrategyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CountQueuingStrategyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReadableByteStreamControllerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReadableByteStreamController::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReadableByteStreamControllerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReadableByteStreamControllerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReadableStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReadableStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReadableStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReadableStreamBYOBReaderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReadableStreamBYOBReader::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamBYOBReaderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReadableStreamBYOBReaderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReadableStreamBYOBRequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReadableStreamBYOBRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamBYOBRequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReadableStreamBYOBRequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReadableStreamDefaultControllerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReadableStreamDefaultController::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamDefaultControllerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReadableStreamDefaultControllerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ReadableStreamDefaultReaderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSReadableStreamDefaultReader::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ReadableStreamDefaultReaderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ReadableStreamDefaultReaderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TransformStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTransformStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TransformStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TransformStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TransformStreamDefaultControllerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTransformStreamDefaultController::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TransformStreamDefaultControllerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TransformStreamDefaultControllerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WritableStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWritableStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WritableStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WritableStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WritableStreamDefaultControllerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWritableStreamDefaultController::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WritableStreamDefaultControllerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WritableStreamDefaultControllerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WritableStreamDefaultWriterConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWritableStreamDefaultWriter::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WritableStreamDefaultWriterConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WritableStreamDefaultWriterConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_URLPatternConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSURLPattern::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_URLPatternConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_URLPatternConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_LockConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebLock::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_LockConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_LockConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_LockManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebLockManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_LockManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_LockManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AnalyserNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAnalyserNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AnalyserNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AnalyserNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioBufferSourceNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioBufferSourceNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioBufferSourceNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioBufferSourceNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioDestinationNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioDestinationNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioDestinationNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioDestinationNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioListenerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioListener::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioListenerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioListenerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioParamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioParam::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioParamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioParamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioParamMapConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioParamMap::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioParamMapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioParamMapConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioProcessingEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioProcessingEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioProcessingEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioProcessingEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioScheduledSourceNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioScheduledSourceNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioScheduledSourceNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioScheduledSourceNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioWorkletConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioWorklet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioWorkletConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioWorkletConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_AudioWorkletNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioWorkletNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioWorkletNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioWorkletNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_BaseAudioContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBaseAudioContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BaseAudioContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BaseAudioContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_BiquadFilterNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBiquadFilterNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BiquadFilterNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BiquadFilterNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_ChannelMergerNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSChannelMergerNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ChannelMergerNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ChannelMergerNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_ChannelSplitterNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSChannelSplitterNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ChannelSplitterNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ChannelSplitterNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_ConstantSourceNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSConstantSourceNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ConstantSourceNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ConstantSourceNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_ConvolverNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSConvolverNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ConvolverNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ConvolverNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_DelayNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDelayNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DelayNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DelayNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_DynamicsCompressorNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDynamicsCompressorNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DynamicsCompressorNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DynamicsCompressorNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_GainNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGainNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GainNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GainNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_IIRFilterNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIIRFilterNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IIRFilterNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IIRFilterNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_MediaElementAudioSourceNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaElementAudioSourceNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaElementAudioSourceNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaElementAudioSourceNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_MediaStreamAudioDestinationNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaStreamAudioDestinationNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaStreamAudioDestinationNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaStreamAudioDestinationNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_MediaStreamAudioSourceNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaStreamAudioSourceNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaStreamAudioSourceNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaStreamAudioSourceNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_OfflineAudioCompletionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOfflineAudioCompletionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OfflineAudioCompletionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OfflineAudioCompletionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_OfflineAudioContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOfflineAudioContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OfflineAudioContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OfflineAudioContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_OscillatorNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOscillatorNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OscillatorNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OscillatorNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_PannerNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPannerNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PannerNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PannerNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_PeriodicWaveConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPeriodicWave::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PeriodicWaveConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PeriodicWaveConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_ScriptProcessorNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSScriptProcessorNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ScriptProcessorNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ScriptProcessorNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_StereoPannerNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStereoPannerNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StereoPannerNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StereoPannerNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindow_WaveShaperNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWaveShaperNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WaveShaperNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WaveShaperNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUTHN)
static inline JSValue jsDOMWindow_AuthenticatorAssertionResponseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAuthenticatorAssertionResponse::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AuthenticatorAssertionResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AuthenticatorAssertionResponseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUTHN)
static inline JSValue jsDOMWindow_AuthenticatorAttestationResponseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAuthenticatorAttestationResponse::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AuthenticatorAttestationResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AuthenticatorAttestationResponseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUTHN)
static inline JSValue jsDOMWindow_AuthenticatorResponseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAuthenticatorResponse::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AuthenticatorResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AuthenticatorResponseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_AUTHN)
static inline JSValue jsDOMWindow_PublicKeyCredentialConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPublicKeyCredential::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PublicKeyCredentialConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PublicKeyCredentialConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_VideoColorSpaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVideoColorSpace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoColorSpaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoColorSpaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_AudioDataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsAudioData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioDataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioDataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_AudioDecoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsAudioDecoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioDecoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioDecoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_AudioEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsAudioEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_EncodedAudioChunkConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsEncodedAudioChunk::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_EncodedAudioChunkConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_EncodedAudioChunkConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_EncodedVideoChunkConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsEncodedVideoChunk::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_EncodedVideoChunkConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_EncodedVideoChunkConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_VideoDecoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsVideoDecoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoDecoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoDecoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_VideoEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsVideoEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEB_CODECS)
static inline JSValue jsDOMWindow_VideoFrameConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebCodecsVideoFrame::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoFrameConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoFrameConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_DatabaseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDatabase::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DatabaseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DatabaseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SQLErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSQLError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SQLErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SQLErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SQLResultSetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSQLResultSet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SQLResultSetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SQLResultSetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SQLResultSetRowListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSQLResultSetRowList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SQLResultSetRowListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SQLResultSetRowListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SQLTransactionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSQLTransaction::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SQLTransactionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SQLTransactionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CloseEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCloseEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CloseEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CloseEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebSocketConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebSocket::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebSocketConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebSocketConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebTransportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebTransport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebTransportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebTransportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebTransportBidirectionalStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebTransportBidirectionalStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebTransportBidirectionalStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebTransportBidirectionalStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebTransportDatagramDuplexStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebTransportDatagramDuplexStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebTransportDatagramDuplexStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebTransportDatagramDuplexStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebTransportErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebTransportError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebTransportErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebTransportErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebTransportReceiveStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebTransportReceiveStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebTransportReceiveStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebTransportReceiveStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebTransportSendStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebTransportSendStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebTransportSendStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebTransportSendStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRBoundedReferenceSpaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRBoundedReferenceSpace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRBoundedReferenceSpaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRBoundedReferenceSpaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRFrameConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRFrame::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRFrameConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRFrameConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_HANDS)
static inline JSValue jsDOMWindow_XRHandConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRHand::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRHandConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRHandConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRInputSourceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRInputSource::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRInputSourceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRInputSourceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRInputSourceArrayConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRInputSourceArray::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRInputSourceArrayConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRInputSourceArrayConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_HANDS)
static inline JSValue jsDOMWindow_XRJointPoseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRJointPose::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRJointPoseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRJointPoseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_HANDS)
static inline JSValue jsDOMWindow_XRJointSpaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRJointSpace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRJointSpaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRJointSpaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRPoseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRPose::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRPoseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRPoseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRReferenceSpaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRReferenceSpace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRReferenceSpaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRReferenceSpaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRRenderStateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRRenderState::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRRenderStateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRRenderStateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRRigidTransformConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRRigidTransform::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRRigidTransformConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRRigidTransformConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRSessionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRSession::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRSessionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRSessionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRSpaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRSpace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRSpaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRSpaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRSystemConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRSystem::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRSystemConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRSystemConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRViewConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRView::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRViewConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRViewConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRViewerPoseConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRViewerPose::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRViewerPoseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRViewerPoseConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRViewportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRViewport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRViewportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRViewportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRWebGLLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebXRWebGLLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRWebGLLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRWebGLLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRCompositionLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRCompositionLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRCompositionLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRCompositionLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRCubeLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRCubeLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRCubeLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRCubeLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRCylinderLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRCylinderLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRCylinderLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRCylinderLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XREquirectLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXREquirectLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XREquirectLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XREquirectLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRGPUBindingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRGPUBinding::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRGPUBindingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRGPUBindingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRGPUSubImageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRGPUSubImage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRGPUSubImageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRGPUSubImageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRInputSourceEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRInputSourceEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRInputSourceEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRInputSourceEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRInputSourcesChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRInputSourcesChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRInputSourcesChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRInputSourcesChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRLayerEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRLayerEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRLayerEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRLayerEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRProjectionLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRProjectionLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRProjectionLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRProjectionLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRQuadLayerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRQuadLayer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRQuadLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRQuadLayerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRReferenceSpaceEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRReferenceSpaceEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRReferenceSpaceEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRReferenceSpaceEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR)
static inline JSValue jsDOMWindow_XRSessionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRSessionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRSessionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRSessionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRSubImageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRSubImage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRSubImageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRSubImageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRWebGLBindingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRWebGLBinding::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRWebGLBindingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRWebGLBindingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_LAYERS)
static inline JSValue jsDOMWindow_XRWebGLSubImageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXRWebGLSubImage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XRWebGLSubImageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XRWebGLSubImageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_AnimationEffectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAnimationEffect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AnimationEffectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AnimationEffectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AnimationPlaybackEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAnimationPlaybackEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AnimationPlaybackEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AnimationPlaybackEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AnimationTimelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAnimationTimeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AnimationTimelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AnimationTimelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSAnimationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSAnimation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSAnimationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSAnimationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AnimationEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSAnimationEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AnimationEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AnimationEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSTransitionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSTransition::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSTransitionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSTransitionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TransitionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSTransitionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TransitionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TransitionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CustomEffectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCustomEffect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CustomEffectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CustomEffectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DocumentTimelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDocumentTimeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DocumentTimelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DocumentTimelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_KeyframeEffectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSKeyframeEffect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_KeyframeEffectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_KeyframeEffectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ScrollTimelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSScrollTimeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ScrollTimelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ScrollTimelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ViewTimelineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSViewTimeline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ViewTimelineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ViewTimelineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AnimationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebAnimation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AnimationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AnimationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CryptoKeyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCryptoKey::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CryptoKeyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CryptoKeyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SubtleCryptoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSubtleCrypto::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SubtleCryptoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SubtleCryptoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSConditionRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSConditionRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSConditionRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSConditionRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSContainerRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSContainerRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSContainerRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSContainerRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSCounterStyleRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSCounterStyleRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSCounterStyleRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSCounterStyleRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSFontFaceDescriptorsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSFontFaceDescriptors::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSFontFaceDescriptorsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSFontFaceDescriptorsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSFontFaceRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSFontFaceRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSFontFaceRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSFontFaceRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSFontFeatureValuesRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSFontFeatureValuesRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSFontFeatureValuesRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSFontFeatureValuesRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSFontPaletteValuesRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSFontPaletteValuesRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSFontPaletteValuesRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSFontPaletteValuesRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSGroupingRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSGroupingRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSGroupingRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSGroupingRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSImportRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSImportRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSImportRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSImportRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSKeyframeRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSKeyframeRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSKeyframeRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSKeyframeRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSKeyframesRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSKeyframesRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSKeyframesRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSKeyframesRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSLayerBlockRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSLayerBlockRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSLayerBlockRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSLayerBlockRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSLayerStatementRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSLayerStatementRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSLayerStatementRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSLayerStatementRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMediaRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMediaRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMediaRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMediaRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSNamespaceRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSNamespaceRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSNamespaceRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSNamespaceRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSNestedDeclarationsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSNestedDeclarations::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSNestedDeclarationsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSNestedDeclarationsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSPageDescriptorsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSPageDescriptors::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSPageDescriptorsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSPageDescriptorsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSPageRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSPageRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSPageRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSPageRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSPositionTryDescriptorsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSPositionTryDescriptors::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSPositionTryDescriptorsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSPositionTryDescriptorsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSPositionTryRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSPositionTryRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSPositionTryRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSPositionTryRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSPropertyRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSPropertyRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSPropertyRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSPropertyRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSRuleListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSRuleList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSRuleListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSRuleListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSScopeRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSScopeRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSScopeRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSScopeRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSStartingStyleRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSStartingStyleRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSStartingStyleRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSStartingStyleRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSStyleDeclarationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSStyleDeclaration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSStyleDeclarationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSStyleDeclarationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSStylePropertiesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSStyleProperties::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSStylePropertiesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSStylePropertiesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSStyleRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSStyleRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSStyleRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSStyleRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSStyleSheetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSStyleSheet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSStyleSheetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSStyleSheetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSSupportsRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSSupportsRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSSupportsRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSSupportsRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSViewTransitionRuleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSViewTransitionRule::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSViewTransitionRuleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSViewTransitionRuleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMCSSNamespace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMMatrixConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMMatrix::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMMatrixConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMMatrixConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebKitCSSMatrixConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMMatrix::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitCSSMatrixConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitCSSMatrixConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMMatrixReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMMatrixReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMMatrixReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMMatrixReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CounterConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeprecatedCSSOMCounter::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CounterConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CounterConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSPrimitiveValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeprecatedCSSOMPrimitiveValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSPrimitiveValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSPrimitiveValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_RGBColorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeprecatedCSSOMRGBColor::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RGBColorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RGBColorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_RectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeprecatedCSSOMRect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeprecatedCSSOMValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSValueListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeprecatedCSSOMValueList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSValueListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSValueListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FontFaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFontFace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FontFaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FontFaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FontFaceSetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFontFaceSet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FontFaceSetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FontFaceSetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MediaListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MediaQueryListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaQueryList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaQueryListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaQueryListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MediaQueryListEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaQueryListEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaQueryListEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaQueryListEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_StyleSheetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStyleSheet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StyleSheetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StyleSheetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_StyleSheetListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStyleSheetList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StyleSheetListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StyleSheetListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSKeywordValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSKeywordValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSKeywordValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSKeywordValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSNumericValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSNumericValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSNumericValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSNumericValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSVariableReferenceValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSOMVariableReferenceValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSVariableReferenceValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSVariableReferenceValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSImageValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSStyleImageValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSImageValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSImageValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSStyleValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSStyleValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSStyleValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSStyleValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSUnitValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSUnitValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSUnitValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSUnitValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSUnparsedValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSUnparsedValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSUnparsedValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSUnparsedValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_StylePropertyMapConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStylePropertyMap::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StylePropertyMapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StylePropertyMapConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_StylePropertyMapReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStylePropertyMapReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StylePropertyMapReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StylePropertyMapReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSHSLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSHSL::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSHSLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSHSLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSHWBConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSHWB::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSHWBConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSHWBConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSLCHConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSLCH::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSLCHConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSLCHConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSLabConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSLab::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSLabConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSLabConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSOKLCHConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSOKLCH::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSOKLCHConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSOKLCHConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSOKLabConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSOKLab::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSOKLabConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSOKLabConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSColorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSOMColor::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSColorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSColorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSColorValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSOMColorValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSColorValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSColorValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSRGBConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSRGB::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSRGBConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSRGBConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathClampConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathClamp::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathClampConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathClampConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathInvertConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathInvert::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathInvertConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathInvertConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathMaxConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathMax::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathMaxConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathMaxConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathMinConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathMin::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathMinConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathMinConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathNegateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathNegate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathNegateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathNegateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathProductConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathProduct::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathProductConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathProductConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathSumConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathSum::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathSumConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathSumConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMathValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMathValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMathValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMathValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSNumericArrayConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSNumericArray::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSNumericArrayConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSNumericArrayConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSMatrixComponentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSMatrixComponent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSMatrixComponentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSMatrixComponentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSPerspectiveConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSPerspective::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSPerspectiveConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSPerspectiveConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSRotateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSRotate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSRotateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSRotateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSScaleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSScale::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSScaleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSScaleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSSkewConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSSkew::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSSkewConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSSkewConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSSkewXConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSSkewX::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSSkewXConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSSkewXConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSSkewYConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSSkewY::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSSkewYConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSSkewYConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSTransformComponentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSTransformComponent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSTransformComponentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSTransformComponentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSTransformValueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSTransformValue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSTransformValueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSTransformValueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSSTranslateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSSTranslate::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSSTranslateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSSTranslateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AbortControllerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAbortController::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AbortControllerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AbortControllerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AbortSignalConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAbortSignal::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AbortSignalConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AbortSignalConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AbstractRangeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAbstractRange::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AbstractRangeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AbstractRangeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_AttrConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAttr::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AttrConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AttrConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BeforeUnloadEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBeforeUnloadEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BeforeUnloadEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BeforeUnloadEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BroadcastChannelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBroadcastChannel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BroadcastChannelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BroadcastChannelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CDATASectionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCDATASection::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CDATASectionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CDATASectionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CaretPositionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCaretPosition::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CaretPositionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CaretPositionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CharacterDataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCharacterData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CharacterDataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CharacterDataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ClipboardEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSClipboardEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ClipboardEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ClipboardEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CommandEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCommandEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CommandEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CommandEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CommentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSComment::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CommentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CommentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CompositionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCompositionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CompositionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CompositionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ContentVisibilityAutoStateChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSContentVisibilityAutoStateChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ContentVisibilityAutoStateChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ContentVisibilityAutoStateChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CustomElementRegistryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCustomElementRegistry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CustomElementRegistryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CustomElementRegistryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CustomEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCustomEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CustomEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CustomEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CustomStateSetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCustomStateSet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CustomStateSetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CustomStateSetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMExceptionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMException::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMExceptionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMExceptionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMImplementationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMImplementation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMImplementationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMImplementationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMPointConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMPoint::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMPointConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMPointConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMPointReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMPointReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMPointReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMPointReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMQuadConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMQuad::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMQuadConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMQuadConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMRectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMRect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMRectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMRectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMRectListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMRectList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMRectListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMRectListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMRectReadOnlyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMRectReadOnly::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMRectReadOnlyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMRectReadOnlyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMStringListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMStringList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMStringListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMStringListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMStringMapConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMStringMap::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMStringMapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMStringMapConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DataTransferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDataTransfer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DataTransferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DataTransferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DataTransferItemConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDataTransferItem::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DataTransferItemConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DataTransferItemConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DataTransferItemListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDataTransferItemList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DataTransferItemListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DataTransferItemListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindow_DeviceMotionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeviceMotionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DeviceMotionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DeviceMotionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindow_DeviceOrientationEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDeviceOrientationEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DeviceOrientationEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DeviceOrientationEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_DocumentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDocument::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DocumentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DocumentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DocumentFragmentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDocumentFragment::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DocumentFragmentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DocumentFragmentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DocumentTypeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDocumentType::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DocumentTypeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DocumentTypeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DragEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDragEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DragEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DragEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ElementInternalsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSElementInternals::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ElementInternalsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ElementInternalsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ErrorEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSErrorEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ErrorEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ErrorEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_EventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_EventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_EventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_EventTargetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSEventTarget::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_EventTargetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_EventTargetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FocusEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFocusEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FocusEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FocusEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FormDataEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFormDataEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FormDataEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FormDataEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HashChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHashChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HashChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HashChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IdleDeadlineConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIdleDeadline::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IdleDeadlineConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IdleDeadlineConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_InputEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSInputEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_InputEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_InputEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_KeyboardEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSKeyboardEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_KeyboardEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_KeyboardEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MessageChannelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMessageChannel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MessageChannelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MessageChannelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MessageEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMessageEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MessageEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MessageEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MessagePortConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMessagePort::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MessagePortConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MessagePortConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MouseEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMouseEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MouseEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MouseEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MutationEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMutationEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MutationEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MutationEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MutationObserverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMutationObserver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MutationObserverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MutationObserverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebKitMutationObserverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMutationObserver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitMutationObserverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitMutationObserverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MutationRecordConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMutationRecord::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MutationRecordConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MutationRecordConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NamedNodeMapConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNamedNodeMap::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NamedNodeMapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NamedNodeMapConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NodeFilterConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNodeFilter::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NodeFilterConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NodeFilterConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NodeIteratorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNodeIterator::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NodeIteratorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NodeIteratorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NodeListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNodeList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NodeListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NodeListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ObservableConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSObservable::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ObservableConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ObservableConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_OverflowEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOverflowEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OverflowEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OverflowEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PageRevealEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPageRevealEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PageRevealEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PageRevealEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PageSwapEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPageSwapEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PageSwapEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PageSwapEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PageTransitionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPageTransitionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PageTransitionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PageTransitionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PointerEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPointerEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PointerEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PointerEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PopStateEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPopStateEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PopStateEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PopStateEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ProcessingInstructionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSProcessingInstruction::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ProcessingInstructionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ProcessingInstructionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ProgressEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSProgressEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ProgressEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ProgressEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PromiseRejectionEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPromiseRejectionEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PromiseRejectionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PromiseRejectionEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_RangeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRange::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RangeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RangeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SecurityPolicyViolationEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSecurityPolicyViolationEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SecurityPolicyViolationEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SecurityPolicyViolationEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ShadowRootConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSShadowRoot::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ShadowRootConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ShadowRootConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_StaticRangeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStaticRange::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StaticRangeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StaticRangeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SubscriberConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSubscriber::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SubscriberConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SubscriberConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSText::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextDecoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextDecoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextDecoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextDecoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextDecoderStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextDecoderStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextDecoderStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextDecoderStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextDecoderStreamDecoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextDecoderStreamDecoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextDecoderStreamDecoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextDecoderStreamDecoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextEncoderStreamConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextEncoderStream::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextEncoderStreamConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextEncoderStreamConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextEncoderStreamEncoderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextEncoderStreamEncoder::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextEncoderStreamEncoderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextEncoderStreamEncoderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ToggleEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSToggleEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ToggleEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ToggleEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_TouchConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTouch::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TouchConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TouchConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_TouchEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTouchEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TouchEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TouchEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindow_TouchListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTouchList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TouchListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TouchListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_TreeWalkerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTreeWalker::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TreeWalkerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TreeWalkerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TrustedHTMLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTrustedHTML::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TrustedHTMLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TrustedHTMLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TrustedScriptConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTrustedScript::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TrustedScriptConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TrustedScriptConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TrustedScriptURLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTrustedScriptURL::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TrustedScriptURLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TrustedScriptURLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TrustedTypePolicyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTrustedTypePolicy::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TrustedTypePolicyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TrustedTypePolicyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TrustedTypePolicyFactoryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTrustedTypePolicyFactory::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TrustedTypePolicyFactoryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TrustedTypePolicyFactoryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_UIEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSUIEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_UIEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_UIEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ViewTransitionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSViewTransition::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ViewTransitionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ViewTransitionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ViewTransitionTypeSetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSViewTransitionTypeSet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ViewTransitionTypeSetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ViewTransitionTypeSetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WheelEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWheelEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WheelEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WheelEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XMLDocumentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXMLDocument::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XMLDocumentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XMLDocumentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BlobConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBlob::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BlobConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BlobConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFile::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FileReaderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFileReader::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FileReaderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FileReaderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FormDataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMFormData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FormDataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FormDataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMTokenListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMTokenList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMTokenListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMTokenListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_URLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMURL::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_URLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_URLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_webkitURLConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMURL::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_webkitURLConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_webkitURLConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLAllCollectionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLAllCollection::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLAllCollectionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLAllCollectionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLAnchorElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLAnchorElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLAnchorElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLAnchorElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLAreaElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLAreaElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLAreaElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLAreaElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(ATTACHMENT_ELEMENT)
static inline JSValue jsDOMWindow_HTMLAttachmentElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLAttachmentElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLAttachmentElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLAttachmentElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_HTMLAudioElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLAudioElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLAudioElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLAudioElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_AudioConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLAudioElement::getLegacyFactoryFunction(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_HTMLBRElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLBRElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLBRElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLBRElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLBaseElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLBaseElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLBaseElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLBaseElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLBodyElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLBodyElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLBodyElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLBodyElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLButtonElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLButtonElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLButtonElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLButtonElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLCanvasElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLCanvasElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLCanvasElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLCanvasElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLCollectionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLCollection::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLCollectionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLCollectionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDListElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDListElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDListElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDListElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDataElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDataElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDataElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDataElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDataListElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDataListElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDataListElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDataListElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDetailsElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDetailsElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDetailsElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDetailsElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDialogElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDialogElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDialogElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDialogElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDirectoryElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDirectoryElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDirectoryElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDirectoryElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDivElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDivElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDivElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDivElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLDocumentConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLDocument::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLDocumentConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLDocumentConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLEmbedElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLEmbedElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLEmbedElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLEmbedElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLFieldSetElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLFieldSetElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLFieldSetElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLFieldSetElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLFontElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLFontElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLFontElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLFontElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLFormControlsCollectionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLFormControlsCollection::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLFormControlsCollectionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLFormControlsCollectionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLFormElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLFormElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLFormElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLFormElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLFrameElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLFrameElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLFrameElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLFrameElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLFrameSetElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLFrameSetElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLFrameSetElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLFrameSetElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLHRElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLHRElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLHRElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLHRElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLHeadElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLHeadElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLHeadElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLHeadElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLHeadingElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLHeadingElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLHeadingElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLHeadingElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLHtmlElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLHtmlElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLHtmlElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLHtmlElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLIFrameElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLIFrameElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLIFrameElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLIFrameElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLImageElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLImageElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLImageElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLImageElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ImageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLImageElement::getLegacyFactoryFunction(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ImageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ImageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLInputElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLInputElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLInputElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLInputElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLLIElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLLIElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLLIElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLLIElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLLabelElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLLabelElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLLabelElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLLabelElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLLegendElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLLegendElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLLegendElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLLegendElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLLinkElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLLinkElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLLinkElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLLinkElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLMapElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLMapElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLMapElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLMapElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLMarqueeElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLMarqueeElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLMarqueeElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLMarqueeElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_HTMLMediaElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLMediaElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLMediaElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLMediaElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_HTMLMenuElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLMenuElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLMenuElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLMenuElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLMetaElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLMetaElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLMetaElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLMetaElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLMeterElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLMeterElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLMeterElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLMeterElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLModElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLModElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLModElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLModElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLOListElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLOListElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLOListElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLOListElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLObjectElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLObjectElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLObjectElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLObjectElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLOptGroupElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLOptGroupElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLOptGroupElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLOptGroupElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLOptionElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLOptionElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLOptionElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLOptionElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_OptionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLOptionElement::getLegacyFactoryFunction(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OptionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OptionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLOptionsCollectionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLOptionsCollection::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLOptionsCollectionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLOptionsCollectionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLOutputElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLOutputElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLOutputElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLOutputElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLParagraphElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLParagraphElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLParagraphElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLParagraphElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLParamElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLParamElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLParamElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLParamElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLPictureElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLPictureElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLPictureElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLPictureElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLPreElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLPreElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLPreElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLPreElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLProgressElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLProgressElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLProgressElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLProgressElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLQuoteElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLQuoteElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLQuoteElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLQuoteElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLScriptElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLScriptElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLScriptElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLScriptElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLSelectElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLSelectElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLSelectElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLSelectElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLSlotElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLSlotElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLSlotElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLSlotElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLSourceElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLSourceElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLSourceElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLSourceElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLSpanElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLSpanElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLSpanElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLSpanElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLStyleElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLStyleElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLStyleElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLStyleElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTableCaptionElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTableCaptionElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTableCaptionElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTableCaptionElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTableCellElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTableCellElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTableCellElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTableCellElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTableColElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTableColElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTableColElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTableColElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTableElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTableElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTableElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTableElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTableRowElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTableRowElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTableRowElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTableRowElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTableSectionElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTableSectionElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTableSectionElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTableSectionElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTemplateElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTemplateElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTemplateElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTemplateElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTextAreaElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTextAreaElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTextAreaElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTextAreaElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTimeElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTimeElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTimeElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTimeElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLTitleElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTitleElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTitleElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTitleElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_HTMLTrackElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLTrackElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLTrackElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLTrackElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_HTMLUListElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLUListElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLUListElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLUListElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HTMLUnknownElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLUnknownElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLUnknownElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLUnknownElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_HTMLVideoElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHTMLVideoElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HTMLVideoElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HTMLVideoElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_ImageBitmapConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSImageBitmap::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ImageBitmapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ImageBitmapConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ImageDataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSImageData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ImageDataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ImageDataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_MediaControllerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaController::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaControllerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaControllerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_MediaEncryptedEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaEncryptedEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaEncryptedEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaEncryptedEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_MediaErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMediaError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MediaErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MediaErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(OFFSCREEN_CANVAS)
static inline JSValue jsDOMWindow_OffscreenCanvasConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOffscreenCanvas::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OffscreenCanvasConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OffscreenCanvasConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_RadioNodeListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSRadioNodeList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_RadioNodeListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_RadioNodeListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SubmitEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSubmitEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SubmitEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SubmitEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_TextMetricsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextMetrics::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextMetricsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextMetricsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_TimeRangesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTimeRanges::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TimeRangesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TimeRangesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_URLSearchParamsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSURLSearchParams::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_URLSearchParamsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_URLSearchParamsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_UserActivationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSUserActivation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_UserActivationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_UserActivationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ValidityStateConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSValidityState::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ValidityStateConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ValidityStateConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)
static inline JSValue jsDOMWindow_WebKitMediaKeyErrorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitMediaKeyError::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitMediaKeyErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitMediaKeyErrorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_CanvasGradientConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCanvasGradient::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CanvasGradientConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CanvasGradientConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CanvasPatternConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCanvasPattern::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CanvasPatternConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CanvasPatternConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CanvasRenderingContext2DConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCanvasRenderingContext2D::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CanvasRenderingContext2DConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CanvasRenderingContext2DConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_GPUCanvasContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSGPUCanvasContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_GPUCanvasContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_GPUCanvasContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ImageBitmapRenderingContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSImageBitmapRenderingContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ImageBitmapRenderingContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ImageBitmapRenderingContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(OFFSCREEN_CANVAS)
static inline JSValue jsDOMWindow_OffscreenCanvasRenderingContext2DConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSOffscreenCanvasRenderingContext2D::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_OffscreenCanvasRenderingContext2DConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_OffscreenCanvasRenderingContext2DConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_Path2DConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPath2D::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_Path2DConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_Path2DConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGL2RenderingContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGL2RenderingContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGL2RenderingContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGL2RenderingContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLActiveInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLActiveInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLActiveInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLActiveInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLBufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLBuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLBufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLBufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLContextEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLContextEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLContextEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLContextEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLFramebufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLFramebuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLFramebufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLFramebufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLProgramConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLProgram::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLProgramConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLProgramConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLQueryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLQuery::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLQueryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLQueryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLRenderbufferConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLRenderbuffer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLRenderbufferConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLRenderbufferConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLRenderingContextConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLRenderingContext::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLRenderingContextConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLRenderingContextConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLSamplerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLSampler::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLSamplerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLSamplerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLShaderConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLShader::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLShaderConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLShaderConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLShaderPrecisionFormatConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLShaderPrecisionFormat::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLShaderPrecisionFormatConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLShaderPrecisionFormatConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLSyncConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLSync::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLSyncConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLSyncConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLTextureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLTexture::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLTextureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLTextureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLTransformFeedbackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLTransformFeedback::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLTransformFeedbackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLTransformFeedbackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLUniformLocationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLUniformLocation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLUniformLocationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLUniformLocationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindow_WebGLVertexArrayObjectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebGLVertexArrayObject::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebGLVertexArrayObjectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebGLVertexArrayObjectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_CloseWatcherConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCloseWatcher::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CloseWatcherConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CloseWatcherConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_AudioTrackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioTrack::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioTrackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioTrackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_AudioTrackConfigurationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioTrackConfiguration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioTrackConfigurationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioTrackConfigurationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_AudioTrackListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSAudioTrackList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_AudioTrackListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_AudioTrackListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_DataCueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDataCue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DataCueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DataCueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_TextTrackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextTrack::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextTrackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextTrackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_TextTrackCueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextTrackCue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextTrackCueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextTrackCueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_TextTrackCueListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextTrackCueList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextTrackCueListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextTrackCueListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_TextTrackListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTextTrackList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TextTrackListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TextTrackListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_TrackEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSTrackEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_TrackEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_TrackEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_VTTCueConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVTTCue::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VTTCueConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VTTCueConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_VTTRegionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVTTRegion::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VTTRegionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VTTRegionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_VideoTrackConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVideoTrack::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoTrackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoTrackConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_VideoTrackConfigurationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVideoTrackConfiguration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoTrackConfigurationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoTrackConfigurationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindow_VideoTrackListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVideoTrackList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VideoTrackListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VideoTrackListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MATHML)
static inline JSValue jsDOMWindow_MathMLElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMathMLElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MathMLElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MathMLElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(MATHML)
static inline JSValue jsDOMWindow_MathMLMathElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSMathMLMathElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MathMLMathElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MathMLMathElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_BarPropConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBarProp::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BarPropConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BarPropConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CryptoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCrypto::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CryptoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CryptoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SelectionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMSelection::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SelectionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SelectionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WindowConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMWindow::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WindowConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WindowConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_EventCountsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSEventCounts::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_EventCountsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_EventCountsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_EventSourceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSEventSource::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_EventSourceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_EventSourceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_FragmentDirectiveConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSFragmentDirective::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_FragmentDirectiveConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_FragmentDirectiveConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_HistoryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSHistory::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_HistoryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_HistoryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IntersectionObserverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIntersectionObserver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IntersectionObserverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IntersectionObserverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_IntersectionObserverEntryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSIntersectionObserverEntry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_IntersectionObserverEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_IntersectionObserverEntryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_LocationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSLocation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_LocationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_LocationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigateEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigateEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigateEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigateEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigationActivationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigationActivation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigationActivationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigationActivationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigationCurrentEntryChangeEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigationCurrentEntryChangeEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigationCurrentEntryChangeEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigationCurrentEntryChangeEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigationDestinationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigationDestination::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigationDestinationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigationDestinationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigationHistoryEntryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigationHistoryEntry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigationHistoryEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigationHistoryEntryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigationTransitionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigationTransition::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigationTransitionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigationTransitionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigatorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigator::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigatorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigatorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigatorUADataConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigatorUAData::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigatorUADataConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigatorUADataConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformance::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceEntryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceEntry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceEntryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceEventTimingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceEventTiming::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceEventTimingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceEventTimingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceMarkConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceMark::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceMarkConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceMarkConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceMeasureConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceMeasure::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceMeasureConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceMeasureConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceNavigationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceNavigation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceNavigationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceNavigationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceNavigationTimingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceNavigationTiming::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceNavigationTimingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceNavigationTimingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceObserverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceObserver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceObserverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceObserverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceObserverEntryListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceObserverEntryList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceObserverEntryListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceObserverEntryListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformancePaintTimingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformancePaintTiming::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformancePaintTimingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformancePaintTimingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceResourceTimingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceResourceTiming::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceResourceTimingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceResourceTimingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceServerTimingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceServerTiming::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceServerTimingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceServerTimingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PerformanceTimingConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSPerformanceTiming::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PerformanceTimingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PerformanceTimingConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ResizeObserverConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSResizeObserver::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ResizeObserverConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ResizeObserverConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ResizeObserverEntryConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSResizeObserverEntry::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ResizeObserverEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ResizeObserverEntryConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ResizeObserverSizeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSResizeObserverSize::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ResizeObserverSizeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ResizeObserverSizeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ScreenConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSScreen::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ScreenConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ScreenConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ScreenOrientationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSScreenOrientation::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ScreenOrientationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ScreenOrientationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_UndoItemConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSUndoItem::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_UndoItemConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_UndoItemConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_UndoManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSUndoManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_UndoManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_UndoManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(USER_MESSAGE_HANDLERS)
static inline JSValue jsDOMWindow_UserMessageHandlerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSUserMessageHandler::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_UserMessageHandlerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_UserMessageHandlerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(USER_MESSAGE_HANDLERS)
static inline JSValue jsDOMWindow_UserMessageHandlersNamespaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSUserMessageHandlersNamespace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_UserMessageHandlersNamespaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_UserMessageHandlersNamespaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_VisualViewportConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSVisualViewport::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_VisualViewportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_VisualViewportConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(USER_MESSAGE_HANDLERS)
static inline JSValue jsDOMWindow_WebKitNamespaceConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitNamespace::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitNamespaceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitNamespaceConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSValue jsDOMWindow_WebKitNodeInfoConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitNodeInfo::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitNodeInfoConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitNodeInfoConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebKitPointConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitPoint::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitPointConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitPointConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WebKitSerializedNodeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWebKitSerializedNode::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WebKitSerializedNodeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WebKitSerializedNodeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_CSPViolationReportBodyConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSCSPViolationReportBody::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_CSPViolationReportBodyConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_CSPViolationReportBodyConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MimeTypeConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMMimeType::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MimeTypeConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MimeTypeConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_MimeTypeArrayConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMMimeTypeArray::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_MimeTypeArrayConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_MimeTypeArrayConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PluginConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMPlugin::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PluginConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PluginConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_PluginArrayConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMPluginArray::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_PluginArrayConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_PluginArrayConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_StorageConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStorage::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StorageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StorageConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_StorageEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSStorageEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_StorageEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_StorageEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAngleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAngle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAngleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAngleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimateElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimateElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimateElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimateElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimateMotionElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimateMotionElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimateMotionElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimateMotionElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimateTransformElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimateTransformElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimateTransformElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimateTransformElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedAngleConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedAngle::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedAngleConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedAngleConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedBooleanConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedBoolean::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedBooleanConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedBooleanConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedEnumerationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedEnumeration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedEnumerationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedEnumerationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedIntegerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedInteger::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedIntegerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedIntegerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedLengthConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedLength::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedLengthConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedLengthConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedLengthListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedLengthList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedLengthListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedLengthListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedNumberConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedNumber::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedNumberConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedNumberConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedNumberListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedNumberList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedNumberListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedNumberListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedPreserveAspectRatioConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedPreserveAspectRatio::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedPreserveAspectRatioConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedPreserveAspectRatioConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedRectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedRect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedRectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedRectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedStringConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedString::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedStringConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedStringConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimatedTransformListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimatedTransformList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimatedTransformListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimatedTransformListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGAnimationElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGAnimationElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGAnimationElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGAnimationElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGCircleElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGCircleElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGCircleElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGCircleElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGClipPathElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGClipPathElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGClipPathElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGClipPathElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGComponentTransferFunctionElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGComponentTransferFunctionElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGComponentTransferFunctionElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGComponentTransferFunctionElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGDefsElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGDefsElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGDefsElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGDefsElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGDescElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGDescElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGDescElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGDescElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGEllipseElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGEllipseElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGEllipseElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGEllipseElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEBlendElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEBlendElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEBlendElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEBlendElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEColorMatrixElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEColorMatrixElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEColorMatrixElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEColorMatrixElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEComponentTransferElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEComponentTransferElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEComponentTransferElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEComponentTransferElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFECompositeElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFECompositeElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFECompositeElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFECompositeElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEConvolveMatrixElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEConvolveMatrixElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEConvolveMatrixElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEConvolveMatrixElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEDiffuseLightingElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEDiffuseLightingElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEDiffuseLightingElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEDiffuseLightingElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEDisplacementMapElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEDisplacementMapElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEDisplacementMapElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEDisplacementMapElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEDistantLightElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEDistantLightElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEDistantLightElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEDistantLightElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEDropShadowElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEDropShadowElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEDropShadowElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEDropShadowElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEFloodElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEFloodElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEFloodElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEFloodElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEFuncAElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEFuncAElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncAElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEFuncAElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEFuncBElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEFuncBElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncBElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEFuncBElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEFuncGElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEFuncGElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncGElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEFuncGElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEFuncRElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEFuncRElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEFuncRElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEFuncRElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEGaussianBlurElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEGaussianBlurElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEGaussianBlurElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEGaussianBlurElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEImageElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEImageElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEImageElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEImageElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEMergeElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEMergeElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEMergeElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEMergeElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEMergeNodeElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEMergeNodeElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEMergeNodeElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEMergeNodeElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEMorphologyElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEMorphologyElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEMorphologyElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEMorphologyElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEOffsetElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEOffsetElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEOffsetElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEOffsetElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFEPointLightElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFEPointLightElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFEPointLightElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFEPointLightElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFESpecularLightingElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFESpecularLightingElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFESpecularLightingElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFESpecularLightingElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFESpotLightElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFESpotLightElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFESpotLightElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFESpotLightElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFETileElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFETileElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFETileElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFETileElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFETurbulenceElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFETurbulenceElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFETurbulenceElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFETurbulenceElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGFilterElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGFilterElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGFilterElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGFilterElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGForeignObjectElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGForeignObjectElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGForeignObjectElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGForeignObjectElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGGElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGGElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGGElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGGElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGGeometryElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGGeometryElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGGeometryElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGGeometryElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGGradientElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGGradientElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGGradientElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGGradientElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGGraphicsElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGGraphicsElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGGraphicsElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGGraphicsElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGImageElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGImageElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGImageElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGImageElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGLengthConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGLength::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGLengthConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGLengthConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGLengthListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGLengthList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGLengthListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGLengthListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGLineElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGLineElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGLineElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGLineElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGLinearGradientElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGLinearGradientElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGLinearGradientElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGLinearGradientElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGMPathElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGMPathElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGMPathElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGMPathElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGMarkerElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGMarkerElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGMarkerElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGMarkerElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGMaskElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGMaskElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGMaskElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGMaskElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGMatrixConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGMatrix::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGMatrixConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGMatrixConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGMetadataElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGMetadataElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGMetadataElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGMetadataElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGNumberConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGNumber::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGNumberConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGNumberConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGNumberListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGNumberList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGNumberListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGNumberListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSeg::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegArcAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegArcAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegArcAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegArcAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegArcRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegArcRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegArcRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegArcRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegClosePathConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegClosePath::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegClosePathConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegClosePathConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoCubicAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoCubicAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoCubicRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoCubicRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoCubicSmoothAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicSmoothAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicSmoothAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoCubicSmoothAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoCubicSmoothRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicSmoothRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoCubicSmoothRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoCubicSmoothRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoQuadraticAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoQuadraticAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoQuadraticRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoQuadraticRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticSmoothAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticSmoothRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegCurvetoQuadraticSmoothRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegLinetoAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegLinetoAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegLinetoAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegLinetoHorizontalAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegLinetoHorizontalAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoHorizontalAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegLinetoHorizontalAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegLinetoHorizontalRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegLinetoHorizontalRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoHorizontalRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegLinetoHorizontalRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegLinetoRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegLinetoRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegLinetoRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegLinetoVerticalAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegLinetoVerticalAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoVerticalAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegLinetoVerticalAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegLinetoVerticalRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegLinetoVerticalRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegLinetoVerticalRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegLinetoVerticalRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegMovetoAbsConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegMovetoAbs::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegMovetoAbsConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegMovetoAbsConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPathSegMovetoRelConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPathSegMovetoRel::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPathSegMovetoRelConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPathSegMovetoRelConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPatternElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPatternElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPatternElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPatternElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPointConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPoint::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPointConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPointConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPointListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPointList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPointListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPointListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPolygonElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPolygonElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPolygonElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPolygonElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPolylineElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPolylineElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPolylineElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPolylineElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGPreserveAspectRatioConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGPreserveAspectRatio::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGPreserveAspectRatioConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGPreserveAspectRatioConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGRadialGradientElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGRadialGradientElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGRadialGradientElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGRadialGradientElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGRectConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGRect::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGRectConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGRectConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGRectElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGRectElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGRectElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGRectElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGSVGElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGSVGElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGSVGElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGSVGElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGScriptElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGScriptElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGScriptElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGScriptElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGSetElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGSetElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGSetElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGSetElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGStopElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGStopElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGStopElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGStopElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGStringListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGStringList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGStringListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGStringListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGStyleElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGStyleElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGStyleElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGStyleElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGSwitchElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGSwitchElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGSwitchElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGSwitchElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGSymbolElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGSymbolElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGSymbolElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGSymbolElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTSpanElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTSpanElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTSpanElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTSpanElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTextContentElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTextContentElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTextContentElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTextContentElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTextElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTextElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTextElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTextElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTextPathElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTextPathElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTextPathElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTextPathElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTextPositioningElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTextPositioningElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTextPositioningElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTextPositioningElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTitleElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTitleElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTitleElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTitleElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTransformConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTransform::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTransformConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTransformConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGTransformListConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGTransformList::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGTransformListConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGTransformListConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGUnitTypesConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGUnitTypes::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGUnitTypesConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGUnitTypesConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGUseElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGUseElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGUseElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGUseElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGViewElementConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGViewElement::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGViewElementConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGViewElementConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SVGViewSpecConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSVGViewSpec::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SVGViewSpecConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SVGViewSpecConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WorkerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWorker::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WorkerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WorkerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_NavigationPreloadManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSNavigationPreloadManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_NavigationPreloadManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_NavigationPreloadManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ServiceWorkerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSServiceWorker::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ServiceWorkerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ServiceWorkerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ServiceWorkerContainerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSServiceWorkerContainer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ServiceWorkerContainerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ServiceWorkerContainerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_ServiceWorkerRegistrationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSServiceWorkerRegistration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_ServiceWorkerRegistrationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_ServiceWorkerRegistrationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BackgroundFetchManagerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBackgroundFetchManager::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchManagerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BackgroundFetchManagerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BackgroundFetchRecordConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBackgroundFetchRecord::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchRecordConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BackgroundFetchRecordConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BackgroundFetchRegistrationConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBackgroundFetchRegistration::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchRegistrationConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BackgroundFetchRegistrationConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_BackgroundFetchUpdateUIEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSBackgroundFetchUpdateUIEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_BackgroundFetchUpdateUIEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_BackgroundFetchUpdateUIEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_SharedWorkerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSSharedWorker::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_SharedWorkerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_SharedWorkerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_WorkletConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSWorklet::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_WorkletConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_WorkletConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_DOMParserConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSDOMParser::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_DOMParserConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_DOMParserConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XMLHttpRequestConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXMLHttpRequest::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XMLHttpRequestConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XMLHttpRequestEventTargetConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXMLHttpRequestEventTarget::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestEventTargetConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XMLHttpRequestEventTargetConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XMLHttpRequestProgressEventConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXMLHttpRequestProgressEvent::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestProgressEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XMLHttpRequestProgressEventConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XMLHttpRequestUploadConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXMLHttpRequestUpload::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XMLHttpRequestUploadConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XMLHttpRequestUploadConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XMLSerializerConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXMLSerializer::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XMLSerializerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XMLSerializerConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XPathEvaluatorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXPathEvaluator::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XPathEvaluatorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XPathEvaluatorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XPathExpressionConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXPathExpression::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XPathExpressionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XPathExpressionConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMWindow_XPathResultConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXPathResult::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XPathResultConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XPathResultConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(XSLT)
static inline JSValue jsDOMWindow_XSLTProcessorConstructorGetter(JSGlobalObject& lexicalGlobalObject, JSDOMWindow& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, thisObject, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return jsUndefined();
    return JSXSLTProcessor::getConstructor(JSC::getVM(&lexicalGlobalObject), &thisObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMWindow_XSLTProcessorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMWindow>::get<jsDOMWindow_XSLTProcessorConstructorGetter>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_closeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* incumbentDocument = incumbentDOMWindow(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), *callFrame).document();
    if (!incumbentDocument)
        return JSValue::encode(jsUndefined());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.close(*incumbentDocument); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_close, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_closeBody>(*lexicalGlobalObject, *callFrame, "close");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_focusBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.focus(incumbentDOMWindow(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), *callFrame)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_focus, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_focusBody>(*lexicalGlobalObject, *callFrame, "focus");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_blurBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.blur(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_blur, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_blurBody>(*lexicalGlobalObject, *callFrame, "blur");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_postMessage1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto messageConversionResult = convert<IDLAny>(*lexicalGlobalObject, argument0.value());
    if (messageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto targetOriginConversionResult = convert<IDLUSVString>(*lexicalGlobalObject, argument1.value());
    if (targetOriginConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->argument(2);
    auto transferConversionResult = convertOptionalWithDefault<IDLSequence<IDLObject>>(*lexicalGlobalObject, argument2.value(), [&]() -> ConversionResult<IDLSequence<IDLObject>> { return Converter<IDLSequence<IDLObject>>::ReturnType { }; });
    if (transferConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.postMessage(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), incumbentDOMWindow(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), *callFrame), messageConversionResult.releaseReturnValue(), targetOriginConversionResult.releaseReturnValue(), transferConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_postMessage2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto messageConversionResult = convert<IDLAny>(*lexicalGlobalObject, argument0.value());
    if (messageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto optionsConversionResult = convert<IDLDictionary<WindowPostMessageOptions>>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.postMessage(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), incumbentDOMWindow(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), *callFrame), messageConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_postMessageOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    size_t argsCount = std::min<size_t>(3, callFrame->argumentCount());
    if (argsCount == 1) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_postMessage2Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = callFrame->uncheckedArgument(1);
        if (distinguishingArg.isUndefined())
            RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_postMessage2Body(lexicalGlobalObject, callFrame, castedThis)));
        if (distinguishingArg.isUndefinedOrNull())
            RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_postMessage2Body(lexicalGlobalObject, callFrame, castedThis)));
        if (distinguishingArg.isObject())
            RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_postMessage2Body(lexicalGlobalObject, callFrame, castedThis)));
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_postMessage1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 3) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_postMessage1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    return argsCount < 1 ? throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject)) : throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_postMessage, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_postMessageOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "postMessage");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_stopBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.stop(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_stop, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_stopBody>(*lexicalGlobalObject, *callFrame, "stop");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_openBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto urlConversionResult = convertOptionalWithDefault<IDLUSVString>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLUSVString> { return Converter<IDLUSVString>::ReturnType { emptyString() }; });
    if (urlConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto targetConversionResult = convertOptionalWithDefault<IDLAtomStringAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument1.value(), [&]() -> ConversionResult<IDLAtomStringAdaptor<IDLDOMString>> { return Converter<IDLAtomStringAdaptor<IDLDOMString>>::ReturnType { AtomString("_blank"_s) }; });
    if (targetConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->argument(2);
    auto featuresConversionResult = convertOptionalWithDefault<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument2.value(), [&]() -> ConversionResult<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>> { return Converter<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>::ReturnType { emptyString() }; });
    if (featuresConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLInterface<WindowProxy>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.open(activeDOMWindow(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)), firstDOMWindow(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)), urlConversionResult.releaseReturnValue(), targetConversionResult.releaseReturnValue(), featuresConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_open, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_openBody>(*lexicalGlobalObject, *callFrame, "open");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_alert1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.alert(); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_alert2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto messageConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (messageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.alert(messageConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_alertOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    size_t argsCount = std::min<size_t>(1, callFrame->argumentCount());
    if (argsCount == 0) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_alert1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 1) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_alert2Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    return throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_alert, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_alertOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "alert");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_confirmBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto messageConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (messageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.confirmForBindings(messageConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_confirm, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_confirmBody>(*lexicalGlobalObject, *callFrame, "confirm");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_promptBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto messageConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (messageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto defaultValueConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument1.value(), [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (defaultValueConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, throwScope, impl.prompt(messageConversionResult.releaseReturnValue(), defaultValueConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_prompt, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_promptBody>(*lexicalGlobalObject, *callFrame, "prompt");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_printBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.print(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_print, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_printBody>(*lexicalGlobalObject, *callFrame, "print");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_captureEventsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.captureEvents(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_captureEvents, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_captureEventsBody>(*lexicalGlobalObject, *callFrame, "captureEvents");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_releaseEventsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.releaseEvents(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_releaseEvents, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_releaseEventsBody>(*lexicalGlobalObject, *callFrame, "releaseEvents");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_findBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto stringConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLDOMString> { return typename Converter<IDLDOMString>::ReturnType { String() }; });
    if (stringConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto caseSensitiveConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument1.value());
    if (caseSensitiveConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->argument(2);
    auto backwardsConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument2.value());
    if (backwardsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument3 = callFrame->argument(3);
    auto wrapConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument3.value());
    if (wrapConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument4 = callFrame->argument(4);
    auto wholeWordConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument4.value());
    if (wholeWordConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument5 = callFrame->argument(5);
    auto searchInFramesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument5.value());
    if (searchInFramesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument6 = callFrame->argument(6);
    auto showDialogConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument6.value());
    if (showDialogConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.find(stringConversionResult.releaseReturnValue(), caseSensitiveConversionResult.releaseReturnValue(), backwardsConversionResult.releaseReturnValue(), wrapConversionResult.releaseReturnValue(), wholeWordConversionResult.releaseReturnValue(), searchInFramesConversionResult.releaseReturnValue(), showDialogConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_find, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_findBody>(*lexicalGlobalObject, *callFrame, "find");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_webkitRequestAnimationFrameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto callbackConversionResult = convert<IDLCallbackFunction<JSRequestAnimationFrameCallback>>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(lexicalGlobalObject, scope, 0, "callback"_s, "Window"_s, "webkitRequestAnimationFrame"_s); });
    if (callbackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLLong>(*lexicalGlobalObject, throwScope, impl.webkitRequestAnimationFrame(callbackConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitRequestAnimationFrame, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_webkitRequestAnimationFrameBody>(*lexicalGlobalObject, *callFrame, "webkitRequestAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_webkitCancelAnimationFrameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto idConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (idConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.cancelAnimationFrame(idConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitCancelAnimationFrame, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_webkitCancelAnimationFrameBody>(*lexicalGlobalObject, *callFrame, "webkitCancelAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_webkitCancelRequestAnimationFrameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto idConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (idConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.cancelAnimationFrame(idConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitCancelRequestAnimationFrame, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_webkitCancelRequestAnimationFrameBody>(*lexicalGlobalObject, *callFrame, "webkitCancelRequestAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_getMatchedCSSRulesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto elementConversionResult = convert<IDLNullable<IDLInterface<Element>>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "element"_s, "Window"_s, "getMatchedCSSRules"_s, "Element"_s); });
    if (elementConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto pseudoElementConversionResult = convertOptionalWithDefault<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, argument1.value(), [&]() -> ConversionResult<IDLNullable<IDLDOMString>> { return typename Converter<IDLNullable<IDLDOMString>>::ReturnType { String() }; });
    if (pseudoElementConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<CSSRuleList>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getMatchedCSSRules(elementConversionResult.releaseReturnValue(), pseudoElementConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_getMatchedCSSRules, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_getMatchedCSSRulesBody>(*lexicalGlobalObject, *callFrame, "getMatchedCSSRules");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_webkitConvertPointFromPageToNodeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto nodeConversionResult = convert<IDLNullable<IDLInterface<Node>>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "node"_s, "Window"_s, "webkitConvertPointFromPageToNode"_s, "Node"_s); });
    if (nodeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto pConversionResult = convert<IDLNullable<IDLInterface<WebKitPoint>>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "p"_s, "Window"_s, "webkitConvertPointFromPageToNode"_s, "WebKitPoint"_s); });
    if (pConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<WebKitPoint>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.webkitConvertPointFromPageToNode(nodeConversionResult.releaseReturnValue(), pConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitConvertPointFromPageToNode, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_webkitConvertPointFromPageToNodeBody>(*lexicalGlobalObject, *callFrame, "webkitConvertPointFromPageToNode");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_webkitConvertPointFromNodeToPageBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto nodeConversionResult = convert<IDLNullable<IDLInterface<Node>>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "node"_s, "Window"_s, "webkitConvertPointFromNodeToPage"_s, "Node"_s); });
    if (nodeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto pConversionResult = convert<IDLNullable<IDLInterface<WebKitPoint>>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "p"_s, "Window"_s, "webkitConvertPointFromNodeToPage"_s, "WebKitPoint"_s); });
    if (pConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<WebKitPoint>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.webkitConvertPointFromNodeToPage(nodeConversionResult.releaseReturnValue(), pConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_webkitConvertPointFromNodeToPage, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_webkitConvertPointFromNodeToPageBody>(*lexicalGlobalObject, *callFrame, "webkitConvertPointFromNodeToPage");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_collectMatchingElementsInFlatTreeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scopeConversionResult = convert<IDLInterface<Node>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "scope"_s, "Window"_s, "collectMatchingElementsInFlatTree"_s, "Node"_s); });
    if (scopeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto selectorsConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (selectorsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<NodeList>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.collectMatchingElementsInFlatTree(*scopeConversionResult.releaseReturnValue(), selectorsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_collectMatchingElementsInFlatTree, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_collectMatchingElementsInFlatTreeBody>(*lexicalGlobalObject, *callFrame, "collectMatchingElementsInFlatTree");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_matchingElementInFlatTreeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto scopeConversionResult = convert<IDLInterface<Node>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "scope"_s, "Window"_s, "matchingElementInFlatTree"_s, "Node"_s); });
    if (scopeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto selectorsConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (selectorsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLInterface<Element>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.matchingElementInFlatTree(*scopeConversionResult.releaseReturnValue(), selectorsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_matchingElementInFlatTree, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_matchingElementInFlatTreeBody>(*lexicalGlobalObject, *callFrame, "matchingElementInFlatTree");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_requestAnimationFrameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto callbackConversionResult = convert<IDLCallbackFunction<JSRequestAnimationFrameCallback>>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(lexicalGlobalObject, scope, 0, "callback"_s, "Window"_s, "requestAnimationFrame"_s); });
    if (callbackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUnsignedLong>(*lexicalGlobalObject, throwScope, impl.requestAnimationFrame(callbackConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_requestAnimationFrame, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_requestAnimationFrameBody>(*lexicalGlobalObject, *callFrame, "requestAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_cancelAnimationFrameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto handleConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (handleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.cancelAnimationFrame(handleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_cancelAnimationFrame, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_cancelAnimationFrameBody>(*lexicalGlobalObject, *callFrame, "cancelAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_getComputedStyleBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto elementConversionResult = convert<IDLInterface<Element>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "element"_s, "Window"_s, "getComputedStyle"_s, "Element"_s); });
    if (elementConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto pseudoElementConversionResult = convertOptionalWithDefault<IDLNullable<IDLUSVString>>(*lexicalGlobalObject, argument1.value(), [&]() -> ConversionResult<IDLNullable<IDLUSVString>> { return typename Converter<IDLNullable<IDLUSVString>>::ReturnType { String() }; });
    if (pseudoElementConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJSNewlyCreated<IDLInterface<CSSStyleDeclaration>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getComputedStyle(*elementConversionResult.releaseReturnValue(), pseudoElementConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_getComputedStyle, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_getComputedStyleBody>(*lexicalGlobalObject, *callFrame, "getComputedStyle");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_matchMediaBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto queryConversionResult = convert<IDLUSVString>(*lexicalGlobalObject, argument0.value());
    if (queryConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJSNewlyCreated<IDLInterface<MediaQueryList>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.matchMedia(queryConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_matchMedia, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_matchMediaBody>(*lexicalGlobalObject, *callFrame, "matchMedia");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_moveToBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto xConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (xConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto yConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (yConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.moveTo(xConversionResult.releaseReturnValue(), yConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_moveTo, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_moveToBody>(*lexicalGlobalObject, *callFrame, "moveTo");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_moveByBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto xConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (xConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto yConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (yConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.moveBy(xConversionResult.releaseReturnValue(), yConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_moveBy, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_moveByBody>(*lexicalGlobalObject, *callFrame, "moveBy");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_resizeToBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto widthConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (widthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto heightConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (heightConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.resizeTo(widthConversionResult.releaseReturnValue(), heightConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_resizeTo, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_resizeToBody>(*lexicalGlobalObject, *callFrame, "resizeTo");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_resizeByBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto xConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (xConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto yConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (yConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.resizeBy(xConversionResult.releaseReturnValue(), yConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_resizeBy, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_resizeByBody>(*lexicalGlobalObject, *callFrame, "resizeBy");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scroll1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto optionsConversionResult = convert<IDLDictionary<ScrollToOptions>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.scrollTo(optionsConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scroll2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto xConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument0.value());
    if (xConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto yConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument1.value());
    if (yConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.scrollTo(xConversionResult.releaseReturnValue(), yConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scrollOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    size_t argsCount = std::min<size_t>(2, callFrame->argumentCount());
    if (argsCount == 0) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scroll1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 1) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scroll1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 2) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scroll2Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    return throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_scroll, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_scrollOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "scroll");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scrollTo1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto optionsConversionResult = convert<IDLDictionary<ScrollToOptions>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.scrollTo(optionsConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scrollTo2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto xConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument0.value());
    if (xConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto yConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument1.value());
    if (yConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.scrollTo(xConversionResult.releaseReturnValue(), yConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scrollToOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    size_t argsCount = std::min<size_t>(2, callFrame->argumentCount());
    if (argsCount == 0) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scrollTo1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 1) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scrollTo1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 2) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scrollTo2Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    return throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_scrollTo, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_scrollToOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "scrollTo");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scrollBy1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto optionConversionResult = convert<IDLDictionary<ScrollToOptions>>(*lexicalGlobalObject, argument0.value());
    if (optionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.scrollBy(optionConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scrollBy2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto xConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument0.value());
    if (xConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto yConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument1.value());
    if (yConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.scrollBy(xConversionResult.releaseReturnValue(), yConversionResult.releaseReturnValue()); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_scrollByOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    size_t argsCount = std::min<size_t>(2, callFrame->argumentCount());
    if (argsCount == 0) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scrollBy1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 1) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scrollBy1Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    if (argsCount == 2) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_scrollBy2Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    return throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_scrollBy, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_scrollByOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "scrollBy");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_requestIdleCallbackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto callbackConversionResult = convert<IDLCallbackFunction<JSIdleRequestCallback>>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(lexicalGlobalObject, scope, 0, "callback"_s, "Window"_s, "requestIdleCallback"_s); });
    if (callbackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto optionsConversionResult = convert<IDLDictionary<IdleRequestOptions>>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUnsignedLong>(*lexicalGlobalObject, throwScope, impl.requestIdleCallback(callbackConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_requestIdleCallback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_requestIdleCallbackBody>(*lexicalGlobalObject, *callFrame, "requestIdleCallback");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_cancelIdleCallbackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto handleConversionResult = convert<IDLUnsignedLong>(*lexicalGlobalObject, argument0.value());
    if (handleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.cancelIdleCallback(handleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_cancelIdleCallback, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_cancelIdleCallbackBody>(*lexicalGlobalObject, *callFrame, "cancelIdleCallback");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_getSelectionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLInterface<DOMSelection>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getSelection())));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_getSelection, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_getSelectionBody>(*lexicalGlobalObject, *callFrame, "getSelection");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_reportErrorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto errorConversionResult = convert<IDLAny>(*lexicalGlobalObject, argument0.value());
    if (errorConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.reportError(*(*castedThis).globalObject(), errorConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_reportError, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_reportErrorBody>(*lexicalGlobalObject, *callFrame, "reportError");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_atobBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto stringConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (stringConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.atob(stringConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_atob, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_atobBody>(*lexicalGlobalObject, *callFrame, "atob");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_btoaBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto stringConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (stringConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.btoa(stringConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_btoa, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_btoaBody>(*lexicalGlobalObject, *callFrame, "btoa");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_setTimeoutBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto handlerConversionResult = convert<IDLScheduledAction>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), "Window setTimeout"_s);
    if (handlerConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto timeoutConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (timeoutConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto arguments = convertVariadicArguments<IDLAny>(*lexicalGlobalObject, *callFrame, 2);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLLong>(*lexicalGlobalObject, throwScope, impl.setTimeout(handlerConversionResult.releaseReturnValue(), timeoutConversionResult.releaseReturnValue(), WTFMove(arguments)))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_setTimeout, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_setTimeoutBody>(*lexicalGlobalObject, *callFrame, "setTimeout");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_clearTimeoutBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto handleConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (handleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.clearTimeout(handleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_clearTimeout, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_clearTimeoutBody>(*lexicalGlobalObject, *callFrame, "clearTimeout");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_setIntervalBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto handlerConversionResult = convert<IDLScheduledAction>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), "Window setInterval"_s);
    if (handlerConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto timeoutConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (timeoutConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto arguments = convertVariadicArguments<IDLAny>(*lexicalGlobalObject, *callFrame, 2);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLLong>(*lexicalGlobalObject, throwScope, impl.setInterval(handlerConversionResult.releaseReturnValue(), timeoutConversionResult.releaseReturnValue(), WTFMove(arguments)))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_setInterval, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_setIntervalBody>(*lexicalGlobalObject, *callFrame, "setInterval");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_clearIntervalBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto handleConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (handleConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.clearInterval(handleConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_clearInterval, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_clearIntervalBody>(*lexicalGlobalObject, *callFrame, "clearInterval");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_queueMicrotaskBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    RELEASE_AND_RETURN(throwScope, (JSValue::encode(castedThis->queueMicrotask(*lexicalGlobalObject, *callFrame))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_queueMicrotask, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_queueMicrotaskBody>(*lexicalGlobalObject, *callFrame, "queueMicrotask");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_createImageBitmap1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSDOMWindow>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageConversionResult = convert<IDLUnion<IDLInterface<HTMLImageElement>, IDLInterface<HTMLVideoElement>, IDLInterface<HTMLCanvasElement>, IDLInterface<SVGImageElement>, IDLInterface<ImageBitmap>, IDLInterface<CSSStyleImageValue>, IDLInterface<Blob>, IDLInterface<ImageData>>>(*lexicalGlobalObject, argument0.value());
    if (imageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto optionsConversionResult = convert<IDLDictionary<ImageBitmapOptions>>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLInterface<ImageBitmap>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.createImageBitmap(imageConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_createImageBitmap2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSDOMWindow>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto imageConversionResult = convert<IDLUnion<IDLInterface<HTMLImageElement>, IDLInterface<HTMLVideoElement>, IDLInterface<HTMLCanvasElement>, IDLInterface<SVGImageElement>, IDLInterface<ImageBitmap>, IDLInterface<CSSStyleImageValue>, IDLInterface<Blob>, IDLInterface<ImageData>>>(*lexicalGlobalObject, argument0.value());
    if (imageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto sxConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (sxConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->uncheckedArgument(2);
    auto syConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument2.value());
    if (syConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument3 = callFrame->uncheckedArgument(3);
    auto swConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument3.value());
    if (swConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument4 = callFrame->uncheckedArgument(4);
    auto shConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument4.value());
    if (shConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument5 = callFrame->argument(5);
    auto optionsConversionResult = convert<IDLDictionary<ImageBitmapOptions>>(*lexicalGlobalObject, argument5.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLInterface<ImageBitmap>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.createImageBitmap(imageConversionResult.releaseReturnValue(), sxConversionResult.releaseReturnValue(), syConversionResult.releaseReturnValue(), swConversionResult.releaseReturnValue(), shConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_createImageBitmapOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSDOMWindow>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    size_t argsCount = std::min<size_t>(6, callFrame->argumentCount());
    if (argsCount == 1) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_createImageBitmap1Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    if (argsCount == 2) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_createImageBitmap1Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    if (argsCount == 5) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_createImageBitmap2Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    if (argsCount == 6) {
        RELEASE_AND_RETURN(throwScope, (jsDOMWindowInstanceFunction_createImageBitmap2Body(lexicalGlobalObject, callFrame, castedThis, WTFMove(promise))));
    }
    return argsCount < 1 ? throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject)) : throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_createImageBitmap, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSDOMWindow>::call<jsDOMWindowInstanceFunction_createImageBitmapOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "createImageBitmap");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_structuredCloneBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDOMWindow>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto valueConversionResult = convert<IDLAny>(*lexicalGlobalObject, argument0.value());
    if (valueConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto optionsConversionResult = convert<IDLDictionary<StructuredSerializeOptions>>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLAny>(*lexicalGlobalObject, throwScope, impl.structuredClone(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), *(*castedThis).globalObject(), valueConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_structuredClone, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDOMWindow>::call<jsDOMWindowInstanceFunction_structuredCloneBody>(*lexicalGlobalObject, *callFrame, "structuredClone");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunction_fetchBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSDOMWindow>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    bool shouldAllowAccess = BindingSecurity::shouldAllowAccessToDOMWindow(lexicalGlobalObject, *castedThis, ThrowSecurityError);
    EXCEPTION_ASSERT_UNUSED(throwScope, !throwScope.exception() || !shouldAllowAccess);
    if (!shouldAllowAccess)
        return JSValue::encode(jsUndefined());
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto inputConversionResult = convert<IDLUnion<IDLInterface<FetchRequest>, IDLUSVString>>(*lexicalGlobalObject, argument0.value());
    if (inputConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto initConversionResult = convert<IDLDictionary<FetchRequestInit>>(*lexicalGlobalObject, argument1.value());
    if (initConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJSNewlyCreated<IDLPromise<IDLInterface<FetchResponse>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return WebCore::WindowOrWorkerGlobalScopeFetch::fetch(impl, inputConversionResult.releaseReturnValue(), initConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDOMWindowInstanceFunction_fetch, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSDOMWindow>::call<jsDOMWindowInstanceFunction_fetchBody>(*lexicalGlobalObject, *callFrame, "fetch");
}

JSC::GCClient::IsoSubspace* JSDOMWindow::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSDOMWindow, UseCustomHeapCellType::Yes>(vm, "JSDOMWindow"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForDOMWindow.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForDOMWindow = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForDOMWindow.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForDOMWindow = std::forward<decltype(space)>(space); },
        [] (auto& server) -> JSC::HeapCellType& { return server.m_heapCellTypeForJSDOMWindow; }
    );
}

template<typename Visitor>
void JSDOMWindow::visitChildrenImpl(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSDOMWindow*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

DEFINE_VISIT_CHILDREN(JSDOMWindow);

template<typename Visitor>
void JSDOMWindow::visitOutputConstraints(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSDOMWindow*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

template void JSDOMWindow::visitOutputConstraints(JSCell*, AbstractSlotVisitor&);
template void JSDOMWindow::visitOutputConstraints(JSCell*, SlotVisitor&);

}
