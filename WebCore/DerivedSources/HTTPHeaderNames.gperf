
%{
/*
 * Copyright (C) 2014 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/// This file is generated by create-http-header-name-table, do not edit.

#include "config.h"
#include "HTTPHeaderNames.h"

#include <wtf/text/StringView.h>

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN

IGNORE_WARNINGS_BEGIN("implicit-fallthrough")

// Older versions of gperf like to use the `register` keyword.
#define register

namespace WebCore {

static const ASCIILiteral headerNameStrings[] = {
    "Accept"_s,
    "Accept-Charset"_s,
    "Accept-Encoding"_s,
    "Accept-Language"_s,
    "Accept-Ranges"_s,
    "Access-Control-Allow-Credentials"_s,
    "Access-Control-Allow-Headers"_s,
    "Access-Control-Allow-Methods"_s,
    "Access-Control-Allow-Origin"_s,
    "Access-Control-Expose-Headers"_s,
    "Access-Control-Max-Age"_s,
    "Access-Control-Request-Headers"_s,
    "Access-Control-Request-Method"_s,
    "Age"_s,
    "Authorization"_s,
    "Cache-Control"_s,
    "Clear-Site-Data"_s,
    "Connection"_s,
    "Content-Disposition"_s,
    "Content-Encoding"_s,
    "Content-Language"_s,
    "Content-Length"_s,
    "Content-Location"_s,
    "Content-Range"_s,
    "Content-Security-Policy"_s,
    "Content-Security-Policy-Report-Only"_s,
    "Content-Type"_s,
    "Cookie"_s,
    "Cookie2"_s,
    "Cross-Origin-Embedder-Policy"_s,
    "Cross-Origin-Embedder-Policy-Report-Only"_s,
    "Cross-Origin-Opener-Policy"_s,
    "Cross-Origin-Opener-Policy-Report-Only"_s,
    "Cross-Origin-Resource-Policy"_s,
    "DNT"_s,
    "Date"_s,
    "Default-Style"_s,
    "ETag"_s,
    "Expect"_s,
    "Expires"_s,
    "Host"_s,
    "Icy-MetaInt"_s,
    "Icy-Metadata"_s,
    "If-Match"_s,
    "If-Modified-Since"_s,
    "If-None-Match"_s,
    "If-Range"_s,
    "If-Unmodified-Since"_s,
    "Integrity-Policy"_s,
    "Integrity-Policy-Report-Only"_s,
    "Keep-Alive"_s,
    "Last-Event-ID"_s,
    "Last-Modified"_s,
    "Link"_s,
    "Location"_s,
    "Origin"_s,
    "Ping-From"_s,
    "Ping-To"_s,
    "Pragma"_s,
    "Proxy-Authorization"_s,
    "Range"_s,
    "Referer"_s,
    "Referrer-Policy"_s,
    "Refresh"_s,
    "Report-To"_s,
    "Reporting-Endpoints"_s,
    "Sec-Fetch-Dest"_s,
    "Sec-Fetch-Mode"_s,
    "Sec-Fetch-Site"_s,
    "Sec-Purpose"_s,
    "Sec-WebSocket-Accept"_s,
    "Sec-WebSocket-Extensions"_s,
    "Sec-WebSocket-Key"_s,
    "Sec-WebSocket-Protocol"_s,
    "Sec-WebSocket-Version"_s,
    "Server-Timing"_s,
    "Service-Worker"_s,
    "Service-Worker-Allowed"_s,
    "Service-Worker-Navigation-Preload"_s,
    "Set-Cookie"_s,
    "Set-Cookie2"_s,
    "SourceMap"_s,
    "TE"_s,
    "Timing-Allow-Origin"_s,
    "Trailer"_s,
    "Transfer-Encoding"_s,
    "Upgrade"_s,
    "Upgrade-Insecure-Requests"_s,
    "User-Agent"_s,
    "Vary"_s,
    "Via"_s,
    "X-Content-Type-Options"_s,
    "X-Frame-Options"_s,
    "X-SourceMap"_s,
    "X-Temp-Tablet"_s,
    "X-XSS-Protection"_s,
};


%}

%language=C++
%readonly-tables
%global-table
%compare-strncmp
%ignore-case
%struct-type
struct HeaderNameHashEntry {
    const char* name;
    HTTPHeaderName headerName;
};
%define class-name HTTPHeaderNamesHash
%define lookup-function-name findHeaderNameImpl
%define hash-function-name header_name_hash_function
%define word-array-name header_name_wordlist
%enum
%%
Accept, HTTPHeaderName::Accept
Accept-Charset, HTTPHeaderName::AcceptCharset
Accept-Encoding, HTTPHeaderName::AcceptEncoding
Accept-Language, HTTPHeaderName::AcceptLanguage
Accept-Ranges, HTTPHeaderName::AcceptRanges
Access-Control-Allow-Credentials, HTTPHeaderName::AccessControlAllowCredentials
Access-Control-Allow-Headers, HTTPHeaderName::AccessControlAllowHeaders
Access-Control-Allow-Methods, HTTPHeaderName::AccessControlAllowMethods
Access-Control-Allow-Origin, HTTPHeaderName::AccessControlAllowOrigin
Access-Control-Expose-Headers, HTTPHeaderName::AccessControlExposeHeaders
Access-Control-Max-Age, HTTPHeaderName::AccessControlMaxAge
Access-Control-Request-Headers, HTTPHeaderName::AccessControlRequestHeaders
Access-Control-Request-Method, HTTPHeaderName::AccessControlRequestMethod
Age, HTTPHeaderName::Age
Authorization, HTTPHeaderName::Authorization
Cache-Control, HTTPHeaderName::CacheControl
Clear-Site-Data, HTTPHeaderName::ClearSiteData
Connection, HTTPHeaderName::Connection
Content-Disposition, HTTPHeaderName::ContentDisposition
Content-Encoding, HTTPHeaderName::ContentEncoding
Content-Language, HTTPHeaderName::ContentLanguage
Content-Length, HTTPHeaderName::ContentLength
Content-Location, HTTPHeaderName::ContentLocation
Content-Range, HTTPHeaderName::ContentRange
Content-Security-Policy, HTTPHeaderName::ContentSecurityPolicy
Content-Security-Policy-Report-Only, HTTPHeaderName::ContentSecurityPolicyReportOnly
Content-Type, HTTPHeaderName::ContentType
Cookie, HTTPHeaderName::Cookie
Cookie2, HTTPHeaderName::Cookie2
Cross-Origin-Embedder-Policy, HTTPHeaderName::CrossOriginEmbedderPolicy
Cross-Origin-Embedder-Policy-Report-Only, HTTPHeaderName::CrossOriginEmbedderPolicyReportOnly
Cross-Origin-Opener-Policy, HTTPHeaderName::CrossOriginOpenerPolicy
Cross-Origin-Opener-Policy-Report-Only, HTTPHeaderName::CrossOriginOpenerPolicyReportOnly
Cross-Origin-Resource-Policy, HTTPHeaderName::CrossOriginResourcePolicy
DNT, HTTPHeaderName::DNT
Date, HTTPHeaderName::Date
Default-Style, HTTPHeaderName::DefaultStyle
ETag, HTTPHeaderName::ETag
Expect, HTTPHeaderName::Expect
Expires, HTTPHeaderName::Expires
Host, HTTPHeaderName::Host
Icy-MetaInt, HTTPHeaderName::IcyMetaInt
Icy-Metadata, HTTPHeaderName::IcyMetadata
If-Match, HTTPHeaderName::IfMatch
If-Modified-Since, HTTPHeaderName::IfModifiedSince
If-None-Match, HTTPHeaderName::IfNoneMatch
If-Range, HTTPHeaderName::IfRange
If-Unmodified-Since, HTTPHeaderName::IfUnmodifiedSince
Integrity-Policy, HTTPHeaderName::IntegrityPolicy
Integrity-Policy-Report-Only, HTTPHeaderName::IntegrityPolicyReportOnly
Keep-Alive, HTTPHeaderName::KeepAlive
Last-Event-ID, HTTPHeaderName::LastEventID
Last-Modified, HTTPHeaderName::LastModified
Link, HTTPHeaderName::Link
Location, HTTPHeaderName::Location
Origin, HTTPHeaderName::Origin
Ping-From, HTTPHeaderName::PingFrom
Ping-To, HTTPHeaderName::PingTo
Pragma, HTTPHeaderName::Pragma
Proxy-Authorization, HTTPHeaderName::ProxyAuthorization
Range, HTTPHeaderName::Range
Referer, HTTPHeaderName::Referer
Referrer-Policy, HTTPHeaderName::ReferrerPolicy
Refresh, HTTPHeaderName::Refresh
Report-To, HTTPHeaderName::ReportTo
Reporting-Endpoints, HTTPHeaderName::ReportingEndpoints
Sec-Fetch-Dest, HTTPHeaderName::SecFetchDest
Sec-Fetch-Mode, HTTPHeaderName::SecFetchMode
Sec-Fetch-Site, HTTPHeaderName::SecFetchSite
Sec-Purpose, HTTPHeaderName::SecPurpose
Sec-WebSocket-Accept, HTTPHeaderName::SecWebSocketAccept
Sec-WebSocket-Extensions, HTTPHeaderName::SecWebSocketExtensions
Sec-WebSocket-Key, HTTPHeaderName::SecWebSocketKey
Sec-WebSocket-Protocol, HTTPHeaderName::SecWebSocketProtocol
Sec-WebSocket-Version, HTTPHeaderName::SecWebSocketVersion
Server-Timing, HTTPHeaderName::ServerTiming
Service-Worker, HTTPHeaderName::ServiceWorker
Service-Worker-Allowed, HTTPHeaderName::ServiceWorkerAllowed
Service-Worker-Navigation-Preload, HTTPHeaderName::ServiceWorkerNavigationPreload
Set-Cookie, HTTPHeaderName::SetCookie
Set-Cookie2, HTTPHeaderName::SetCookie2
SourceMap, HTTPHeaderName::SourceMap
TE, HTTPHeaderName::TE
Timing-Allow-Origin, HTTPHeaderName::TimingAllowOrigin
Trailer, HTTPHeaderName::Trailer
Transfer-Encoding, HTTPHeaderName::TransferEncoding
Upgrade, HTTPHeaderName::Upgrade
Upgrade-Insecure-Requests, HTTPHeaderName::UpgradeInsecureRequests
User-Agent, HTTPHeaderName::UserAgent
Vary, HTTPHeaderName::Vary
Via, HTTPHeaderName::Via
X-Content-Type-Options, HTTPHeaderName::XContentTypeOptions
X-Frame-Options, HTTPHeaderName::XFrameOptions
X-SourceMap, HTTPHeaderName::XSourceMap
X-Temp-Tablet, HTTPHeaderName::XTempTablet
X-XSS-Protection, HTTPHeaderName::XXSSProtection
%%
bool findHTTPHeaderName(StringView stringView, HTTPHeaderName& headerName)
{
    unsigned length = stringView.length();
    if (length > maxHTTPHeaderNameLength || length < minHTTPHeaderNameLength)
        return false;

    if (stringView.is8Bit()) {
        if (auto nameAndString = HTTPHeaderNamesHash::findHeaderNameImpl(byteCast<char>(stringView.span8().data()), length)) {
            headerName = nameAndString->headerName;
            return true;
        }
    } else {
        std::array<char, maxHTTPHeaderNameLength> characters;
        size_t index = 0;
        for (auto character : stringView.span16()) {
            if (!isASCII(character))
                return false;
            characters[index++] = static_cast<char>(character);
        }
        
        if (auto nameAndString = HTTPHeaderNamesHash::findHeaderNameImpl(characters.data(), length)) {
            headerName = nameAndString->headerName;
            return true;
        }
    }

    return false;
}

ASCIILiteral httpHeaderNameString(HTTPHeaderName headerName)
{
    ASSERT(static_cast<unsigned>(headerName) < numHTTPHeaderNames);
    
    return headerNameStrings[static_cast<unsigned>(headerName)];
}

} // namespace WebCore

#if defined(__clang__)
IGNORE_WARNINGS_END
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END
#endif
