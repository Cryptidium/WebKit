/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PAYMENT_REQUEST)

#include "JSAddressErrors.h"

#include "JSDOMConvertStrings.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(PAYMENT_REQUEST)

template<> ConversionResult<IDLDictionary<AddressErrors>> convertDictionary<AddressErrors>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AddressErrors result;
    JSValue addressLineValue;
    if (isNullOrUndefined)
        addressLineValue = jsUndefined();
    else {
        addressLineValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "addressLine"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!addressLineValue.isUndefined()) {
        auto addressLineConversionResult = convert<IDLDOMString>(lexicalGlobalObject, addressLineValue);
        if (addressLineConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.addressLine = addressLineConversionResult.releaseReturnValue();
    }
    JSValue cityValue;
    if (isNullOrUndefined)
        cityValue = jsUndefined();
    else {
        cityValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "city"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!cityValue.isUndefined()) {
        auto cityConversionResult = convert<IDLDOMString>(lexicalGlobalObject, cityValue);
        if (cityConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.city = cityConversionResult.releaseReturnValue();
    }
    JSValue countryValue;
    if (isNullOrUndefined)
        countryValue = jsUndefined();
    else {
        countryValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "country"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!countryValue.isUndefined()) {
        auto countryConversionResult = convert<IDLDOMString>(lexicalGlobalObject, countryValue);
        if (countryConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.country = countryConversionResult.releaseReturnValue();
    }
    JSValue dependentLocalityValue;
    if (isNullOrUndefined)
        dependentLocalityValue = jsUndefined();
    else {
        dependentLocalityValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "dependentLocality"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!dependentLocalityValue.isUndefined()) {
        auto dependentLocalityConversionResult = convert<IDLDOMString>(lexicalGlobalObject, dependentLocalityValue);
        if (dependentLocalityConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.dependentLocality = dependentLocalityConversionResult.releaseReturnValue();
    }
    JSValue languageCodeValue;
    if (isNullOrUndefined)
        languageCodeValue = jsUndefined();
    else {
        languageCodeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "languageCode"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!languageCodeValue.isUndefined()) {
        auto languageCodeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, languageCodeValue);
        if (languageCodeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.languageCode = languageCodeConversionResult.releaseReturnValue();
    }
    JSValue organizationValue;
    if (isNullOrUndefined)
        organizationValue = jsUndefined();
    else {
        organizationValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "organization"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!organizationValue.isUndefined()) {
        auto organizationConversionResult = convert<IDLDOMString>(lexicalGlobalObject, organizationValue);
        if (organizationConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.organization = organizationConversionResult.releaseReturnValue();
    }
    JSValue phoneValue;
    if (isNullOrUndefined)
        phoneValue = jsUndefined();
    else {
        phoneValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "phone"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!phoneValue.isUndefined()) {
        auto phoneConversionResult = convert<IDLDOMString>(lexicalGlobalObject, phoneValue);
        if (phoneConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.phone = phoneConversionResult.releaseReturnValue();
    }
    JSValue postalCodeValue;
    if (isNullOrUndefined)
        postalCodeValue = jsUndefined();
    else {
        postalCodeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "postalCode"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!postalCodeValue.isUndefined()) {
        auto postalCodeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, postalCodeValue);
        if (postalCodeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.postalCode = postalCodeConversionResult.releaseReturnValue();
    }
    JSValue recipientValue;
    if (isNullOrUndefined)
        recipientValue = jsUndefined();
    else {
        recipientValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "recipient"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!recipientValue.isUndefined()) {
        auto recipientConversionResult = convert<IDLDOMString>(lexicalGlobalObject, recipientValue);
        if (recipientConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.recipient = recipientConversionResult.releaseReturnValue();
    }
    JSValue regionValue;
    if (isNullOrUndefined)
        regionValue = jsUndefined();
    else {
        regionValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "region"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!regionValue.isUndefined()) {
        auto regionConversionResult = convert<IDLDOMString>(lexicalGlobalObject, regionValue);
        if (regionConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.region = regionConversionResult.releaseReturnValue();
    }
    JSValue regionCodeValue;
    if (isNullOrUndefined)
        regionCodeValue = jsUndefined();
    else {
        regionCodeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "regionCode"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!regionCodeValue.isUndefined()) {
        auto regionCodeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, regionCodeValue);
        if (regionCodeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.regionCode = regionCodeConversionResult.releaseReturnValue();
    }
    JSValue sortingCodeValue;
    if (isNullOrUndefined)
        sortingCodeValue = jsUndefined();
    else {
        sortingCodeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sortingCode"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!sortingCodeValue.isUndefined()) {
        auto sortingCodeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, sortingCodeValue);
        if (sortingCodeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.sortingCode = sortingCodeConversionResult.releaseReturnValue();
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(PAYMENT_REQUEST)
