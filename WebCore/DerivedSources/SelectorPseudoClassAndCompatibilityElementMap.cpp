/* C++ code produced by gperf version 3.1 */
/* Command-line: C:/Dev/gperf/gperf.exe --key-positions='*' -m 10 -s 2 --output-file=SelectorPseudoClassAndCompatibilityElementMap.cpp SelectorPseudoClassAndCompatibilityElementMap.gperf  */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
#endif

#line 1 "SelectorPseudoClassAndCompatibilityElementMap.gperf"

/*
 * Copyright (C) 2014-2024 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// This file is automatically generated from CSSPseudoSelectors.json by the process-css-pseudo-selectors.py script, do not edit by hand.

#include "config.h"
#include "SelectorPseudoTypeMap.h"

#include "MutableCSSSelector.h"

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
IGNORE_WARNINGS_BEGIN("implicit-fallthrough")

// Older versions of gperf use the `register` keyword.
#define register

namespace WebCore {

struct SelectorPseudoClassOrCompatibilityPseudoElementEntry {
    const char* name;
    PseudoClassOrCompatibilityPseudoElement pseudoTypes;
};

enum
  {
    TOTAL_KEYWORDS = 92,
    MIN_WORD_LENGTH = 2,
    MAX_WORD_LENGTH = 41,
    MIN_HASH_VALUE = 6,
    MAX_HASH_VALUE = 415
  };

/* maximum key range = 410, duplicates = 0 */

#ifndef GPERF_DOWNCASE
#define GPERF_DOWNCASE 1
static unsigned char gperf_downcase[256] =
  {
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
     30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
     45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
     60,  61,  62,  63,  64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
    122,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104,
    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
    135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
    150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
    165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
    195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
    210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
    225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
    255
  };
#endif

#ifndef GPERF_CASE_STRNCMP
#define GPERF_CASE_STRNCMP 1
static int
gperf_case_strncmp (const char *s1, const char *s2, size_t n)
{
  for (; n > 0;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 != 0 && c1 == c2)
        {
          n--;
          continue;
        }
      return (int)c1 - (int)c2;
    }
  return 0;
}
#endif

class SelectorPseudoClassAndCompatibilityElementMapHash
{
private:
  static inline unsigned int hash (const char *str, size_t len);
public:
  static const struct SelectorPseudoClassOrCompatibilityPseudoElementEntry *in_word_set (const char *str, size_t len);
};

inline unsigned int
SelectorPseudoClassAndCompatibilityElementMapHash::hash (const char *str, size_t len)
{
  static const unsigned short asso_values[] =
    {
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416,   3, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416,   2,  55,   4,   3,   3,
        3,  72,  22,   2, 416,  42,   2,   7,   2,   2,
       45,   2,   2,   2,   2,   2,  25,   2, 416,  23,
        5, 416, 416, 416, 416, 416, 416,   2,  55,   4,
        3,   3,   3,  72,  22,   2, 416,  42,   2,   7,
        2,   2,  45,   2,   2,   2,   2,   2,  25,   2,
      416,  23,   5, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
      416, 416, 416, 416, 416, 416
    };
  unsigned int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[static_cast<unsigned char>(str[40])];
      /*FALLTHROUGH*/
      case 40:
        hval += asso_values[static_cast<unsigned char>(str[39])];
      /*FALLTHROUGH*/
      case 39:
        hval += asso_values[static_cast<unsigned char>(str[38])];
      /*FALLTHROUGH*/
      case 38:
        hval += asso_values[static_cast<unsigned char>(str[37])];
      /*FALLTHROUGH*/
      case 37:
        hval += asso_values[static_cast<unsigned char>(str[36])];
      /*FALLTHROUGH*/
      case 36:
        hval += asso_values[static_cast<unsigned char>(str[35])];
      /*FALLTHROUGH*/
      case 35:
        hval += asso_values[static_cast<unsigned char>(str[34])];
      /*FALLTHROUGH*/
      case 34:
        hval += asso_values[static_cast<unsigned char>(str[33])];
      /*FALLTHROUGH*/
      case 33:
        hval += asso_values[static_cast<unsigned char>(str[32])];
      /*FALLTHROUGH*/
      case 32:
        hval += asso_values[static_cast<unsigned char>(str[31])];
      /*FALLTHROUGH*/
      case 31:
        hval += asso_values[static_cast<unsigned char>(str[30])];
      /*FALLTHROUGH*/
      case 30:
        hval += asso_values[static_cast<unsigned char>(str[29])];
      /*FALLTHROUGH*/
      case 29:
        hval += asso_values[static_cast<unsigned char>(str[28])];
      /*FALLTHROUGH*/
      case 28:
        hval += asso_values[static_cast<unsigned char>(str[27])];
      /*FALLTHROUGH*/
      case 27:
        hval += asso_values[static_cast<unsigned char>(str[26])];
      /*FALLTHROUGH*/
      case 26:
        hval += asso_values[static_cast<unsigned char>(str[25])];
      /*FALLTHROUGH*/
      case 25:
        hval += asso_values[static_cast<unsigned char>(str[24])];
      /*FALLTHROUGH*/
      case 24:
        hval += asso_values[static_cast<unsigned char>(str[23])];
      /*FALLTHROUGH*/
      case 23:
        hval += asso_values[static_cast<unsigned char>(str[22])];
      /*FALLTHROUGH*/
      case 22:
        hval += asso_values[static_cast<unsigned char>(str[21])];
      /*FALLTHROUGH*/
      case 21:
        hval += asso_values[static_cast<unsigned char>(str[20])];
      /*FALLTHROUGH*/
      case 20:
        hval += asso_values[static_cast<unsigned char>(str[19])];
      /*FALLTHROUGH*/
      case 19:
        hval += asso_values[static_cast<unsigned char>(str[18])];
      /*FALLTHROUGH*/
      case 18:
        hval += asso_values[static_cast<unsigned char>(str[17])];
      /*FALLTHROUGH*/
      case 17:
        hval += asso_values[static_cast<unsigned char>(str[16])];
      /*FALLTHROUGH*/
      case 16:
        hval += asso_values[static_cast<unsigned char>(str[15])];
      /*FALLTHROUGH*/
      case 15:
        hval += asso_values[static_cast<unsigned char>(str[14])];
      /*FALLTHROUGH*/
      case 14:
        hval += asso_values[static_cast<unsigned char>(str[13])];
      /*FALLTHROUGH*/
      case 13:
        hval += asso_values[static_cast<unsigned char>(str[12])];
      /*FALLTHROUGH*/
      case 12:
        hval += asso_values[static_cast<unsigned char>(str[11])];
      /*FALLTHROUGH*/
      case 11:
        hval += asso_values[static_cast<unsigned char>(str[10])];
      /*FALLTHROUGH*/
      case 10:
        hval += asso_values[static_cast<unsigned char>(str[9])];
      /*FALLTHROUGH*/
      case 9:
        hval += asso_values[static_cast<unsigned char>(str[8])];
      /*FALLTHROUGH*/
      case 8:
        hval += asso_values[static_cast<unsigned char>(str[7])];
      /*FALLTHROUGH*/
      case 7:
        hval += asso_values[static_cast<unsigned char>(str[6])];
      /*FALLTHROUGH*/
      case 6:
        hval += asso_values[static_cast<unsigned char>(str[5])];
      /*FALLTHROUGH*/
      case 5:
        hval += asso_values[static_cast<unsigned char>(str[4])];
      /*FALLTHROUGH*/
      case 4:
        hval += asso_values[static_cast<unsigned char>(str[3])];
      /*FALLTHROUGH*/
      case 3:
        hval += asso_values[static_cast<unsigned char>(str[2])];
      /*FALLTHROUGH*/
      case 2:
        hval += asso_values[static_cast<unsigned char>(str[1])];
      /*FALLTHROUGH*/
      case 1:
        hval += asso_values[static_cast<unsigned char>(str[0])];
        break;
    }
  return hval;
}

static const struct SelectorPseudoClassOrCompatibilityPseudoElementEntry wordlist[] =
  {
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 109 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"is", {CSSSelector::PseudoClass::Is, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 118 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"not", {CSSSelector::PseudoClass::Not, std::nullopt}},
#line 87 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"dir", {CSSSelector::PseudoClass::Dir, std::nullopt}},
#line 92 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"end", {CSSSelector::PseudoClass::End, std::nullopt}},
#line 135 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"root", {CSSSelector::PseudoClass::Root, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 141 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"start", {CSSSelector::PseudoClass::Start, std::nullopt}},
#line 139 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"state", {CSSSelector::PseudoClass::State, std::nullopt}},
#line 151 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"after", {std::nullopt, CSSSelector::PseudoElement::After}},
#line 95 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"focus", {CSSSelector::PseudoClass::Focus, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 100 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"future", {CSSSelector::PseudoClass::Future, std::nullopt}},
#line 115 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"modal", {CSSSelector::PseudoClass::Modal, std::nullopt}},
#line 116 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"muted", {CSSSelector::PseudoClass::Muted, std::nullopt}},
#line 138 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"stalled", {CSSSelector::PseudoClass::Stalled, std::nullopt}},
#line 85 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"default", {CSSSelector::PseudoClass::Default, std::nullopt}},
#line 79 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"autofill", {CSSSelector::PseudoClass::Autofill, std::nullopt}},
#line 86 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"defined", {CSSSelector::PseudoClass::Defined, std::nullopt}},
#line 134 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"required", {CSSSelector::PseudoClass::Required, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 101 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"has", {CSSSelector::PseudoClass::Has, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 103 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"host", {CSSSelector::PseudoClass::Host, std::nullopt}},
#line 154 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"first-line", {std::nullopt, CSSSelector::PseudoElement::FirstLine}},
#line 133 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"read-write", {CSSSelector::PseudoClass::ReadWrite, std::nullopt}},
#line 98 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"fullscreen", {CSSSelector::PseudoClass::Fullscreen, std::nullopt}},
#line 106 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"increment", {CSSSelector::PseudoClass::Increment, std::nullopt}},
#line 149 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"where", {CSSSelector::PseudoClass::Where, std::nullopt}},
#line 84 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"decrement", {CSSSelector::PseudoClass::Decrement, std::nullopt}},
#line 145 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"valid", {CSSSelector::PseudoClass::Valid, std::nullopt}},
#line 153 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"first-letter", {std::nullopt, CSSSelector::PseudoElement::FirstLetter}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 74 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"active", {CSSSelector::PseudoClass::Active, std::nullopt}},
#line 108 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"invalid", {CSSSelector::PseudoClass::Invalid, std::nullopt}},
#line 147 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"visited", {CSSSelector::PseudoClass::Visited, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 107 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"indeterminate", {CSSSelector::PseudoClass::Indeterminate, std::nullopt}},
#line 110 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"matches", {CSSSelector::PseudoClass::Is, std::nullopt}},
#line 146 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"vertical", {CSSSelector::PseudoClass::Vertical, std::nullopt}},
#line 132 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"read-only", {CSSSelector::PseudoClass::ReadOnly, std::nullopt}},
#line 114 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"link", {CSSSelector::PseudoClass::Link, std::nullopt}},
#line 102 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"horizontal", {CSSSelector::PseudoClass::Horizontal, std::nullopt}},
#line 112 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"last-child", {CSSSelector::PseudoClass::LastChild, std::nullopt}},
#line 127 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"past", {CSSSelector::PseudoClass::Past, std::nullopt}},
#line 144 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"user-valid", {CSSSelector::PseudoClass::UserValid, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 93 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"first-child", {CSSSelector::PseudoClass::FirstChild, std::nullopt}},
#line 104 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"hover", {CSSSelector::PseudoClass::Hover, std::nullopt}},
#line 97 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"focus-within", {CSSSelector::PseudoClass::FocusWithin, std::nullopt}},
#line 136 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"scope", {CSSSelector::PseudoClass::Scope, std::nullopt}},
#line 143 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"user-invalid", {CSSSelector::PseudoClass::UserInvalid, std::nullopt}},
#line 128 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"paused", {CSSSelector::PseudoClass::Paused, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 125 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"optional", {CSSSelector::PseudoClass::Optional, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 119 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"nth-child", {CSSSelector::PseudoClass::NthChild, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 150 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"window-inactive", {CSSSelector::PseudoClass::WindowInactive, std::nullopt}},
#line 152 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"before", {std::nullopt, CSSSelector::PseudoElement::Before}},
#line 123 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"only-child", {CSSSelector::PseudoClass::OnlyChild, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 91 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"enabled", {CSSSelector::PseudoClass::Enabled, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 88 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"disabled", {CSSSelector::PseudoClass::Disabled, std::nullopt}},
#line 117 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"no-button", {CSSSelector::PseudoClass::NoButton, std::nullopt}},
#line 111 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"lang", {CSSSelector::PseudoClass::Lang, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 90 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"empty", {CSSSelector::PseudoClass::Empty, std::nullopt}},
#line 77 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"any-link", {CSSSelector::PseudoClass::AnyLink, std::nullopt}},
#line 120 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"nth-last-child", {CSSSelector::PseudoClass::NthLastChild, std::nullopt}},
#line 82 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"checked", {CSSSelector::PseudoClass::Checked, std::nullopt}},
#line 142 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"target", {CSSSelector::PseudoClass::Target, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 83 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"corner-present", {CSSSelector::PseudoClass::CornerPresent, std::nullopt}},
#line 68 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-internal-media-document", {CSSSelector::PseudoClass::InternalMediaDocument, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 105 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"in-range", {CSSSelector::PseudoClass::InRange, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 67 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-internal-in-window-fullscreen", {CSSSelector::PseudoClass::InternalInWindowFullscreen, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 113 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"last-of-type", {CSSSelector::PseudoClass::LastOfType, std::nullopt}},
#line 65 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-internal-fullscreen-document", {CSSSelector::PseudoClass::InternalFullscreenDocument, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 66 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-internal-html-document", {CSSSelector::PseudoClass::InternalHTMLDocument, std::nullopt}},
#line 94 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"first-of-type", {CSSSelector::PseudoClass::FirstOfType, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 126 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"out-of-range", {CSSSelector::PseudoClass::OutOfRange, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 148 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"volume-locked", {CSSSelector::PseudoClass::VolumeLocked, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 75 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"active-view-transition", {CSSSelector::PseudoClass::ActiveViewTransition, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 96 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"focus-visible", {CSSSelector::PseudoClass::FocusVisible, std::nullopt}},
#line 122 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"nth-of-type", {CSSSelector::PseudoClass::NthOfType, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 124 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"only-of-type", {CSSSelector::PseudoClass::OnlyOfType, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 137 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"seeking", {CSSSelector::PseudoClass::Seeking, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 121 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"nth-last-of-type", {CSSSelector::PseudoClass::NthLastOfType, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 129 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"placeholder-shown", {CSSSelector::PseudoClass::PlaceholderShown, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 80 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-autofill", {CSSSelector::PseudoClass::Autofill, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 89 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"double-button", {CSSSelector::PseudoClass::DoubleButton, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 69 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-any", {CSSSelector::PseudoClass::WebKitAny, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 81 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"buffering", {CSSSelector::PseudoClass::Buffering, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 130 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"playing", {CSSSelector::PseudoClass::Playing, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 99 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-full-screen", {CSSSelector::PseudoClass::Fullscreen, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 140 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"single-button", {CSSSelector::PseudoClass::SingleButton, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 131 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"popover-open", {CSSSelector::PseudoClass::PopoverOpen, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 76 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"active-view-transition-type", {CSSSelector::PseudoClass::ActiveViewTransitionType, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 63 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-apple-has-attachment", {CSSSelector::PseudoClass::AppleHasAttachment, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 73 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-drag", {CSSSelector::PseudoClass::WebKitDrag, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 78 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-any-link", {CSSSelector::PseudoClass::AnyLink, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 64 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-internal-animating-fullscreen-transition", {CSSSelector::PseudoClass::InternalAnimatingFullscreenTransition, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 70 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-autofill-and-obscured", {CSSSelector::PseudoClass::WebKitAutofillAndObscured, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 71 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-autofill-strong-password", {CSSSelector::PseudoClass::WebKitAutofillStrongPassword, std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
    {"",{std::nullopt,std::nullopt}},
#line 72 "SelectorPseudoClassAndCompatibilityElementMap.gperf"
    {"-webkit-autofill-strong-password-viewable", {CSSSelector::PseudoClass::WebKitAutofillStrongPasswordViewable, std::nullopt}}
  };

const struct SelectorPseudoClassOrCompatibilityPseudoElementEntry *
SelectorPseudoClassAndCompatibilityElementMapHash::in_word_set (const char *str, size_t len)
{
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE)
        {
          const char *s = wordlist[key].name;

          if ((((unsigned char)*str ^ (unsigned char)*s) & ~32) == 0 && !gperf_case_strncmp (str, s, len) && s[len] == '\0')
            return &wordlist[key];
        }
    }
  return 0;
}
#line 155 "SelectorPseudoClassAndCompatibilityElementMap.gperf"


static inline const SelectorPseudoClassOrCompatibilityPseudoElementEntry* findPseudoClassAndCompatibilityElementName(std::span<const LChar> characters)
{
    return SelectorPseudoClassAndCompatibilityElementMapHash::in_word_set(byteCast<char>(characters.data()), characters.size());
}

static inline const SelectorPseudoClassOrCompatibilityPseudoElementEntry* findPseudoClassAndCompatibilityElementName(std::span<const char16_t> characters)
{
    constexpr unsigned maxKeywordLength = 41;
    std::array<LChar, maxKeywordLength> buffer;
    if (characters.size() > maxKeywordLength)
        return nullptr;

    for (size_t i = 0; i < characters.size(); ++i) {
        char16_t character = characters[i];
        if (!isLatin1(character))
            return nullptr;

        buffer[i] = static_cast<LChar>(character);
    }
    return findPseudoClassAndCompatibilityElementName(std::span { buffer }.first(characters.size()));
}

PseudoClassOrCompatibilityPseudoElement findPseudoClassAndCompatibilityElementName(StringView name)
{
    const SelectorPseudoClassOrCompatibilityPseudoElementEntry* entry;
    if (name.is8Bit())
        entry = findPseudoClassAndCompatibilityElementName(name.span8());
    else
        entry = findPseudoClassAndCompatibilityElementName(name.span16());

    if (entry)
        return entry->pseudoTypes;
    return { std::nullopt, std::nullopt };
}

} // namespace WebCore

IGNORE_WARNINGS_END
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END
