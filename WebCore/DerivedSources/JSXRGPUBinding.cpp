/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR_LAYERS)

#include "JSXRGPUBinding.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSGPUDevice.h"
#include "JSGPUTextureFormat.h"
#include "JSWebXRFrame.h"
#include "JSWebXRSession.h"
#include "JSWebXRView.h"
#include "JSXRCompositionLayer.h"
#include "JSXREye.h"
#include "JSXRGPUProjectionLayerInit.h"
#include "JSXRGPUSubImage.h"
#include "JSXRProjectionLayer.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_createProjectionLayer);
static JSC_DECLARE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_getSubImage);
static JSC_DECLARE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_getViewSubImage);
static JSC_DECLARE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_getPreferredColorFormat);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsXRGPUBindingConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsXRGPUBinding_nativeProjectionScaleFactor);

class JSXRGPUBindingPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSXRGPUBindingPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSXRGPUBindingPrototype* ptr = new (NotNull, JSC::allocateCell<JSXRGPUBindingPrototype>(vm)) JSXRGPUBindingPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXRGPUBindingPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSXRGPUBindingPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXRGPUBindingPrototype, JSXRGPUBindingPrototype::Base);

using JSXRGPUBindingDOMConstructor = JSDOMConstructor<JSXRGPUBinding>;

template<> EncodedJSValue JSC_HOST_CALL_ATTRIBUTES JSXRGPUBindingDOMConstructor::construct(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = lexicalGlobalObject->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* castedThis = jsCast<JSXRGPUBindingDOMConstructor*>(callFrame->jsCallee());
    ASSERT(castedThis);
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sessionConversionResult = convert<IDLInterface<WebXRSession>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "session"_s, "XRGPUBinding"_s, nullptr, "WebXRSession"_s); });
    if (sessionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto deviceConversionResult = convert<IDLInterface<GPUDevice>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "device"_s, "XRGPUBinding"_s, nullptr, "GPUDevice"_s); });
    if (deviceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto object = XRGPUBinding::create(*sessionConversionResult.releaseReturnValue(), *deviceConversionResult.releaseReturnValue());
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    static_assert(TypeOrExceptionOrUnderlyingType<decltype(object)>::isRef);
    auto jsValue = toJSNewlyCreated<IDLInterface<XRGPUBinding>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, WTFMove(object));
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    setSubclassStructureIfNeeded<XRGPUBinding>(lexicalGlobalObject, callFrame, asObject(jsValue));
    RETURN_IF_EXCEPTION(throwScope, { });
    return JSValue::encode(jsValue);
}
JSC_ANNOTATE_HOST_FUNCTION(JSXRGPUBindingDOMConstructorConstruct, JSXRGPUBindingDOMConstructor::construct);

template<> const ClassInfo JSXRGPUBindingDOMConstructor::s_info = { "XRGPUBinding"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRGPUBindingDOMConstructor) };

template<> JSValue JSXRGPUBindingDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSXRGPUBindingDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(2), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRGPUBinding"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSXRGPUBinding::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSXRGPUBindingPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsXRGPUBindingConstructor, 0 } },
    HashTableValue { "nativeProjectionScaleFactor"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRGPUBinding_nativeProjectionScaleFactor, 0 } },
    HashTableValue { "createProjectionLayer"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsXRGPUBindingPrototypeFunction_createProjectionLayer, 0 } },
    HashTableValue { "getSubImage"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsXRGPUBindingPrototypeFunction_getSubImage, 2 } },
    HashTableValue { "getViewSubImage"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsXRGPUBindingPrototypeFunction_getViewSubImage, 2 } },
    HashTableValue { "getPreferredColorFormat"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsXRGPUBindingPrototypeFunction_getPreferredColorFormat, 0 } },
};

const ClassInfo JSXRGPUBindingPrototype::s_info = { "XRGPUBinding"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRGPUBindingPrototype) };

void JSXRGPUBindingPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSXRGPUBinding::info(), JSXRGPUBindingPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSXRGPUBinding::s_info = { "XRGPUBinding"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRGPUBinding) };

JSXRGPUBinding::JSXRGPUBinding(Structure* structure, JSDOMGlobalObject& globalObject, Ref<XRGPUBinding>&& impl)
    : JSDOMWrapper<XRGPUBinding>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, XRGPUBinding>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSXRGPUBinding::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSXRGPUBindingPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSXRGPUBindingPrototype::create(vm, &globalObject, structure);
}

JSObject* JSXRGPUBinding::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSXRGPUBinding>(vm, globalObject);
}

JSValue JSXRGPUBinding::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSXRGPUBindingDOMConstructor, DOMConstructorID::XRGPUBinding>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSXRGPUBinding::destroy(JSC::JSCell* cell)
{
    JSXRGPUBinding* thisObject = static_cast<JSXRGPUBinding*>(cell);
    thisObject->JSXRGPUBinding::~JSXRGPUBinding();
}

JSC_DEFINE_CUSTOM_GETTER(jsXRGPUBindingConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSXRGPUBindingPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSXRGPUBinding::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsXRGPUBinding_nativeProjectionScaleFactorGetter(JSGlobalObject& lexicalGlobalObject, JSXRGPUBinding& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDouble>(lexicalGlobalObject, throwScope, impl.nativeProjectionScaleFactor())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRGPUBinding_nativeProjectionScaleFactor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRGPUBinding>::get<jsXRGPUBinding_nativeProjectionScaleFactorGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsXRGPUBindingPrototypeFunction_createProjectionLayerBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSXRGPUBinding>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto initConversionResult = convert<IDLDictionary<XRGPUProjectionLayerInit>>(*lexicalGlobalObject, argument0.value());
    if (initConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<XRProjectionLayer>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.createProjectionLayer(*context, initConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_createProjectionLayer, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSXRGPUBinding>::call<jsXRGPUBindingPrototypeFunction_createProjectionLayerBody>(*lexicalGlobalObject, *callFrame, "createProjectionLayer");
}

static inline JSC::EncodedJSValue jsXRGPUBindingPrototypeFunction_getSubImageBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSXRGPUBinding>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto layerConversionResult = convert<IDLInterface<XRCompositionLayer>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "layer"_s, "XRGPUBinding"_s, "getSubImage"_s, "XRCompositionLayer"_s); });
    if (layerConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto frameConversionResult = convert<IDLInterface<WebXRFrame>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "frame"_s, "XRGPUBinding"_s, "getSubImage"_s, "WebXRFrame"_s); });
    if (frameConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->argument(2);
    auto eyeConversionResult = convertOptionalWithDefault<IDLEnumeration<XREye>>(*lexicalGlobalObject, argument2.value(), [&]() -> ConversionResult<IDLEnumeration<XREye>> { return Converter<IDLEnumeration<XREye>>::ReturnType { XREye::None }; }, [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 2, "eye"_s, "XRGPUBinding"_s, "getSubImage"_s, expectedEnumerationValues<XREye>()); });
    if (eyeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<XRGPUSubImage>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getSubImage(*layerConversionResult.releaseReturnValue(), *frameConversionResult.releaseReturnValue(), eyeConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_getSubImage, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSXRGPUBinding>::call<jsXRGPUBindingPrototypeFunction_getSubImageBody>(*lexicalGlobalObject, *callFrame, "getSubImage");
}

static inline JSC::EncodedJSValue jsXRGPUBindingPrototypeFunction_getViewSubImageBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSXRGPUBinding>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto layerConversionResult = convert<IDLInterface<XRProjectionLayer>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "layer"_s, "XRGPUBinding"_s, "getViewSubImage"_s, "XRProjectionLayer"_s); });
    if (layerConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto viewConversionResult = convert<IDLInterface<WebXRView>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "view"_s, "XRGPUBinding"_s, "getViewSubImage"_s, "WebXRView"_s); });
    if (viewConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<XRGPUSubImage>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getViewSubImage(*layerConversionResult.releaseReturnValue(), *viewConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_getViewSubImage, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSXRGPUBinding>::call<jsXRGPUBindingPrototypeFunction_getViewSubImageBody>(*lexicalGlobalObject, *callFrame, "getViewSubImage");
}

static inline JSC::EncodedJSValue jsXRGPUBindingPrototypeFunction_getPreferredColorFormatBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSXRGPUBinding>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLEnumeration<GPUTextureFormat>>(*lexicalGlobalObject, throwScope, impl.getPreferredColorFormat())));
}

JSC_DEFINE_HOST_FUNCTION(jsXRGPUBindingPrototypeFunction_getPreferredColorFormat, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSXRGPUBinding>::call<jsXRGPUBindingPrototypeFunction_getPreferredColorFormatBody>(*lexicalGlobalObject, *callFrame, "getPreferredColorFormat");
}

JSC::GCClient::IsoSubspace* JSXRGPUBinding::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSXRGPUBinding, UseCustomHeapCellType::No>(vm, "JSXRGPUBinding"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForXRGPUBinding.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForXRGPUBinding = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForXRGPUBinding.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForXRGPUBinding = std::forward<decltype(space)>(space); }
    );
}

void JSXRGPUBinding::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSXRGPUBinding*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSXRGPUBindingOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSXRGPUBindingOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsXRGPUBinding = static_cast<JSXRGPUBinding*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsXRGPUBinding->protectedWrapped().ptr(), jsXRGPUBinding);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7XRGPUBinding@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12XRGPUBindingE[]; }
#endif
template<std::same_as<XRGPUBinding> T>
static inline void verifyVTable(XRGPUBinding* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7XRGPUBinding@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore12XRGPUBindingE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // XRGPUBinding has subclasses. If XRGPUBinding has subclasses that get passed
        // to toJS() we currently require XRGPUBinding you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<XRGPUBinding>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<XRGPUBinding>(impl.ptr());
#endif
    return createWrapper<XRGPUBinding>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, XRGPUBinding& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

XRGPUBinding* JSXRGPUBinding::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSXRGPUBinding*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBXR_LAYERS)
