/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSScrollIntoViewOptions.h"

#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertOptional.h"
#include "JSScrollBehavior.h"
#include "JSScrollLogicalPosition.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

template<> ConversionResult<IDLDictionary<ScrollIntoViewOptions>> convertDictionary<ScrollIntoViewOptions>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    ScrollIntoViewOptions result;
    JSValue behaviorValue;
    if (isNullOrUndefined)
        behaviorValue = jsUndefined();
    else {
        behaviorValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "behavior"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto behaviorConversionResult = convertOptionalWithDefault<IDLEnumeration<ScrollBehavior>>(lexicalGlobalObject, behaviorValue, [&]() -> ConversionResult<IDLEnumeration<ScrollBehavior>> { return Converter<IDLEnumeration<ScrollBehavior>>::ReturnType { ScrollBehavior::Auto }; });
    if (behaviorConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.behavior = behaviorConversionResult.releaseReturnValue();
    JSValue blockValue;
    if (isNullOrUndefined)
        blockValue = jsUndefined();
    else {
        blockValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "block"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto blockPositionConversionResult = convertOptionalWithDefault<IDLEnumeration<ScrollLogicalPosition>>(lexicalGlobalObject, blockValue, [&]() -> ConversionResult<IDLEnumeration<ScrollLogicalPosition>> { return Converter<IDLEnumeration<ScrollLogicalPosition>>::ReturnType { ScrollLogicalPosition::Start }; });
    if (blockPositionConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.blockPosition = blockPositionConversionResult.releaseReturnValue();
    JSValue inlineValue;
    if (isNullOrUndefined)
        inlineValue = jsUndefined();
    else {
        inlineValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "inline"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto inlinePositionConversionResult = convertOptionalWithDefault<IDLEnumeration<ScrollLogicalPosition>>(lexicalGlobalObject, inlineValue, [&]() -> ConversionResult<IDLEnumeration<ScrollLogicalPosition>> { return Converter<IDLEnumeration<ScrollLogicalPosition>>::ReturnType { ScrollLogicalPosition::Nearest }; });
    if (inlinePositionConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.inlinePosition = inlinePositionConversionResult.releaseReturnValue();
    return result;
}

} // namespace WebCore

