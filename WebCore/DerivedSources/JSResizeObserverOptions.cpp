/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSResizeObserverOptions.h"

#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertOptional.h"
#include "JSResizeObserverBoxOptions.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

template<> ConversionResult<IDLDictionary<ResizeObserverOptions>> convertDictionary<ResizeObserverOptions>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    ResizeObserverOptions result;
    JSValue boxValue;
    if (isNullOrUndefined)
        boxValue = jsUndefined();
    else {
        boxValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "box"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto boxConversionResult = convertOptionalWithDefault<IDLEnumeration<ResizeObserverBoxOptions>>(lexicalGlobalObject, boxValue, [&]() -> ConversionResult<IDLEnumeration<ResizeObserverBoxOptions>> { return Converter<IDLEnumeration<ResizeObserverBoxOptions>>::ReturnType { ResizeObserverBoxOptions::ContentBox }; });
    if (boxConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.box = boxConversionResult.releaseReturnValue();
    return result;
}

} // namespace WebCore

