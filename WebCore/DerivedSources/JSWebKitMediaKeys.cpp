/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)

#include "JSWebKitMediaKeys.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "Document.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSWebKitMediaKeySession.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsWebKitMediaKeysPrototypeFunction_createSession);
static JSC_DECLARE_HOST_FUNCTION(jsWebKitMediaKeysConstructorFunction_isTypeSupported);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeysConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeys_keySystem);

class JSWebKitMediaKeysPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebKitMediaKeysPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebKitMediaKeysPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebKitMediaKeysPrototype>(vm)) JSWebKitMediaKeysPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebKitMediaKeysPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebKitMediaKeysPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebKitMediaKeysPrototype, JSWebKitMediaKeysPrototype::Base);

using JSWebKitMediaKeysDOMConstructor = JSDOMConstructor<JSWebKitMediaKeys>;

/* Hash table for constructor */

static const std::array<HashTableValue, 1> JSWebKitMediaKeysConstructorTableValues {
    HashTableValue { "isTypeSupported"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebKitMediaKeysConstructorFunction_isTypeSupported, 1 } },
};

template<> EncodedJSValue JSC_HOST_CALL_ATTRIBUTES JSWebKitMediaKeysDOMConstructor::construct(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = lexicalGlobalObject->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* castedThis = jsCast<JSWebKitMediaKeysDOMConstructor*>(callFrame->jsCallee());
    ASSERT(castedThis);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto keySystemConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (keySystemConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto object = WebKitMediaKeys::create(keySystemConversionResult.releaseReturnValue());
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    static_assert(TypeOrExceptionOrUnderlyingType<decltype(object)>::isRef);
    auto jsValue = toJSNewlyCreated<IDLInterface<WebKitMediaKeys>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, WTFMove(object));
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    setSubclassStructureIfNeeded<WebKitMediaKeys>(lexicalGlobalObject, callFrame, asObject(jsValue));
    RETURN_IF_EXCEPTION(throwScope, { });
    return JSValue::encode(jsValue);
}
JSC_ANNOTATE_HOST_FUNCTION(JSWebKitMediaKeysDOMConstructorConstruct, JSWebKitMediaKeysDOMConstructor::construct);

template<> const ClassInfo JSWebKitMediaKeysDOMConstructor::s_info = { "WebKitMediaKeys"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebKitMediaKeysDOMConstructor) };

template<> JSValue JSWebKitMediaKeysDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebKitMediaKeysDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(1), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "WebKitMediaKeys"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWebKitMediaKeys::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
    reifyStaticProperties(vm, JSWebKitMediaKeys::info(), JSWebKitMediaKeysConstructorTableValues, *this);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 3> JSWebKitMediaKeysPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeysConstructor, 0 } },
    HashTableValue { "keySystem"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeys_keySystem, 0 } },
    HashTableValue { "createSession"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebKitMediaKeysPrototypeFunction_createSession, 2 } },
};

const ClassInfo JSWebKitMediaKeysPrototype::s_info = { "WebKitMediaKeys"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebKitMediaKeysPrototype) };

void JSWebKitMediaKeysPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebKitMediaKeys::info(), JSWebKitMediaKeysPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWebKitMediaKeys::s_info = { "WebKitMediaKeys"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebKitMediaKeys) };

JSWebKitMediaKeys::JSWebKitMediaKeys(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebKitMediaKeys>&& impl)
    : JSDOMWrapper<WebKitMediaKeys>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, WebKitMediaKeys>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSWebKitMediaKeys::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWebKitMediaKeysPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSWebKitMediaKeysPrototype::create(vm, &globalObject, structure);
}

JSObject* JSWebKitMediaKeys::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWebKitMediaKeys>(vm, globalObject);
}

JSValue JSWebKitMediaKeys::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitMediaKeysDOMConstructor, DOMConstructorID::WebKitMediaKeys>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSWebKitMediaKeys::destroy(JSC::JSCell* cell)
{
    JSWebKitMediaKeys* thisObject = static_cast<JSWebKitMediaKeys*>(cell);
    thisObject->JSWebKitMediaKeys::~JSWebKitMediaKeys();
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeysConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWebKitMediaKeysPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWebKitMediaKeys::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWebKitMediaKeys_keySystemGetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeys& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.keySystem())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeys_keySystem, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeys>::get<jsWebKitMediaKeys_keySystemGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsWebKitMediaKeysPrototypeFunction_createSessionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebKitMediaKeys>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto typeConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (typeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto initDataConversionResult = convert<IDLUint8Array>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "initData"_s, "WebKitMediaKeys"_s, "createSession"_s, "Uint8Array"_s); });
    if (initDataConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<WebKitMediaKeySession>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.createSession(document.get(), typeConversionResult.releaseReturnValue(), initDataConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebKitMediaKeysPrototypeFunction_createSession, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebKitMediaKeys>::call<jsWebKitMediaKeysPrototypeFunction_createSessionBody>(*lexicalGlobalObject, *callFrame, "createSession");
}

static inline JSC::EncodedJSValue jsWebKitMediaKeysConstructorFunction_isTypeSupportedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto keySystemConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (keySystemConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto typeConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument1.value(), [&]() -> ConversionResult<IDLDOMString> { return typename Converter<IDLDOMString>::ReturnType { String() }; });
    if (typeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, WebKitMediaKeys::isTypeSupported(keySystemConversionResult.releaseReturnValue(), typeConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebKitMediaKeysConstructorFunction_isTypeSupported, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebKitMediaKeys>::callStatic<jsWebKitMediaKeysConstructorFunction_isTypeSupportedBody>(*lexicalGlobalObject, *callFrame, "isTypeSupported");
}

JSC::GCClient::IsoSubspace* JSWebKitMediaKeys::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWebKitMediaKeys, UseCustomHeapCellType::No>(vm, "JSWebKitMediaKeys"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWebKitMediaKeys.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebKitMediaKeys = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWebKitMediaKeys.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebKitMediaKeys = std::forward<decltype(space)>(space); }
    );
}

void JSWebKitMediaKeys::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWebKitMediaKeys*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSWebKitMediaKeysOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSWebKitMediaKeysOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebKitMediaKeys = static_cast<JSWebKitMediaKeys*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebKitMediaKeys->protectedWrapped().ptr(), jsWebKitMediaKeys);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebKitMediaKeys@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15WebKitMediaKeysE[]; }
#endif
template<std::same_as<WebKitMediaKeys> T>
static inline void verifyVTable(WebKitMediaKeys* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7WebKitMediaKeys@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore15WebKitMediaKeysE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // WebKitMediaKeys has subclasses. If WebKitMediaKeys has subclasses that get passed
        // to toJS() we currently require WebKitMediaKeys you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<WebKitMediaKeys>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<WebKitMediaKeys>(impl.ptr());
#endif
    return createWrapper<WebKitMediaKeys>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, WebKitMediaKeys& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

WebKitMediaKeys* JSWebKitMediaKeys::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebKitMediaKeys*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(LEGACY_ENCRYPTED_MEDIA)
