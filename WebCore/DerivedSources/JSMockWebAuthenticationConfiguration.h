/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#pragma once

#if ENABLE(WEB_AUTHN)

#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertEnumeration.h"
#include "MockWebAuthenticationConfiguration.h"

namespace WebCore {

template<> ConversionResult<IDLDictionary<MockWebAuthenticationConfiguration>> convertDictionary<MockWebAuthenticationConfiguration>(JSC::JSGlobalObject&, JSC::JSValue);

#if ENABLE(WEB_AUTHN)

String convertEnumerationToString(MockWebAuthenticationConfiguration::HidStage);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, MockWebAuthenticationConfiguration::HidStage);

template<> std::optional<MockWebAuthenticationConfiguration::HidStage> parseEnumerationFromString<MockWebAuthenticationConfiguration::HidStage>(const String&);
template<> std::optional<MockWebAuthenticationConfiguration::HidStage> parseEnumeration<MockWebAuthenticationConfiguration::HidStage>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<MockWebAuthenticationConfiguration::HidStage>();

#endif

#if ENABLE(WEB_AUTHN)

String convertEnumerationToString(MockWebAuthenticationConfiguration::HidSubStage);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, MockWebAuthenticationConfiguration::HidSubStage);

template<> std::optional<MockWebAuthenticationConfiguration::HidSubStage> parseEnumerationFromString<MockWebAuthenticationConfiguration::HidSubStage>(const String&);
template<> std::optional<MockWebAuthenticationConfiguration::HidSubStage> parseEnumeration<MockWebAuthenticationConfiguration::HidSubStage>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<MockWebAuthenticationConfiguration::HidSubStage>();

#endif

#if ENABLE(WEB_AUTHN)

String convertEnumerationToString(MockWebAuthenticationConfiguration::HidError);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, MockWebAuthenticationConfiguration::HidError);

template<> std::optional<MockWebAuthenticationConfiguration::HidError> parseEnumerationFromString<MockWebAuthenticationConfiguration::HidError>(const String&);
template<> std::optional<MockWebAuthenticationConfiguration::HidError> parseEnumeration<MockWebAuthenticationConfiguration::HidError>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<MockWebAuthenticationConfiguration::HidError>();

#endif

#if ENABLE(WEB_AUTHN)

String convertEnumerationToString(MockWebAuthenticationConfiguration::NfcError);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, MockWebAuthenticationConfiguration::NfcError);

template<> std::optional<MockWebAuthenticationConfiguration::NfcError> parseEnumerationFromString<MockWebAuthenticationConfiguration::NfcError>(const String&);
template<> std::optional<MockWebAuthenticationConfiguration::NfcError> parseEnumeration<MockWebAuthenticationConfiguration::NfcError>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<MockWebAuthenticationConfiguration::NfcError>();

#endif

#if ENABLE(WEB_AUTHN)

String convertEnumerationToString(MockWebAuthenticationConfiguration::UserVerification);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, MockWebAuthenticationConfiguration::UserVerification);

template<> std::optional<MockWebAuthenticationConfiguration::UserVerification> parseEnumerationFromString<MockWebAuthenticationConfiguration::UserVerification>(const String&);
template<> std::optional<MockWebAuthenticationConfiguration::UserVerification> parseEnumeration<MockWebAuthenticationConfiguration::UserVerification>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<MockWebAuthenticationConfiguration::UserVerification>();

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<MockWebAuthenticationConfiguration::LocalConfiguration>> convertDictionary<MockWebAuthenticationConfiguration::LocalConfiguration>(JSC::JSGlobalObject&, JSC::JSValue);

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<MockWebAuthenticationConfiguration::HidConfiguration>> convertDictionary<MockWebAuthenticationConfiguration::HidConfiguration>(JSC::JSGlobalObject&, JSC::JSValue);

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<MockWebAuthenticationConfiguration::NfcConfiguration>> convertDictionary<MockWebAuthenticationConfiguration::NfcConfiguration>(JSC::JSGlobalObject&, JSC::JSValue);

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<MockWebAuthenticationConfiguration::CcidConfiguration>> convertDictionary<MockWebAuthenticationConfiguration::CcidConfiguration>(JSC::JSGlobalObject&, JSC::JSValue);

#endif

} // namespace WebCore

#endif // ENABLE(WEB_AUTHN)
