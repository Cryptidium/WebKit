/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCError.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMWrapperCache.h"
#include "JSRTCErrorDetailType.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

template<> ConversionResult<IDLDictionary<RTCError::Init>> convertDictionary<RTCError::Init>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCError::Init result;
    JSValue errorDetailValue;
    if (isNullOrUndefined)
        errorDetailValue = jsUndefined();
    else {
        errorDetailValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "errorDetail"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (errorDetailValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "errorDetail"_s, "RTCErrorInit"_s, "RTCErrorDetailType"_s);
        return ConversionResultException { };
    }
    auto errorDetailConversionResult = convert<IDLEnumeration<RTCErrorDetailType>>(lexicalGlobalObject, errorDetailValue);
    if (errorDetailConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.errorDetail = errorDetailConversionResult.releaseReturnValue();
    JSValue receivedAlertValue;
    if (isNullOrUndefined)
        receivedAlertValue = jsUndefined();
    else {
        receivedAlertValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "receivedAlert"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!receivedAlertValue.isUndefined()) {
        auto receivedAlertConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, receivedAlertValue);
        if (receivedAlertConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.receivedAlert = receivedAlertConversionResult.releaseReturnValue();
    }
    JSValue sctpCauseCodeValue;
    if (isNullOrUndefined)
        sctpCauseCodeValue = jsUndefined();
    else {
        sctpCauseCodeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sctpCauseCode"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!sctpCauseCodeValue.isUndefined()) {
        auto sctpCauseCodeConversionResult = convert<IDLLong>(lexicalGlobalObject, sctpCauseCodeValue);
        if (sctpCauseCodeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.sctpCauseCode = sctpCauseCodeConversionResult.releaseReturnValue();
    }
    JSValue sdpLineNumberValue;
    if (isNullOrUndefined)
        sdpLineNumberValue = jsUndefined();
    else {
        sdpLineNumberValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sdpLineNumber"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!sdpLineNumberValue.isUndefined()) {
        auto sdpLineNumberConversionResult = convert<IDLLong>(lexicalGlobalObject, sdpLineNumberValue);
        if (sdpLineNumberConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.sdpLineNumber = sdpLineNumberConversionResult.releaseReturnValue();
    }
    JSValue sentAlertValue;
    if (isNullOrUndefined)
        sentAlertValue = jsUndefined();
    else {
        sentAlertValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sentAlert"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!sentAlertValue.isUndefined()) {
        auto sentAlertConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, sentAlertValue);
        if (sentAlertConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.sentAlert = sentAlertConversionResult.releaseReturnValue();
    }
    return result;
}

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCErrorConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCError_errorDetail);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCError_sdpLineNumber);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCError_sctpCauseCode);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCError_receivedAlert);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCError_sentAlert);

class JSRTCErrorPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCErrorPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCErrorPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCErrorPrototype>(vm)) JSRTCErrorPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCErrorPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCErrorPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCErrorPrototype, JSRTCErrorPrototype::Base);

using JSRTCErrorDOMConstructor = JSDOMConstructor<JSRTCError>;

template<> EncodedJSValue JSC_HOST_CALL_ATTRIBUTES JSRTCErrorDOMConstructor::construct(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = lexicalGlobalObject->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* castedThis = jsCast<JSRTCErrorDOMConstructor*>(callFrame->jsCallee());
    ASSERT(castedThis);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto initConversionResult = convert<IDLDictionary<RTCError::Init>>(*lexicalGlobalObject, argument0.value());
    if (initConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto messageConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument1.value(), [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (messageConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto object = RTCError::create(initConversionResult.releaseReturnValue(), messageConversionResult.releaseReturnValue());
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    static_assert(TypeOrExceptionOrUnderlyingType<decltype(object)>::isRef);
    auto jsValue = toJSNewlyCreated<IDLInterface<RTCError>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, WTFMove(object));
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    setSubclassStructureIfNeeded<RTCError>(lexicalGlobalObject, callFrame, asObject(jsValue));
    RETURN_IF_EXCEPTION(throwScope, { });
    return JSValue::encode(jsValue);
}
JSC_ANNOTATE_HOST_FUNCTION(JSRTCErrorDOMConstructorConstruct, JSRTCErrorDOMConstructor::construct);

template<> const ClassInfo JSRTCErrorDOMConstructor::s_info = { "RTCError"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCErrorDOMConstructor) };

template<> JSValue JSRTCErrorDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSDOMException::getConstructor(vm, &globalObject);
}

template<> void JSRTCErrorDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(1), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RTCError"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCError::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSRTCErrorPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCErrorConstructor, 0 } },
    HashTableValue { "errorDetail"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCError_errorDetail, 0 } },
    HashTableValue { "sdpLineNumber"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCError_sdpLineNumber, 0 } },
    HashTableValue { "sctpCauseCode"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCError_sctpCauseCode, 0 } },
    HashTableValue { "receivedAlert"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCError_receivedAlert, 0 } },
    HashTableValue { "sentAlert"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCError_sentAlert, 0 } },
};

const ClassInfo JSRTCErrorPrototype::s_info = { "RTCError"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCErrorPrototype) };

void JSRTCErrorPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCError::info(), JSRTCErrorPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCError::s_info = { "RTCError"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCError) };

JSRTCError::JSRTCError(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCError>&& impl)
    : JSDOMException(structure, globalObject, WTFMove(impl))
{
}

Ref<RTCError> JSRTCError::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, RTCError>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSRTCError::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCErrorPrototype::createStructure(vm, &globalObject, JSDOMException::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSRTCErrorPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCError::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCError>(vm, globalObject);
}

JSValue JSRTCError::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCErrorDOMConstructor, DOMConstructorID::RTCError>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCErrorConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCErrorPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCError::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCError_errorDetailGetter(JSGlobalObject& lexicalGlobalObject, JSRTCError& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCErrorDetailType>>(lexicalGlobalObject, throwScope, impl.errorDetail())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCError_errorDetail, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCError>::get<jsRTCError_errorDetailGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCError_sdpLineNumberGetter(JSGlobalObject& lexicalGlobalObject, JSRTCError& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLLong>>(lexicalGlobalObject, throwScope, impl.sdpLineNumber())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCError_sdpLineNumber, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCError>::get<jsRTCError_sdpLineNumberGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCError_sctpCauseCodeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCError& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLLong>>(lexicalGlobalObject, throwScope, impl.sctpCauseCode())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCError_sctpCauseCode, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCError>::get<jsRTCError_sctpCauseCodeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCError_receivedAlertGetter(JSGlobalObject& lexicalGlobalObject, JSRTCError& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.receivedAlert())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCError_receivedAlert, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCError>::get<jsRTCError_receivedAlertGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCError_sentAlertGetter(JSGlobalObject& lexicalGlobalObject, JSRTCError& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.sentAlert())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCError_sentAlert, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCError>::get<jsRTCError_sentAlertGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

JSC::GCClient::IsoSubspace* JSRTCError::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCError, UseCustomHeapCellType::No>(vm, "JSRTCError"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCError.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCError = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCError.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCError = std::forward<decltype(space)>(space); }
    );
}

void JSRTCError::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCError*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCError>&& impl)
{
    return createWrapper<RTCError>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCError& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCError* JSRTCError::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCError*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
