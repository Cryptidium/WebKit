/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR_LAYERS)

#include "JSXREquirectLayer.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSWebXRRigidTransform.h"
#include "JSWebXRSpace.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayer_space);
static JSC_DECLARE_CUSTOM_SETTER(setJSXREquirectLayer_space);
static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayer_transform);
static JSC_DECLARE_CUSTOM_SETTER(setJSXREquirectLayer_transform);
static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayer_radius);
static JSC_DECLARE_CUSTOM_SETTER(setJSXREquirectLayer_radius);
static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayer_centralHorizontalAngle);
static JSC_DECLARE_CUSTOM_SETTER(setJSXREquirectLayer_centralHorizontalAngle);
static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayer_upperVerticalAngle);
static JSC_DECLARE_CUSTOM_SETTER(setJSXREquirectLayer_upperVerticalAngle);
static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayer_lowerVerticalAngle);
static JSC_DECLARE_CUSTOM_SETTER(setJSXREquirectLayer_lowerVerticalAngle);
static JSC_DECLARE_CUSTOM_GETTER(jsXREquirectLayer_onredraw);
static JSC_DECLARE_CUSTOM_SETTER(setJSXREquirectLayer_onredraw);

class JSXREquirectLayerPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSXREquirectLayerPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSXREquirectLayerPrototype* ptr = new (NotNull, JSC::allocateCell<JSXREquirectLayerPrototype>(vm)) JSXREquirectLayerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXREquirectLayerPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSXREquirectLayerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXREquirectLayerPrototype, JSXREquirectLayerPrototype::Base);

using JSXREquirectLayerDOMConstructor = JSDOMConstructorNotConstructable<JSXREquirectLayer>;

template<> const ClassInfo JSXREquirectLayerDOMConstructor::s_info = { "XREquirectLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXREquirectLayerDOMConstructor) };

template<> JSValue JSXREquirectLayerDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSXRCompositionLayer::getConstructor(vm, &globalObject);
}

template<> void JSXREquirectLayerDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XREquirectLayer"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSXREquirectLayer::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 8> JSXREquirectLayerPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayerConstructor, 0 } },
    HashTableValue { "space"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayer_space, setJSXREquirectLayer_space } },
    HashTableValue { "transform"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayer_transform, setJSXREquirectLayer_transform } },
    HashTableValue { "radius"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayer_radius, setJSXREquirectLayer_radius } },
    HashTableValue { "centralHorizontalAngle"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayer_centralHorizontalAngle, setJSXREquirectLayer_centralHorizontalAngle } },
    HashTableValue { "upperVerticalAngle"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayer_upperVerticalAngle, setJSXREquirectLayer_upperVerticalAngle } },
    HashTableValue { "lowerVerticalAngle"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayer_lowerVerticalAngle, setJSXREquirectLayer_lowerVerticalAngle } },
    HashTableValue { "onredraw"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXREquirectLayer_onredraw, setJSXREquirectLayer_onredraw } },
};

const ClassInfo JSXREquirectLayerPrototype::s_info = { "XREquirectLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXREquirectLayerPrototype) };

void JSXREquirectLayerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSXREquirectLayer::info(), JSXREquirectLayerPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSXREquirectLayer::s_info = { "XREquirectLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXREquirectLayer) };

JSXREquirectLayer::JSXREquirectLayer(Structure* structure, JSDOMGlobalObject& globalObject, Ref<XREquirectLayer>&& impl)
    : JSXRCompositionLayer(structure, globalObject, WTFMove(impl))
{
}

Ref<XREquirectLayer> JSXREquirectLayer::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, XREquirectLayer>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSXREquirectLayer::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSXREquirectLayerPrototype::createStructure(vm, &globalObject, JSXRCompositionLayer::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSXREquirectLayerPrototype::create(vm, &globalObject, structure);
}

JSObject* JSXREquirectLayer::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSXREquirectLayer>(vm, globalObject);
}

JSValue JSXREquirectLayer::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSXREquirectLayerDOMConstructor, DOMConstructorID::XREquirectLayer>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSXREquirectLayerPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSXREquirectLayer::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsXREquirectLayer_spaceGetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebXRSpace>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.space())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayer_space, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::get<jsXREquirectLayer_spaceGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXREquirectLayer_spaceSetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLInterface<WebXRSpace>>(lexicalGlobalObject, value, [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwAttributeTypeError(lexicalGlobalObject, scope, "XREquirectLayer"_s, "space"_s, "WebXRSpace"_s); });
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setSpace(*nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXREquirectLayer_space, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::set<setJSXREquirectLayer_spaceSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXREquirectLayer_transformGetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebXRRigidTransform>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.transform())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayer_transform, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::get<jsXREquirectLayer_transformGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXREquirectLayer_transformSetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLInterface<WebXRRigidTransform>>(lexicalGlobalObject, value, [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwAttributeTypeError(lexicalGlobalObject, scope, "XREquirectLayer"_s, "transform"_s, "WebXRRigidTransform"_s); });
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTransform(*nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXREquirectLayer_transform, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::set<setJSXREquirectLayer_transformSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXREquirectLayer_radiusGetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLFloat>(lexicalGlobalObject, throwScope, impl.radius())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayer_radius, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::get<jsXREquirectLayer_radiusGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXREquirectLayer_radiusSetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLFloat>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setRadius(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXREquirectLayer_radius, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::set<setJSXREquirectLayer_radiusSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXREquirectLayer_centralHorizontalAngleGetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLFloat>(lexicalGlobalObject, throwScope, impl.centralHorizontalAngle())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayer_centralHorizontalAngle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::get<jsXREquirectLayer_centralHorizontalAngleGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXREquirectLayer_centralHorizontalAngleSetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLFloat>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setCentralHorizontalAngle(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXREquirectLayer_centralHorizontalAngle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::set<setJSXREquirectLayer_centralHorizontalAngleSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXREquirectLayer_upperVerticalAngleGetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLFloat>(lexicalGlobalObject, throwScope, impl.upperVerticalAngle())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayer_upperVerticalAngle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::get<jsXREquirectLayer_upperVerticalAngleGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXREquirectLayer_upperVerticalAngleSetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLFloat>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setUpperVerticalAngle(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXREquirectLayer_upperVerticalAngle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::set<setJSXREquirectLayer_upperVerticalAngleSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXREquirectLayer_lowerVerticalAngleGetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLFloat>(lexicalGlobalObject, throwScope, impl.lowerVerticalAngle())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayer_lowerVerticalAngle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::get<jsXREquirectLayer_lowerVerticalAngleGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXREquirectLayer_lowerVerticalAngleSetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLFloat>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setLowerVerticalAngle(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXREquirectLayer_lowerVerticalAngle, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::set<setJSXREquirectLayer_lowerVerticalAngleSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXREquirectLayer_onredrawGetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().redrawEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsXREquirectLayer_onredraw, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::get<jsXREquirectLayer_onredrawGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXREquirectLayer_onredrawSetter(JSGlobalObject& lexicalGlobalObject, JSXREquirectLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().redrawEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXREquirectLayer_onredraw, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXREquirectLayer>::set<setJSXREquirectLayer_onredrawSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

JSC::GCClient::IsoSubspace* JSXREquirectLayer::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSXREquirectLayer, UseCustomHeapCellType::No>(vm, "JSXREquirectLayer"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForXREquirectLayer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForXREquirectLayer = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForXREquirectLayer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForXREquirectLayer = std::forward<decltype(space)>(space); }
    );
}

void JSXREquirectLayer::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSXREquirectLayer*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}


}

#endif // ENABLE(WEBXR_LAYERS)
