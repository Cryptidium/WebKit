/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtpSFrameTransform.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSReadableStream.h"
#include "JSWritableStream.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(RTCRtpSFrameTransform::Role enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 2> values {
        MAKE_STATIC_STRING_IMPL("encrypt"),
        MAKE_STATIC_STRING_IMPL("decrypt"),
    };
    static_assert(static_cast<size_t>(RTCRtpSFrameTransform::Role::Encrypt) == 0, "RTCRtpSFrameTransform::Role::Encrypt is not 0 as expected");
    static_assert(static_cast<size_t>(RTCRtpSFrameTransform::Role::Decrypt) == 1, "RTCRtpSFrameTransform::Role::Decrypt is not 1 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, RTCRtpSFrameTransform::Role enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<RTCRtpSFrameTransform::Role> parseEnumerationFromString<RTCRtpSFrameTransform::Role>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, RTCRtpSFrameTransform::Role>, 2> mappings {
        std::pair<ComparableASCIILiteral, RTCRtpSFrameTransform::Role> { "decrypt"_s, RTCRtpSFrameTransform::Role::Decrypt },
        std::pair<ComparableASCIILiteral, RTCRtpSFrameTransform::Role> { "encrypt"_s, RTCRtpSFrameTransform::Role::Encrypt },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<RTCRtpSFrameTransform::Role> parseEnumeration<RTCRtpSFrameTransform::Role>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<RTCRtpSFrameTransform::Role>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<RTCRtpSFrameTransform::Role>()
{
    return "\"encrypt\", \"decrypt\""_s;
}

String convertEnumerationToString(RTCRtpSFrameTransform::CompatibilityMode enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("none"),
        MAKE_STATIC_STRING_IMPL("H264"),
        MAKE_STATIC_STRING_IMPL("VP8"),
    };
    static_assert(static_cast<size_t>(RTCRtpSFrameTransform::CompatibilityMode::None) == 0, "RTCRtpSFrameTransform::CompatibilityMode::None is not 0 as expected");
    static_assert(static_cast<size_t>(RTCRtpSFrameTransform::CompatibilityMode::H264) == 1, "RTCRtpSFrameTransform::CompatibilityMode::H264 is not 1 as expected");
    static_assert(static_cast<size_t>(RTCRtpSFrameTransform::CompatibilityMode::VP8) == 2, "RTCRtpSFrameTransform::CompatibilityMode::VP8 is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, RTCRtpSFrameTransform::CompatibilityMode enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<RTCRtpSFrameTransform::CompatibilityMode> parseEnumerationFromString<RTCRtpSFrameTransform::CompatibilityMode>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, RTCRtpSFrameTransform::CompatibilityMode>, 3> mappings {
        std::pair<ComparableASCIILiteral, RTCRtpSFrameTransform::CompatibilityMode> { "H264"_s, RTCRtpSFrameTransform::CompatibilityMode::H264 },
        std::pair<ComparableASCIILiteral, RTCRtpSFrameTransform::CompatibilityMode> { "VP8"_s, RTCRtpSFrameTransform::CompatibilityMode::VP8 },
        std::pair<ComparableASCIILiteral, RTCRtpSFrameTransform::CompatibilityMode> { "none"_s, RTCRtpSFrameTransform::CompatibilityMode::None },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<RTCRtpSFrameTransform::CompatibilityMode> parseEnumeration<RTCRtpSFrameTransform::CompatibilityMode>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<RTCRtpSFrameTransform::CompatibilityMode>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<RTCRtpSFrameTransform::CompatibilityMode>()
{
    return "\"none\", \"H264\", \"VP8\""_s;
}

template<> ConversionResult<IDLDictionary<RTCRtpSFrameTransform::Options>> convertDictionary<RTCRtpSFrameTransform::Options>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCRtpSFrameTransform::Options result;
    JSValue authenticationSizeValue;
    if (isNullOrUndefined)
        authenticationSizeValue = jsUndefined();
    else {
        authenticationSizeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "authenticationSize"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto authenticationSizeConversionResult = convertOptionalWithDefault<IDLUnsignedLong>(lexicalGlobalObject, authenticationSizeValue, [&]() -> ConversionResult<IDLUnsignedLong> { return Converter<IDLUnsignedLong>::ReturnType { 10 }; });
    if (authenticationSizeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.authenticationSize = authenticationSizeConversionResult.releaseReturnValue();
    JSValue compatibilityModeValue;
    if (isNullOrUndefined)
        compatibilityModeValue = jsUndefined();
    else {
        compatibilityModeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "compatibilityMode"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto compatibilityModeConversionResult = convertOptionalWithDefault<IDLEnumeration<RTCRtpSFrameTransform::CompatibilityMode>>(lexicalGlobalObject, compatibilityModeValue, [&]() -> ConversionResult<IDLEnumeration<RTCRtpSFrameTransform::CompatibilityMode>> { return Converter<IDLEnumeration<RTCRtpSFrameTransform::CompatibilityMode>>::ReturnType { RTCRtpSFrameTransform::CompatibilityMode::None }; });
    if (compatibilityModeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.compatibilityMode = compatibilityModeConversionResult.releaseReturnValue();
    JSValue roleValue;
    if (isNullOrUndefined)
        roleValue = jsUndefined();
    else {
        roleValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "role"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto roleConversionResult = convertOptionalWithDefault<IDLEnumeration<RTCRtpSFrameTransform::Role>>(lexicalGlobalObject, roleValue, [&]() -> ConversionResult<IDLEnumeration<RTCRtpSFrameTransform::Role>> { return Converter<IDLEnumeration<RTCRtpSFrameTransform::Role>>::ReturnType { RTCRtpSFrameTransform::Role::Encrypt }; });
    if (roleConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.role = roleConversionResult.releaseReturnValue();
    return result;
}

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpSFrameTransformPrototypeFunction_setEncryptionKey);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSFrameTransformConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSFrameTransform_readable);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSFrameTransform_writable);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpSFrameTransform_onerror);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCRtpSFrameTransform_onerror);

class JSRTCRtpSFrameTransformPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCRtpSFrameTransformPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCRtpSFrameTransformPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCRtpSFrameTransformPrototype>(vm)) JSRTCRtpSFrameTransformPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCRtpSFrameTransformPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCRtpSFrameTransformPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCRtpSFrameTransformPrototype, JSRTCRtpSFrameTransformPrototype::Base);

using JSRTCRtpSFrameTransformDOMConstructor = JSDOMConstructor<JSRTCRtpSFrameTransform>;

template<> EncodedJSValue JSC_HOST_CALL_ATTRIBUTES JSRTCRtpSFrameTransformDOMConstructor::construct(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = lexicalGlobalObject->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* castedThis = jsCast<JSRTCRtpSFrameTransformDOMConstructor*>(callFrame->jsCallee());
    ASSERT(castedThis);
    auto* context = castedThis->scriptExecutionContext();
    if (!context) [[unlikely]]
        return throwConstructorScriptExecutionContextUnavailableError(*lexicalGlobalObject, throwScope, "SFrameTransform"_s);
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto optionsConversionResult = convert<IDLDictionary<RTCRtpSFrameTransform::Options>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto object = RTCRtpSFrameTransform::create(*context, optionsConversionResult.releaseReturnValue());
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    static_assert(TypeOrExceptionOrUnderlyingType<decltype(object)>::isRef);
    auto jsValue = toJSNewlyCreated<IDLInterface<RTCRtpSFrameTransform>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, WTFMove(object));
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    setSubclassStructureIfNeeded<RTCRtpSFrameTransform>(lexicalGlobalObject, callFrame, asObject(jsValue));
    RETURN_IF_EXCEPTION(throwScope, { });
    return JSValue::encode(jsValue);
}
JSC_ANNOTATE_HOST_FUNCTION(JSRTCRtpSFrameTransformDOMConstructorConstruct, JSRTCRtpSFrameTransformDOMConstructor::construct);

template<> const ClassInfo JSRTCRtpSFrameTransformDOMConstructor::s_info = { "SFrameTransform"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpSFrameTransformDOMConstructor) };

template<> JSValue JSRTCRtpSFrameTransformDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSRTCRtpSFrameTransformDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "SFrameTransform"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCRtpSFrameTransform::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 5> JSRTCRtpSFrameTransformPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSFrameTransformConstructor, 0 } },
    HashTableValue { "readable"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSFrameTransform_readable, 0 } },
    HashTableValue { "writable"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSFrameTransform_writable, 0 } },
    HashTableValue { "onerror"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpSFrameTransform_onerror, setJSRTCRtpSFrameTransform_onerror } },
    HashTableValue { "setEncryptionKey"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpSFrameTransformPrototypeFunction_setEncryptionKey, 1 } },
};

const ClassInfo JSRTCRtpSFrameTransformPrototype::s_info = { "SFrameTransform"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpSFrameTransformPrototype) };

void JSRTCRtpSFrameTransformPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCRtpSFrameTransform::info(), JSRTCRtpSFrameTransformPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCRtpSFrameTransform::s_info = { "SFrameTransform"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpSFrameTransform) };

JSRTCRtpSFrameTransform::JSRTCRtpSFrameTransform(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCRtpSFrameTransform>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<RTCRtpSFrameTransform> JSRTCRtpSFrameTransform::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, RTCRtpSFrameTransform>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSRTCRtpSFrameTransform::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCRtpSFrameTransformPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSRTCRtpSFrameTransformPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCRtpSFrameTransform::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCRtpSFrameTransform>(vm, globalObject);
}

JSValue JSRTCRtpSFrameTransform::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCRtpSFrameTransformDOMConstructor, DOMConstructorID::RTCRtpSFrameTransform>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSFrameTransformConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCRtpSFrameTransformPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCRtpSFrameTransform::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCRtpSFrameTransform_readableGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSFrameTransform& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<ReadableStream>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.readable())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSFrameTransform_readable, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSFrameTransform>::get<jsRTCRtpSFrameTransform_readableGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCRtpSFrameTransform_writableGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSFrameTransform& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WritableStream>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.writable())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSFrameTransform_writable, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSFrameTransform>::get<jsRTCRtpSFrameTransform_writableGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCRtpSFrameTransform_onerrorGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSFrameTransform& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().errorEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpSFrameTransform_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSFrameTransform>::get<jsRTCRtpSFrameTransform_onerrorGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCRtpSFrameTransform_onerrorSetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpSFrameTransform& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().errorEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCRtpSFrameTransform_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpSFrameTransform>::set<setJSRTCRtpSFrameTransform_onerrorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsRTCRtpSFrameTransformPrototypeFunction_setEncryptionKeyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRTCRtpSFrameTransform>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    RELEASE_AND_RETURN(throwScope, (JSValue::encode(castedThis->setEncryptionKey(*lexicalGlobalObject, *callFrame, WTFMove(promise)))));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpSFrameTransformPrototypeFunction_setEncryptionKey, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRTCRtpSFrameTransform>::call<jsRTCRtpSFrameTransformPrototypeFunction_setEncryptionKeyBody>(*lexicalGlobalObject, *callFrame, "setEncryptionKey");
}

JSC::GCClient::IsoSubspace* JSRTCRtpSFrameTransform::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCRtpSFrameTransform, UseCustomHeapCellType::No>(vm, "JSRTCRtpSFrameTransform"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCRtpSFrameTransform.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCRtpSFrameTransform = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCRtpSFrameTransform.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCRtpSFrameTransform = std::forward<decltype(space)>(space); }
    );
}

void JSRTCRtpSFrameTransform::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCRtpSFrameTransform*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRTCRtpSFrameTransformOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsRTCRtpSFrameTransform = jsCast<JSRTCRtpSFrameTransform*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsRTCRtpSFrameTransform->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSRTCRtpSFrameTransformOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCRtpSFrameTransform = static_cast<JSRTCRtpSFrameTransform*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCRtpSFrameTransform->protectedWrapped().ptr(), jsRTCRtpSFrameTransform);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCRtpSFrameTransform@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore21RTCRtpSFrameTransformE[]; }
#endif
template<std::same_as<RTCRtpSFrameTransform> T>
static inline void verifyVTable(RTCRtpSFrameTransform* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7RTCRtpSFrameTransform@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore21RTCRtpSFrameTransformE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // RTCRtpSFrameTransform has subclasses. If RTCRtpSFrameTransform has subclasses that get passed
        // to toJS() we currently require RTCRtpSFrameTransform you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCRtpSFrameTransform>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<RTCRtpSFrameTransform>(impl.ptr());
#endif
    return createWrapper<RTCRtpSFrameTransform>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCRtpSFrameTransform& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCRtpSFrameTransform* JSRTCRtpSFrameTransform::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCRtpSFrameTransform*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
