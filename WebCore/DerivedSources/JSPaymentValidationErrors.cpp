/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PAYMENT_REQUEST)

#include "JSPaymentValidationErrors.h"

#include "JSAddressErrors.h"
#include "JSDOMConvertObject.h"
#include "JSDOMConvertStrings.h"
#include "JSPayerErrorFields.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(PAYMENT_REQUEST)

template<> ConversionResult<IDLDictionary<PaymentValidationErrors>> convertDictionary<PaymentValidationErrors>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    PaymentValidationErrors result;
    JSValue errorValue;
    if (isNullOrUndefined)
        errorValue = jsUndefined();
    else {
        errorValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "error"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!errorValue.isUndefined()) {
        auto errorConversionResult = convert<IDLDOMString>(lexicalGlobalObject, errorValue);
        if (errorConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.error = errorConversionResult.releaseReturnValue();
    }
    JSValue payerValue;
    if (isNullOrUndefined)
        payerValue = jsUndefined();
    else {
        payerValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "payer"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!payerValue.isUndefined()) {
        auto payerConversionResult = convert<IDLDictionary<PayerErrorFields>>(lexicalGlobalObject, payerValue);
        if (payerConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.payer = payerConversionResult.releaseReturnValue();
    }
    JSValue paymentMethodValue;
    if (isNullOrUndefined)
        paymentMethodValue = jsUndefined();
    else {
        paymentMethodValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "paymentMethod"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!paymentMethodValue.isUndefined()) {
        auto paymentMethodConversionResult = convert<IDLObject>(lexicalGlobalObject, paymentMethodValue);
        if (paymentMethodConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.paymentMethod = paymentMethodConversionResult.releaseReturnValue();
    }
    JSValue shippingAddressValue;
    if (isNullOrUndefined)
        shippingAddressValue = jsUndefined();
    else {
        shippingAddressValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "shippingAddress"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!shippingAddressValue.isUndefined()) {
        auto shippingAddressConversionResult = convert<IDLDictionary<AddressErrors>>(lexicalGlobalObject, shippingAddressValue);
        if (shippingAddressConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.shippingAddress = shippingAddressConversionResult.releaseReturnValue();
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(PAYMENT_REQUEST)
