/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR_HANDS)

#include "JSWebXRHand.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMIterator.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSWebXRJointSpace.h"
#include "JSXRHandJoint.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include "WebCoreOpaqueRootInlines.h"
#include <JavaScriptCore/BuiltinNames.h>
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_get);
static JSC_DECLARE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_entries);
static JSC_DECLARE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_keys);
static JSC_DECLARE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_values);
static JSC_DECLARE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_forEach);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWebXRHandConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRHand_size);

class JSWebXRHandPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebXRHandPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebXRHandPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebXRHandPrototype>(vm)) JSWebXRHandPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRHandPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebXRHandPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRHandPrototype, JSWebXRHandPrototype::Base);

using JSWebXRHandDOMConstructor = JSDOMConstructorNotConstructable<JSWebXRHand>;

template<> const ClassInfo JSWebXRHandDOMConstructor::s_info = { "XRHand"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRHandDOMConstructor) };

template<> JSValue JSWebXRHandDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebXRHandDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRHand"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWebXRHand::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 7> JSWebXRHandPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRHandConstructor, 0 } },
    HashTableValue { "size"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRHand_size, 0 } },
    HashTableValue { "get"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRHandPrototypeFunction_get, 1 } },
    HashTableValue { "entries"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRHandPrototypeFunction_entries, 0 } },
    HashTableValue { "keys"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRHandPrototypeFunction_keys, 0 } },
    HashTableValue { "values"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRHandPrototypeFunction_values, 0 } },
    HashTableValue { "forEach"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRHandPrototypeFunction_forEach, 1 } },
};

const ClassInfo JSWebXRHandPrototype::s_info = { "XRHand"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRHandPrototype) };

void JSWebXRHandPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebXRHand::info(), JSWebXRHandPrototypeTableValues, *this);
    putDirect(vm, vm.propertyNames->iteratorSymbol, getDirect(vm, vm.propertyNames->builtinNames().entriesPublicName()), static_cast<unsigned>(JSC::PropertyAttribute::DontEnum));
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWebXRHand::s_info = { "XRHand"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRHand) };

JSWebXRHand::JSWebXRHand(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebXRHand>&& impl)
    : JSDOMWrapper<WebXRHand>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, WebXRHand>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSWebXRHand::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWebXRHandPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSWebXRHandPrototype::create(vm, &globalObject, structure);
}

JSObject* JSWebXRHand::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWebXRHand>(vm, globalObject);
}

JSValue JSWebXRHand::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebXRHandDOMConstructor, DOMConstructorID::WebXRHand>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSWebXRHand::destroy(JSC::JSCell* cell)
{
    JSWebXRHand* thisObject = static_cast<JSWebXRHand*>(cell);
    thisObject->JSWebXRHand::~JSWebXRHand();
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRHandConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWebXRHandPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWebXRHand::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWebXRHand_sizeGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRHand& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.size())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRHand_size, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRHand>::get<jsWebXRHand_sizeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsWebXRHandPrototypeFunction_getBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebXRHand>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto keyConversionResult = convert<IDLEnumeration<XRHandJoint>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "key"_s, "XRHand"_s, "get"_s, expectedEnumerationValues<XRHandJoint>()); });
    if (keyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<WebXRJointSpace>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.get(keyConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_get, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRHand>::call<jsWebXRHandPrototypeFunction_getBody>(*lexicalGlobalObject, *callFrame, "get");
}

struct WebXRHandIteratorTraits {
    static constexpr JSDOMIteratorType type = JSDOMIteratorType::Map;
    using KeyType = IDLEnumeration<XRHandJoint>;
    using ValueType = IDLInterface<WebXRJointSpace>;
};

using WebXRHandIteratorBase = JSDOMIteratorBase<JSWebXRHand, WebXRHandIteratorTraits>;
class WebXRHandIterator final : public WebXRHandIteratorBase {
public:
    using Base = WebXRHandIteratorBase;
    DECLARE_INFO;

    template<typename, SubspaceAccess mode> static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        if constexpr (mode == JSC::SubspaceAccess::Concurrently)
            return nullptr;
        return WebCore::subspaceForImpl<WebXRHandIterator, UseCustomHeapCellType::No>(vm, "WebXRHandIterator"_s,
            [] (auto& spaces) { return spaces.m_clientSubspaceForWebXRHandIterator.get(); },
            [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebXRHandIterator = std::forward<decltype(space)>(space); },
            [] (auto& spaces) { return spaces.m_subspaceForWebXRHandIterator.get(); },
            [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebXRHandIterator = std::forward<decltype(space)>(space); }
        );
    }

    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

    static WebXRHandIterator* create(JSC::VM& vm, JSC::Structure* structure, JSWebXRHand& iteratedObject, IterationKind kind)
    {
        auto* instance = new (NotNull, JSC::allocateCell<WebXRHandIterator>(vm)) WebXRHandIterator(structure, iteratedObject, kind);
        instance->finishCreation(vm);
        return instance;
    }
private:
    WebXRHandIterator(JSC::Structure* structure, JSWebXRHand& iteratedObject, IterationKind kind)
        : Base(structure, iteratedObject, kind)
    {
    }
};

using WebXRHandIteratorPrototype = JSDOMIteratorPrototype<JSWebXRHand, WebXRHandIteratorTraits>;
JSC_ANNOTATE_HOST_FUNCTION(WebXRHandIteratorPrototypeNext, WebXRHandIteratorPrototype::next);

template<>
const JSC::ClassInfo WebXRHandIteratorBase::s_info = { "XRHandBase Iterator"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(WebXRHandIteratorBase) };
const JSC::ClassInfo WebXRHandIterator::s_info = { "XRHand Iterator"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(WebXRHandIterator) };

template<>
const JSC::ClassInfo WebXRHandIteratorPrototype::s_info = { "XRHand Iterator"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(WebXRHandIteratorPrototype) };

static inline EncodedJSValue jsWebXRHandPrototypeFunction_entriesCaller(JSGlobalObject*, CallFrame*, JSWebXRHand* thisObject)
{
    return JSValue::encode(iteratorCreate<WebXRHandIterator>(*thisObject, IterationKind::Entries));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_entries, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSWebXRHand>::call<jsWebXRHandPrototypeFunction_entriesCaller>(*lexicalGlobalObject, *callFrame, "entries");
}

static inline EncodedJSValue jsWebXRHandPrototypeFunction_keysCaller(JSGlobalObject*, CallFrame*, JSWebXRHand* thisObject)
{
    return JSValue::encode(iteratorCreate<WebXRHandIterator>(*thisObject, IterationKind::Keys));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_keys, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSWebXRHand>::call<jsWebXRHandPrototypeFunction_keysCaller>(*lexicalGlobalObject, *callFrame, "keys");
}

static inline EncodedJSValue jsWebXRHandPrototypeFunction_valuesCaller(JSGlobalObject*, CallFrame*, JSWebXRHand* thisObject)
{
    return JSValue::encode(iteratorCreate<WebXRHandIterator>(*thisObject, IterationKind::Values));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_values, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSWebXRHand>::call<jsWebXRHandPrototypeFunction_valuesCaller>(*lexicalGlobalObject, *callFrame, "values");
}

static inline EncodedJSValue jsWebXRHandPrototypeFunction_forEachCaller(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame, JSWebXRHand* thisObject)
{
    return JSValue::encode(iteratorForEach<WebXRHandIterator>(*lexicalGlobalObject, *callFrame, *thisObject));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRHandPrototypeFunction_forEach, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSWebXRHand>::call<jsWebXRHandPrototypeFunction_forEachCaller>(*lexicalGlobalObject, *callFrame, "forEach");
}

JSC::GCClient::IsoSubspace* JSWebXRHand::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWebXRHand, UseCustomHeapCellType::No>(vm, "JSWebXRHand"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWebXRHand.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebXRHand = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWebXRHand.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebXRHand = std::forward<decltype(space)>(space); }
    );
}

void JSWebXRHand::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWebXRHand*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSWebXRHandOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    auto* jsWebXRHand = jsCast<JSWebXRHand*>(handle.slot()->asCell());
    WebXRSession* owner = WTF::getPtr(jsWebXRHand->wrapped().session());
    if (!owner)
        return false;
    if (reason) [[unlikely]]
        *reason = "Reachable from WebXRSession"_s;
    return containsWebCoreOpaqueRoot(visitor, owner);
}

void JSWebXRHandOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebXRHand = static_cast<JSWebXRHand*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebXRHand->protectedWrapped().ptr(), jsWebXRHand);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebXRHand@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore9WebXRHandE[]; }
#endif
template<std::same_as<WebXRHand> T>
static inline void verifyVTable(WebXRHand* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7WebXRHand@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore9WebXRHandE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // WebXRHand has subclasses. If WebXRHand has subclasses that get passed
        // to toJS() we currently require WebXRHand you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<WebXRHand>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<WebXRHand>(impl.ptr());
#endif
    return createWrapper<WebXRHand>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, WebXRHand& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

WebXRHand* JSWebXRHand::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebXRHand*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBXR_HANDS)
