/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(DEVICE_ORIENTATION)

#include "JSDeviceOrientationEvent.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "Document.h"
#include "DocumentInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSDeviceOrientationOrMotionPermissionState.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsDeviceOrientationEventConstructorFunction_requestPermission);
static JSC_DECLARE_HOST_FUNCTION(jsDeviceOrientationEventPrototypeFunction_initDeviceOrientationEvent);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsDeviceOrientationEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceOrientationEvent_alpha);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceOrientationEvent_beta);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceOrientationEvent_gamma);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceOrientationEvent_absolute);

class JSDeviceOrientationEventPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDeviceOrientationEventPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDeviceOrientationEventPrototype* ptr = new (NotNull, JSC::allocateCell<JSDeviceOrientationEventPrototype>(vm)) JSDeviceOrientationEventPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDeviceOrientationEventPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDeviceOrientationEventPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDeviceOrientationEventPrototype, JSDeviceOrientationEventPrototype::Base);

using JSDeviceOrientationEventDOMConstructor = JSDOMConstructorNotConstructable<JSDeviceOrientationEvent>;

/* Hash table for constructor */

static const std::array<HashTableValue, 1> JSDeviceOrientationEventConstructorTableValues {
    HashTableValue { "requestPermission"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDeviceOrientationEventConstructorFunction_requestPermission, 0 } },
};

template<> const ClassInfo JSDeviceOrientationEventDOMConstructor::s_info = { "DeviceOrientationEvent"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDeviceOrientationEventDOMConstructor) };

template<> JSValue JSDeviceOrientationEventDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEvent::getConstructor(vm, &globalObject);
}

template<> void JSDeviceOrientationEventDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "DeviceOrientationEvent"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSDeviceOrientationEvent::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
    reifyStaticProperties(vm, JSDeviceOrientationEvent::info(), JSDeviceOrientationEventConstructorTableValues, *this);
    if (!downcast<Document>(jsCast<JSDOMGlobalObject*>(&globalObject)->scriptExecutionContext())->settingsValues().deviceOrientationPermissionAPIEnabled) {
        auto propertyName = Identifier::fromString(vm, "requestPermission"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, &globalObject, propertyName, slot);
    }
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSDeviceOrientationEventPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceOrientationEventConstructor, 0 } },
    HashTableValue { "alpha"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceOrientationEvent_alpha, 0 } },
    HashTableValue { "beta"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceOrientationEvent_beta, 0 } },
    HashTableValue { "gamma"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceOrientationEvent_gamma, 0 } },
    HashTableValue { "absolute"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceOrientationEvent_absolute, 0 } },
    HashTableValue { "initDeviceOrientationEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDeviceOrientationEventPrototypeFunction_initDeviceOrientationEvent, 0 } },
};

const ClassInfo JSDeviceOrientationEventPrototype::s_info = { "DeviceOrientationEvent"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDeviceOrientationEventPrototype) };

void JSDeviceOrientationEventPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDeviceOrientationEvent::info(), JSDeviceOrientationEventPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSDeviceOrientationEvent::s_info = { "DeviceOrientationEvent"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDeviceOrientationEvent) };

JSDeviceOrientationEvent::JSDeviceOrientationEvent(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DeviceOrientationEvent>&& impl)
    : JSEvent(structure, globalObject, WTFMove(impl))
{
}

Ref<DeviceOrientationEvent> JSDeviceOrientationEvent::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, DeviceOrientationEvent>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSDeviceOrientationEvent::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSDeviceOrientationEventPrototype::createStructure(vm, &globalObject, JSEvent::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSDeviceOrientationEventPrototype::create(vm, &globalObject, structure);
}

JSObject* JSDeviceOrientationEvent::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSDeviceOrientationEvent>(vm, globalObject);
}

JSValue JSDeviceOrientationEvent::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDeviceOrientationEventDOMConstructor, DOMConstructorID::DeviceOrientationEvent>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceOrientationEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSDeviceOrientationEventPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSDeviceOrientationEvent::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsDeviceOrientationEvent_alphaGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceOrientationEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnrestrictedDouble>>(lexicalGlobalObject, throwScope, impl.alpha())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceOrientationEvent_alpha, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceOrientationEvent>::get<jsDeviceOrientationEvent_alphaGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDeviceOrientationEvent_betaGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceOrientationEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnrestrictedDouble>>(lexicalGlobalObject, throwScope, impl.beta())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceOrientationEvent_beta, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceOrientationEvent>::get<jsDeviceOrientationEvent_betaGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDeviceOrientationEvent_gammaGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceOrientationEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnrestrictedDouble>>(lexicalGlobalObject, throwScope, impl.gamma())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceOrientationEvent_gamma, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceOrientationEvent>::get<jsDeviceOrientationEvent_gammaGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDeviceOrientationEvent_absoluteGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceOrientationEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLBoolean>>(lexicalGlobalObject, throwScope, impl.absolute())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceOrientationEvent_absolute, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceOrientationEvent>::get<jsDeviceOrientationEvent_absoluteGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsDeviceOrientationEventConstructorFunction_requestPermissionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLEnumeration<DeviceOrientationOrMotionPermissionState>>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, [&]() -> decltype(auto) { return DeviceOrientationEvent::requestPermission(document.get(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDeviceOrientationEventConstructorFunction_requestPermission, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSDeviceOrientationEvent>::callStatic<jsDeviceOrientationEventConstructorFunction_requestPermissionBody>(*lexicalGlobalObject, *callFrame, "requestPermission");
}

static inline JSC::EncodedJSValue jsDeviceOrientationEventPrototypeFunction_initDeviceOrientationEventBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDeviceOrientationEvent>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto typeConversionResult = convertOptionalWithDefault<IDLAtomStringAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLAtomStringAdaptor<IDLDOMString>> { return Converter<IDLAtomStringAdaptor<IDLDOMString>>::ReturnType { emptyAtom() }; });
    if (typeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto bubblesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument1.value());
    if (bubblesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->argument(2);
    auto cancelableConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument2.value());
    if (cancelableConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument3 = callFrame->argument(3);
    auto alphaConversionResult = convertOptionalWithDefault<IDLNullable<IDLUnrestrictedDouble>>(*lexicalGlobalObject, argument3.value(), [&]() -> ConversionResult<IDLNullable<IDLUnrestrictedDouble>> { return typename Converter<IDLNullable<IDLUnrestrictedDouble>>::ReturnType { std::nullopt }; });
    if (alphaConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument4 = callFrame->argument(4);
    auto betaConversionResult = convertOptionalWithDefault<IDLNullable<IDLUnrestrictedDouble>>(*lexicalGlobalObject, argument4.value(), [&]() -> ConversionResult<IDLNullable<IDLUnrestrictedDouble>> { return typename Converter<IDLNullable<IDLUnrestrictedDouble>>::ReturnType { std::nullopt }; });
    if (betaConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument5 = callFrame->argument(5);
    auto gammaConversionResult = convertOptionalWithDefault<IDLNullable<IDLUnrestrictedDouble>>(*lexicalGlobalObject, argument5.value(), [&]() -> ConversionResult<IDLNullable<IDLUnrestrictedDouble>> { return typename Converter<IDLNullable<IDLUnrestrictedDouble>>::ReturnType { std::nullopt }; });
    if (gammaConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument6 = callFrame->argument(6);
    auto absoluteConversionResult = convertOptionalWithDefault<IDLNullable<IDLBoolean>>(*lexicalGlobalObject, argument6.value(), [&]() -> ConversionResult<IDLNullable<IDLBoolean>> { return typename Converter<IDLNullable<IDLBoolean>>::ReturnType { std::nullopt }; });
    if (absoluteConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.initDeviceOrientationEvent(typeConversionResult.releaseReturnValue(), bubblesConversionResult.releaseReturnValue(), cancelableConversionResult.releaseReturnValue(), alphaConversionResult.releaseReturnValue(), betaConversionResult.releaseReturnValue(), gammaConversionResult.releaseReturnValue(), absoluteConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDeviceOrientationEventPrototypeFunction_initDeviceOrientationEvent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDeviceOrientationEvent>::call<jsDeviceOrientationEventPrototypeFunction_initDeviceOrientationEventBody>(*lexicalGlobalObject, *callFrame, "initDeviceOrientationEvent");
}

JSC::GCClient::IsoSubspace* JSDeviceOrientationEvent::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSDeviceOrientationEvent, UseCustomHeapCellType::No>(vm, "JSDeviceOrientationEvent"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForDeviceOrientationEvent.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForDeviceOrientationEvent = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForDeviceOrientationEvent.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForDeviceOrientationEvent = std::forward<decltype(space)>(space); }
    );
}

void JSDeviceOrientationEvent::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSDeviceOrientationEvent*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}


}

#endif // ENABLE(DEVICE_ORIENTATION)
