/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(VIDEO)

#include "JSMediaControlsHost.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSAudioTrack.h"
#include "JSAudioTrackList.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSHTMLElement.h"
#include "JSTextTrack.h"
#include "JSTextTrackList.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/Variant.h>
#include <wtf/text/MakeString.h>

#if ENABLE(MEDIA_CONTROLS_CONTEXT_MENUS)
#include "JSDOMConvertCallbacks.h"
#include "JSDOMConvertJSON.h"
#include "JSVoidCallback.h"
#endif

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(MediaControlsHost::DeviceType enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("none"),
        MAKE_STATIC_STRING_IMPL("airplay"),
        MAKE_STATIC_STRING_IMPL("tvout"),
    };
    static_assert(static_cast<size_t>(MediaControlsHost::DeviceType::None) == 0, "MediaControlsHost::DeviceType::None is not 0 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::DeviceType::Airplay) == 1, "MediaControlsHost::DeviceType::Airplay is not 1 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::DeviceType::Tvout) == 2, "MediaControlsHost::DeviceType::Tvout is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, MediaControlsHost::DeviceType enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<MediaControlsHost::DeviceType> parseEnumerationFromString<MediaControlsHost::DeviceType>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, MediaControlsHost::DeviceType>, 3> mappings {
        std::pair<ComparableASCIILiteral, MediaControlsHost::DeviceType> { "airplay"_s, MediaControlsHost::DeviceType::Airplay },
        std::pair<ComparableASCIILiteral, MediaControlsHost::DeviceType> { "none"_s, MediaControlsHost::DeviceType::None },
        std::pair<ComparableASCIILiteral, MediaControlsHost::DeviceType> { "tvout"_s, MediaControlsHost::DeviceType::Tvout },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<MediaControlsHost::DeviceType> parseEnumeration<MediaControlsHost::DeviceType>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<MediaControlsHost::DeviceType>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<MediaControlsHost::DeviceType>()
{
    return "\"none\", \"airplay\", \"tvout\""_s;
}

#if ENABLE(VIDEO)

String convertEnumerationToString(MediaControlsHost::SourceType enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 7> values {
        MAKE_STATIC_STRING_IMPL("file"),
        MAKE_STATIC_STRING_IMPL("hls"),
        MAKE_STATIC_STRING_IMPL("media-source"),
        MAKE_STATIC_STRING_IMPL("managed-media-source"),
        MAKE_STATIC_STRING_IMPL("media-stream"),
        MAKE_STATIC_STRING_IMPL("live-stream"),
        MAKE_STATIC_STRING_IMPL("stored-stream"),
    };
    static_assert(static_cast<size_t>(MediaControlsHost::SourceType::File) == 0, "MediaControlsHost::SourceType::File is not 0 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::SourceType::HLS) == 1, "MediaControlsHost::SourceType::HLS is not 1 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::SourceType::MediaSource) == 2, "MediaControlsHost::SourceType::MediaSource is not 2 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::SourceType::ManagedMediaSource) == 3, "MediaControlsHost::SourceType::ManagedMediaSource is not 3 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::SourceType::MediaStream) == 4, "MediaControlsHost::SourceType::MediaStream is not 4 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::SourceType::LiveStream) == 5, "MediaControlsHost::SourceType::LiveStream is not 5 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::SourceType::StoredStream) == 6, "MediaControlsHost::SourceType::StoredStream is not 6 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, MediaControlsHost::SourceType enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<MediaControlsHost::SourceType> parseEnumerationFromString<MediaControlsHost::SourceType>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType>, 7> mappings {
        std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType> { "file"_s, MediaControlsHost::SourceType::File },
        std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType> { "hls"_s, MediaControlsHost::SourceType::HLS },
        std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType> { "live-stream"_s, MediaControlsHost::SourceType::LiveStream },
        std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType> { "managed-media-source"_s, MediaControlsHost::SourceType::ManagedMediaSource },
        std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType> { "media-source"_s, MediaControlsHost::SourceType::MediaSource },
        std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType> { "media-stream"_s, MediaControlsHost::SourceType::MediaStream },
        std::pair<ComparableASCIILiteral, MediaControlsHost::SourceType> { "stored-stream"_s, MediaControlsHost::SourceType::StoredStream },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<MediaControlsHost::SourceType> parseEnumeration<MediaControlsHost::SourceType>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<MediaControlsHost::SourceType>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<MediaControlsHost::SourceType>()
{
    return "\"file\", \"hls\", \"media-source\", \"managed-media-source\", \"media-stream\", \"live-stream\", \"stored-stream\""_s;
}

#endif

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_displayNameForTrack);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_setSelectedTextTrack);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_updateTextTrackContainer);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_enteredFullscreen);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_exitedFullscreen);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_presentationModeChanged);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_generateUUID);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_base64StringForIconNameAndType);
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_formattedStringForDuration);
#if ENABLE(MEDIA_CONTROLS_CONTEXT_MENUS)
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_showMediaControlsContextMenu);
#endif
#if ENABLE(MEDIA_SESSION)
static JSC_DECLARE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_ensureMediaSessionObserver);
#endif

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_layoutTraitsClassName);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_mediaControlsContainerClassName);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_brightness);
static JSC_DECLARE_CUSTOM_SETTER(setJSMediaControlsHost_brightness);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_captionMenuOffItem);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_captionMenuAutomaticItem);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_captionDisplayMode);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_textTrackContainer);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_allowsInlineMediaPlayback);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_supportsFullscreen);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_isVideoLayerInline);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_userGestureRequired);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_isInMediaDocument);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_shouldForceControlsDisplay);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_supportsSeeking);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_inWindowFullscreen);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_supportsRewind);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_needsChromeMediaControlsPseudoElement);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_externalDeviceDisplayName);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_externalDeviceType);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_controlsDependOnPageScaleFactor);
static JSC_DECLARE_CUSTOM_SETTER(setJSMediaControlsHost_controlsDependOnPageScaleFactor);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_sourceType);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaControlsHost_shadowRootStyleSheets);

class JSMediaControlsHostPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMediaControlsHostPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaControlsHostPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaControlsHostPrototype>(vm)) JSMediaControlsHostPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMediaControlsHostPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaControlsHostPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMediaControlsHostPrototype, JSMediaControlsHostPrototype::Base);

/* Hash table for prototype */

static const std::array<HashTableValue, 34> JSMediaControlsHostPrototypeTableValues {
    HashTableValue { "layoutTraitsClassName"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_layoutTraitsClassName, 0 } },
    HashTableValue { "mediaControlsContainerClassName"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_mediaControlsContainerClassName, 0 } },
    HashTableValue { "brightness"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_brightness, setJSMediaControlsHost_brightness } },
    HashTableValue { "captionMenuOffItem"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_captionMenuOffItem, 0 } },
    HashTableValue { "captionMenuAutomaticItem"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_captionMenuAutomaticItem, 0 } },
    HashTableValue { "captionDisplayMode"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_captionDisplayMode, 0 } },
    HashTableValue { "textTrackContainer"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_textTrackContainer, 0 } },
    HashTableValue { "allowsInlineMediaPlayback"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_allowsInlineMediaPlayback, 0 } },
    HashTableValue { "supportsFullscreen"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_supportsFullscreen, 0 } },
    HashTableValue { "isVideoLayerInline"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_isVideoLayerInline, 0 } },
    HashTableValue { "userGestureRequired"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_userGestureRequired, 0 } },
    HashTableValue { "isInMediaDocument"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_isInMediaDocument, 0 } },
    HashTableValue { "shouldForceControlsDisplay"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_shouldForceControlsDisplay, 0 } },
    HashTableValue { "supportsSeeking"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_supportsSeeking, 0 } },
    HashTableValue { "inWindowFullscreen"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_inWindowFullscreen, 0 } },
    HashTableValue { "supportsRewind"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_supportsRewind, 0 } },
    HashTableValue { "needsChromeMediaControlsPseudoElement"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_needsChromeMediaControlsPseudoElement, 0 } },
    HashTableValue { "externalDeviceDisplayName"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_externalDeviceDisplayName, 0 } },
    HashTableValue { "externalDeviceType"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_externalDeviceType, 0 } },
    HashTableValue { "controlsDependOnPageScaleFactor"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_controlsDependOnPageScaleFactor, setJSMediaControlsHost_controlsDependOnPageScaleFactor } },
    HashTableValue { "sourceType"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_sourceType, 0 } },
    HashTableValue { "shadowRootStyleSheets"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaControlsHost_shadowRootStyleSheets, 0 } },
    HashTableValue { "sortedTrackListForMenu"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu, 1 } },
    HashTableValue { "displayNameForTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_displayNameForTrack, 1 } },
    HashTableValue { "setSelectedTextTrack"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_setSelectedTextTrack, 1 } },
    HashTableValue { "updateTextTrackContainer"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_updateTextTrackContainer, 0 } },
    HashTableValue { "enteredFullscreen"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_enteredFullscreen, 0 } },
    HashTableValue { "exitedFullscreen"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_exitedFullscreen, 0 } },
    HashTableValue { "presentationModeChanged"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_presentationModeChanged, 0 } },
    HashTableValue { "generateUUID"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_generateUUID, 0 } },
    HashTableValue { "base64StringForIconNameAndType"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_base64StringForIconNameAndType, 2 } },
    HashTableValue { "formattedStringForDuration"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_formattedStringForDuration, 1 } },
#if ENABLE(MEDIA_CONTROLS_CONTEXT_MENUS)
    HashTableValue { "showMediaControlsContextMenu"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_showMediaControlsContextMenu, 3 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(MEDIA_SESSION)
    HashTableValue { "ensureMediaSessionObserver"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaControlsHostPrototypeFunction_ensureMediaSessionObserver, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
};

const ClassInfo JSMediaControlsHostPrototype::s_info = { "MediaControlsHost"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMediaControlsHostPrototype) };

void JSMediaControlsHostPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaControlsHost::info(), JSMediaControlsHostPrototypeTableValues, *this);
    bool hasDisabledRuntimeProperties = false;
#if ENABLE(MEDIA_CONTROLS_CONTEXT_MENUS)
    if (!jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext()->settingsValues().mediaControlsContextMenusEnabled) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "showMediaControlsContextMenu"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
    if (hasDisabledRuntimeProperties && structure()->isDictionary())
        flattenDictionaryObject(vm);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSMediaControlsHost::s_info = { "MediaControlsHost"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMediaControlsHost) };

JSMediaControlsHost::JSMediaControlsHost(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaControlsHost>&& impl)
    : JSDOMWrapper<MediaControlsHost>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, MediaControlsHost>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSMediaControlsHost::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSMediaControlsHostPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSMediaControlsHostPrototype::create(vm, &globalObject, structure);
}

JSObject* JSMediaControlsHost::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSMediaControlsHost>(vm, globalObject);
}

void JSMediaControlsHost::destroy(JSC::JSCell* cell)
{
    JSMediaControlsHost* thisObject = static_cast<JSMediaControlsHost*>(cell);
    thisObject->JSMediaControlsHost::~JSMediaControlsHost();
}

static inline JSValue jsMediaControlsHost_layoutTraitsClassNameGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.layoutTraitsClassName())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_layoutTraitsClassName, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_layoutTraitsClassNameGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_mediaControlsContainerClassNameGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.mediaControlsContainerClassName())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_mediaControlsContainerClassName, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_mediaControlsContainerClassNameGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_brightnessGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDouble>(lexicalGlobalObject, throwScope, impl.brightness())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_brightness, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_brightnessGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMediaControlsHost_brightnessSetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLDouble>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setBrightness(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMediaControlsHost_brightness, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::set<setJSMediaControlsHost_brightnessSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMediaControlsHost_captionMenuOffItemGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<TextTrack>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.captionMenuOffItem())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_captionMenuOffItem, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_captionMenuOffItemGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_captionMenuAutomaticItemGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<TextTrack>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.captionMenuAutomaticItem())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_captionMenuAutomaticItem, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_captionMenuAutomaticItemGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_captionDisplayModeGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.captionDisplayMode())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_captionDisplayMode, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_captionDisplayModeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_textTrackContainerGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<HTMLElement>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.textTrackContainer())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_textTrackContainer, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_textTrackContainerGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_allowsInlineMediaPlaybackGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.allowsInlineMediaPlayback())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_allowsInlineMediaPlayback, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_allowsInlineMediaPlaybackGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_supportsFullscreenGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.supportsFullscreen())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_supportsFullscreen, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_supportsFullscreenGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_isVideoLayerInlineGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.isVideoLayerInline())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_isVideoLayerInline, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_isVideoLayerInlineGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_userGestureRequiredGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.userGestureRequired())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_userGestureRequired, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_userGestureRequiredGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_isInMediaDocumentGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.isInMediaDocument())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_isInMediaDocument, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_isInMediaDocumentGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_shouldForceControlsDisplayGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.shouldForceControlsDisplay())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_shouldForceControlsDisplay, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_shouldForceControlsDisplayGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_supportsSeekingGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.supportsSeeking())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_supportsSeeking, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_supportsSeekingGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_inWindowFullscreenGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.inWindowFullscreen())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_inWindowFullscreen, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_inWindowFullscreenGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_supportsRewindGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.supportsRewind())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_supportsRewind, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_supportsRewindGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_needsChromeMediaControlsPseudoElementGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.needsChromeMediaControlsPseudoElement())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_needsChromeMediaControlsPseudoElement, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_needsChromeMediaControlsPseudoElementGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_externalDeviceDisplayNameGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.externalDeviceDisplayName())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_externalDeviceDisplayName, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_externalDeviceDisplayNameGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_externalDeviceTypeGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<MediaControlsHost::DeviceType>>(lexicalGlobalObject, throwScope, impl.externalDeviceType())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_externalDeviceType, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_externalDeviceTypeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_controlsDependOnPageScaleFactorGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.controlsDependOnPageScaleFactor())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_controlsDependOnPageScaleFactor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_controlsDependOnPageScaleFactorGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSMediaControlsHost_controlsDependOnPageScaleFactorSetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLBoolean>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setControlsDependOnPageScaleFactor(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSMediaControlsHost_controlsDependOnPageScaleFactor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::set<setJSMediaControlsHost_controlsDependOnPageScaleFactorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsMediaControlsHost_sourceTypeGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLEnumeration<MediaControlsHost::SourceType>>>(lexicalGlobalObject, throwScope, impl.sourceType())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_sourceType, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_sourceTypeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsMediaControlsHost_shadowRootStyleSheetsGetter(JSGlobalObject& lexicalGlobalObject, JSMediaControlsHost& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLSequence<IDLDOMString>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.shadowRootStyleSheets())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaControlsHost_shadowRootStyleSheets, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaControlsHost>::get<jsMediaControlsHost_shadowRootStyleSheetsGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu1Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto trackListConversionResult = convert<IDLInterface<TextTrackList>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "trackList"_s, "MediaControlsHost"_s, "sortedTrackListForMenu"_s, "TextTrackList"_s); });
    if (trackListConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLSequence<IDLInterface<TextTrack>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.sortedTrackListForMenu(*trackListConversionResult.releaseReturnValue()))));
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu2Body(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto trackListConversionResult = convert<IDLInterface<AudioTrackList>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "trackList"_s, "MediaControlsHost"_s, "sortedTrackListForMenu"_s, "AudioTrackList"_s); });
    if (trackListConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLSequence<IDLInterface<AudioTrack>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.sortedTrackListForMenu(*trackListConversionResult.releaseReturnValue()))));
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_sortedTrackListForMenuOverloadDispatcher(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    size_t argsCount = std::min<size_t>(1, callFrame->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = callFrame->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits<JSTextTrackList>())
            RELEASE_AND_RETURN(throwScope, (jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu1Body(lexicalGlobalObject, callFrame, castedThis)));
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits<JSAudioTrackList>())
            RELEASE_AND_RETURN(throwScope, (jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu2Body(lexicalGlobalObject, callFrame, castedThis)));
    }
    return argsCount < 1 ? throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject)) : throwVMTypeError(lexicalGlobalObject, throwScope);
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_sortedTrackListForMenu, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_sortedTrackListForMenuOverloadDispatcher>(*lexicalGlobalObject, *callFrame, "sortedTrackListForMenu");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_displayNameForTrackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto trackConversionResult = convert<IDLNullable<IDLUnion<IDLInterface<TextTrack>, IDLInterface<AudioTrack>>>>(*lexicalGlobalObject, argument0.value());
    if (trackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.displayNameForTrack(trackConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_displayNameForTrack, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_displayNameForTrackBody>(*lexicalGlobalObject, *callFrame, "displayNameForTrack");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_setSelectedTextTrackBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto trackConversionResult = convert<IDLNullable<IDLInterface<TextTrack>>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "track"_s, "MediaControlsHost"_s, "setSelectedTextTrack"_s, "TextTrack"_s); });
    if (trackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSelectedTextTrack(trackConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_setSelectedTextTrack, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_setSelectedTextTrackBody>(*lexicalGlobalObject, *callFrame, "setSelectedTextTrack");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_updateTextTrackContainerBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.updateTextTrackContainer(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_updateTextTrackContainer, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_updateTextTrackContainerBody>(*lexicalGlobalObject, *callFrame, "updateTextTrackContainer");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_enteredFullscreenBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.enteredFullscreen(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_enteredFullscreen, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_enteredFullscreenBody>(*lexicalGlobalObject, *callFrame, "enteredFullscreen");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_exitedFullscreenBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.exitedFullscreen(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_exitedFullscreen, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_exitedFullscreenBody>(*lexicalGlobalObject, *callFrame, "exitedFullscreen");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_presentationModeChangedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.presentationModeChanged(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_presentationModeChanged, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_presentationModeChangedBody>(*lexicalGlobalObject, *callFrame, "presentationModeChanged");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_generateUUIDBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.generateUUID())));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_generateUUID, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_generateUUIDBody>(*lexicalGlobalObject, *callFrame, "generateUUID");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_base64StringForIconNameAndTypeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto iconNameConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (iconNameConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto iconTypeConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (iconTypeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.base64StringForIconNameAndType(iconNameConversionResult.releaseReturnValue(), iconTypeConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_base64StringForIconNameAndType, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_base64StringForIconNameAndTypeBody>(*lexicalGlobalObject, *callFrame, "base64StringForIconNameAndType");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_formattedStringForDurationBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto durationInSecondsConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument0.value());
    if (durationInSecondsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.formattedStringForDuration(durationInSecondsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_formattedStringForDuration, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_formattedStringForDurationBody>(*lexicalGlobalObject, *callFrame, "formattedStringForDuration");
}

#if ENABLE(MEDIA_CONTROLS_CONTEXT_MENUS)
static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_showMediaControlsContextMenuBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 3) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto targetConversionResult = convert<IDLInterface<HTMLElement>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "target"_s, "MediaControlsHost"_s, "showMediaControlsContextMenu"_s, "HTMLElement"_s); });
    if (targetConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto optionsConversionResult = convert<IDLJSON>(*lexicalGlobalObject, argument1.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->uncheckedArgument(2);
    auto callbackConversionResult = convert<IDLCallbackFunction<JSVoidCallback>>(*lexicalGlobalObject, argument2.value(), *castedThis->globalObject(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(lexicalGlobalObject, scope, 2, "callback"_s, "MediaControlsHost"_s, "showMediaControlsContextMenu"_s); });
    if (callbackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.showMediaControlsContextMenu(*targetConversionResult.releaseReturnValue(), optionsConversionResult.releaseReturnValue(), callbackConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_showMediaControlsContextMenu, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_showMediaControlsContextMenuBody>(*lexicalGlobalObject, *callFrame, "showMediaControlsContextMenu");
}

#endif

#if ENABLE(MEDIA_SESSION)
static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunction_ensureMediaSessionObserverBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaControlsHost>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.ensureMediaSessionObserver(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaControlsHostPrototypeFunction_ensureMediaSessionObserver, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaControlsHost>::call<jsMediaControlsHostPrototypeFunction_ensureMediaSessionObserverBody>(*lexicalGlobalObject, *callFrame, "ensureMediaSessionObserver");
}

#endif

JSC::GCClient::IsoSubspace* JSMediaControlsHost::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSMediaControlsHost, UseCustomHeapCellType::No>(vm, "JSMediaControlsHost"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForMediaControlsHost.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForMediaControlsHost = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForMediaControlsHost.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForMediaControlsHost = std::forward<decltype(space)>(space); }
    );
}

void JSMediaControlsHost::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSMediaControlsHost*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSMediaControlsHostOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSMediaControlsHostOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaControlsHost = static_cast<JSMediaControlsHost*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsMediaControlsHost->protectedWrapped().ptr(), jsMediaControlsHost);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaControlsHost@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore17MediaControlsHostE[]; }
#endif
template<std::same_as<MediaControlsHost> T>
static inline void verifyVTable(MediaControlsHost* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7MediaControlsHost@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore17MediaControlsHostE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // MediaControlsHost has subclasses. If MediaControlsHost has subclasses that get passed
        // to toJS() we currently require MediaControlsHost you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<MediaControlsHost>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<MediaControlsHost>(impl.ptr());
#endif
    return createWrapper<MediaControlsHost>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, MediaControlsHost& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

MediaControlsHost* JSMediaControlsHost::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaControlsHost*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(VIDEO)
