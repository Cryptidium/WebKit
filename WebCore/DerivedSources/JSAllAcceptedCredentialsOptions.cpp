/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSAllAcceptedCredentialsOptions.h"

#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AllAcceptedCredentialsOptions>> convertDictionary<AllAcceptedCredentialsOptions>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AllAcceptedCredentialsOptions result;
    JSValue allAcceptedCredentialIdsValue;
    if (isNullOrUndefined)
        allAcceptedCredentialIdsValue = jsUndefined();
    else {
        allAcceptedCredentialIdsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "allAcceptedCredentialIds"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (allAcceptedCredentialIdsValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "allAcceptedCredentialIds"_s, "AllAcceptedCredentialsOptions"_s, "sequence"_s);
        return ConversionResultException { };
    }
    auto allAcceptedCredentialIdsConversionResult = convert<IDLSequence<IDLDOMString>>(lexicalGlobalObject, allAcceptedCredentialIdsValue);
    if (allAcceptedCredentialIdsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.allAcceptedCredentialIds = allAcceptedCredentialIdsConversionResult.releaseReturnValue();
    JSValue rpIdValue;
    if (isNullOrUndefined)
        rpIdValue = jsUndefined();
    else {
        rpIdValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "rpId"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (rpIdValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "rpId"_s, "AllAcceptedCredentialsOptions"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto rpIdConversionResult = convert<IDLDOMString>(lexicalGlobalObject, rpIdValue);
    if (rpIdConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.rpId = rpIdConversionResult.releaseReturnValue();
    JSValue userIdValue;
    if (isNullOrUndefined)
        userIdValue = jsUndefined();
    else {
        userIdValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "userId"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (userIdValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "userId"_s, "AllAcceptedCredentialsOptions"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto userIdConversionResult = convert<IDLDOMString>(lexicalGlobalObject, userIdValue);
    if (userIdConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.userId = userIdConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AllAcceptedCredentialsOptions& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto allAcceptedCredentialIdsValue = toJS<IDLSequence<IDLDOMString>>(lexicalGlobalObject, globalObject, throwScope, dictionary.allAcceptedCredentialIds);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "allAcceptedCredentialIds"_s), allAcceptedCredentialIdsValue);
    auto rpIdValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.rpId);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "rpId"_s), rpIdValue);
    auto userIdValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.userId);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "userId"_s), userIdValue);
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
