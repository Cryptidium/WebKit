/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR)

#include "JSWebXRFrame.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "Document.h"
#include "DocumentInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSWebXRPose.h"
#include "JSWebXRReferenceSpace.h"
#include "JSWebXRSession.h"
#include "JSWebXRSpace.h"
#include "JSWebXRViewerPose.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

#if ENABLE(WEBXR_HANDS)
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertUnion.h"
#include "JSWebXRJointPose.h"
#include "JSWebXRJointSpace.h"
#include <JavaScriptCore/JSArray.h>
#endif

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_getViewerPose);
static JSC_DECLARE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_getPose);
#if ENABLE(WEBXR_HANDS)
static JSC_DECLARE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_getJointPose);
#endif
#if ENABLE(WEBXR_HANDS)
static JSC_DECLARE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_fillJointRadii);
#endif
#if ENABLE(WEBXR_HANDS)
static JSC_DECLARE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_fillPoses);
#endif

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWebXRFrameConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRFrame_session);

class JSWebXRFramePrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebXRFramePrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebXRFramePrototype* ptr = new (NotNull, JSC::allocateCell<JSWebXRFramePrototype>(vm)) JSWebXRFramePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRFramePrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebXRFramePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRFramePrototype, JSWebXRFramePrototype::Base);

using JSWebXRFrameDOMConstructor = JSDOMConstructorNotConstructable<JSWebXRFrame>;

template<> const ClassInfo JSWebXRFrameDOMConstructor::s_info = { "XRFrame"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRFrameDOMConstructor) };

template<> JSValue JSWebXRFrameDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebXRFrameDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRFrame"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWebXRFrame::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 7> JSWebXRFramePrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRFrameConstructor, 0 } },
    HashTableValue { "session"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRFrame_session, 0 } },
    HashTableValue { "getViewerPose"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRFramePrototypeFunction_getViewerPose, 1 } },
    HashTableValue { "getPose"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRFramePrototypeFunction_getPose, 2 } },
#if ENABLE(WEBXR_HANDS)
    HashTableValue { "getJointPose"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRFramePrototypeFunction_getJointPose, 2 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(WEBXR_HANDS)
    HashTableValue { "fillJointRadii"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRFramePrototypeFunction_fillJointRadii, 2 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(WEBXR_HANDS)
    HashTableValue { "fillPoses"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebXRFramePrototypeFunction_fillPoses, 3 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
};

const ClassInfo JSWebXRFramePrototype::s_info = { "XRFrame"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRFramePrototype) };

void JSWebXRFramePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebXRFrame::info(), JSWebXRFramePrototypeTableValues, *this);
    bool hasDisabledRuntimeProperties = false;
#if ENABLE(WEBXR_HANDS)
    if (!(downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXREnabled && downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXRHandInputModuleEnabled)) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "getJointPose"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
#if ENABLE(WEBXR_HANDS)
    if (!(downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXREnabled && downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXRHandInputModuleEnabled)) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "fillJointRadii"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
#if ENABLE(WEBXR_HANDS)
    if (!(downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXREnabled && downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXRHandInputModuleEnabled)) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "fillPoses"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
    if (hasDisabledRuntimeProperties && structure()->isDictionary())
        flattenDictionaryObject(vm);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWebXRFrame::s_info = { "XRFrame"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRFrame) };

JSWebXRFrame::JSWebXRFrame(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebXRFrame>&& impl)
    : JSDOMWrapper<WebXRFrame>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, WebXRFrame>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSWebXRFrame::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWebXRFramePrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSWebXRFramePrototype::create(vm, &globalObject, structure);
}

JSObject* JSWebXRFrame::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWebXRFrame>(vm, globalObject);
}

JSValue JSWebXRFrame::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebXRFrameDOMConstructor, DOMConstructorID::WebXRFrame>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSWebXRFrame::destroy(JSC::JSCell* cell)
{
    JSWebXRFrame* thisObject = static_cast<JSWebXRFrame*>(cell);
    thisObject->JSWebXRFrame::~JSWebXRFrame();
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRFrameConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWebXRFramePrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWebXRFrame::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWebXRFrame_sessionGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRFrame& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebXRSession>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.session())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRFrame_session, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRFrame>::get<jsWebXRFrame_sessionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsWebXRFramePrototypeFunction_getViewerPoseBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebXRFrame>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto referenceSpaceConversionResult = convert<IDLInterface<WebXRReferenceSpace>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "referenceSpace"_s, "XRFrame"_s, "getViewerPose"_s, "WebXRReferenceSpace"_s); });
    if (referenceSpaceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLInterface<WebXRViewerPose>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getViewerPose(document.get(), *referenceSpaceConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_getViewerPose, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRFrame>::call<jsWebXRFramePrototypeFunction_getViewerPoseBody>(*lexicalGlobalObject, *callFrame, "getViewerPose");
}

static inline JSC::EncodedJSValue jsWebXRFramePrototypeFunction_getPoseBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebXRFrame>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto spaceConversionResult = convert<IDLInterface<WebXRSpace>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "space"_s, "XRFrame"_s, "getPose"_s, "WebXRSpace"_s); });
    if (spaceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto baseSpaceConversionResult = convert<IDLInterface<WebXRSpace>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "baseSpace"_s, "XRFrame"_s, "getPose"_s, "WebXRSpace"_s); });
    if (baseSpaceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLInterface<WebXRPose>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getPose(document.get(), *spaceConversionResult.releaseReturnValue(), *baseSpaceConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_getPose, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRFrame>::call<jsWebXRFramePrototypeFunction_getPoseBody>(*lexicalGlobalObject, *callFrame, "getPose");
}

#if ENABLE(WEBXR_HANDS)
static inline JSC::EncodedJSValue jsWebXRFramePrototypeFunction_getJointPoseBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebXRFrame>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto jointConversionResult = convert<IDLInterface<WebXRJointSpace>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "joint"_s, "XRFrame"_s, "getJointPose"_s, "WebXRJointSpace"_s); });
    if (jointConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto baseSpaceConversionResult = convert<IDLInterface<WebXRSpace>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "baseSpace"_s, "XRFrame"_s, "getJointPose"_s, "WebXRSpace"_s); });
    if (baseSpaceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLInterface<WebXRJointPose>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getJointPose(document.get(), *jointConversionResult.releaseReturnValue(), *baseSpaceConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_getJointPose, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRFrame>::call<jsWebXRFramePrototypeFunction_getJointPoseBody>(*lexicalGlobalObject, *callFrame, "getJointPose");
}

#endif

#if ENABLE(WEBXR_HANDS)
static inline JSC::EncodedJSValue jsWebXRFramePrototypeFunction_fillJointRadiiBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebXRFrame>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto jointSpacesConversionResult = convert<IDLSequence<IDLInterface<WebXRJointSpace>>>(*lexicalGlobalObject, argument0.value());
    if (jointSpacesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto radiiConversionResult = convert<IDLFloat32Array>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "radii"_s, "XRFrame"_s, "fillJointRadii"_s, "Float32Array"_s); });
    if (radiiConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.fillJointRadii(jointSpacesConversionResult.releaseReturnValue(), radiiConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_fillJointRadii, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRFrame>::call<jsWebXRFramePrototypeFunction_fillJointRadiiBody>(*lexicalGlobalObject, *callFrame, "fillJointRadii");
}

#endif

#if ENABLE(WEBXR_HANDS)
static inline JSC::EncodedJSValue jsWebXRFramePrototypeFunction_fillPosesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebXRFrame>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 3) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto spacesConversionResult = convert<IDLSequence<IDLInterface<WebXRSpace>>>(*lexicalGlobalObject, argument0.value());
    if (spacesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto baseSpaceConversionResult = convert<IDLInterface<WebXRSpace>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "baseSpace"_s, "XRFrame"_s, "fillPoses"_s, "WebXRSpace"_s); });
    if (baseSpaceConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->uncheckedArgument(2);
    auto transformsConversionResult = convert<IDLFloat32Array>(*lexicalGlobalObject, argument2.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 2, "transforms"_s, "XRFrame"_s, "fillPoses"_s, "Float32Array"_s); });
    if (transformsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.fillPoses(document.get(), spacesConversionResult.releaseReturnValue(), *baseSpaceConversionResult.releaseReturnValue(), transformsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsWebXRFramePrototypeFunction_fillPoses, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebXRFrame>::call<jsWebXRFramePrototypeFunction_fillPosesBody>(*lexicalGlobalObject, *callFrame, "fillPoses");
}

#endif

JSC::GCClient::IsoSubspace* JSWebXRFrame::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWebXRFrame, UseCustomHeapCellType::No>(vm, "JSWebXRFrame"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWebXRFrame.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebXRFrame = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWebXRFrame.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebXRFrame = std::forward<decltype(space)>(space); }
    );
}

void JSWebXRFrame::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWebXRFrame*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSWebXRFrameOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSWebXRFrameOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebXRFrame = static_cast<JSWebXRFrame*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebXRFrame->protectedWrapped().ptr(), jsWebXRFrame);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebXRFrame@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore10WebXRFrameE[]; }
#endif
template<std::same_as<WebXRFrame> T>
static inline void verifyVTable(WebXRFrame* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7WebXRFrame@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore10WebXRFrameE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // WebXRFrame has subclasses. If WebXRFrame has subclasses that get passed
        // to toJS() we currently require WebXRFrame you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<WebXRFrame>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<WebXRFrame>(impl.ptr());
#endif
    return createWrapper<WebXRFrame>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, WebXRFrame& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

WebXRFrame* JSWebXRFrame::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebXRFrame*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBXR)
