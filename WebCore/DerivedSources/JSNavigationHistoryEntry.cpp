/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSNavigationHistoryEntry.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertAny.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsNavigationHistoryEntryPrototypeFunction_getState);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsNavigationHistoryEntryConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsNavigationHistoryEntry_url);
static JSC_DECLARE_CUSTOM_GETTER(jsNavigationHistoryEntry_key);
static JSC_DECLARE_CUSTOM_GETTER(jsNavigationHistoryEntry_id);
static JSC_DECLARE_CUSTOM_GETTER(jsNavigationHistoryEntry_index);
static JSC_DECLARE_CUSTOM_GETTER(jsNavigationHistoryEntry_sameDocument);
static JSC_DECLARE_CUSTOM_GETTER(jsNavigationHistoryEntry_ondispose);
static JSC_DECLARE_CUSTOM_SETTER(setJSNavigationHistoryEntry_ondispose);

class JSNavigationHistoryEntryPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSNavigationHistoryEntryPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSNavigationHistoryEntryPrototype* ptr = new (NotNull, JSC::allocateCell<JSNavigationHistoryEntryPrototype>(vm)) JSNavigationHistoryEntryPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSNavigationHistoryEntryPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSNavigationHistoryEntryPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSNavigationHistoryEntryPrototype, JSNavigationHistoryEntryPrototype::Base);

using JSNavigationHistoryEntryDOMConstructor = JSDOMConstructorNotConstructable<JSNavigationHistoryEntry>;

template<> const ClassInfo JSNavigationHistoryEntryDOMConstructor::s_info = { "NavigationHistoryEntry"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSNavigationHistoryEntryDOMConstructor) };

template<> JSValue JSNavigationHistoryEntryDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSNavigationHistoryEntryDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "NavigationHistoryEntry"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSNavigationHistoryEntry::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 8> JSNavigationHistoryEntryPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsNavigationHistoryEntryConstructor, 0 } },
    HashTableValue { "url"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsNavigationHistoryEntry_url, 0 } },
    HashTableValue { "key"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsNavigationHistoryEntry_key, 0 } },
    HashTableValue { "id"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsNavigationHistoryEntry_id, 0 } },
    HashTableValue { "index"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsNavigationHistoryEntry_index, 0 } },
    HashTableValue { "sameDocument"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsNavigationHistoryEntry_sameDocument, 0 } },
    HashTableValue { "ondispose"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsNavigationHistoryEntry_ondispose, setJSNavigationHistoryEntry_ondispose } },
    HashTableValue { "getState"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsNavigationHistoryEntryPrototypeFunction_getState, 0 } },
};

const ClassInfo JSNavigationHistoryEntryPrototype::s_info = { "NavigationHistoryEntry"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSNavigationHistoryEntryPrototype) };

void JSNavigationHistoryEntryPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSNavigationHistoryEntry::info(), JSNavigationHistoryEntryPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSNavigationHistoryEntry::s_info = { "NavigationHistoryEntry"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSNavigationHistoryEntry) };

JSNavigationHistoryEntry::JSNavigationHistoryEntry(Structure* structure, JSDOMGlobalObject& globalObject, Ref<NavigationHistoryEntry>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<NavigationHistoryEntry> JSNavigationHistoryEntry::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, NavigationHistoryEntry>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSNavigationHistoryEntry::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSNavigationHistoryEntryPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSNavigationHistoryEntryPrototype::create(vm, &globalObject, structure);
}

JSObject* JSNavigationHistoryEntry::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSNavigationHistoryEntry>(vm, globalObject);
}

JSValue JSNavigationHistoryEntry::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNavigationHistoryEntryDOMConstructor, DOMConstructorID::NavigationHistoryEntry>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsNavigationHistoryEntryConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSNavigationHistoryEntryPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSNavigationHistoryEntry::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsNavigationHistoryEntry_urlGetter(JSGlobalObject& lexicalGlobalObject, JSNavigationHistoryEntry& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUSVString>>(lexicalGlobalObject, throwScope, impl.url())));
}

JSC_DEFINE_CUSTOM_GETTER(jsNavigationHistoryEntry_url, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSNavigationHistoryEntry>::get<jsNavigationHistoryEntry_urlGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsNavigationHistoryEntry_keyGetter(JSGlobalObject& lexicalGlobalObject, JSNavigationHistoryEntry& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.key())));
}

JSC_DEFINE_CUSTOM_GETTER(jsNavigationHistoryEntry_key, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSNavigationHistoryEntry>::get<jsNavigationHistoryEntry_keyGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsNavigationHistoryEntry_idGetter(JSGlobalObject& lexicalGlobalObject, JSNavigationHistoryEntry& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.id())));
}

JSC_DEFINE_CUSTOM_GETTER(jsNavigationHistoryEntry_id, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSNavigationHistoryEntry>::get<jsNavigationHistoryEntry_idGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsNavigationHistoryEntry_indexGetter(JSGlobalObject& lexicalGlobalObject, JSNavigationHistoryEntry& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLongLong>(lexicalGlobalObject, throwScope, impl.index())));
}

JSC_DEFINE_CUSTOM_GETTER(jsNavigationHistoryEntry_index, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSNavigationHistoryEntry>::get<jsNavigationHistoryEntry_indexGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsNavigationHistoryEntry_sameDocumentGetter(JSGlobalObject& lexicalGlobalObject, JSNavigationHistoryEntry& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.sameDocument())));
}

JSC_DEFINE_CUSTOM_GETTER(jsNavigationHistoryEntry_sameDocument, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSNavigationHistoryEntry>::get<jsNavigationHistoryEntry_sameDocumentGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsNavigationHistoryEntry_ondisposeGetter(JSGlobalObject& lexicalGlobalObject, JSNavigationHistoryEntry& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().disposeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsNavigationHistoryEntry_ondispose, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSNavigationHistoryEntry>::get<jsNavigationHistoryEntry_ondisposeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSNavigationHistoryEntry_ondisposeSetter(JSGlobalObject& lexicalGlobalObject, JSNavigationHistoryEntry& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().disposeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSNavigationHistoryEntry_ondispose, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSNavigationHistoryEntry>::set<setJSNavigationHistoryEntry_ondisposeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsNavigationHistoryEntryPrototypeFunction_getStateBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSNavigationHistoryEntry>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLAny>(*lexicalGlobalObject, throwScope, impl.getState(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)))));
}

JSC_DEFINE_HOST_FUNCTION(jsNavigationHistoryEntryPrototypeFunction_getState, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSNavigationHistoryEntry>::call<jsNavigationHistoryEntryPrototypeFunction_getStateBody>(*lexicalGlobalObject, *callFrame, "getState");
}

JSC::GCClient::IsoSubspace* JSNavigationHistoryEntry::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSNavigationHistoryEntry, UseCustomHeapCellType::No>(vm, "JSNavigationHistoryEntry"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForNavigationHistoryEntry.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForNavigationHistoryEntry = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForNavigationHistoryEntry.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForNavigationHistoryEntry = std::forward<decltype(space)>(space); }
    );
}

void JSNavigationHistoryEntry::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSNavigationHistoryEntry*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSNavigationHistoryEntryOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsNavigationHistoryEntry = jsCast<JSNavigationHistoryEntry*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsNavigationHistoryEntry->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSNavigationHistoryEntryOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsNavigationHistoryEntry = static_cast<JSNavigationHistoryEntry*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsNavigationHistoryEntry->protectedWrapped().ptr(), jsNavigationHistoryEntry);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7NavigationHistoryEntry@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore22NavigationHistoryEntryE[]; }
#endif
template<std::same_as<NavigationHistoryEntry> T>
static inline void verifyVTable(NavigationHistoryEntry* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7NavigationHistoryEntry@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore22NavigationHistoryEntryE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // NavigationHistoryEntry has subclasses. If NavigationHistoryEntry has subclasses that get passed
        // to toJS() we currently require NavigationHistoryEntry you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<NavigationHistoryEntry>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<NavigationHistoryEntry>(impl.ptr());
#endif
    return createWrapper<NavigationHistoryEntry>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, NavigationHistoryEntry& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

NavigationHistoryEntry* JSNavigationHistoryEntry::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSNavigationHistoryEntry*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
