/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSAuthenticatorSelectionCriteria.h"

#include "JSAuthenticatorAttachment.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMGlobalObject.h"
#include "JSResidentKeyRequirement.h"
#include "JSUserVerificationRequirement.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticatorSelectionCriteria>> convertDictionary<AuthenticatorSelectionCriteria>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticatorSelectionCriteria result;
    JSValue authenticatorAttachmentValue;
    if (isNullOrUndefined)
        authenticatorAttachmentValue = jsUndefined();
    else {
        authenticatorAttachmentValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "authenticatorAttachment"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!authenticatorAttachmentValue.isUndefined()) {
        auto authenticatorAttachmentConversionResult = convert<IDLEnumeration<AuthenticatorAttachment>>(lexicalGlobalObject, authenticatorAttachmentValue);
        if (authenticatorAttachmentConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.authenticatorAttachment = authenticatorAttachmentConversionResult.releaseReturnValue();
    }
    JSValue requireResidentKeyValue;
    if (isNullOrUndefined)
        requireResidentKeyValue = jsUndefined();
    else {
        requireResidentKeyValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "requireResidentKey"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto requireResidentKeyConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, requireResidentKeyValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (requireResidentKeyConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.requireResidentKey = requireResidentKeyConversionResult.releaseReturnValue();
    JSValue residentKeyValue;
    if (isNullOrUndefined)
        residentKeyValue = jsUndefined();
    else {
        residentKeyValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "residentKey"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!residentKeyValue.isUndefined()) {
        auto residentKeyConversionResult = convert<IDLEnumeration<ResidentKeyRequirement>>(lexicalGlobalObject, residentKeyValue);
        if (residentKeyConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.residentKey = residentKeyConversionResult.releaseReturnValue();
    }
    JSValue userVerificationValue;
    if (isNullOrUndefined)
        userVerificationValue = jsUndefined();
    else {
        userVerificationValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "userVerification"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto userVerificationConversionResult = convertOptionalWithDefault<IDLEnumeration<UserVerificationRequirement>>(lexicalGlobalObject, userVerificationValue, [&]() -> ConversionResult<IDLEnumeration<UserVerificationRequirement>> { return Converter<IDLEnumeration<UserVerificationRequirement>>::ReturnType { UserVerificationRequirement::Preferred }; });
    if (userVerificationConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.userVerification = userVerificationConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticatorSelectionCriteria& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLEnumeration<AuthenticatorAttachment>::isNullValue(dictionary.authenticatorAttachment)) {
        auto authenticatorAttachmentValue = toJS<IDLEnumeration<AuthenticatorAttachment>>(lexicalGlobalObject, throwScope, IDLEnumeration<AuthenticatorAttachment>::extractValueFromNullable(dictionary.authenticatorAttachment));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "authenticatorAttachment"_s), authenticatorAttachmentValue);
    }
    auto requireResidentKeyValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, dictionary.requireResidentKey);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "requireResidentKey"_s), requireResidentKeyValue);
    if (!IDLEnumeration<ResidentKeyRequirement>::isNullValue(dictionary.residentKey)) {
        auto residentKeyValue = toJS<IDLEnumeration<ResidentKeyRequirement>>(lexicalGlobalObject, throwScope, IDLEnumeration<ResidentKeyRequirement>::extractValueFromNullable(dictionary.residentKey));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "residentKey"_s), residentKeyValue);
    }
    auto userVerificationValue = toJS<IDLEnumeration<UserVerificationRequirement>>(lexicalGlobalObject, throwScope, dictionary.userVerification);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "userVerification"_s), userVerificationValue);
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
