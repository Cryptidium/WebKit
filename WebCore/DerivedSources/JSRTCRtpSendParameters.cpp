/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtpSendParameters.h"

#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include "JSRTCDegradationPreference.h"
#include "JSRTCRtcpParameters.h"
#include "JSRTCRtpCodecParameters.h"
#include "JSRTCRtpEncodingParameters.h"
#include "JSRTCRtpHeaderExtensionParameters.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCRtpSendParameters>> convertDictionary<RTCRtpSendParameters>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCRtpSendParameters result;
    JSValue codecsValue;
    if (isNullOrUndefined)
        codecsValue = jsUndefined();
    else {
        codecsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "codecs"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (codecsValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "codecs"_s, "RTCRtpSendParameters"_s, "sequence"_s);
        return ConversionResultException { };
    }
    auto codecsConversionResult = convert<IDLSequence<IDLDictionary<RTCRtpCodecParameters>>>(lexicalGlobalObject, codecsValue);
    if (codecsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.codecs = codecsConversionResult.releaseReturnValue();
    JSValue headerExtensionsValue;
    if (isNullOrUndefined)
        headerExtensionsValue = jsUndefined();
    else {
        headerExtensionsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "headerExtensions"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (headerExtensionsValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "headerExtensions"_s, "RTCRtpSendParameters"_s, "sequence"_s);
        return ConversionResultException { };
    }
    auto headerExtensionsConversionResult = convert<IDLSequence<IDLDictionary<RTCRtpHeaderExtensionParameters>>>(lexicalGlobalObject, headerExtensionsValue);
    if (headerExtensionsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.headerExtensions = headerExtensionsConversionResult.releaseReturnValue();
    JSValue rtcpValue;
    if (isNullOrUndefined)
        rtcpValue = jsUndefined();
    else {
        rtcpValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "rtcp"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (rtcpValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "rtcp"_s, "RTCRtpSendParameters"_s, "RTCRtcpParameters"_s);
        return ConversionResultException { };
    }
    auto rtcpConversionResult = convert<IDLDictionary<RTCRtcpParameters>>(lexicalGlobalObject, rtcpValue);
    if (rtcpConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.rtcp = rtcpConversionResult.releaseReturnValue();
    JSValue degradationPreferenceValue;
    if (isNullOrUndefined)
        degradationPreferenceValue = jsUndefined();
    else {
        degradationPreferenceValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "degradationPreference"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!degradationPreferenceValue.isUndefined()) {
        auto degradationPreferenceConversionResult = convert<IDLEnumeration<RTCDegradationPreference>>(lexicalGlobalObject, degradationPreferenceValue);
        if (degradationPreferenceConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.degradationPreference = degradationPreferenceConversionResult.releaseReturnValue();
    }
    JSValue encodingsValue;
    if (isNullOrUndefined)
        encodingsValue = jsUndefined();
    else {
        encodingsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "encodings"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (encodingsValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "encodings"_s, "RTCRtpSendParameters"_s, "sequence"_s);
        return ConversionResultException { };
    }
    auto encodingsConversionResult = convert<IDLSequence<IDLDictionary<RTCRtpEncodingParameters>>>(lexicalGlobalObject, encodingsValue);
    if (encodingsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.encodings = encodingsConversionResult.releaseReturnValue();
    JSValue transactionIdValue;
    if (isNullOrUndefined)
        transactionIdValue = jsUndefined();
    else {
        transactionIdValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "transactionId"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (transactionIdValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "transactionId"_s, "RTCRtpSendParameters"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto transactionIdConversionResult = convert<IDLDOMString>(lexicalGlobalObject, transactionIdValue);
    if (transactionIdConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.transactionId = transactionIdConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCRtpSendParameters& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto codecsValue = toJS<IDLSequence<IDLDictionary<RTCRtpCodecParameters>>>(lexicalGlobalObject, globalObject, throwScope, dictionary.codecs);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "codecs"_s), codecsValue);
    auto headerExtensionsValue = toJS<IDLSequence<IDLDictionary<RTCRtpHeaderExtensionParameters>>>(lexicalGlobalObject, globalObject, throwScope, dictionary.headerExtensions);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "headerExtensions"_s), headerExtensionsValue);
    auto rtcpValue = toJS<IDLDictionary<RTCRtcpParameters>>(lexicalGlobalObject, globalObject, throwScope, dictionary.rtcp);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "rtcp"_s), rtcpValue);
    if (!IDLEnumeration<RTCDegradationPreference>::isNullValue(dictionary.degradationPreference)) {
        auto degradationPreferenceValue = toJS<IDLEnumeration<RTCDegradationPreference>>(lexicalGlobalObject, throwScope, IDLEnumeration<RTCDegradationPreference>::extractValueFromNullable(dictionary.degradationPreference));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "degradationPreference"_s), degradationPreferenceValue);
    }
    auto encodingsValue = toJS<IDLSequence<IDLDictionary<RTCRtpEncodingParameters>>>(lexicalGlobalObject, globalObject, throwScope, dictionary.encodings);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "encodings"_s), encodingsValue);
    auto transactionIdValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.transactionId);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "transactionId"_s), transactionIdValue);
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_RTC)
