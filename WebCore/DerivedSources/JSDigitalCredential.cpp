/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSDigitalCredential.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertObject.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSIdentityCredentialProtocol.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsDigitalCredentialConstructorFunction_userAgentAllowsProtocol);
static JSC_DECLARE_HOST_FUNCTION(jsDigitalCredentialPrototypeFunction_toJSON);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsDigitalCredentialConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDigitalCredential_data);
static JSC_DECLARE_CUSTOM_GETTER(jsDigitalCredential_protocol);

class JSDigitalCredentialPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDigitalCredentialPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDigitalCredentialPrototype* ptr = new (NotNull, JSC::allocateCell<JSDigitalCredentialPrototype>(vm)) JSDigitalCredentialPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDigitalCredentialPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDigitalCredentialPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDigitalCredentialPrototype, JSDigitalCredentialPrototype::Base);

using JSDigitalCredentialDOMConstructor = JSDOMConstructorNotConstructable<JSDigitalCredential>;

/* Hash table for constructor */

static const std::array<HashTableValue, 1> JSDigitalCredentialConstructorTableValues {
    HashTableValue { "userAgentAllowsProtocol"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDigitalCredentialConstructorFunction_userAgentAllowsProtocol, 1 } },
};

template<> const ClassInfo JSDigitalCredentialDOMConstructor::s_info = { "DigitalCredential"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDigitalCredentialDOMConstructor) };

template<> JSValue JSDigitalCredentialDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSBasicCredential::getConstructor(vm, &globalObject);
}

template<> void JSDigitalCredentialDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "DigitalCredential"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSDigitalCredential::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
    reifyStaticProperties(vm, JSDigitalCredential::info(), JSDigitalCredentialConstructorTableValues, *this);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 4> JSDigitalCredentialPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDigitalCredentialConstructor, 0 } },
    HashTableValue { "data"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDigitalCredential_data, 0 } },
    HashTableValue { "protocol"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDigitalCredential_protocol, 0 } },
    HashTableValue { "toJSON"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDigitalCredentialPrototypeFunction_toJSON, 0 } },
};

const ClassInfo JSDigitalCredentialPrototype::s_info = { "DigitalCredential"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDigitalCredentialPrototype) };

void JSDigitalCredentialPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDigitalCredential::info(), JSDigitalCredentialPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSDigitalCredential::s_info = { "DigitalCredential"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDigitalCredential) };

JSDigitalCredential::JSDigitalCredential(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DigitalCredential>&& impl)
    : JSBasicCredential(structure, globalObject, WTFMove(impl))
{
}

Ref<DigitalCredential> JSDigitalCredential::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, DigitalCredential>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSDigitalCredential::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSDigitalCredentialPrototype::createStructure(vm, &globalObject, JSBasicCredential::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSDigitalCredentialPrototype::create(vm, &globalObject, structure);
}

JSObject* JSDigitalCredential::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSDigitalCredential>(vm, globalObject);
}

JSValue JSDigitalCredential::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDigitalCredentialDOMConstructor, DOMConstructorID::DigitalCredential>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDigitalCredentialConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSDigitalCredentialPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSDigitalCredential::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsDigitalCredential_dataGetter(JSGlobalObject& lexicalGlobalObject, JSDigitalCredential& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLObject>(lexicalGlobalObject, throwScope, impl.data())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDigitalCredential_data, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDigitalCredential>::get<jsDigitalCredential_dataGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDigitalCredential_protocolGetter(JSGlobalObject& lexicalGlobalObject, JSDigitalCredential& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<IdentityCredentialProtocol>>(lexicalGlobalObject, throwScope, impl.protocol())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDigitalCredential_protocol, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDigitalCredential>::get<jsDigitalCredential_protocolGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsDigitalCredentialConstructorFunction_userAgentAllowsProtocolBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto protocolConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (protocolConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, DigitalCredential::userAgentAllowsProtocol(protocolConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsDigitalCredentialConstructorFunction_userAgentAllowsProtocol, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDigitalCredential>::callStatic<jsDigitalCredentialConstructorFunction_userAgentAllowsProtocolBody>(*lexicalGlobalObject, *callFrame, "userAgentAllowsProtocol");
}

static inline EncodedJSValue jsDigitalCredentialPrototypeFunction_toJSONBody(JSGlobalObject* lexicalGlobalObject, CallFrame*, JSDigitalCredential* castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* result = constructEmptyObject(lexicalGlobalObject);
    auto dataValue = toJS<IDLObject>(*lexicalGlobalObject, throwScope, impl.data());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "data"_s), dataValue);
    auto protocolValue = toJS<IDLEnumeration<IdentityCredentialProtocol>>(*lexicalGlobalObject, throwScope, impl.protocol());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "protocol"_s), protocolValue);
    return JSValue::encode(result);
}

JSC_DEFINE_HOST_FUNCTION(jsDigitalCredentialPrototypeFunction_toJSON, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDigitalCredential>::call<jsDigitalCredentialPrototypeFunction_toJSONBody>(*lexicalGlobalObject, *callFrame, "toJSON");
}

JSC::GCClient::IsoSubspace* JSDigitalCredential::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSDigitalCredential, UseCustomHeapCellType::No>(vm, "JSDigitalCredential"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForDigitalCredential.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForDigitalCredential = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForDigitalCredential.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForDigitalCredential = std::forward<decltype(space)>(space); }
    );
}

void JSDigitalCredential::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSDigitalCredential*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}


}

#endif // ENABLE(WEB_AUTHN)
