/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtpCodecParameters.h"

#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCRtpCodecParameters>> convertDictionary<RTCRtpCodecParameters>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCRtpCodecParameters result;
    JSValue channelsValue;
    if (isNullOrUndefined)
        channelsValue = jsUndefined();
    else {
        channelsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "channels"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto channelsConversionResult = convertOptionalWithDefault<IDLUnsignedShort>(lexicalGlobalObject, channelsValue, [&]() -> ConversionResult<IDLUnsignedShort> { return Converter<IDLUnsignedShort>::ReturnType { 1 }; });
    if (channelsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.channels = channelsConversionResult.releaseReturnValue();
    JSValue clockRateValue;
    if (isNullOrUndefined)
        clockRateValue = jsUndefined();
    else {
        clockRateValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "clockRate"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!clockRateValue.isUndefined()) {
        auto clockRateConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, clockRateValue);
        if (clockRateConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.clockRate = clockRateConversionResult.releaseReturnValue();
    }
    JSValue mimeTypeValue;
    if (isNullOrUndefined)
        mimeTypeValue = jsUndefined();
    else {
        mimeTypeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "mimeType"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!mimeTypeValue.isUndefined()) {
        auto mimeTypeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, mimeTypeValue);
        if (mimeTypeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.mimeType = mimeTypeConversionResult.releaseReturnValue();
    }
    JSValue payloadTypeValue;
    if (isNullOrUndefined)
        payloadTypeValue = jsUndefined();
    else {
        payloadTypeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "payloadType"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!payloadTypeValue.isUndefined()) {
        auto payloadTypeConversionResult = convert<IDLUnsignedShort>(lexicalGlobalObject, payloadTypeValue);
        if (payloadTypeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.payloadType = payloadTypeConversionResult.releaseReturnValue();
    }
    JSValue sdpFmtpLineValue;
    if (isNullOrUndefined)
        sdpFmtpLineValue = jsUndefined();
    else {
        sdpFmtpLineValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sdpFmtpLine"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!sdpFmtpLineValue.isUndefined()) {
        auto sdpFmtpLineConversionResult = convert<IDLDOMString>(lexicalGlobalObject, sdpFmtpLineValue);
        if (sdpFmtpLineConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.sdpFmtpLine = sdpFmtpLineConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCRtpCodecParameters& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto channelsValue = toJS<IDLUnsignedShort>(lexicalGlobalObject, throwScope, dictionary.channels);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "channels"_s), channelsValue);
    if (!IDLUnsignedLong::isNullValue(dictionary.clockRate)) {
        auto clockRateValue = toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, IDLUnsignedLong::extractValueFromNullable(dictionary.clockRate));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "clockRate"_s), clockRateValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.mimeType)) {
        auto mimeTypeValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.mimeType));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "mimeType"_s), mimeTypeValue);
    }
    if (!IDLUnsignedShort::isNullValue(dictionary.payloadType)) {
        auto payloadTypeValue = toJS<IDLUnsignedShort>(lexicalGlobalObject, throwScope, IDLUnsignedShort::extractValueFromNullable(dictionary.payloadType));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "payloadType"_s), payloadTypeValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.sdpFmtpLine)) {
        auto sdpFmtpLineValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.sdpFmtpLine));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "sdpFmtpLine"_s), sdpFmtpLineValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_RTC)
