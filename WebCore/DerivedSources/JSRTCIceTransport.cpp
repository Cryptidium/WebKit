/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCIceTransport.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSRTCIceCandidate.h"
#include "JSRTCIceGatheringState.h"
#include "JSRTCIceTransportState.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCIceTransport::CandidatePair& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLInterface<RTCIceCandidate>::isNullValue(dictionary.local)) {
        auto localValue = toJS<IDLInterface<RTCIceCandidate>>(lexicalGlobalObject, globalObject, throwScope, IDLInterface<RTCIceCandidate>::extractValueFromNullable(dictionary.local));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "local"_s), localValue);
    }
    if (!IDLInterface<RTCIceCandidate>::isNullValue(dictionary.remote)) {
        auto remoteValue = toJS<IDLInterface<RTCIceCandidate>>(lexicalGlobalObject, globalObject, throwScope, IDLInterface<RTCIceCandidate>::extractValueFromNullable(dictionary.remote));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "remote"_s), remoteValue);
    }
    return result;
}

#endif

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRTCIceTransportPrototypeFunction_getSelectedCandidatePair);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCIceTransportConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCIceTransport_state);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCIceTransport_gatheringState);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCIceTransport_onstatechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCIceTransport_onstatechange);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCIceTransport_ongatheringstatechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCIceTransport_ongatheringstatechange);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCIceTransport_onselectedcandidatepairchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCIceTransport_onselectedcandidatepairchange);

class JSRTCIceTransportPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCIceTransportPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCIceTransportPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCIceTransportPrototype>(vm)) JSRTCIceTransportPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCIceTransportPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCIceTransportPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCIceTransportPrototype, JSRTCIceTransportPrototype::Base);

using JSRTCIceTransportDOMConstructor = JSDOMConstructorNotConstructable<JSRTCIceTransport>;

template<> const ClassInfo JSRTCIceTransportDOMConstructor::s_info = { "RTCIceTransport"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCIceTransportDOMConstructor) };

template<> JSValue JSRTCIceTransportDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSRTCIceTransportDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RTCIceTransport"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCIceTransport::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 7> JSRTCIceTransportPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCIceTransportConstructor, 0 } },
    HashTableValue { "state"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCIceTransport_state, 0 } },
    HashTableValue { "gatheringState"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCIceTransport_gatheringState, 0 } },
    HashTableValue { "onstatechange"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCIceTransport_onstatechange, setJSRTCIceTransport_onstatechange } },
    HashTableValue { "ongatheringstatechange"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCIceTransport_ongatheringstatechange, setJSRTCIceTransport_ongatheringstatechange } },
    HashTableValue { "onselectedcandidatepairchange"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCIceTransport_onselectedcandidatepairchange, setJSRTCIceTransport_onselectedcandidatepairchange } },
    HashTableValue { "getSelectedCandidatePair"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCIceTransportPrototypeFunction_getSelectedCandidatePair, 0 } },
};

const ClassInfo JSRTCIceTransportPrototype::s_info = { "RTCIceTransport"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCIceTransportPrototype) };

void JSRTCIceTransportPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCIceTransport::info(), JSRTCIceTransportPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCIceTransport::s_info = { "RTCIceTransport"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCIceTransport) };

JSRTCIceTransport::JSRTCIceTransport(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCIceTransport>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<RTCIceTransport> JSRTCIceTransport::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, RTCIceTransport>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSRTCIceTransport::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCIceTransportPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSRTCIceTransportPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCIceTransport::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCIceTransport>(vm, globalObject);
}

JSValue JSRTCIceTransport::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCIceTransportDOMConstructor, DOMConstructorID::RTCIceTransport>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCIceTransportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCIceTransportPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCIceTransport::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCIceTransport_stateGetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCIceTransportState>>(lexicalGlobalObject, throwScope, impl.state())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCIceTransport_state, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::get<jsRTCIceTransport_stateGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCIceTransport_gatheringStateGetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCIceGatheringState>>(lexicalGlobalObject, throwScope, impl.gatheringState())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCIceTransport_gatheringState, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::get<jsRTCIceTransport_gatheringStateGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCIceTransport_onstatechangeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().statechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCIceTransport_onstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::get<jsRTCIceTransport_onstatechangeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCIceTransport_onstatechangeSetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().statechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCIceTransport_onstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::set<setJSRTCIceTransport_onstatechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCIceTransport_ongatheringstatechangeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().gatheringstatechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCIceTransport_ongatheringstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::get<jsRTCIceTransport_ongatheringstatechangeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCIceTransport_ongatheringstatechangeSetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().gatheringstatechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCIceTransport_ongatheringstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::set<setJSRTCIceTransport_ongatheringstatechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCIceTransport_onselectedcandidatepairchangeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().selectedcandidatepairchangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCIceTransport_onselectedcandidatepairchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::get<jsRTCIceTransport_onselectedcandidatepairchangeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCIceTransport_onselectedcandidatepairchangeSetter(JSGlobalObject& lexicalGlobalObject, JSRTCIceTransport& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().selectedcandidatepairchangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCIceTransport_onselectedcandidatepairchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCIceTransport>::set<setJSRTCIceTransport_onselectedcandidatepairchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsRTCIceTransportPrototypeFunction_getSelectedCandidatePairBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCIceTransport>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLDictionary<RTCIceTransport::CandidatePair>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getSelectedCandidatePair())));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCIceTransportPrototypeFunction_getSelectedCandidatePair, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCIceTransport>::call<jsRTCIceTransportPrototypeFunction_getSelectedCandidatePairBody>(*lexicalGlobalObject, *callFrame, "getSelectedCandidatePair");
}

JSC::GCClient::IsoSubspace* JSRTCIceTransport::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCIceTransport, UseCustomHeapCellType::No>(vm, "JSRTCIceTransport"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCIceTransport.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCIceTransport = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCIceTransport.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCIceTransport = std::forward<decltype(space)>(space); }
    );
}

void JSRTCIceTransport::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCIceTransport*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRTCIceTransportOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsRTCIceTransport = jsCast<JSRTCIceTransport*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsRTCIceTransport->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSRTCIceTransportOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCIceTransport = static_cast<JSRTCIceTransport*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCIceTransport->protectedWrapped().ptr(), jsRTCIceTransport);
}

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCIceTransport>&& impl)
{
    return createWrapper<RTCIceTransport>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCIceTransport& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCIceTransport* JSRTCIceTransport::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCIceTransport*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
