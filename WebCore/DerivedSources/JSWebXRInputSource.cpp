/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR)

#include "JSWebXRInputSource.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DocumentInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMWrapperCache.h"
#include "JSWebXRSpace.h"
#include "JSXRHandedness.h"
#include "JSXRTargetRayMode.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include "WebCoreOpaqueRootInlines.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

#if ENABLE(GAMEPAD) && ENABLE(WEBXR)
#include "JSGamepad.h"
#endif

#if ENABLE(WEBXR_HANDS)
#include "JSWebXRHand.h"
#endif

namespace WebCore {
using namespace JSC;

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSourceConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSource_handedness);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSource_targetRayMode);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSource_targetRaySpace);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSource_gripSpace);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSource_profiles);
#if ENABLE(GAMEPAD) && ENABLE(WEBXR)
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSource_gamepad);
#endif
#if ENABLE(WEBXR_HANDS)
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRInputSource_hand);
#endif

class JSWebXRInputSourcePrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebXRInputSourcePrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebXRInputSourcePrototype* ptr = new (NotNull, JSC::allocateCell<JSWebXRInputSourcePrototype>(vm)) JSWebXRInputSourcePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRInputSourcePrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebXRInputSourcePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRInputSourcePrototype, JSWebXRInputSourcePrototype::Base);

using JSWebXRInputSourceDOMConstructor = JSDOMConstructorNotConstructable<JSWebXRInputSource>;

template<> const ClassInfo JSWebXRInputSourceDOMConstructor::s_info = { "XRInputSource"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRInputSourceDOMConstructor) };

template<> JSValue JSWebXRInputSourceDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebXRInputSourceDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRInputSource"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWebXRInputSource::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 8> JSWebXRInputSourcePrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSourceConstructor, 0 } },
    HashTableValue { "handedness"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSource_handedness, 0 } },
    HashTableValue { "targetRayMode"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSource_targetRayMode, 0 } },
    HashTableValue { "targetRaySpace"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSource_targetRaySpace, 0 } },
    HashTableValue { "gripSpace"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSource_gripSpace, 0 } },
    HashTableValue { "profiles"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSource_profiles, 0 } },
#if ENABLE(GAMEPAD) && ENABLE(WEBXR)
    HashTableValue { "gamepad"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSource_gamepad, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(WEBXR_HANDS)
    HashTableValue { "hand"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRInputSource_hand, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
};

const ClassInfo JSWebXRInputSourcePrototype::s_info = { "XRInputSource"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRInputSourcePrototype) };

void JSWebXRInputSourcePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebXRInputSource::info(), JSWebXRInputSourcePrototypeTableValues, *this);
    bool hasDisabledRuntimeProperties = false;
#if ENABLE(GAMEPAD) && ENABLE(WEBXR)
    if (!(downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXREnabled && downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXRGamepadsModuleEnabled)) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "gamepad"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
#if ENABLE(WEBXR_HANDS)
    if (!(downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXREnabled && downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().webXRHandInputModuleEnabled)) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "hand"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
#endif
    if (hasDisabledRuntimeProperties && structure()->isDictionary())
        flattenDictionaryObject(vm);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWebXRInputSource::s_info = { "XRInputSource"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRInputSource) };

JSWebXRInputSource::JSWebXRInputSource(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebXRInputSource>&& impl)
    : JSDOMWrapper<WebXRInputSource>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, WebXRInputSource>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSWebXRInputSource::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWebXRInputSourcePrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSWebXRInputSourcePrototype::create(vm, &globalObject, structure);
}

JSObject* JSWebXRInputSource::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWebXRInputSource>(vm, globalObject);
}

JSValue JSWebXRInputSource::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebXRInputSourceDOMConstructor, DOMConstructorID::WebXRInputSource>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSWebXRInputSource::destroy(JSC::JSCell* cell)
{
    JSWebXRInputSource* thisObject = static_cast<JSWebXRInputSource*>(cell);
    thisObject->JSWebXRInputSource::~JSWebXRInputSource();
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSourceConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWebXRInputSourcePrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWebXRInputSource::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWebXRInputSource_handednessGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRInputSource& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<XRHandedness>>(lexicalGlobalObject, throwScope, impl.handedness())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSource_handedness, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRInputSource>::get<jsWebXRInputSource_handednessGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRInputSource_targetRayModeGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRInputSource& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<XRTargetRayMode>>(lexicalGlobalObject, throwScope, impl.targetRayMode())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSource_targetRayMode, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRInputSource>::get<jsWebXRInputSource_targetRayModeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRInputSource_targetRaySpaceGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRInputSource& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebXRSpace>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.targetRaySpace())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSource_targetRaySpace, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRInputSource>::get<jsWebXRInputSource_targetRaySpaceGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRInputSource_gripSpaceGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRInputSource& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<WebXRSpace>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.gripSpace())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSource_gripSpace, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRInputSource>::get<jsWebXRInputSource_gripSpaceGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRInputSource_profilesGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRInputSource& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    if (JSValue cachedValue = thisObject.m_profiles.get())
        return cachedValue;
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLFrozenArray<IDLDOMString>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.profiles());
    RETURN_IF_EXCEPTION(throwScope, { });
    thisObject.m_profiles.set(JSC::getVM(&lexicalGlobalObject), &thisObject, result);
    return result;
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSource_profiles, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRInputSource>::get<jsWebXRInputSource_profilesGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#if ENABLE(GAMEPAD) && ENABLE(WEBXR)
static inline JSValue jsWebXRInputSource_gamepadGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRInputSource& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<Gamepad>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.gamepad())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSource_gamepad, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRInputSource>::get<jsWebXRInputSource_gamepadGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(WEBXR_HANDS)
static inline JSValue jsWebXRInputSource_handGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRInputSource& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<WebXRHand>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.hand())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRInputSource_hand, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRInputSource>::get<jsWebXRInputSource_handGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

JSC::GCClient::IsoSubspace* JSWebXRInputSource::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWebXRInputSource, UseCustomHeapCellType::No>(vm, "JSWebXRInputSource"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWebXRInputSource.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebXRInputSource = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWebXRInputSource.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebXRInputSource = std::forward<decltype(space)>(space); }
    );
}

template<typename Visitor>
void JSWebXRInputSource::visitChildrenImpl(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSWebXRInputSource*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    visitor.append(thisObject->m_profiles);
}

DEFINE_VISIT_CHILDREN(JSWebXRInputSource);

void JSWebXRInputSource::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWebXRInputSource*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSWebXRInputSourceOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    auto* jsWebXRInputSource = jsCast<JSWebXRInputSource*>(handle.slot()->asCell());
    WebXRSession* owner = WTF::getPtr(jsWebXRInputSource->wrapped().session());
    if (!owner)
        return false;
    if (reason) [[unlikely]]
        *reason = "Reachable from WebXRSession"_s;
    return containsWebCoreOpaqueRoot(visitor, owner);
}

void JSWebXRInputSourceOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebXRInputSource = static_cast<JSWebXRInputSource*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebXRInputSource->protectedWrapped().ptr(), jsWebXRInputSource);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebXRInputSource@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16WebXRInputSourceE[]; }
#endif
template<std::same_as<WebXRInputSource> T>
static inline void verifyVTable(WebXRInputSource* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7WebXRInputSource@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore16WebXRInputSourceE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // WebXRInputSource has subclasses. If WebXRInputSource has subclasses that get passed
        // to toJS() we currently require WebXRInputSource you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<WebXRInputSource>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<WebXRInputSource>(impl.ptr());
#endif
    return createWrapper<WebXRInputSource>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, WebXRInputSource& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

WebXRInputSource* JSWebXRInputSource::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebXRInputSource*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBXR)
