/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PAYMENT_REQUEST)

#include "JSPaymentShippingOption.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSPaymentCurrencyAmount.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(PAYMENT_REQUEST)

template<> ConversionResult<IDLDictionary<PaymentShippingOption>> convertDictionary<PaymentShippingOption>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    PaymentShippingOption result;
    JSValue amountValue;
    if (isNullOrUndefined)
        amountValue = jsUndefined();
    else {
        amountValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "amount"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (amountValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "amount"_s, "PaymentShippingOption"_s, "PaymentCurrencyAmount"_s);
        return ConversionResultException { };
    }
    auto amountConversionResult = convert<IDLDictionary<PaymentCurrencyAmount>>(lexicalGlobalObject, amountValue);
    if (amountConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.amount = amountConversionResult.releaseReturnValue();
    JSValue idValue;
    if (isNullOrUndefined)
        idValue = jsUndefined();
    else {
        idValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "id"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (idValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "id"_s, "PaymentShippingOption"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto idConversionResult = convert<IDLDOMString>(lexicalGlobalObject, idValue);
    if (idConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.id = idConversionResult.releaseReturnValue();
    JSValue labelValue;
    if (isNullOrUndefined)
        labelValue = jsUndefined();
    else {
        labelValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "label"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (labelValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "label"_s, "PaymentShippingOption"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto labelConversionResult = convert<IDLDOMString>(lexicalGlobalObject, labelValue);
    if (labelConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.label = labelConversionResult.releaseReturnValue();
    JSValue selectedValue;
    if (isNullOrUndefined)
        selectedValue = jsUndefined();
    else {
        selectedValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "selected"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto selectedConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, selectedValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (selectedConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.selected = selectedConversionResult.releaseReturnValue();
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(PAYMENT_REQUEST)
