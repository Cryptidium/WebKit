/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSFetchRequestCache.h"

#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSString.h>
#include <wtf/NeverDestroyed.h>
#include <wtf/SortedArrayMap.h>



namespace WebCore {
using namespace JSC;

String convertEnumerationToString(FetchRequestCache enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 6> values {
        MAKE_STATIC_STRING_IMPL("default"),
        MAKE_STATIC_STRING_IMPL("no-store"),
        MAKE_STATIC_STRING_IMPL("reload"),
        MAKE_STATIC_STRING_IMPL("no-cache"),
        MAKE_STATIC_STRING_IMPL("force-cache"),
        MAKE_STATIC_STRING_IMPL("only-if-cached"),
    };
    static_assert(static_cast<size_t>(FetchRequestCache::Default) == 0, "FetchRequestCache::Default is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequestCache::NoStore) == 1, "FetchRequestCache::NoStore is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequestCache::Reload) == 2, "FetchRequestCache::Reload is not 2 as expected");
    static_assert(static_cast<size_t>(FetchRequestCache::NoCache) == 3, "FetchRequestCache::NoCache is not 3 as expected");
    static_assert(static_cast<size_t>(FetchRequestCache::ForceCache) == 4, "FetchRequestCache::ForceCache is not 4 as expected");
    static_assert(static_cast<size_t>(FetchRequestCache::OnlyIfCached) == 5, "FetchRequestCache::OnlyIfCached is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, FetchRequestCache enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<FetchRequestCache> parseEnumerationFromString<FetchRequestCache>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, FetchRequestCache>, 6> mappings {
        std::pair<ComparableASCIILiteral, FetchRequestCache> { "default"_s, FetchRequestCache::Default },
        std::pair<ComparableASCIILiteral, FetchRequestCache> { "force-cache"_s, FetchRequestCache::ForceCache },
        std::pair<ComparableASCIILiteral, FetchRequestCache> { "no-cache"_s, FetchRequestCache::NoCache },
        std::pair<ComparableASCIILiteral, FetchRequestCache> { "no-store"_s, FetchRequestCache::NoStore },
        std::pair<ComparableASCIILiteral, FetchRequestCache> { "only-if-cached"_s, FetchRequestCache::OnlyIfCached },
        std::pair<ComparableASCIILiteral, FetchRequestCache> { "reload"_s, FetchRequestCache::Reload },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<FetchRequestCache> parseEnumeration<FetchRequestCache>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<FetchRequestCache>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<FetchRequestCache>()
{
    return "\"default\", \"no-store\", \"reload\", \"no-cache\", \"force-cache\", \"only-if-cached\""_s;
}

} // namespace WebCore

