/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSPublicKeyCredential.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "Document.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSAllAcceptedCredentialsOptions.h"
#include "JSAuthenticationExtensionsClientOutputs.h"
#include "JSAuthenticationResponseJSON.h"
#include "JSAuthenticatorAttachment.h"
#include "JSAuthenticatorResponse.h"
#include "JSCurrentUserDetailsOptions.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertRecord.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSPublicKeyCredentialCreationOptions.h"
#include "JSPublicKeyCredentialCreationOptionsJSON.h"
#include "JSPublicKeyCredentialRequestOptions.h"
#include "JSPublicKeyCredentialRequestOptionsJSON.h"
#include "JSRegistrationResponseJSON.h"
#include "JSUnknownCredentialOptions.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/Variant.h>
#include <wtf/Vector.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialPrototypeFunction_getClientExtensionResults);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialPrototypeFunction_toJSON);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_isUserVerifyingPlatformAuthenticatorAvailable);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_getClientCapabilities);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_parseCreationOptionsFromJSON);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_parseRequestOptionsFromJSON);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_signalUnknownCredential);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_signalAllAcceptedCredentials);
static JSC_DECLARE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_signalCurrentUserDetails);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsPublicKeyCredentialConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsPublicKeyCredential_rawId);
static JSC_DECLARE_CUSTOM_GETTER(jsPublicKeyCredential_response);
static JSC_DECLARE_CUSTOM_GETTER(jsPublicKeyCredential_authenticatorAttachment);

class JSPublicKeyCredentialPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSPublicKeyCredentialPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSPublicKeyCredentialPrototype* ptr = new (NotNull, JSC::allocateCell<JSPublicKeyCredentialPrototype>(vm)) JSPublicKeyCredentialPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSPublicKeyCredentialPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSPublicKeyCredentialPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSPublicKeyCredentialPrototype, JSPublicKeyCredentialPrototype::Base);

using JSPublicKeyCredentialDOMConstructor = JSDOMConstructorNotConstructable<JSPublicKeyCredential>;

/* Hash table for constructor */

static const std::array<HashTableValue, 7> JSPublicKeyCredentialConstructorTableValues {
    HashTableValue { "isUserVerifyingPlatformAuthenticatorAvailable"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialConstructorFunction_isUserVerifyingPlatformAuthenticatorAvailable, 0 } },
    HashTableValue { "getClientCapabilities"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialConstructorFunction_getClientCapabilities, 0 } },
    HashTableValue { "parseCreationOptionsFromJSON"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialConstructorFunction_parseCreationOptionsFromJSON, 1 } },
    HashTableValue { "parseRequestOptionsFromJSON"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialConstructorFunction_parseRequestOptionsFromJSON, 1 } },
    HashTableValue { "signalUnknownCredential"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialConstructorFunction_signalUnknownCredential, 1 } },
    HashTableValue { "signalAllAcceptedCredentials"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialConstructorFunction_signalAllAcceptedCredentials, 1 } },
    HashTableValue { "signalCurrentUserDetails"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialConstructorFunction_signalCurrentUserDetails, 1 } },
};

template<> const ClassInfo JSPublicKeyCredentialDOMConstructor::s_info = { "PublicKeyCredential"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPublicKeyCredentialDOMConstructor) };

template<> JSValue JSPublicKeyCredentialDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSBasicCredential::getConstructor(vm, &globalObject);
}

template<> void JSPublicKeyCredentialDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "PublicKeyCredential"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSPublicKeyCredential::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
    reifyStaticProperties(vm, JSPublicKeyCredential::info(), JSPublicKeyCredentialConstructorTableValues, *this);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSPublicKeyCredentialPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsPublicKeyCredentialConstructor, 0 } },
    HashTableValue { "rawId"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPublicKeyCredential_rawId, 0 } },
    HashTableValue { "response"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPublicKeyCredential_response, 0 } },
    HashTableValue { "authenticatorAttachment"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPublicKeyCredential_authenticatorAttachment, 0 } },
    HashTableValue { "getClientExtensionResults"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialPrototypeFunction_getClientExtensionResults, 0 } },
    HashTableValue { "toJSON"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPublicKeyCredentialPrototypeFunction_toJSON, 0 } },
};

const ClassInfo JSPublicKeyCredentialPrototype::s_info = { "PublicKeyCredential"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPublicKeyCredentialPrototype) };

void JSPublicKeyCredentialPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSPublicKeyCredential::info(), JSPublicKeyCredentialPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSPublicKeyCredential::s_info = { "PublicKeyCredential"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPublicKeyCredential) };

JSPublicKeyCredential::JSPublicKeyCredential(Structure* structure, JSDOMGlobalObject& globalObject, Ref<PublicKeyCredential>&& impl)
    : JSBasicCredential(structure, globalObject, WTFMove(impl))
{
}

Ref<PublicKeyCredential> JSPublicKeyCredential::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, PublicKeyCredential>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSPublicKeyCredential::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSPublicKeyCredentialPrototype::createStructure(vm, &globalObject, JSBasicCredential::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSPublicKeyCredentialPrototype::create(vm, &globalObject, structure);
}

JSObject* JSPublicKeyCredential::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSPublicKeyCredential>(vm, globalObject);
}

JSValue JSPublicKeyCredential::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPublicKeyCredentialDOMConstructor, DOMConstructorID::PublicKeyCredential>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsPublicKeyCredentialConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSPublicKeyCredentialPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSPublicKeyCredential::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsPublicKeyCredential_rawIdGetter(JSGlobalObject& lexicalGlobalObject, JSPublicKeyCredential& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLArrayBuffer>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.rawId())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPublicKeyCredential_rawId, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPublicKeyCredential>::get<jsPublicKeyCredential_rawIdGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPublicKeyCredential_responseGetter(JSGlobalObject& lexicalGlobalObject, JSPublicKeyCredential& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<AuthenticatorResponse>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.response())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPublicKeyCredential_response, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPublicKeyCredential>::get<jsPublicKeyCredential_responseGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPublicKeyCredential_authenticatorAttachmentGetter(JSGlobalObject& lexicalGlobalObject, JSPublicKeyCredential& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLEnumeration<AuthenticatorAttachment>>>(lexicalGlobalObject, throwScope, impl.authenticatorAttachment())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPublicKeyCredential_authenticatorAttachment, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPublicKeyCredential>::get<jsPublicKeyCredential_authenticatorAttachmentGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialPrototypeFunction_getClientExtensionResultsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSPublicKeyCredential>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDictionary<AuthenticationExtensionsClientOutputs>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getClientExtensionResults())));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialPrototypeFunction_getClientExtensionResults, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSPublicKeyCredential>::call<jsPublicKeyCredentialPrototypeFunction_getClientExtensionResultsBody>(*lexicalGlobalObject, *callFrame, "getClientExtensionResults");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialPrototypeFunction_toJSONBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSPublicKeyCredential>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUnion<IDLDictionary<RegistrationResponseJSON>, IDLDictionary<AuthenticationResponseJSON>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.toJSON())));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialPrototypeFunction_toJSON, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSPublicKeyCredential>::call<jsPublicKeyCredentialPrototypeFunction_toJSONBody>(*lexicalGlobalObject, *callFrame, "toJSON");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialConstructorFunction_isUserVerifyingPlatformAuthenticatorAvailableBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLBoolean>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, [&]() -> decltype(auto) { return PublicKeyCredential::isUserVerifyingPlatformAuthenticatorAvailable(document.get(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_isUserVerifyingPlatformAuthenticatorAvailable, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSPublicKeyCredential>::callStatic<jsPublicKeyCredentialConstructorFunction_isUserVerifyingPlatformAuthenticatorAvailableBody>(*lexicalGlobalObject, *callFrame, "isUserVerifyingPlatformAuthenticatorAvailable");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialConstructorFunction_getClientCapabilitiesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLRecord<IDLDOMString, IDLBoolean>>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, [&]() -> decltype(auto) { return PublicKeyCredential::getClientCapabilities(document.get(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_getClientCapabilities, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSPublicKeyCredential>::callStatic<jsPublicKeyCredentialConstructorFunction_getClientCapabilitiesBody>(*lexicalGlobalObject, *callFrame, "getClientCapabilities");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialConstructorFunction_parseCreationOptionsFromJSONBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto optionsConversionResult = convert<IDLDictionary<PublicKeyCredentialCreationOptionsJSON>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDictionary<PublicKeyCredentialCreationOptions>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, PublicKeyCredential::parseCreationOptionsFromJSON(optionsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_parseCreationOptionsFromJSON, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSPublicKeyCredential>::callStatic<jsPublicKeyCredentialConstructorFunction_parseCreationOptionsFromJSONBody>(*lexicalGlobalObject, *callFrame, "parseCreationOptionsFromJSON");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialConstructorFunction_parseRequestOptionsFromJSONBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto optionsConversionResult = convert<IDLDictionary<PublicKeyCredentialRequestOptionsJSON>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDictionary<PublicKeyCredentialRequestOptions>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, PublicKeyCredential::parseRequestOptionsFromJSON(optionsConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_parseRequestOptionsFromJSON, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSPublicKeyCredential>::callStatic<jsPublicKeyCredentialConstructorFunction_parseRequestOptionsFromJSONBody>(*lexicalGlobalObject, *callFrame, "parseRequestOptionsFromJSON");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialConstructorFunction_signalUnknownCredentialBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto optionsConversionResult = convert<IDLDictionary<UnknownCredentialOptions>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, [&]() -> decltype(auto) { return PublicKeyCredential::signalUnknownCredential(document.get(), optionsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_signalUnknownCredential, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSPublicKeyCredential>::callStatic<jsPublicKeyCredentialConstructorFunction_signalUnknownCredentialBody>(*lexicalGlobalObject, *callFrame, "signalUnknownCredential");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialConstructorFunction_signalAllAcceptedCredentialsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto optionsConversionResult = convert<IDLDictionary<AllAcceptedCredentialsOptions>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, [&]() -> decltype(auto) { return PublicKeyCredential::signalAllAcceptedCredentials(document.get(), optionsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_signalAllAcceptedCredentials, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSPublicKeyCredential>::callStatic<jsPublicKeyCredentialConstructorFunction_signalAllAcceptedCredentialsBody>(*lexicalGlobalObject, *callFrame, "signalAllAcceptedCredentials");
}

static inline JSC::EncodedJSValue jsPublicKeyCredentialConstructorFunction_signalCurrentUserDetailsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto optionsConversionResult = convert<IDLDictionary<CurrentUserDetailsOptions>>(*lexicalGlobalObject, argument0.value());
    if (optionsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, [&]() -> decltype(auto) { return PublicKeyCredential::signalCurrentUserDetails(document.get(), optionsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsPublicKeyCredentialConstructorFunction_signalCurrentUserDetails, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSPublicKeyCredential>::callStatic<jsPublicKeyCredentialConstructorFunction_signalCurrentUserDetailsBody>(*lexicalGlobalObject, *callFrame, "signalCurrentUserDetails");
}

JSC::GCClient::IsoSubspace* JSPublicKeyCredential::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSPublicKeyCredential, UseCustomHeapCellType::No>(vm, "JSPublicKeyCredential"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForPublicKeyCredential.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForPublicKeyCredential = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForPublicKeyCredential.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForPublicKeyCredential = std::forward<decltype(space)>(space); }
    );
}

void JSPublicKeyCredential::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSPublicKeyCredential*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}


}

#endif // ENABLE(WEB_AUTHN)
