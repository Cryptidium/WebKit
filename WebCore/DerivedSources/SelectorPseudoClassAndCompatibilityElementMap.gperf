%{
/*
 * Copyright (C) 2014-2024 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// This file is automatically generated from CSSPseudoSelectors.json by the process-css-pseudo-selectors.py script, do not edit by hand.

#include "config.h"
#include "SelectorPseudoTypeMap.h"

#include "MutableCSSSelector.h"

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
IGNORE_WARNINGS_BEGIN("implicit-fallthrough")

// Older versions of gperf use the `register` keyword.
#define register

namespace WebCore {

struct SelectorPseudoClassOrCompatibilityPseudoElementEntry {
    const char* name;
    PseudoClassOrCompatibilityPseudoElement pseudoTypes;
};

%}

%struct-type
%define initializer-suffix ,{std::nullopt,std::nullopt}
%define class-name SelectorPseudoClassAndCompatibilityElementMapHash
%omit-struct-type
%language=C++
%readonly-tables
%global-table
%ignore-case
%compare-strncmp
%enum

struct SelectorPseudoClassOrCompatibilityPseudoElementEntry;

%%
"-apple-has-attachment", {CSSSelector::PseudoClass::AppleHasAttachment, std::nullopt}
"-internal-animating-fullscreen-transition", {CSSSelector::PseudoClass::InternalAnimatingFullscreenTransition, std::nullopt}
"-internal-fullscreen-document", {CSSSelector::PseudoClass::InternalFullscreenDocument, std::nullopt}
"-internal-html-document", {CSSSelector::PseudoClass::InternalHTMLDocument, std::nullopt}
"-internal-in-window-fullscreen", {CSSSelector::PseudoClass::InternalInWindowFullscreen, std::nullopt}
"-internal-media-document", {CSSSelector::PseudoClass::InternalMediaDocument, std::nullopt}
"-webkit-any", {CSSSelector::PseudoClass::WebKitAny, std::nullopt}
"-webkit-autofill-and-obscured", {CSSSelector::PseudoClass::WebKitAutofillAndObscured, std::nullopt}
"-webkit-autofill-strong-password", {CSSSelector::PseudoClass::WebKitAutofillStrongPassword, std::nullopt}
"-webkit-autofill-strong-password-viewable", {CSSSelector::PseudoClass::WebKitAutofillStrongPasswordViewable, std::nullopt}
"-webkit-drag", {CSSSelector::PseudoClass::WebKitDrag, std::nullopt}
"active", {CSSSelector::PseudoClass::Active, std::nullopt}
"active-view-transition", {CSSSelector::PseudoClass::ActiveViewTransition, std::nullopt}
"active-view-transition-type", {CSSSelector::PseudoClass::ActiveViewTransitionType, std::nullopt}
"any-link", {CSSSelector::PseudoClass::AnyLink, std::nullopt}
"-webkit-any-link", {CSSSelector::PseudoClass::AnyLink, std::nullopt}
"autofill", {CSSSelector::PseudoClass::Autofill, std::nullopt}
"-webkit-autofill", {CSSSelector::PseudoClass::Autofill, std::nullopt}
"buffering", {CSSSelector::PseudoClass::Buffering, std::nullopt}
"checked", {CSSSelector::PseudoClass::Checked, std::nullopt}
"corner-present", {CSSSelector::PseudoClass::CornerPresent, std::nullopt}
"decrement", {CSSSelector::PseudoClass::Decrement, std::nullopt}
"default", {CSSSelector::PseudoClass::Default, std::nullopt}
"defined", {CSSSelector::PseudoClass::Defined, std::nullopt}
"dir", {CSSSelector::PseudoClass::Dir, std::nullopt}
"disabled", {CSSSelector::PseudoClass::Disabled, std::nullopt}
"double-button", {CSSSelector::PseudoClass::DoubleButton, std::nullopt}
"empty", {CSSSelector::PseudoClass::Empty, std::nullopt}
"enabled", {CSSSelector::PseudoClass::Enabled, std::nullopt}
"end", {CSSSelector::PseudoClass::End, std::nullopt}
"first-child", {CSSSelector::PseudoClass::FirstChild, std::nullopt}
"first-of-type", {CSSSelector::PseudoClass::FirstOfType, std::nullopt}
"focus", {CSSSelector::PseudoClass::Focus, std::nullopt}
"focus-visible", {CSSSelector::PseudoClass::FocusVisible, std::nullopt}
"focus-within", {CSSSelector::PseudoClass::FocusWithin, std::nullopt}
"fullscreen", {CSSSelector::PseudoClass::Fullscreen, std::nullopt}
"-webkit-full-screen", {CSSSelector::PseudoClass::Fullscreen, std::nullopt}
"future", {CSSSelector::PseudoClass::Future, std::nullopt}
"has", {CSSSelector::PseudoClass::Has, std::nullopt}
"horizontal", {CSSSelector::PseudoClass::Horizontal, std::nullopt}
"host", {CSSSelector::PseudoClass::Host, std::nullopt}
"hover", {CSSSelector::PseudoClass::Hover, std::nullopt}
"in-range", {CSSSelector::PseudoClass::InRange, std::nullopt}
"increment", {CSSSelector::PseudoClass::Increment, std::nullopt}
"indeterminate", {CSSSelector::PseudoClass::Indeterminate, std::nullopt}
"invalid", {CSSSelector::PseudoClass::Invalid, std::nullopt}
"is", {CSSSelector::PseudoClass::Is, std::nullopt}
"matches", {CSSSelector::PseudoClass::Is, std::nullopt}
"lang", {CSSSelector::PseudoClass::Lang, std::nullopt}
"last-child", {CSSSelector::PseudoClass::LastChild, std::nullopt}
"last-of-type", {CSSSelector::PseudoClass::LastOfType, std::nullopt}
"link", {CSSSelector::PseudoClass::Link, std::nullopt}
"modal", {CSSSelector::PseudoClass::Modal, std::nullopt}
"muted", {CSSSelector::PseudoClass::Muted, std::nullopt}
"no-button", {CSSSelector::PseudoClass::NoButton, std::nullopt}
"not", {CSSSelector::PseudoClass::Not, std::nullopt}
"nth-child", {CSSSelector::PseudoClass::NthChild, std::nullopt}
"nth-last-child", {CSSSelector::PseudoClass::NthLastChild, std::nullopt}
"nth-last-of-type", {CSSSelector::PseudoClass::NthLastOfType, std::nullopt}
"nth-of-type", {CSSSelector::PseudoClass::NthOfType, std::nullopt}
"only-child", {CSSSelector::PseudoClass::OnlyChild, std::nullopt}
"only-of-type", {CSSSelector::PseudoClass::OnlyOfType, std::nullopt}
"optional", {CSSSelector::PseudoClass::Optional, std::nullopt}
"out-of-range", {CSSSelector::PseudoClass::OutOfRange, std::nullopt}
"past", {CSSSelector::PseudoClass::Past, std::nullopt}
"paused", {CSSSelector::PseudoClass::Paused, std::nullopt}
"placeholder-shown", {CSSSelector::PseudoClass::PlaceholderShown, std::nullopt}
"playing", {CSSSelector::PseudoClass::Playing, std::nullopt}
"popover-open", {CSSSelector::PseudoClass::PopoverOpen, std::nullopt}
"read-only", {CSSSelector::PseudoClass::ReadOnly, std::nullopt}
"read-write", {CSSSelector::PseudoClass::ReadWrite, std::nullopt}
"required", {CSSSelector::PseudoClass::Required, std::nullopt}
"root", {CSSSelector::PseudoClass::Root, std::nullopt}
"scope", {CSSSelector::PseudoClass::Scope, std::nullopt}
"seeking", {CSSSelector::PseudoClass::Seeking, std::nullopt}
"stalled", {CSSSelector::PseudoClass::Stalled, std::nullopt}
"state", {CSSSelector::PseudoClass::State, std::nullopt}
"single-button", {CSSSelector::PseudoClass::SingleButton, std::nullopt}
"start", {CSSSelector::PseudoClass::Start, std::nullopt}
"target", {CSSSelector::PseudoClass::Target, std::nullopt}
"user-invalid", {CSSSelector::PseudoClass::UserInvalid, std::nullopt}
"user-valid", {CSSSelector::PseudoClass::UserValid, std::nullopt}
"valid", {CSSSelector::PseudoClass::Valid, std::nullopt}
"vertical", {CSSSelector::PseudoClass::Vertical, std::nullopt}
"visited", {CSSSelector::PseudoClass::Visited, std::nullopt}
"volume-locked", {CSSSelector::PseudoClass::VolumeLocked, std::nullopt}
"where", {CSSSelector::PseudoClass::Where, std::nullopt}
"window-inactive", {CSSSelector::PseudoClass::WindowInactive, std::nullopt}
"after", {std::nullopt, CSSSelector::PseudoElement::After}
"before", {std::nullopt, CSSSelector::PseudoElement::Before}
"first-letter", {std::nullopt, CSSSelector::PseudoElement::FirstLetter}
"first-line", {std::nullopt, CSSSelector::PseudoElement::FirstLine}
%%

static inline const SelectorPseudoClassOrCompatibilityPseudoElementEntry* findPseudoClassAndCompatibilityElementName(std::span<const LChar> characters)
{
    return SelectorPseudoClassAndCompatibilityElementMapHash::in_word_set(byteCast<char>(characters.data()), characters.size());
}

static inline const SelectorPseudoClassOrCompatibilityPseudoElementEntry* findPseudoClassAndCompatibilityElementName(std::span<const char16_t> characters)
{
    constexpr unsigned maxKeywordLength = 41;
    std::array<LChar, maxKeywordLength> buffer;
    if (characters.size() > maxKeywordLength)
        return nullptr;

    for (size_t i = 0; i < characters.size(); ++i) {
        char16_t character = characters[i];
        if (!isLatin1(character))
            return nullptr;

        buffer[i] = static_cast<LChar>(character);
    }
    return findPseudoClassAndCompatibilityElementName(std::span { buffer }.first(characters.size()));
}

PseudoClassOrCompatibilityPseudoElement findPseudoClassAndCompatibilityElementName(StringView name)
{
    const SelectorPseudoClassOrCompatibilityPseudoElementEntry* entry;
    if (name.is8Bit())
        entry = findPseudoClassAndCompatibilityElementName(name.span8());
    else
        entry = findPseudoClassAndCompatibilityElementName(name.span16());

    if (entry)
        return entry->pseudoTypes;
    return { std::nullopt, std::nullopt };
}

} // namespace WebCore

IGNORE_WARNINGS_END
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END
