/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSCryptoKeyUsage.h"

#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSString.h>
#include <wtf/NeverDestroyed.h>
#include <wtf/SortedArrayMap.h>



namespace WebCore {
using namespace JSC;

String convertEnumerationToString(CryptoKeyUsage enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 8> values {
        MAKE_STATIC_STRING_IMPL("encrypt"),
        MAKE_STATIC_STRING_IMPL("decrypt"),
        MAKE_STATIC_STRING_IMPL("sign"),
        MAKE_STATIC_STRING_IMPL("verify"),
        MAKE_STATIC_STRING_IMPL("deriveKey"),
        MAKE_STATIC_STRING_IMPL("deriveBits"),
        MAKE_STATIC_STRING_IMPL("wrapKey"),
        MAKE_STATIC_STRING_IMPL("unwrapKey"),
    };
    static_assert(static_cast<size_t>(CryptoKeyUsage::Encrypt) == 0, "CryptoKeyUsage::Encrypt is not 0 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::Decrypt) == 1, "CryptoKeyUsage::Decrypt is not 1 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::Sign) == 2, "CryptoKeyUsage::Sign is not 2 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::Verify) == 3, "CryptoKeyUsage::Verify is not 3 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::DeriveKey) == 4, "CryptoKeyUsage::DeriveKey is not 4 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::DeriveBits) == 5, "CryptoKeyUsage::DeriveBits is not 5 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::WrapKey) == 6, "CryptoKeyUsage::WrapKey is not 6 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::UnwrapKey) == 7, "CryptoKeyUsage::UnwrapKey is not 7 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, CryptoKeyUsage enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<CryptoKeyUsage> parseEnumerationFromString<CryptoKeyUsage>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, CryptoKeyUsage>, 8> mappings {
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "decrypt"_s, CryptoKeyUsage::Decrypt },
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "deriveBits"_s, CryptoKeyUsage::DeriveBits },
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "deriveKey"_s, CryptoKeyUsage::DeriveKey },
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "encrypt"_s, CryptoKeyUsage::Encrypt },
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "sign"_s, CryptoKeyUsage::Sign },
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "unwrapKey"_s, CryptoKeyUsage::UnwrapKey },
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "verify"_s, CryptoKeyUsage::Verify },
        std::pair<ComparableASCIILiteral, CryptoKeyUsage> { "wrapKey"_s, CryptoKeyUsage::WrapKey },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<CryptoKeyUsage> parseEnumeration<CryptoKeyUsage>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<CryptoKeyUsage>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<CryptoKeyUsage>()
{
    return "\"encrypt\", \"decrypt\", \"sign\", \"verify\", \"deriveKey\", \"deriveBits\", \"wrapKey\", \"unwrapKey\""_s;
}

} // namespace WebCore

