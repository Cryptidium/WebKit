/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtcpParameters.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCRtcpParameters>> convertDictionary<RTCRtcpParameters>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCRtcpParameters result;
    JSValue cnameValue;
    if (isNullOrUndefined)
        cnameValue = jsUndefined();
    else {
        cnameValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "cname"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!cnameValue.isUndefined()) {
        auto cnameConversionResult = convert<IDLDOMString>(lexicalGlobalObject, cnameValue);
        if (cnameConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.cname = cnameConversionResult.releaseReturnValue();
    }
    JSValue reducedSizeValue;
    if (isNullOrUndefined)
        reducedSizeValue = jsUndefined();
    else {
        reducedSizeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "reducedSize"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!reducedSizeValue.isUndefined()) {
        auto reducedSizeConversionResult = convert<IDLBoolean>(lexicalGlobalObject, reducedSizeValue);
        if (reducedSizeConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.reducedSize = reducedSizeConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCRtcpParameters& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLDOMString::isNullValue(dictionary.cname)) {
        auto cnameValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.cname));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "cname"_s), cnameValue);
    }
    if (!IDLBoolean::isNullValue(dictionary.reducedSize)) {
        auto reducedSizeValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.reducedSize));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "reducedSize"_s), reducedSizeValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_RTC)
