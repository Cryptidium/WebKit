/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA)

#include "JSMediaKeyStatusMap.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertAny.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMIterator.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/BuiltinNames.h>
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/Variant.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(MediaKeyStatusMap::Status enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 7> values {
        MAKE_STATIC_STRING_IMPL("usable"),
        MAKE_STATIC_STRING_IMPL("expired"),
        MAKE_STATIC_STRING_IMPL("released"),
        MAKE_STATIC_STRING_IMPL("output-restricted"),
        MAKE_STATIC_STRING_IMPL("output-downscaled"),
        MAKE_STATIC_STRING_IMPL("status-pending"),
        MAKE_STATIC_STRING_IMPL("internal-error"),
    };
    static_assert(static_cast<size_t>(MediaKeyStatusMap::Status::Usable) == 0, "MediaKeyStatusMap::Status::Usable is not 0 as expected");
    static_assert(static_cast<size_t>(MediaKeyStatusMap::Status::Expired) == 1, "MediaKeyStatusMap::Status::Expired is not 1 as expected");
    static_assert(static_cast<size_t>(MediaKeyStatusMap::Status::Released) == 2, "MediaKeyStatusMap::Status::Released is not 2 as expected");
    static_assert(static_cast<size_t>(MediaKeyStatusMap::Status::OutputRestricted) == 3, "MediaKeyStatusMap::Status::OutputRestricted is not 3 as expected");
    static_assert(static_cast<size_t>(MediaKeyStatusMap::Status::OutputDownscaled) == 4, "MediaKeyStatusMap::Status::OutputDownscaled is not 4 as expected");
    static_assert(static_cast<size_t>(MediaKeyStatusMap::Status::StatusPending) == 5, "MediaKeyStatusMap::Status::StatusPending is not 5 as expected");
    static_assert(static_cast<size_t>(MediaKeyStatusMap::Status::InternalError) == 6, "MediaKeyStatusMap::Status::InternalError is not 6 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, MediaKeyStatusMap::Status enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<MediaKeyStatusMap::Status> parseEnumerationFromString<MediaKeyStatusMap::Status>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status>, 7> mappings {
        std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status> { "expired"_s, MediaKeyStatusMap::Status::Expired },
        std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status> { "internal-error"_s, MediaKeyStatusMap::Status::InternalError },
        std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status> { "output-downscaled"_s, MediaKeyStatusMap::Status::OutputDownscaled },
        std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status> { "output-restricted"_s, MediaKeyStatusMap::Status::OutputRestricted },
        std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status> { "released"_s, MediaKeyStatusMap::Status::Released },
        std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status> { "status-pending"_s, MediaKeyStatusMap::Status::StatusPending },
        std::pair<ComparableASCIILiteral, MediaKeyStatusMap::Status> { "usable"_s, MediaKeyStatusMap::Status::Usable },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<MediaKeyStatusMap::Status> parseEnumeration<MediaKeyStatusMap::Status>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<MediaKeyStatusMap::Status>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<MediaKeyStatusMap::Status>()
{
    return "\"usable\", \"expired\", \"released\", \"output-restricted\", \"output-downscaled\", \"status-pending\", \"internal-error\""_s;
}

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_has);
static JSC_DECLARE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_get);
static JSC_DECLARE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_entries);
static JSC_DECLARE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_keys);
static JSC_DECLARE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_values);
static JSC_DECLARE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_forEach);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsMediaKeyStatusMapConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsMediaKeyStatusMap_size);

class JSMediaKeyStatusMapPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMediaKeyStatusMapPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaKeyStatusMapPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaKeyStatusMapPrototype>(vm)) JSMediaKeyStatusMapPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMediaKeyStatusMapPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaKeyStatusMapPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSMediaKeyStatusMapPrototype, JSMediaKeyStatusMapPrototype::Base);

using JSMediaKeyStatusMapDOMConstructor = JSDOMConstructorNotConstructable<JSMediaKeyStatusMap>;

template<> const ClassInfo JSMediaKeyStatusMapDOMConstructor::s_info = { "MediaKeyStatusMap"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMediaKeyStatusMapDOMConstructor) };

template<> JSValue JSMediaKeyStatusMapDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSMediaKeyStatusMapDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "MediaKeyStatusMap"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSMediaKeyStatusMap::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 8> JSMediaKeyStatusMapPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaKeyStatusMapConstructor, 0 } },
    HashTableValue { "size"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsMediaKeyStatusMap_size, 0 } },
    HashTableValue { "has"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaKeyStatusMapPrototypeFunction_has, 1 } },
    HashTableValue { "get"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaKeyStatusMapPrototypeFunction_get, 1 } },
    HashTableValue { "entries"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaKeyStatusMapPrototypeFunction_entries, 0 } },
    HashTableValue { "keys"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaKeyStatusMapPrototypeFunction_keys, 0 } },
    HashTableValue { "values"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaKeyStatusMapPrototypeFunction_values, 0 } },
    HashTableValue { "forEach"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsMediaKeyStatusMapPrototypeFunction_forEach, 1 } },
};

const ClassInfo JSMediaKeyStatusMapPrototype::s_info = { "MediaKeyStatusMap"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMediaKeyStatusMapPrototype) };

void JSMediaKeyStatusMapPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaKeyStatusMap::info(), JSMediaKeyStatusMapPrototypeTableValues, *this);
    putDirect(vm, vm.propertyNames->iteratorSymbol, getDirect(vm, vm.propertyNames->builtinNames().entriesPublicName()), static_cast<unsigned>(JSC::PropertyAttribute::DontEnum));
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSMediaKeyStatusMap::s_info = { "MediaKeyStatusMap"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSMediaKeyStatusMap) };

JSMediaKeyStatusMap::JSMediaKeyStatusMap(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaKeyStatusMap>&& impl)
    : JSDOMWrapper<MediaKeyStatusMap>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, MediaKeyStatusMap>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSMediaKeyStatusMap::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSMediaKeyStatusMapPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSMediaKeyStatusMapPrototype::create(vm, &globalObject, structure);
}

JSObject* JSMediaKeyStatusMap::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSMediaKeyStatusMap>(vm, globalObject);
}

JSValue JSMediaKeyStatusMap::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaKeyStatusMapDOMConstructor, DOMConstructorID::MediaKeyStatusMap>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSMediaKeyStatusMap::destroy(JSC::JSCell* cell)
{
    JSMediaKeyStatusMap* thisObject = static_cast<JSMediaKeyStatusMap*>(cell);
    thisObject->JSMediaKeyStatusMap::~JSMediaKeyStatusMap();
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaKeyStatusMapConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSMediaKeyStatusMapPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSMediaKeyStatusMap::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsMediaKeyStatusMap_sizeGetter(JSGlobalObject& lexicalGlobalObject, JSMediaKeyStatusMap& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.size())));
}

JSC_DEFINE_CUSTOM_GETTER(jsMediaKeyStatusMap_size, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSMediaKeyStatusMap>::get<jsMediaKeyStatusMap_sizeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsMediaKeyStatusMapPrototypeFunction_hasBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaKeyStatusMap>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto keyIdConversionResult = convert<IDLUnion<IDLArrayBufferView, IDLArrayBuffer>>(*lexicalGlobalObject, argument0.value());
    if (keyIdConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.has(keyIdConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_has, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaKeyStatusMap>::call<jsMediaKeyStatusMapPrototypeFunction_hasBody>(*lexicalGlobalObject, *callFrame, "has");
}

static inline JSC::EncodedJSValue jsMediaKeyStatusMapPrototypeFunction_getBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSMediaKeyStatusMap>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto keyIdConversionResult = convert<IDLUnion<IDLArrayBufferView, IDLArrayBuffer>>(*lexicalGlobalObject, argument0.value());
    if (keyIdConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLAny>(*lexicalGlobalObject, throwScope, impl.get(*jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), keyIdConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_get, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSMediaKeyStatusMap>::call<jsMediaKeyStatusMapPrototypeFunction_getBody>(*lexicalGlobalObject, *callFrame, "get");
}

struct MediaKeyStatusMapIteratorTraits {
    static constexpr JSDOMIteratorType type = JSDOMIteratorType::Map;
    using KeyType = IDLUnion<IDLArrayBufferView, IDLArrayBuffer>;
    using ValueType = IDLEnumeration<MediaKeyStatusMap::Status>;
};

using MediaKeyStatusMapIteratorBase = JSDOMIteratorBase<JSMediaKeyStatusMap, MediaKeyStatusMapIteratorTraits>;
class MediaKeyStatusMapIterator final : public MediaKeyStatusMapIteratorBase {
public:
    using Base = MediaKeyStatusMapIteratorBase;
    DECLARE_INFO;

    template<typename, SubspaceAccess mode> static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        if constexpr (mode == JSC::SubspaceAccess::Concurrently)
            return nullptr;
        return WebCore::subspaceForImpl<MediaKeyStatusMapIterator, UseCustomHeapCellType::No>(vm, "MediaKeyStatusMapIterator"_s,
            [] (auto& spaces) { return spaces.m_clientSubspaceForMediaKeyStatusMapIterator.get(); },
            [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForMediaKeyStatusMapIterator = std::forward<decltype(space)>(space); },
            [] (auto& spaces) { return spaces.m_subspaceForMediaKeyStatusMapIterator.get(); },
            [] (auto& spaces, auto&& space) { spaces.m_subspaceForMediaKeyStatusMapIterator = std::forward<decltype(space)>(space); }
        );
    }

    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

    static MediaKeyStatusMapIterator* create(JSC::VM& vm, JSC::Structure* structure, JSMediaKeyStatusMap& iteratedObject, IterationKind kind)
    {
        auto* instance = new (NotNull, JSC::allocateCell<MediaKeyStatusMapIterator>(vm)) MediaKeyStatusMapIterator(structure, iteratedObject, kind);
        instance->finishCreation(vm);
        return instance;
    }
private:
    MediaKeyStatusMapIterator(JSC::Structure* structure, JSMediaKeyStatusMap& iteratedObject, IterationKind kind)
        : Base(structure, iteratedObject, kind)
    {
    }
};

using MediaKeyStatusMapIteratorPrototype = JSDOMIteratorPrototype<JSMediaKeyStatusMap, MediaKeyStatusMapIteratorTraits>;
JSC_ANNOTATE_HOST_FUNCTION(MediaKeyStatusMapIteratorPrototypeNext, MediaKeyStatusMapIteratorPrototype::next);

template<>
const JSC::ClassInfo MediaKeyStatusMapIteratorBase::s_info = { "MediaKeyStatusMapBase Iterator"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(MediaKeyStatusMapIteratorBase) };
const JSC::ClassInfo MediaKeyStatusMapIterator::s_info = { "MediaKeyStatusMap Iterator"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(MediaKeyStatusMapIterator) };

template<>
const JSC::ClassInfo MediaKeyStatusMapIteratorPrototype::s_info = { "MediaKeyStatusMap Iterator"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(MediaKeyStatusMapIteratorPrototype) };

static inline EncodedJSValue jsMediaKeyStatusMapPrototypeFunction_entriesCaller(JSGlobalObject*, CallFrame*, JSMediaKeyStatusMap* thisObject)
{
    return JSValue::encode(iteratorCreate<MediaKeyStatusMapIterator>(*thisObject, IterationKind::Entries));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_entries, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSMediaKeyStatusMap>::call<jsMediaKeyStatusMapPrototypeFunction_entriesCaller>(*lexicalGlobalObject, *callFrame, "entries");
}

static inline EncodedJSValue jsMediaKeyStatusMapPrototypeFunction_keysCaller(JSGlobalObject*, CallFrame*, JSMediaKeyStatusMap* thisObject)
{
    return JSValue::encode(iteratorCreate<MediaKeyStatusMapIterator>(*thisObject, IterationKind::Keys));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_keys, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSMediaKeyStatusMap>::call<jsMediaKeyStatusMapPrototypeFunction_keysCaller>(*lexicalGlobalObject, *callFrame, "keys");
}

static inline EncodedJSValue jsMediaKeyStatusMapPrototypeFunction_valuesCaller(JSGlobalObject*, CallFrame*, JSMediaKeyStatusMap* thisObject)
{
    return JSValue::encode(iteratorCreate<MediaKeyStatusMapIterator>(*thisObject, IterationKind::Values));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_values, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSMediaKeyStatusMap>::call<jsMediaKeyStatusMapPrototypeFunction_valuesCaller>(*lexicalGlobalObject, *callFrame, "values");
}

static inline EncodedJSValue jsMediaKeyStatusMapPrototypeFunction_forEachCaller(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame, JSMediaKeyStatusMap* thisObject)
{
    return JSValue::encode(iteratorForEach<MediaKeyStatusMapIterator>(*lexicalGlobalObject, *callFrame, *thisObject));
}

JSC_DEFINE_HOST_FUNCTION(jsMediaKeyStatusMapPrototypeFunction_forEach, (JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame))
{
    return IDLOperation<JSMediaKeyStatusMap>::call<jsMediaKeyStatusMapPrototypeFunction_forEachCaller>(*lexicalGlobalObject, *callFrame, "forEach");
}

JSC::GCClient::IsoSubspace* JSMediaKeyStatusMap::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSMediaKeyStatusMap, UseCustomHeapCellType::No>(vm, "JSMediaKeyStatusMap"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForMediaKeyStatusMap.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForMediaKeyStatusMap = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForMediaKeyStatusMap.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForMediaKeyStatusMap = std::forward<decltype(space)>(space); }
    );
}

void JSMediaKeyStatusMap::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSMediaKeyStatusMap*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSMediaKeyStatusMapOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSMediaKeyStatusMapOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaKeyStatusMap = static_cast<JSMediaKeyStatusMap*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsMediaKeyStatusMap->protectedWrapped().ptr(), jsMediaKeyStatusMap);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaKeyStatusMap@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore17MediaKeyStatusMapE[]; }
#endif
template<std::same_as<MediaKeyStatusMap> T>
static inline void verifyVTable(MediaKeyStatusMap* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7MediaKeyStatusMap@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore17MediaKeyStatusMapE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // MediaKeyStatusMap has subclasses. If MediaKeyStatusMap has subclasses that get passed
        // to toJS() we currently require MediaKeyStatusMap you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<MediaKeyStatusMap>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<MediaKeyStatusMap>(impl.ptr());
#endif
    return createWrapper<MediaKeyStatusMap>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, MediaKeyStatusMap& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

MediaKeyStatusMap* JSMediaKeyStatusMap::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaKeyStatusMap*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(ENCRYPTED_MEDIA)
