/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PAYMENT_REQUEST)

#include "JSPaymentDetailsUpdate.h"

#include "JSAddressErrors.h"
#include "JSDOMConvertObject.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSPayerErrorFields.h"
#include "JSPaymentDetailsModifier.h"
#include "JSPaymentItem.h"
#include "JSPaymentShippingOption.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(PAYMENT_REQUEST)

template<> ConversionResult<IDLDictionary<PaymentDetailsUpdate>> convertDictionary<PaymentDetailsUpdate>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    PaymentDetailsUpdate result;
    JSValue displayItemsValue;
    if (isNullOrUndefined)
        displayItemsValue = jsUndefined();
    else {
        displayItemsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "displayItems"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!displayItemsValue.isUndefined()) {
        auto displayItemsConversionResult = convert<IDLSequence<IDLDictionary<PaymentItem>>>(lexicalGlobalObject, displayItemsValue);
        if (displayItemsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.displayItems = displayItemsConversionResult.releaseReturnValue();
    }
    JSValue modifiersValue;
    if (isNullOrUndefined)
        modifiersValue = jsUndefined();
    else {
        modifiersValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "modifiers"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!modifiersValue.isUndefined()) {
        auto modifiersConversionResult = convert<IDLSequence<IDLDictionary<PaymentDetailsModifier>>>(lexicalGlobalObject, modifiersValue);
        if (modifiersConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.modifiers = modifiersConversionResult.releaseReturnValue();
    }
    JSValue shippingOptionsValue;
    if (isNullOrUndefined)
        shippingOptionsValue = jsUndefined();
    else {
        shippingOptionsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "shippingOptions"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!shippingOptionsValue.isUndefined()) {
        auto shippingOptionsConversionResult = convert<IDLSequence<IDLDictionary<PaymentShippingOption>>>(lexicalGlobalObject, shippingOptionsValue);
        if (shippingOptionsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.shippingOptions = shippingOptionsConversionResult.releaseReturnValue();
    }
    JSValue errorValue;
    if (isNullOrUndefined)
        errorValue = jsUndefined();
    else {
        errorValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "error"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!errorValue.isUndefined()) {
        auto errorConversionResult = convert<IDLDOMString>(lexicalGlobalObject, errorValue);
        if (errorConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.error = errorConversionResult.releaseReturnValue();
    }
    JSValue payerErrorsValue;
    if (isNullOrUndefined)
        payerErrorsValue = jsUndefined();
    else {
        payerErrorsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "payerErrors"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!payerErrorsValue.isUndefined()) {
        auto payerErrorsConversionResult = convert<IDLDictionary<PayerErrorFields>>(lexicalGlobalObject, payerErrorsValue);
        if (payerErrorsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.payerErrors = payerErrorsConversionResult.releaseReturnValue();
    }
    JSValue paymentMethodErrorsValue;
    if (isNullOrUndefined)
        paymentMethodErrorsValue = jsUndefined();
    else {
        paymentMethodErrorsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "paymentMethodErrors"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!paymentMethodErrorsValue.isUndefined()) {
        auto paymentMethodErrorsConversionResult = convert<IDLObject>(lexicalGlobalObject, paymentMethodErrorsValue);
        if (paymentMethodErrorsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.paymentMethodErrors = paymentMethodErrorsConversionResult.releaseReturnValue();
    }
    JSValue shippingAddressErrorsValue;
    if (isNullOrUndefined)
        shippingAddressErrorsValue = jsUndefined();
    else {
        shippingAddressErrorsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "shippingAddressErrors"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!shippingAddressErrorsValue.isUndefined()) {
        auto shippingAddressErrorsConversionResult = convert<IDLDictionary<AddressErrors>>(lexicalGlobalObject, shippingAddressErrorsValue);
        if (shippingAddressErrorsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.shippingAddressErrors = shippingAddressErrorsConversionResult.releaseReturnValue();
    }
    JSValue totalValue;
    if (isNullOrUndefined)
        totalValue = jsUndefined();
    else {
        totalValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "total"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!totalValue.isUndefined()) {
        auto totalConversionResult = convert<IDLDictionary<PaymentItem>>(lexicalGlobalObject, totalValue);
        if (totalConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.total = totalConversionResult.releaseReturnValue();
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(PAYMENT_REQUEST)
