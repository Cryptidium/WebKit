/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSAuthenticationExtensionsClientOutputsJSON.h"

#include "JSCredentialPropertiesOutput.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientOutputsJSON>> convertDictionary<AuthenticationExtensionsClientOutputsJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientOutputsJSON result;
    JSValue appidValue;
    if (isNullOrUndefined)
        appidValue = jsUndefined();
    else {
        appidValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "appid"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!appidValue.isUndefined()) {
        auto appidConversionResult = convert<IDLBoolean>(lexicalGlobalObject, appidValue);
        if (appidConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.appid = appidConversionResult.releaseReturnValue();
    }
    JSValue credPropsValue;
    if (isNullOrUndefined)
        credPropsValue = jsUndefined();
    else {
        credPropsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "credProps"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!credPropsValue.isUndefined()) {
        auto credPropsConversionResult = convert<IDLDictionary<CredentialPropertiesOutput>>(lexicalGlobalObject, credPropsValue);
        if (credPropsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.credProps = credPropsConversionResult.releaseReturnValue();
    }
    JSValue largeBlobValue;
    if (isNullOrUndefined)
        largeBlobValue = jsUndefined();
    else {
        largeBlobValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "largeBlob"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!largeBlobValue.isUndefined()) {
        auto largeBlobConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON>>(lexicalGlobalObject, largeBlobValue);
        if (largeBlobConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.largeBlob = largeBlobConversionResult.releaseReturnValue();
    }
    JSValue prfValue;
    if (isNullOrUndefined)
        prfValue = jsUndefined();
    else {
        prfValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "prf"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!prfValue.isUndefined()) {
        auto prfConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON>>(lexicalGlobalObject, prfValue);
        if (prfConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.prf = prfConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputsJSON& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLBoolean::isNullValue(dictionary.appid)) {
        auto appidValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.appid));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "appid"_s), appidValue);
    }
    if (!IDLDictionary<CredentialPropertiesOutput>::isNullValue(dictionary.credProps)) {
        auto credPropsValue = toJS<IDLDictionary<CredentialPropertiesOutput>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<CredentialPropertiesOutput>::extractValueFromNullable(dictionary.credProps));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "credProps"_s), credPropsValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON>::isNullValue(dictionary.largeBlob)) {
        auto largeBlobValue = toJS<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON>::extractValueFromNullable(dictionary.largeBlob));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "largeBlob"_s), largeBlobValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON>::isNullValue(dictionary.prf)) {
        auto prfValue = toJS<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON>::extractValueFromNullable(dictionary.prf));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "prf"_s), prfValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON>> convertDictionary<AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON result;
    JSValue blobValue;
    if (isNullOrUndefined)
        blobValue = jsUndefined();
    else {
        blobValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "blob"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!blobValue.isUndefined()) {
        auto blobConversionResult = convert<IDLDOMString>(lexicalGlobalObject, blobValue);
        if (blobConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.blob = blobConversionResult.releaseReturnValue();
    }
    JSValue supportedValue;
    if (isNullOrUndefined)
        supportedValue = jsUndefined();
    else {
        supportedValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "supported"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!supportedValue.isUndefined()) {
        auto supportedConversionResult = convert<IDLBoolean>(lexicalGlobalObject, supportedValue);
        if (supportedConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.supported = supportedConversionResult.releaseReturnValue();
    }
    JSValue writtenValue;
    if (isNullOrUndefined)
        writtenValue = jsUndefined();
    else {
        writtenValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "written"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!writtenValue.isUndefined()) {
        auto writtenConversionResult = convert<IDLBoolean>(lexicalGlobalObject, writtenValue);
        if (writtenConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.written = writtenConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputsJSON::LargeBlobOutputsJSON& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLDOMString::isNullValue(dictionary.blob)) {
        auto blobValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.blob));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "blob"_s), blobValue);
    }
    if (!IDLBoolean::isNullValue(dictionary.supported)) {
        auto supportedValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.supported));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "supported"_s), supportedValue);
    }
    if (!IDLBoolean::isNullValue(dictionary.written)) {
        auto writtenValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.written));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "written"_s), writtenValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON>> convertDictionary<AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON result;
    JSValue firstValue;
    if (isNullOrUndefined)
        firstValue = jsUndefined();
    else {
        firstValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "first"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (firstValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "first"_s, "AuthenticationExtensionsPRFValuesJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto firstConversionResult = convert<IDLDOMString>(lexicalGlobalObject, firstValue);
    if (firstConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.first = firstConversionResult.releaseReturnValue();
    JSValue secondValue;
    if (isNullOrUndefined)
        secondValue = jsUndefined();
    else {
        secondValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "second"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!secondValue.isUndefined()) {
        auto secondConversionResult = convert<IDLDOMString>(lexicalGlobalObject, secondValue);
        if (secondConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.second = secondConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto firstValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.first);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "first"_s), firstValue);
    if (!IDLDOMString::isNullValue(dictionary.second)) {
        auto secondValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.second));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "second"_s), secondValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON>> convertDictionary<AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON result;
    JSValue enabledValue;
    if (isNullOrUndefined)
        enabledValue = jsUndefined();
    else {
        enabledValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "enabled"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!enabledValue.isUndefined()) {
        auto enabledConversionResult = convert<IDLBoolean>(lexicalGlobalObject, enabledValue);
        if (enabledConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.enabled = enabledConversionResult.releaseReturnValue();
    }
    JSValue resultsValue;
    if (isNullOrUndefined)
        resultsValue = jsUndefined();
    else {
        resultsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "results"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!resultsValue.isUndefined()) {
        auto resultsConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON>>(lexicalGlobalObject, resultsValue);
        if (resultsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.results = resultsConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputsJSON::PRFOutputsJSON& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLBoolean::isNullValue(dictionary.enabled)) {
        auto enabledValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.enabled));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "enabled"_s), enabledValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON>::isNullValue(dictionary.results)) {
        auto resultsValue = toJS<IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientOutputsJSON::PRFValuesJSON>::extractValueFromNullable(dictionary.results));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "results"_s), resultsValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
