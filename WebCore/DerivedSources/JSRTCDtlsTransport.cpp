/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCDtlsTransport.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSRTCDtlsTransportState.h"
#include "JSRTCIceTransport.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRTCDtlsTransportPrototypeFunction_getRemoteCertificates);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCDtlsTransportConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDtlsTransport_iceTransport);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDtlsTransport_state);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDtlsTransport_onstatechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDtlsTransport_onstatechange);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCDtlsTransport_onerror);
static JSC_DECLARE_CUSTOM_SETTER(setJSRTCDtlsTransport_onerror);

class JSRTCDtlsTransportPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCDtlsTransportPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCDtlsTransportPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCDtlsTransportPrototype>(vm)) JSRTCDtlsTransportPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCDtlsTransportPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCDtlsTransportPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCDtlsTransportPrototype, JSRTCDtlsTransportPrototype::Base);

using JSRTCDtlsTransportDOMConstructor = JSDOMConstructorNotConstructable<JSRTCDtlsTransport>;

template<> const ClassInfo JSRTCDtlsTransportDOMConstructor::s_info = { "RTCDtlsTransport"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCDtlsTransportDOMConstructor) };

template<> JSValue JSRTCDtlsTransportDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSRTCDtlsTransportDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RTCDtlsTransport"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCDtlsTransport::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSRTCDtlsTransportPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDtlsTransportConstructor, 0 } },
    HashTableValue { "iceTransport"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDtlsTransport_iceTransport, 0 } },
    HashTableValue { "state"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDtlsTransport_state, 0 } },
    HashTableValue { "onstatechange"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDtlsTransport_onstatechange, setJSRTCDtlsTransport_onstatechange } },
    HashTableValue { "onerror"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCDtlsTransport_onerror, setJSRTCDtlsTransport_onerror } },
    HashTableValue { "getRemoteCertificates"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCDtlsTransportPrototypeFunction_getRemoteCertificates, 0 } },
};

const ClassInfo JSRTCDtlsTransportPrototype::s_info = { "RTCDtlsTransport"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCDtlsTransportPrototype) };

void JSRTCDtlsTransportPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCDtlsTransport::info(), JSRTCDtlsTransportPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCDtlsTransport::s_info = { "RTCDtlsTransport"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCDtlsTransport) };

JSRTCDtlsTransport::JSRTCDtlsTransport(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCDtlsTransport>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<RTCDtlsTransport> JSRTCDtlsTransport::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, RTCDtlsTransport>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSRTCDtlsTransport::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCDtlsTransportPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSRTCDtlsTransportPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCDtlsTransport::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCDtlsTransport>(vm, globalObject);
}

JSValue JSRTCDtlsTransport::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCDtlsTransportDOMConstructor, DOMConstructorID::RTCDtlsTransport>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDtlsTransportConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCDtlsTransportPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCDtlsTransport::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCDtlsTransport_iceTransportGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDtlsTransport& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<RTCIceTransport>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.iceTransport())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDtlsTransport_iceTransport, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDtlsTransport>::get<jsRTCDtlsTransport_iceTransportGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDtlsTransport_stateGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDtlsTransport& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RTCDtlsTransportState>>(lexicalGlobalObject, throwScope, impl.state())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDtlsTransport_state, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDtlsTransport>::get<jsRTCDtlsTransport_stateGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCDtlsTransport_onstatechangeGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDtlsTransport& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().statechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDtlsTransport_onstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDtlsTransport>::get<jsRTCDtlsTransport_onstatechangeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDtlsTransport_onstatechangeSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDtlsTransport& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().statechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDtlsTransport_onstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDtlsTransport>::set<setJSRTCDtlsTransport_onstatechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRTCDtlsTransport_onerrorGetter(JSGlobalObject& lexicalGlobalObject, JSRTCDtlsTransport& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().errorEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCDtlsTransport_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDtlsTransport>::get<jsRTCDtlsTransport_onerrorGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRTCDtlsTransport_onerrorSetter(JSGlobalObject& lexicalGlobalObject, JSRTCDtlsTransport& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().errorEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRTCDtlsTransport_onerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCDtlsTransport>::set<setJSRTCDtlsTransport_onerrorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsRTCDtlsTransportPrototypeFunction_getRemoteCertificatesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSRTCDtlsTransport>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLSequence<IDLArrayBuffer>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getRemoteCertificates())));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCDtlsTransportPrototypeFunction_getRemoteCertificates, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSRTCDtlsTransport>::call<jsRTCDtlsTransportPrototypeFunction_getRemoteCertificatesBody>(*lexicalGlobalObject, *callFrame, "getRemoteCertificates");
}

JSC::GCClient::IsoSubspace* JSRTCDtlsTransport::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCDtlsTransport, UseCustomHeapCellType::No>(vm, "JSRTCDtlsTransport"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCDtlsTransport.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCDtlsTransport = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCDtlsTransport.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCDtlsTransport = std::forward<decltype(space)>(space); }
    );
}

void JSRTCDtlsTransport::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCDtlsTransport*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRTCDtlsTransportOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsRTCDtlsTransport = jsCast<JSRTCDtlsTransport*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsRTCDtlsTransport->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSRTCDtlsTransportOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCDtlsTransport = static_cast<JSRTCDtlsTransport*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCDtlsTransport->protectedWrapped().ptr(), jsRTCDtlsTransport);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCDtlsTransport@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16RTCDtlsTransportE[]; }
#endif
template<std::same_as<RTCDtlsTransport> T>
static inline void verifyVTable(RTCDtlsTransport* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7RTCDtlsTransport@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore16RTCDtlsTransportE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // RTCDtlsTransport has subclasses. If RTCDtlsTransport has subclasses that get passed
        // to toJS() we currently require RTCDtlsTransport you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCDtlsTransport>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<RTCDtlsTransport>(impl.ptr());
#endif
    return createWrapper<RTCDtlsTransport>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCDtlsTransport& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCDtlsTransport* JSRTCDtlsTransport::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCDtlsTransport*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
