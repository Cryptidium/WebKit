/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSCookieListItem.h"

#include "JSCookieSameSite.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

template<> ConversionResult<IDLDictionary<CookieListItem>> convertDictionary<CookieListItem>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    CookieListItem result;
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        JSValue domainValue;
        if (isNullOrUndefined)
            domainValue = jsUndefined();
        else {
            domainValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "domain"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        if (!domainValue.isUndefined()) {
            auto domainConversionResult = convert<IDLNullable<IDLUSVString>>(lexicalGlobalObject, domainValue);
            if (domainConversionResult.hasException(throwScope)) [[unlikely]]
                return ConversionResultException { };
            result.domain = domainConversionResult.releaseReturnValue();
        }
    }
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        JSValue expiresValue;
        if (isNullOrUndefined)
            expiresValue = jsUndefined();
        else {
            expiresValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "expires"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        if (!expiresValue.isUndefined()) {
            auto expiresConversionResult = convert<IDLNullable<IDLDouble>>(lexicalGlobalObject, expiresValue);
            if (expiresConversionResult.hasException(throwScope)) [[unlikely]]
                return ConversionResultException { };
            result.expires = expiresConversionResult.releaseReturnValue();
        }
    }
    JSValue nameValue;
    if (isNullOrUndefined)
        nameValue = jsUndefined();
    else {
        nameValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "name"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!nameValue.isUndefined()) {
        auto nameConversionResult = convert<IDLUSVString>(lexicalGlobalObject, nameValue);
        if (nameConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.name = nameConversionResult.releaseReturnValue();
    }
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        JSValue pathValue;
        if (isNullOrUndefined)
            pathValue = jsUndefined();
        else {
            pathValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "path"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        if (!pathValue.isUndefined()) {
            auto pathConversionResult = convert<IDLUSVString>(lexicalGlobalObject, pathValue);
            if (pathConversionResult.hasException(throwScope)) [[unlikely]]
                return ConversionResultException { };
            result.path = pathConversionResult.releaseReturnValue();
        }
    }
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        JSValue sameSiteValue;
        if (isNullOrUndefined)
            sameSiteValue = jsUndefined();
        else {
            sameSiteValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sameSite"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        auto sameSiteConversionResult = convertOptionalWithDefault<IDLEnumeration<CookieSameSite>>(lexicalGlobalObject, sameSiteValue, [&]() -> ConversionResult<IDLEnumeration<CookieSameSite>> { return Converter<IDLEnumeration<CookieSameSite>>::ReturnType { CookieSameSite::Strict }; });
        if (sameSiteConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.sameSite = sameSiteConversionResult.releaseReturnValue();
    }
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        JSValue secureValue;
        if (isNullOrUndefined)
            secureValue = jsUndefined();
        else {
            secureValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "secure"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        auto secureConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, secureValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
        if (secureConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.secure = secureConversionResult.releaseReturnValue();
    }
    JSValue valueValue;
    if (isNullOrUndefined)
        valueValue = jsUndefined();
    else {
        valueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "value"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!valueValue.isUndefined()) {
        auto valueConversionResult = convert<IDLUSVString>(lexicalGlobalObject, valueValue);
        if (valueConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.value = valueConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const CookieListItem& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (jsCast<JSDOMGlobalObject*>(&globalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        if (!IDLNullable<IDLUSVString>::isNullValue(dictionary.domain)) {
            auto domainValue = toJS<IDLNullable<IDLUSVString>>(lexicalGlobalObject, throwScope, IDLNullable<IDLUSVString>::extractValueFromNullable(dictionary.domain));
            RETURN_IF_EXCEPTION(throwScope, { });
            result->putDirect(vm, JSC::Identifier::fromString(vm, "domain"_s), domainValue);
        }
    }
    if (jsCast<JSDOMGlobalObject*>(&globalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        if (!IDLNullable<IDLDouble>::isNullValue(dictionary.expires)) {
            auto expiresValue = toJS<IDLNullable<IDLDouble>>(lexicalGlobalObject, throwScope, IDLNullable<IDLDouble>::extractValueFromNullable(dictionary.expires));
            RETURN_IF_EXCEPTION(throwScope, { });
            result->putDirect(vm, JSC::Identifier::fromString(vm, "expires"_s), expiresValue);
        }
    }
    if (!IDLUSVString::isNullValue(dictionary.name)) {
        auto nameValue = toJS<IDLUSVString>(lexicalGlobalObject, throwScope, IDLUSVString::extractValueFromNullable(dictionary.name));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "name"_s), nameValue);
    }
    if (jsCast<JSDOMGlobalObject*>(&globalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        if (!IDLUSVString::isNullValue(dictionary.path)) {
            auto pathValue = toJS<IDLUSVString>(lexicalGlobalObject, throwScope, IDLUSVString::extractValueFromNullable(dictionary.path));
            RETURN_IF_EXCEPTION(throwScope, { });
            result->putDirect(vm, JSC::Identifier::fromString(vm, "path"_s), pathValue);
        }
    }
    if (jsCast<JSDOMGlobalObject*>(&globalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        auto sameSiteValue = toJS<IDLEnumeration<CookieSameSite>>(lexicalGlobalObject, throwScope, dictionary.sameSite);
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "sameSite"_s), sameSiteValue);
    }
    if (jsCast<JSDOMGlobalObject*>(&globalObject)->scriptExecutionContext()->settingsValues().cookieStoreAPIExtendedAttributesEnabled) {
        auto secureValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, dictionary.secure);
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "secure"_s), secureValue);
    }
    if (!IDLUSVString::isNullValue(dictionary.value)) {
        auto valueValue = toJS<IDLUSVString>(lexicalGlobalObject, throwScope, IDLUSVString::extractValueFromNullable(dictionary.value));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "value"_s), valueValue);
    }
    return result;
}

} // namespace WebCore

