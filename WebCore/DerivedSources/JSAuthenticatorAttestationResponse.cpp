/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSAuthenticatorAttestationResponse.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSAuthenticatorTransport.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getTransports);
static JSC_DECLARE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getAuthenticatorData);
static JSC_DECLARE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKey);
static JSC_DECLARE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyAlgorithm);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsAuthenticatorAttestationResponseConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsAuthenticatorAttestationResponse_attestationObject);

class JSAuthenticatorAttestationResponsePrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSAuthenticatorAttestationResponsePrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSAuthenticatorAttestationResponsePrototype* ptr = new (NotNull, JSC::allocateCell<JSAuthenticatorAttestationResponsePrototype>(vm)) JSAuthenticatorAttestationResponsePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSAuthenticatorAttestationResponsePrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSAuthenticatorAttestationResponsePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSAuthenticatorAttestationResponsePrototype, JSAuthenticatorAttestationResponsePrototype::Base);

using JSAuthenticatorAttestationResponseDOMConstructor = JSDOMConstructorNotConstructable<JSAuthenticatorAttestationResponse>;

template<> const ClassInfo JSAuthenticatorAttestationResponseDOMConstructor::s_info = { "AuthenticatorAttestationResponse"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSAuthenticatorAttestationResponseDOMConstructor) };

template<> JSValue JSAuthenticatorAttestationResponseDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSAuthenticatorResponse::getConstructor(vm, &globalObject);
}

template<> void JSAuthenticatorAttestationResponseDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "AuthenticatorAttestationResponse"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSAuthenticatorAttestationResponse::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSAuthenticatorAttestationResponsePrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsAuthenticatorAttestationResponseConstructor, 0 } },
    HashTableValue { "attestationObject"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsAuthenticatorAttestationResponse_attestationObject, 0 } },
    HashTableValue { "getTransports"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsAuthenticatorAttestationResponsePrototypeFunction_getTransports, 0 } },
    HashTableValue { "getAuthenticatorData"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsAuthenticatorAttestationResponsePrototypeFunction_getAuthenticatorData, 0 } },
    HashTableValue { "getPublicKey"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKey, 0 } },
    HashTableValue { "getPublicKeyAlgorithm"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyAlgorithm, 0 } },
};

const ClassInfo JSAuthenticatorAttestationResponsePrototype::s_info = { "AuthenticatorAttestationResponse"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSAuthenticatorAttestationResponsePrototype) };

void JSAuthenticatorAttestationResponsePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSAuthenticatorAttestationResponse::info(), JSAuthenticatorAttestationResponsePrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSAuthenticatorAttestationResponse::s_info = { "AuthenticatorAttestationResponse"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSAuthenticatorAttestationResponse) };

JSAuthenticatorAttestationResponse::JSAuthenticatorAttestationResponse(Structure* structure, JSDOMGlobalObject& globalObject, Ref<AuthenticatorAttestationResponse>&& impl)
    : JSAuthenticatorResponse(structure, globalObject, WTFMove(impl))
{
}

Ref<AuthenticatorAttestationResponse> JSAuthenticatorAttestationResponse::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, AuthenticatorAttestationResponse>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSAuthenticatorAttestationResponse::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSAuthenticatorAttestationResponsePrototype::createStructure(vm, &globalObject, JSAuthenticatorResponse::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSAuthenticatorAttestationResponsePrototype::create(vm, &globalObject, structure);
}

JSObject* JSAuthenticatorAttestationResponse::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSAuthenticatorAttestationResponse>(vm, globalObject);
}

JSValue JSAuthenticatorAttestationResponse::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAuthenticatorAttestationResponseDOMConstructor, DOMConstructorID::AuthenticatorAttestationResponse>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsAuthenticatorAttestationResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSAuthenticatorAttestationResponsePrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSAuthenticatorAttestationResponse::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsAuthenticatorAttestationResponse_attestationObjectGetter(JSGlobalObject& lexicalGlobalObject, JSAuthenticatorAttestationResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLArrayBuffer>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.attestationObject())));
}

JSC_DEFINE_CUSTOM_GETTER(jsAuthenticatorAttestationResponse_attestationObject, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSAuthenticatorAttestationResponse>::get<jsAuthenticatorAttestationResponse_attestationObjectGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsAuthenticatorAttestationResponsePrototypeFunction_getTransportsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSAuthenticatorAttestationResponse>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLSequence<IDLEnumeration<AuthenticatorTransport>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getTransports())));
}

JSC_DEFINE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getTransports, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSAuthenticatorAttestationResponse>::call<jsAuthenticatorAttestationResponsePrototypeFunction_getTransportsBody>(*lexicalGlobalObject, *callFrame, "getTransports");
}

static inline JSC::EncodedJSValue jsAuthenticatorAttestationResponsePrototypeFunction_getAuthenticatorDataBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSAuthenticatorAttestationResponse>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLArrayBuffer>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getAuthenticatorData())));
}

JSC_DEFINE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getAuthenticatorData, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSAuthenticatorAttestationResponse>::call<jsAuthenticatorAttestationResponsePrototypeFunction_getAuthenticatorDataBody>(*lexicalGlobalObject, *callFrame, "getAuthenticatorData");
}

static inline JSC::EncodedJSValue jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSAuthenticatorAttestationResponse>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLNullable<IDLArrayBuffer>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.getPublicKey())));
}

JSC_DEFINE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKey, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSAuthenticatorAttestationResponse>::call<jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyBody>(*lexicalGlobalObject, *callFrame, "getPublicKey");
}

static inline JSC::EncodedJSValue jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyAlgorithmBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSAuthenticatorAttestationResponse>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLLong>(*lexicalGlobalObject, throwScope, impl.getPublicKeyAlgorithm())));
}

JSC_DEFINE_HOST_FUNCTION(jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyAlgorithm, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSAuthenticatorAttestationResponse>::call<jsAuthenticatorAttestationResponsePrototypeFunction_getPublicKeyAlgorithmBody>(*lexicalGlobalObject, *callFrame, "getPublicKeyAlgorithm");
}

JSC::GCClient::IsoSubspace* JSAuthenticatorAttestationResponse::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSAuthenticatorAttestationResponse, UseCustomHeapCellType::No>(vm, "JSAuthenticatorAttestationResponse"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForAuthenticatorAttestationResponse.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForAuthenticatorAttestationResponse = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForAuthenticatorAttestationResponse.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForAuthenticatorAttestationResponse = std::forward<decltype(space)>(space); }
    );
}

void JSAuthenticatorAttestationResponse::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSAuthenticatorAttestationResponse*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}


}

#endif // ENABLE(WEB_AUTHN)
