/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSCredentialRequestOptions.h"

#include "JSAbortSignal.h"
#include "JSCredentialMediationRequirement.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertOptional.h"
#include "JSDigitalCredentialRequestOptions.h"
#include "JSPublicKeyCredentialRequestOptions.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<CredentialRequestOptions>> convertDictionary<CredentialRequestOptions>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    CredentialRequestOptions result;
    if (jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)->scriptExecutionContext()->settingsValues().digitalCredentialsEnabled) {
        JSValue digitalValue;
        if (isNullOrUndefined)
            digitalValue = jsUndefined();
        else {
            digitalValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "digital"_s));
            RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
        }
        if (!digitalValue.isUndefined()) {
            auto digitalConversionResult = convert<IDLDictionary<DigitalCredentialRequestOptions>>(lexicalGlobalObject, digitalValue);
            if (digitalConversionResult.hasException(throwScope)) [[unlikely]]
                return ConversionResultException { };
            result.digital = digitalConversionResult.releaseReturnValue();
        }
    }
    JSValue mediationValue;
    if (isNullOrUndefined)
        mediationValue = jsUndefined();
    else {
        mediationValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "mediation"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto mediationConversionResult = convertOptionalWithDefault<IDLEnumeration<MediationRequirement>>(lexicalGlobalObject, mediationValue, [&]() -> ConversionResult<IDLEnumeration<MediationRequirement>> { return Converter<IDLEnumeration<MediationRequirement>>::ReturnType { MediationRequirement::Optional }; });
    if (mediationConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.mediation = mediationConversionResult.releaseReturnValue();
    JSValue publicKeyValue;
    if (isNullOrUndefined)
        publicKeyValue = jsUndefined();
    else {
        publicKeyValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "publicKey"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!publicKeyValue.isUndefined()) {
        auto publicKeyConversionResult = convert<IDLDictionary<PublicKeyCredentialRequestOptions>>(lexicalGlobalObject, publicKeyValue);
        if (publicKeyConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.publicKey = publicKeyConversionResult.releaseReturnValue();
    }
    JSValue signalValue;
    if (isNullOrUndefined)
        signalValue = jsUndefined();
    else {
        signalValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "signal"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!signalValue.isUndefined()) {
        auto signalConversionResult = convert<IDLInterface<AbortSignal>>(lexicalGlobalObject, signalValue);
        if (signalConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.signal = signalConversionResult.releaseReturnValue();
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
