/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSServiceWorkerInternals.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSFetchEvent.h"
#include "JSFetchResponse.h"
#include "JSPushSubscription.h"
#include "JSServiceWorkerClient.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_setOnline);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_terminate);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_waitForFetchEventToFinish);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_createBeingDispatchedFetchEvent);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_createOpaqueWithBlobBodyResponse);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_fetchResponseHeaderList);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_schedulePushEvent);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_schedulePushSubscriptionChangeEvent);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_lastNavigationWasAppInitiated);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_createPushSubscription);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_fetchEventIsSameSite);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_serviceWorkerClientInternalIdentifier);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_setAsInspected);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_enableConsoleMessageReporting);
static JSC_DECLARE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_logReportedConsoleMessage);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsServiceWorkerInternals_processName);
static JSC_DECLARE_CUSTOM_GETTER(jsServiceWorkerInternals_isThrottleable);
static JSC_DECLARE_CUSTOM_GETTER(jsServiceWorkerInternals_processIdentifier);

class JSServiceWorkerInternalsPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSServiceWorkerInternalsPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSServiceWorkerInternalsPrototype* ptr = new (NotNull, JSC::allocateCell<JSServiceWorkerInternalsPrototype>(vm)) JSServiceWorkerInternalsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSServiceWorkerInternalsPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSServiceWorkerInternalsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSServiceWorkerInternalsPrototype, JSServiceWorkerInternalsPrototype::Base);

/* Hash table for prototype */

static const std::array<HashTableValue, 18> JSServiceWorkerInternalsPrototypeTableValues {
    HashTableValue { "processName"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsServiceWorkerInternals_processName, 0 } },
    HashTableValue { "isThrottleable"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsServiceWorkerInternals_isThrottleable, 0 } },
    HashTableValue { "processIdentifier"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsServiceWorkerInternals_processIdentifier, 0 } },
    HashTableValue { "setOnline"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_setOnline, 1 } },
    HashTableValue { "terminate"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_terminate, 0 } },
    HashTableValue { "waitForFetchEventToFinish"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_waitForFetchEventToFinish, 1 } },
    HashTableValue { "createBeingDispatchedFetchEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_createBeingDispatchedFetchEvent, 0 } },
    HashTableValue { "createOpaqueWithBlobBodyResponse"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_createOpaqueWithBlobBodyResponse, 0 } },
    HashTableValue { "fetchResponseHeaderList"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_fetchResponseHeaderList, 1 } },
    HashTableValue { "schedulePushEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_schedulePushEvent, 0 } },
    HashTableValue { "schedulePushSubscriptionChangeEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_schedulePushSubscriptionChangeEvent, 2 } },
    HashTableValue { "lastNavigationWasAppInitiated"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_lastNavigationWasAppInitiated, 0 } },
    HashTableValue { "createPushSubscription"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_createPushSubscription, 5 } },
    HashTableValue { "fetchEventIsSameSite"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_fetchEventIsSameSite, 1 } },
    HashTableValue { "serviceWorkerClientInternalIdentifier"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_serviceWorkerClientInternalIdentifier, 1 } },
    HashTableValue { "setAsInspected"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_setAsInspected, 1 } },
    HashTableValue { "enableConsoleMessageReporting"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_enableConsoleMessageReporting, 0 } },
    HashTableValue { "logReportedConsoleMessage"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsServiceWorkerInternalsPrototypeFunction_logReportedConsoleMessage, 1 } },
};

const ClassInfo JSServiceWorkerInternalsPrototype::s_info = { "ServiceWorkerInternals"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSServiceWorkerInternalsPrototype) };

void JSServiceWorkerInternalsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSServiceWorkerInternals::info(), JSServiceWorkerInternalsPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSServiceWorkerInternals::s_info = { "ServiceWorkerInternals"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSServiceWorkerInternals) };

JSServiceWorkerInternals::JSServiceWorkerInternals(Structure* structure, JSDOMGlobalObject& globalObject, Ref<ServiceWorkerInternals>&& impl)
    : JSDOMWrapper<ServiceWorkerInternals>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, ServiceWorkerInternals>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSServiceWorkerInternals::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSServiceWorkerInternalsPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSServiceWorkerInternalsPrototype::create(vm, &globalObject, structure);
}

JSObject* JSServiceWorkerInternals::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSServiceWorkerInternals>(vm, globalObject);
}

void JSServiceWorkerInternals::destroy(JSC::JSCell* cell)
{
    JSServiceWorkerInternals* thisObject = static_cast<JSServiceWorkerInternals*>(cell);
    thisObject->JSServiceWorkerInternals::~JSServiceWorkerInternals();
}

static inline JSValue jsServiceWorkerInternals_processNameGetter(JSGlobalObject& lexicalGlobalObject, JSServiceWorkerInternals& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.processName())));
}

JSC_DEFINE_CUSTOM_GETTER(jsServiceWorkerInternals_processName, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSServiceWorkerInternals>::get<jsServiceWorkerInternals_processNameGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsServiceWorkerInternals_isThrottleableGetter(JSGlobalObject& lexicalGlobalObject, JSServiceWorkerInternals& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.isThrottleable())));
}

JSC_DEFINE_CUSTOM_GETTER(jsServiceWorkerInternals_isThrottleable, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSServiceWorkerInternals>::get<jsServiceWorkerInternals_isThrottleableGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsServiceWorkerInternals_processIdentifierGetter(JSGlobalObject& lexicalGlobalObject, JSServiceWorkerInternals& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.processIdentifier())));
}

JSC_DEFINE_CUSTOM_GETTER(jsServiceWorkerInternals_processIdentifier, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSServiceWorkerInternals>::get<jsServiceWorkerInternals_processIdentifierGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_setOnlineBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isOnlineConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isOnlineConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setOnline(isOnlineConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_setOnline, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_setOnlineBody>(*lexicalGlobalObject, *callFrame, "setOnline");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_terminateBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.terminate(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_terminate, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_terminateBody>(*lexicalGlobalObject, *callFrame, "terminate");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_waitForFetchEventToFinishBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSServiceWorkerInternals>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto eventConversionResult = convert<IDLInterface<FetchEvent>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "event"_s, "ServiceWorkerInternals"_s, "waitForFetchEventToFinish"_s, "FetchEvent"_s); });
    if (eventConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLInterface<FetchResponse>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.waitForFetchEventToFinish(*eventConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_waitForFetchEventToFinish, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_waitForFetchEventToFinishBody>(*lexicalGlobalObject, *callFrame, "waitForFetchEventToFinish");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_createBeingDispatchedFetchEventBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<FetchEvent>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.createBeingDispatchedFetchEvent(*context))));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_createBeingDispatchedFetchEvent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_createBeingDispatchedFetchEventBody>(*lexicalGlobalObject, *callFrame, "createBeingDispatchedFetchEvent");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_createOpaqueWithBlobBodyResponseBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<FetchResponse>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.createOpaqueWithBlobBodyResponse(*context))));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_createOpaqueWithBlobBodyResponse, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_createOpaqueWithBlobBodyResponseBody>(*lexicalGlobalObject, *callFrame, "createOpaqueWithBlobBodyResponse");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_fetchResponseHeaderListBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto responseConversionResult = convert<IDLInterface<FetchResponse>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "response"_s, "ServiceWorkerInternals"_s, "fetchResponseHeaderList"_s, "FetchResponse"_s); });
    if (responseConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLSequence<IDLByteString>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.fetchResponseHeaderList(*responseConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_fetchResponseHeaderList, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_fetchResponseHeaderListBody>(*lexicalGlobalObject, *callFrame, "fetchResponseHeaderList");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_schedulePushEventBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSServiceWorkerInternals>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto dataConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLDOMString> { return typename Converter<IDLDOMString>::ReturnType { String() }; });
    if (dataConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLBoolean>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.schedulePushEvent(dataConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_schedulePushEvent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_schedulePushEventBody>(*lexicalGlobalObject, *callFrame, "schedulePushEvent");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_schedulePushSubscriptionChangeEventBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto newSubscriptionConversionResult = convert<IDLNullable<IDLInterface<PushSubscription>>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "newSubscription"_s, "ServiceWorkerInternals"_s, "schedulePushSubscriptionChangeEvent"_s, "PushSubscription"_s); });
    if (newSubscriptionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto oldSubscriptionConversionResult = convert<IDLNullable<IDLInterface<PushSubscription>>>(*lexicalGlobalObject, argument1.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 1, "oldSubscription"_s, "ServiceWorkerInternals"_s, "schedulePushSubscriptionChangeEvent"_s, "PushSubscription"_s); });
    if (oldSubscriptionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.schedulePushSubscriptionChangeEvent(newSubscriptionConversionResult.releaseReturnValue(), oldSubscriptionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_schedulePushSubscriptionChangeEvent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_schedulePushSubscriptionChangeEventBody>(*lexicalGlobalObject, *callFrame, "schedulePushSubscriptionChangeEvent");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_lastNavigationWasAppInitiatedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSServiceWorkerInternals>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLBoolean>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.lastNavigationWasAppInitiated(WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_lastNavigationWasAppInitiated, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_lastNavigationWasAppInitiatedBody>(*lexicalGlobalObject, *callFrame, "lastNavigationWasAppInitiated");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_createPushSubscriptionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 5) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto endpointConversionResult = convert<IDLUSVString>(*lexicalGlobalObject, argument0.value());
    if (endpointConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto expirationTimeConversionResult = convert<IDLNullable<IDLUnsignedLongLong>>(*lexicalGlobalObject, argument1.value());
    if (expirationTimeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->uncheckedArgument(2);
    auto serverVAPIDPublicKeyConversionResult = convert<IDLArrayBuffer>(*lexicalGlobalObject, argument2.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 2, "serverVAPIDPublicKey"_s, "ServiceWorkerInternals"_s, "createPushSubscription"_s, "ArrayBuffer"_s); });
    if (serverVAPIDPublicKeyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument3 = callFrame->uncheckedArgument(3);
    auto clientECDHPublicKeyConversionResult = convert<IDLArrayBuffer>(*lexicalGlobalObject, argument3.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 3, "clientECDHPublicKey"_s, "ServiceWorkerInternals"_s, "createPushSubscription"_s, "ArrayBuffer"_s); });
    if (clientECDHPublicKeyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument4 = callFrame->uncheckedArgument(4);
    auto authConversionResult = convert<IDLArrayBuffer>(*lexicalGlobalObject, argument4.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 4, "auth"_s, "ServiceWorkerInternals"_s, "createPushSubscription"_s, "ArrayBuffer"_s); });
    if (authConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLInterface<PushSubscription>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.createPushSubscription(endpointConversionResult.releaseReturnValue(), expirationTimeConversionResult.releaseReturnValue(), serverVAPIDPublicKeyConversionResult.releaseReturnValue(), clientECDHPublicKeyConversionResult.releaseReturnValue(), authConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_createPushSubscription, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_createPushSubscriptionBody>(*lexicalGlobalObject, *callFrame, "createPushSubscription");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_fetchEventIsSameSiteBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto eventConversionResult = convert<IDLInterface<FetchEvent>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "event"_s, "ServiceWorkerInternals"_s, "fetchEventIsSameSite"_s, "FetchEvent"_s); });
    if (eventConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.fetchEventIsSameSite(*eventConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_fetchEventIsSameSite, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_fetchEventIsSameSiteBody>(*lexicalGlobalObject, *callFrame, "fetchEventIsSameSite");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_serviceWorkerClientInternalIdentifierBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto clientConversionResult = convert<IDLInterface<ServiceWorkerClient>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "client"_s, "ServiceWorkerInternals"_s, "serviceWorkerClientInternalIdentifier"_s, "ServiceWorkerClient"_s); });
    if (clientConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.serviceWorkerClientInternalIdentifier(*clientConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_serviceWorkerClientInternalIdentifier, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_serviceWorkerClientInternalIdentifierBody>(*lexicalGlobalObject, *callFrame, "serviceWorkerClientInternalIdentifier");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_setAsInspectedBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto isInspectedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (isInspectedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAsInspected(isInspectedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_setAsInspected, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_setAsInspectedBody>(*lexicalGlobalObject, *callFrame, "setAsInspected");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_enableConsoleMessageReportingBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.enableConsoleMessageReporting(*context); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_enableConsoleMessageReporting, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_enableConsoleMessageReportingBody>(*lexicalGlobalObject, *callFrame, "enableConsoleMessageReporting");
}

static inline JSC::EncodedJSValue jsServiceWorkerInternalsPrototypeFunction_logReportedConsoleMessageBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSServiceWorkerInternals>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    auto* context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto valueConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (valueConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.logReportedConsoleMessage(*context, valueConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsServiceWorkerInternalsPrototypeFunction_logReportedConsoleMessage, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSServiceWorkerInternals>::call<jsServiceWorkerInternalsPrototypeFunction_logReportedConsoleMessageBody>(*lexicalGlobalObject, *callFrame, "logReportedConsoleMessage");
}

JSC::GCClient::IsoSubspace* JSServiceWorkerInternals::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSServiceWorkerInternals, UseCustomHeapCellType::No>(vm, "JSServiceWorkerInternals"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForServiceWorkerInternals.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForServiceWorkerInternals = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForServiceWorkerInternals.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForServiceWorkerInternals = std::forward<decltype(space)>(space); }
    );
}

void JSServiceWorkerInternals::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSServiceWorkerInternals*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSServiceWorkerInternalsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSServiceWorkerInternalsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsServiceWorkerInternals = static_cast<JSServiceWorkerInternals*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsServiceWorkerInternals->protectedWrapped().ptr(), jsServiceWorkerInternals);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7ServiceWorkerInternals@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore22ServiceWorkerInternalsE[]; }
#endif
template<std::same_as<ServiceWorkerInternals> T>
static inline void verifyVTable(ServiceWorkerInternals* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7ServiceWorkerInternals@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore22ServiceWorkerInternalsE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // ServiceWorkerInternals has subclasses. If ServiceWorkerInternals has subclasses that get passed
        // to toJS() we currently require ServiceWorkerInternals you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<ServiceWorkerInternals>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<ServiceWorkerInternals>(impl.ptr());
#endif
    return createWrapper<ServiceWorkerInternals>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, ServiceWorkerInternals& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

ServiceWorkerInternals* JSServiceWorkerInternals::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSServiceWorkerInternals*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
