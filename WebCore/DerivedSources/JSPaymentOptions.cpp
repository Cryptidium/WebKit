/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PAYMENT_REQUEST)

#include "JSPaymentOptions.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertOptional.h"
#include "JSPaymentShippingType.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(PAYMENT_REQUEST)

template<> ConversionResult<IDLDictionary<PaymentOptions>> convertDictionary<PaymentOptions>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    PaymentOptions result;
    JSValue requestBillingAddressValue;
    if (isNullOrUndefined)
        requestBillingAddressValue = jsUndefined();
    else {
        requestBillingAddressValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "requestBillingAddress"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto requestBillingAddressConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, requestBillingAddressValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (requestBillingAddressConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.requestBillingAddress = requestBillingAddressConversionResult.releaseReturnValue();
    JSValue requestPayerEmailValue;
    if (isNullOrUndefined)
        requestPayerEmailValue = jsUndefined();
    else {
        requestPayerEmailValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "requestPayerEmail"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto requestPayerEmailConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, requestPayerEmailValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (requestPayerEmailConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.requestPayerEmail = requestPayerEmailConversionResult.releaseReturnValue();
    JSValue requestPayerNameValue;
    if (isNullOrUndefined)
        requestPayerNameValue = jsUndefined();
    else {
        requestPayerNameValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "requestPayerName"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto requestPayerNameConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, requestPayerNameValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (requestPayerNameConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.requestPayerName = requestPayerNameConversionResult.releaseReturnValue();
    JSValue requestPayerPhoneValue;
    if (isNullOrUndefined)
        requestPayerPhoneValue = jsUndefined();
    else {
        requestPayerPhoneValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "requestPayerPhone"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto requestPayerPhoneConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, requestPayerPhoneValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (requestPayerPhoneConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.requestPayerPhone = requestPayerPhoneConversionResult.releaseReturnValue();
    JSValue requestShippingValue;
    if (isNullOrUndefined)
        requestShippingValue = jsUndefined();
    else {
        requestShippingValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "requestShipping"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto requestShippingConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, requestShippingValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (requestShippingConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.requestShipping = requestShippingConversionResult.releaseReturnValue();
    JSValue shippingTypeValue;
    if (isNullOrUndefined)
        shippingTypeValue = jsUndefined();
    else {
        shippingTypeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "shippingType"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto shippingTypeConversionResult = convertOptionalWithDefault<IDLEnumeration<PaymentShippingType>>(lexicalGlobalObject, shippingTypeValue, [&]() -> ConversionResult<IDLEnumeration<PaymentShippingType>> { return Converter<IDLEnumeration<PaymentShippingType>>::ReturnType { PaymentShippingType::Shipping }; });
    if (shippingTypeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.shippingType = shippingTypeConversionResult.releaseReturnValue();
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(PAYMENT_REQUEST)
