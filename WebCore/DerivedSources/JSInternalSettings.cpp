/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSInternalSettings.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/NeverDestroyed.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(InternalSettings::EditingBehaviorType enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 4> values {
        MAKE_STATIC_STRING_IMPL("mac"),
        MAKE_STATIC_STRING_IMPL("windows"),
        MAKE_STATIC_STRING_IMPL("unix"),
        MAKE_STATIC_STRING_IMPL("ios"),
    };
    static_assert(static_cast<size_t>(InternalSettings::EditingBehaviorType::Mac) == 0, "InternalSettings::EditingBehaviorType::Mac is not 0 as expected");
    static_assert(static_cast<size_t>(InternalSettings::EditingBehaviorType::Windows) == 1, "InternalSettings::EditingBehaviorType::Windows is not 1 as expected");
    static_assert(static_cast<size_t>(InternalSettings::EditingBehaviorType::Unix) == 2, "InternalSettings::EditingBehaviorType::Unix is not 2 as expected");
    static_assert(static_cast<size_t>(InternalSettings::EditingBehaviorType::iOS) == 3, "InternalSettings::EditingBehaviorType::iOS is not 3 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, InternalSettings::EditingBehaviorType enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<InternalSettings::EditingBehaviorType> parseEnumerationFromString<InternalSettings::EditingBehaviorType>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, InternalSettings::EditingBehaviorType>, 4> mappings {
        std::pair<ComparableASCIILiteral, InternalSettings::EditingBehaviorType> { "ios"_s, InternalSettings::EditingBehaviorType::iOS },
        std::pair<ComparableASCIILiteral, InternalSettings::EditingBehaviorType> { "mac"_s, InternalSettings::EditingBehaviorType::Mac },
        std::pair<ComparableASCIILiteral, InternalSettings::EditingBehaviorType> { "unix"_s, InternalSettings::EditingBehaviorType::Unix },
        std::pair<ComparableASCIILiteral, InternalSettings::EditingBehaviorType> { "windows"_s, InternalSettings::EditingBehaviorType::Windows },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<InternalSettings::EditingBehaviorType> parseEnumeration<InternalSettings::EditingBehaviorType>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<InternalSettings::EditingBehaviorType>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<InternalSettings::EditingBehaviorType>()
{
    return "\"mac\", \"windows\", \"unix\", \"ios\""_s;
}

String convertEnumerationToString(InternalSettings::FontLoadTimingOverride enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 4> values {
        MAKE_STATIC_STRING_IMPL("None"),
        MAKE_STATIC_STRING_IMPL("Block"),
        MAKE_STATIC_STRING_IMPL("Swap"),
        MAKE_STATIC_STRING_IMPL("Failure"),
    };
    static_assert(static_cast<size_t>(InternalSettings::FontLoadTimingOverride::None) == 0, "InternalSettings::FontLoadTimingOverride::None is not 0 as expected");
    static_assert(static_cast<size_t>(InternalSettings::FontLoadTimingOverride::Block) == 1, "InternalSettings::FontLoadTimingOverride::Block is not 1 as expected");
    static_assert(static_cast<size_t>(InternalSettings::FontLoadTimingOverride::Swap) == 2, "InternalSettings::FontLoadTimingOverride::Swap is not 2 as expected");
    static_assert(static_cast<size_t>(InternalSettings::FontLoadTimingOverride::Failure) == 3, "InternalSettings::FontLoadTimingOverride::Failure is not 3 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, InternalSettings::FontLoadTimingOverride enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<InternalSettings::FontLoadTimingOverride> parseEnumerationFromString<InternalSettings::FontLoadTimingOverride>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, InternalSettings::FontLoadTimingOverride>, 4> mappings {
        std::pair<ComparableASCIILiteral, InternalSettings::FontLoadTimingOverride> { "Block"_s, InternalSettings::FontLoadTimingOverride::Block },
        std::pair<ComparableASCIILiteral, InternalSettings::FontLoadTimingOverride> { "Failure"_s, InternalSettings::FontLoadTimingOverride::Failure },
        std::pair<ComparableASCIILiteral, InternalSettings::FontLoadTimingOverride> { "None"_s, InternalSettings::FontLoadTimingOverride::None },
        std::pair<ComparableASCIILiteral, InternalSettings::FontLoadTimingOverride> { "Swap"_s, InternalSettings::FontLoadTimingOverride::Swap },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<InternalSettings::FontLoadTimingOverride> parseEnumeration<InternalSettings::FontLoadTimingOverride>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<InternalSettings::FontLoadTimingOverride>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<InternalSettings::FontLoadTimingOverride>()
{
    return "\"None\", \"Block\", \"Swap\", \"Failure\""_s;
}

String convertEnumerationToString(InternalSettings::ForcedAccessibilityValue enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("system"),
        MAKE_STATIC_STRING_IMPL("on"),
        MAKE_STATIC_STRING_IMPL("off"),
    };
    static_assert(static_cast<size_t>(InternalSettings::ForcedAccessibilityValue::System) == 0, "InternalSettings::ForcedAccessibilityValue::System is not 0 as expected");
    static_assert(static_cast<size_t>(InternalSettings::ForcedAccessibilityValue::On) == 1, "InternalSettings::ForcedAccessibilityValue::On is not 1 as expected");
    static_assert(static_cast<size_t>(InternalSettings::ForcedAccessibilityValue::Off) == 2, "InternalSettings::ForcedAccessibilityValue::Off is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, InternalSettings::ForcedAccessibilityValue enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<InternalSettings::ForcedAccessibilityValue> parseEnumerationFromString<InternalSettings::ForcedAccessibilityValue>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, InternalSettings::ForcedAccessibilityValue>, 3> mappings {
        std::pair<ComparableASCIILiteral, InternalSettings::ForcedAccessibilityValue> { "off"_s, InternalSettings::ForcedAccessibilityValue::Off },
        std::pair<ComparableASCIILiteral, InternalSettings::ForcedAccessibilityValue> { "on"_s, InternalSettings::ForcedAccessibilityValue::On },
        std::pair<ComparableASCIILiteral, InternalSettings::ForcedAccessibilityValue> { "system"_s, InternalSettings::ForcedAccessibilityValue::System },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<InternalSettings::ForcedAccessibilityValue> parseEnumeration<InternalSettings::ForcedAccessibilityValue>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<InternalSettings::ForcedAccessibilityValue>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<InternalSettings::ForcedAccessibilityValue>()
{
    return "\"system\", \"on\", \"off\""_s;
}

String convertEnumerationToString(InternalSettings::StorageBlockingPolicy enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("AllowAll"),
        MAKE_STATIC_STRING_IMPL("BlockThirdParty"),
        MAKE_STATIC_STRING_IMPL("BlockAll"),
    };
    static_assert(static_cast<size_t>(InternalSettings::StorageBlockingPolicy::AllowAll) == 0, "InternalSettings::StorageBlockingPolicy::AllowAll is not 0 as expected");
    static_assert(static_cast<size_t>(InternalSettings::StorageBlockingPolicy::BlockThirdParty) == 1, "InternalSettings::StorageBlockingPolicy::BlockThirdParty is not 1 as expected");
    static_assert(static_cast<size_t>(InternalSettings::StorageBlockingPolicy::BlockAll) == 2, "InternalSettings::StorageBlockingPolicy::BlockAll is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, InternalSettings::StorageBlockingPolicy enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<InternalSettings::StorageBlockingPolicy> parseEnumerationFromString<InternalSettings::StorageBlockingPolicy>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, InternalSettings::StorageBlockingPolicy>, 3> mappings {
        std::pair<ComparableASCIILiteral, InternalSettings::StorageBlockingPolicy> { "AllowAll"_s, InternalSettings::StorageBlockingPolicy::AllowAll },
        std::pair<ComparableASCIILiteral, InternalSettings::StorageBlockingPolicy> { "BlockAll"_s, InternalSettings::StorageBlockingPolicy::BlockAll },
        std::pair<ComparableASCIILiteral, InternalSettings::StorageBlockingPolicy> { "BlockThirdParty"_s, InternalSettings::StorageBlockingPolicy::BlockThirdParty },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<InternalSettings::StorageBlockingPolicy> parseEnumeration<InternalSettings::StorageBlockingPolicy>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<InternalSettings::StorageBlockingPolicy>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<InternalSettings::StorageBlockingPolicy>()
{
    return "\"AllowAll\", \"BlockThirdParty\", \"BlockAll\""_s;
}

String convertEnumerationToString(InternalSettings::SystemLayoutDirection enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 2> values {
        MAKE_STATIC_STRING_IMPL("LTR"),
        MAKE_STATIC_STRING_IMPL("RTL"),
    };
    static_assert(static_cast<size_t>(InternalSettings::SystemLayoutDirection::LTR) == 0, "InternalSettings::SystemLayoutDirection::LTR is not 0 as expected");
    static_assert(static_cast<size_t>(InternalSettings::SystemLayoutDirection::RTL) == 1, "InternalSettings::SystemLayoutDirection::RTL is not 1 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, InternalSettings::SystemLayoutDirection enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<InternalSettings::SystemLayoutDirection> parseEnumerationFromString<InternalSettings::SystemLayoutDirection>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, InternalSettings::SystemLayoutDirection>, 2> mappings {
        std::pair<ComparableASCIILiteral, InternalSettings::SystemLayoutDirection> { "LTR"_s, InternalSettings::SystemLayoutDirection::LTR },
        std::pair<ComparableASCIILiteral, InternalSettings::SystemLayoutDirection> { "RTL"_s, InternalSettings::SystemLayoutDirection::RTL },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<InternalSettings::SystemLayoutDirection> parseEnumeration<InternalSettings::SystemLayoutDirection>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<InternalSettings::SystemLayoutDirection>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<InternalSettings::SystemLayoutDirection>()
{
    return "\"LTR\", \"RTL\""_s;
}

String convertEnumerationToString(InternalSettings::TrackKind enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("Subtitles"),
        MAKE_STATIC_STRING_IMPL("Captions"),
        MAKE_STATIC_STRING_IMPL("TextDescriptions"),
    };
    static_assert(static_cast<size_t>(InternalSettings::TrackKind::Subtitles) == 0, "InternalSettings::TrackKind::Subtitles is not 0 as expected");
    static_assert(static_cast<size_t>(InternalSettings::TrackKind::Captions) == 1, "InternalSettings::TrackKind::Captions is not 1 as expected");
    static_assert(static_cast<size_t>(InternalSettings::TrackKind::TextDescriptions) == 2, "InternalSettings::TrackKind::TextDescriptions is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, InternalSettings::TrackKind enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<InternalSettings::TrackKind> parseEnumerationFromString<InternalSettings::TrackKind>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, InternalSettings::TrackKind>, 3> mappings {
        std::pair<ComparableASCIILiteral, InternalSettings::TrackKind> { "Captions"_s, InternalSettings::TrackKind::Captions },
        std::pair<ComparableASCIILiteral, InternalSettings::TrackKind> { "Subtitles"_s, InternalSettings::TrackKind::Subtitles },
        std::pair<ComparableASCIILiteral, InternalSettings::TrackKind> { "TextDescriptions"_s, InternalSettings::TrackKind::TextDescriptions },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<InternalSettings::TrackKind> parseEnumeration<InternalSettings::TrackKind>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<InternalSettings::TrackKind>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<InternalSettings::TrackKind>()
{
    return "\"Subtitles\", \"Captions\", \"TextDescriptions\""_s;
}

String convertEnumerationToString(InternalSettings::UserInterfaceDirectionPolicy enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 2> values {
        MAKE_STATIC_STRING_IMPL("Content"),
        MAKE_STATIC_STRING_IMPL("System"),
    };
    static_assert(static_cast<size_t>(InternalSettings::UserInterfaceDirectionPolicy::Content) == 0, "InternalSettings::UserInterfaceDirectionPolicy::Content is not 0 as expected");
    static_assert(static_cast<size_t>(InternalSettings::UserInterfaceDirectionPolicy::System) == 1, "InternalSettings::UserInterfaceDirectionPolicy::System is not 1 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, InternalSettings::UserInterfaceDirectionPolicy enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<InternalSettings::UserInterfaceDirectionPolicy> parseEnumerationFromString<InternalSettings::UserInterfaceDirectionPolicy>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, InternalSettings::UserInterfaceDirectionPolicy>, 2> mappings {
        std::pair<ComparableASCIILiteral, InternalSettings::UserInterfaceDirectionPolicy> { "Content"_s, InternalSettings::UserInterfaceDirectionPolicy::Content },
        std::pair<ComparableASCIILiteral, InternalSettings::UserInterfaceDirectionPolicy> { "System"_s, InternalSettings::UserInterfaceDirectionPolicy::System },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<InternalSettings::UserInterfaceDirectionPolicy> parseEnumeration<InternalSettings::UserInterfaceDirectionPolicy>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<InternalSettings::UserInterfaceDirectionPolicy>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<InternalSettings::UserInterfaceDirectionPolicy>()
{
    return "\"Content\", \"System\""_s;
}

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setStandardFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setSerifFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setSansSerifFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setFixedFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setCursiveFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setFantasyFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setPictographFontFamily);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setFontLoadTimingOverride);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setTextAutosizingWindowSizeOverride);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setTimeWithoutMouseMovementBeforeHidingControls);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setMinimumTimerInterval);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setEditingBehavior);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setStorageBlockingPolicy);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setUserInterfaceDirectionPolicy);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setSystemLayoutDirection);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setCustomPasteboardDataEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldManageAudioSessionCategory);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldDisplayTrackKind);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_shouldDisplayTrackKind);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setCanStartMedia);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setEditableRegionEnabled);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setUseDarkAppearance);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setUseElevatedUserInterfaceLevel);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowUnclampedScrollPosition);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldDeactivateAudioSession);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldMockBoldSystemFontForAccessibility);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setDefaultAudioContextSampleRate);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaContainerTypes);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaCodecTypes);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaVideoCodecIDs);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaAudioCodecIDs);
static JSC_DECLARE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaCaptionFormatTypes);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsInternalSettings_forcedColorsAreInvertedAccessibilityValue);
static JSC_DECLARE_CUSTOM_SETTER(setJSInternalSettings_forcedColorsAreInvertedAccessibilityValue);
static JSC_DECLARE_CUSTOM_GETTER(jsInternalSettings_forcedDisplayIsMonochromeAccessibilityValue);
static JSC_DECLARE_CUSTOM_SETTER(setJSInternalSettings_forcedDisplayIsMonochromeAccessibilityValue);
static JSC_DECLARE_CUSTOM_GETTER(jsInternalSettings_forcedPrefersContrastAccessibilityValue);
static JSC_DECLARE_CUSTOM_SETTER(setJSInternalSettings_forcedPrefersContrastAccessibilityValue);
static JSC_DECLARE_CUSTOM_GETTER(jsInternalSettings_forcedPrefersReducedMotionAccessibilityValue);
static JSC_DECLARE_CUSTOM_SETTER(setJSInternalSettings_forcedPrefersReducedMotionAccessibilityValue);
static JSC_DECLARE_CUSTOM_GETTER(jsInternalSettings_forcedSupportsHighDynamicRangeValue);
static JSC_DECLARE_CUSTOM_SETTER(setJSInternalSettings_forcedSupportsHighDynamicRangeValue);
static JSC_DECLARE_CUSTOM_GETTER(jsInternalSettings_vp9DecoderEnabled);

class JSInternalSettingsPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSInternalSettingsPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSInternalSettingsPrototype* ptr = new (NotNull, JSC::allocateCell<JSInternalSettingsPrototype>(vm)) JSInternalSettingsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSInternalSettingsPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSInternalSettingsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSInternalSettingsPrototype, JSInternalSettingsPrototype::Base);

/* Hash table for prototype */

static const std::array<HashTableValue, 38> JSInternalSettingsPrototypeTableValues {
    HashTableValue { "forcedColorsAreInvertedAccessibilityValue"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsInternalSettings_forcedColorsAreInvertedAccessibilityValue, setJSInternalSettings_forcedColorsAreInvertedAccessibilityValue } },
    HashTableValue { "forcedDisplayIsMonochromeAccessibilityValue"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsInternalSettings_forcedDisplayIsMonochromeAccessibilityValue, setJSInternalSettings_forcedDisplayIsMonochromeAccessibilityValue } },
    HashTableValue { "forcedPrefersContrastAccessibilityValue"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsInternalSettings_forcedPrefersContrastAccessibilityValue, setJSInternalSettings_forcedPrefersContrastAccessibilityValue } },
    HashTableValue { "forcedPrefersReducedMotionAccessibilityValue"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsInternalSettings_forcedPrefersReducedMotionAccessibilityValue, setJSInternalSettings_forcedPrefersReducedMotionAccessibilityValue } },
    HashTableValue { "forcedSupportsHighDynamicRangeValue"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsInternalSettings_forcedSupportsHighDynamicRangeValue, setJSInternalSettings_forcedSupportsHighDynamicRangeValue } },
    HashTableValue { "vp9DecoderEnabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsInternalSettings_vp9DecoderEnabled, 0 } },
    HashTableValue { "setStandardFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setStandardFontFamily, 2 } },
    HashTableValue { "setSerifFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setSerifFontFamily, 2 } },
    HashTableValue { "setSansSerifFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setSansSerifFontFamily, 2 } },
    HashTableValue { "setFixedFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setFixedFontFamily, 2 } },
    HashTableValue { "setCursiveFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setCursiveFontFamily, 2 } },
    HashTableValue { "setFantasyFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setFantasyFontFamily, 2 } },
    HashTableValue { "setPictographFontFamily"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setPictographFontFamily, 2 } },
    HashTableValue { "setFontLoadTimingOverride"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setFontLoadTimingOverride, 1 } },
    HashTableValue { "setTextAutosizingWindowSizeOverride"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setTextAutosizingWindowSizeOverride, 2 } },
    HashTableValue { "setTimeWithoutMouseMovementBeforeHidingControls"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setTimeWithoutMouseMovementBeforeHidingControls, 1 } },
    HashTableValue { "setMinimumTimerInterval"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setMinimumTimerInterval, 1 } },
    HashTableValue { "setEditingBehavior"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setEditingBehavior, 1 } },
    HashTableValue { "setStorageBlockingPolicy"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setStorageBlockingPolicy, 1 } },
    HashTableValue { "setUserInterfaceDirectionPolicy"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setUserInterfaceDirectionPolicy, 1 } },
    HashTableValue { "setSystemLayoutDirection"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setSystemLayoutDirection, 1 } },
    HashTableValue { "setCustomPasteboardDataEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setCustomPasteboardDataEnabled, 1 } },
    HashTableValue { "setShouldManageAudioSessionCategory"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setShouldManageAudioSessionCategory, 1 } },
    HashTableValue { "setShouldDisplayTrackKind"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setShouldDisplayTrackKind, 2 } },
    HashTableValue { "shouldDisplayTrackKind"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_shouldDisplayTrackKind, 1 } },
    HashTableValue { "setCanStartMedia"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setCanStartMedia, 1 } },
    HashTableValue { "setEditableRegionEnabled"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setEditableRegionEnabled, 1 } },
    HashTableValue { "setUseDarkAppearance"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setUseDarkAppearance, 1 } },
    HashTableValue { "setUseElevatedUserInterfaceLevel"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setUseElevatedUserInterfaceLevel, 1 } },
    HashTableValue { "setAllowUnclampedScrollPosition"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setAllowUnclampedScrollPosition, 1 } },
    HashTableValue { "setShouldDeactivateAudioSession"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setShouldDeactivateAudioSession, 1 } },
    HashTableValue { "setShouldMockBoldSystemFontForAccessibility"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setShouldMockBoldSystemFontForAccessibility, 1 } },
    HashTableValue { "setDefaultAudioContextSampleRate"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setDefaultAudioContextSampleRate, 1 } },
    HashTableValue { "setAllowedMediaContainerTypes"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setAllowedMediaContainerTypes, 1 } },
    HashTableValue { "setAllowedMediaCodecTypes"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setAllowedMediaCodecTypes, 1 } },
    HashTableValue { "setAllowedMediaVideoCodecIDs"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setAllowedMediaVideoCodecIDs, 1 } },
    HashTableValue { "setAllowedMediaAudioCodecIDs"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setAllowedMediaAudioCodecIDs, 1 } },
    HashTableValue { "setAllowedMediaCaptionFormatTypes"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsInternalSettingsPrototypeFunction_setAllowedMediaCaptionFormatTypes, 1 } },
};

const ClassInfo JSInternalSettingsPrototype::s_info = { "InternalSettings"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSInternalSettingsPrototype) };

void JSInternalSettingsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSInternalSettings::info(), JSInternalSettingsPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSInternalSettings::s_info = { "InternalSettings"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSInternalSettings) };

JSInternalSettings::JSInternalSettings(Structure* structure, JSDOMGlobalObject& globalObject, Ref<InternalSettings>&& impl)
    : JSInternalSettingsGenerated(structure, globalObject, WTFMove(impl))
{
}

Ref<InternalSettings> JSInternalSettings::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, InternalSettings>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSInternalSettings::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSInternalSettingsPrototype::createStructure(vm, &globalObject, JSInternalSettingsGenerated::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSInternalSettingsPrototype::create(vm, &globalObject, structure);
}

JSObject* JSInternalSettings::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSInternalSettings>(vm, globalObject);
}

static inline JSValue jsInternalSettings_forcedColorsAreInvertedAccessibilityValueGetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<InternalSettings::ForcedAccessibilityValue>>(lexicalGlobalObject, throwScope, impl.forcedColorsAreInvertedAccessibilityValue())));
}

JSC_DEFINE_CUSTOM_GETTER(jsInternalSettings_forcedColorsAreInvertedAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::get<jsInternalSettings_forcedColorsAreInvertedAccessibilityValueGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSInternalSettings_forcedColorsAreInvertedAccessibilityValueSetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<InternalSettings::ForcedAccessibilityValue>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setForcedColorsAreInvertedAccessibilityValue(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSInternalSettings_forcedColorsAreInvertedAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::set<setJSInternalSettings_forcedColorsAreInvertedAccessibilityValueSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsInternalSettings_forcedDisplayIsMonochromeAccessibilityValueGetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<InternalSettings::ForcedAccessibilityValue>>(lexicalGlobalObject, throwScope, impl.forcedDisplayIsMonochromeAccessibilityValue())));
}

JSC_DEFINE_CUSTOM_GETTER(jsInternalSettings_forcedDisplayIsMonochromeAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::get<jsInternalSettings_forcedDisplayIsMonochromeAccessibilityValueGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSInternalSettings_forcedDisplayIsMonochromeAccessibilityValueSetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<InternalSettings::ForcedAccessibilityValue>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setForcedDisplayIsMonochromeAccessibilityValue(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSInternalSettings_forcedDisplayIsMonochromeAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::set<setJSInternalSettings_forcedDisplayIsMonochromeAccessibilityValueSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsInternalSettings_forcedPrefersContrastAccessibilityValueGetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<InternalSettings::ForcedAccessibilityValue>>(lexicalGlobalObject, throwScope, impl.forcedPrefersContrastAccessibilityValue())));
}

JSC_DEFINE_CUSTOM_GETTER(jsInternalSettings_forcedPrefersContrastAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::get<jsInternalSettings_forcedPrefersContrastAccessibilityValueGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSInternalSettings_forcedPrefersContrastAccessibilityValueSetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<InternalSettings::ForcedAccessibilityValue>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setForcedPrefersContrastAccessibilityValue(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSInternalSettings_forcedPrefersContrastAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::set<setJSInternalSettings_forcedPrefersContrastAccessibilityValueSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsInternalSettings_forcedPrefersReducedMotionAccessibilityValueGetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<InternalSettings::ForcedAccessibilityValue>>(lexicalGlobalObject, throwScope, impl.forcedPrefersReducedMotionAccessibilityValue())));
}

JSC_DEFINE_CUSTOM_GETTER(jsInternalSettings_forcedPrefersReducedMotionAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::get<jsInternalSettings_forcedPrefersReducedMotionAccessibilityValueGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSInternalSettings_forcedPrefersReducedMotionAccessibilityValueSetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<InternalSettings::ForcedAccessibilityValue>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setForcedPrefersReducedMotionAccessibilityValue(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSInternalSettings_forcedPrefersReducedMotionAccessibilityValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::set<setJSInternalSettings_forcedPrefersReducedMotionAccessibilityValueSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsInternalSettings_forcedSupportsHighDynamicRangeValueGetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<InternalSettings::ForcedAccessibilityValue>>(lexicalGlobalObject, throwScope, impl.forcedSupportsHighDynamicRangeValue())));
}

JSC_DEFINE_CUSTOM_GETTER(jsInternalSettings_forcedSupportsHighDynamicRangeValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::get<jsInternalSettings_forcedSupportsHighDynamicRangeValueGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSInternalSettings_forcedSupportsHighDynamicRangeValueSetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<InternalSettings::ForcedAccessibilityValue>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setForcedSupportsHighDynamicRangeValue(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSInternalSettings_forcedSupportsHighDynamicRangeValue, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::set<setJSInternalSettings_forcedSupportsHighDynamicRangeValueSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsInternalSettings_vp9DecoderEnabledGetter(JSGlobalObject& lexicalGlobalObject, JSInternalSettings& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.vp9DecoderEnabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsInternalSettings_vp9DecoderEnabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSInternalSettings>::get<jsInternalSettings_vp9DecoderEnabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setStandardFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto familyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (familyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto scriptConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (scriptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStandardFontFamily(familyConversionResult.releaseReturnValue(), scriptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setStandardFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setStandardFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setStandardFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setSerifFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto familyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (familyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto scriptConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (scriptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSerifFontFamily(familyConversionResult.releaseReturnValue(), scriptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setSerifFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setSerifFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setSerifFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setSansSerifFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto familyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (familyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto scriptConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (scriptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSansSerifFontFamily(familyConversionResult.releaseReturnValue(), scriptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setSansSerifFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setSansSerifFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setSansSerifFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setFixedFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto familyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (familyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto scriptConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (scriptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFixedFontFamily(familyConversionResult.releaseReturnValue(), scriptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setFixedFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setFixedFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setFixedFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setCursiveFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto familyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (familyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto scriptConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (scriptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCursiveFontFamily(familyConversionResult.releaseReturnValue(), scriptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setCursiveFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setCursiveFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setCursiveFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setFantasyFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto familyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (familyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto scriptConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (scriptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFantasyFontFamily(familyConversionResult.releaseReturnValue(), scriptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setFantasyFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setFantasyFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setFantasyFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setPictographFontFamilyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto familyConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument0.value());
    if (familyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto scriptConversionResult = convert<IDLDOMString>(*lexicalGlobalObject, argument1.value());
    if (scriptConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setPictographFontFamily(familyConversionResult.releaseReturnValue(), scriptConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setPictographFontFamily, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setPictographFontFamilyBody>(*lexicalGlobalObject, *callFrame, "setPictographFontFamily");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setFontLoadTimingOverrideBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto overrideConversionResult = convert<IDLEnumeration<InternalSettings::FontLoadTimingOverride>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "override"_s, "InternalSettings"_s, "setFontLoadTimingOverride"_s, expectedEnumerationValues<InternalSettings::FontLoadTimingOverride>()); });
    if (overrideConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setFontLoadTimingOverride(overrideConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setFontLoadTimingOverride, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setFontLoadTimingOverrideBody>(*lexicalGlobalObject, *callFrame, "setFontLoadTimingOverride");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setTextAutosizingWindowSizeOverrideBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto widthConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument0.value());
    if (widthConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto heightConversionResult = convert<IDLLong>(*lexicalGlobalObject, argument1.value());
    if (heightConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTextAutosizingWindowSizeOverride(widthConversionResult.releaseReturnValue(), heightConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setTextAutosizingWindowSizeOverride, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setTextAutosizingWindowSizeOverrideBody>(*lexicalGlobalObject, *callFrame, "setTextAutosizingWindowSizeOverride");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setTimeWithoutMouseMovementBeforeHidingControlsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto intervalInSecondsConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument0.value());
    if (intervalInSecondsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTimeWithoutMouseMovementBeforeHidingControls(intervalInSecondsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setTimeWithoutMouseMovementBeforeHidingControls, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setTimeWithoutMouseMovementBeforeHidingControlsBody>(*lexicalGlobalObject, *callFrame, "setTimeWithoutMouseMovementBeforeHidingControls");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setMinimumTimerIntervalBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto intervalInSecondsConversionResult = convert<IDLUnrestrictedDouble>(*lexicalGlobalObject, argument0.value());
    if (intervalInSecondsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setMinimumTimerInterval(intervalInSecondsConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setMinimumTimerInterval, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setMinimumTimerIntervalBody>(*lexicalGlobalObject, *callFrame, "setMinimumTimerInterval");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setEditingBehaviorBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto behaviorConversionResult = convert<IDLEnumeration<InternalSettings::EditingBehaviorType>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "behavior"_s, "InternalSettings"_s, "setEditingBehavior"_s, expectedEnumerationValues<InternalSettings::EditingBehaviorType>()); });
    if (behaviorConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEditingBehavior(behaviorConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setEditingBehavior, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setEditingBehaviorBody>(*lexicalGlobalObject, *callFrame, "setEditingBehavior");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setStorageBlockingPolicyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto policyConversionResult = convert<IDLEnumeration<InternalSettings::StorageBlockingPolicy>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "policy"_s, "InternalSettings"_s, "setStorageBlockingPolicy"_s, expectedEnumerationValues<InternalSettings::StorageBlockingPolicy>()); });
    if (policyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setStorageBlockingPolicy(policyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setStorageBlockingPolicy, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setStorageBlockingPolicyBody>(*lexicalGlobalObject, *callFrame, "setStorageBlockingPolicy");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setUserInterfaceDirectionPolicyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto policyConversionResult = convert<IDLEnumeration<InternalSettings::UserInterfaceDirectionPolicy>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "policy"_s, "InternalSettings"_s, "setUserInterfaceDirectionPolicy"_s, expectedEnumerationValues<InternalSettings::UserInterfaceDirectionPolicy>()); });
    if (policyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUserInterfaceDirectionPolicy(policyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setUserInterfaceDirectionPolicy, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setUserInterfaceDirectionPolicyBody>(*lexicalGlobalObject, *callFrame, "setUserInterfaceDirectionPolicy");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setSystemLayoutDirectionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto directionConversionResult = convert<IDLEnumeration<InternalSettings::SystemLayoutDirection>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "direction"_s, "InternalSettings"_s, "setSystemLayoutDirection"_s, expectedEnumerationValues<InternalSettings::SystemLayoutDirection>()); });
    if (directionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setSystemLayoutDirection(directionConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setSystemLayoutDirection, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setSystemLayoutDirectionBody>(*lexicalGlobalObject, *callFrame, "setSystemLayoutDirection");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setCustomPasteboardDataEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCustomPasteboardDataEnabled(enabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setCustomPasteboardDataEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setCustomPasteboardDataEnabledBody>(*lexicalGlobalObject, *callFrame, "setCustomPasteboardDataEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setShouldManageAudioSessionCategoryBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldManageAudioSessionCategory(shouldConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldManageAudioSessionCategory, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setShouldManageAudioSessionCategoryBody>(*lexicalGlobalObject, *callFrame, "setShouldManageAudioSessionCategory");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setShouldDisplayTrackKindBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 2) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto kindConversionResult = convert<IDLEnumeration<InternalSettings::TrackKind>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "kind"_s, "InternalSettings"_s, "setShouldDisplayTrackKind"_s, expectedEnumerationValues<InternalSettings::TrackKind>()); });
    if (kindConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->uncheckedArgument(1);
    auto enabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument1.value());
    if (enabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDisplayTrackKind(kindConversionResult.releaseReturnValue(), enabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldDisplayTrackKind, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setShouldDisplayTrackKindBody>(*lexicalGlobalObject, *callFrame, "setShouldDisplayTrackKind");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_shouldDisplayTrackKindBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto kindConversionResult = convert<IDLEnumeration<InternalSettings::TrackKind>>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "kind"_s, "InternalSettings"_s, "shouldDisplayTrackKind"_s, expectedEnumerationValues<InternalSettings::TrackKind>()); });
    if (kindConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLBoolean>(*lexicalGlobalObject, throwScope, impl.shouldDisplayTrackKind(kindConversionResult.releaseReturnValue()))));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_shouldDisplayTrackKind, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_shouldDisplayTrackKindBody>(*lexicalGlobalObject, *callFrame, "shouldDisplayTrackKind");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setCanStartMediaBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setCanStartMedia(enabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setCanStartMedia, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setCanStartMediaBody>(*lexicalGlobalObject, *callFrame, "setCanStartMedia");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setEditableRegionEnabledBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setEditableRegionEnabled(enabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setEditableRegionEnabled, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setEditableRegionEnabledBody>(*lexicalGlobalObject, *callFrame, "setEditableRegionEnabled");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setUseDarkAppearanceBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseDarkAppearance(enabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setUseDarkAppearance, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setUseDarkAppearanceBody>(*lexicalGlobalObject, *callFrame, "setUseDarkAppearance");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setUseElevatedUserInterfaceLevelBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto enabledConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (enabledConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setUseElevatedUserInterfaceLevel(enabledConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setUseElevatedUserInterfaceLevel, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setUseElevatedUserInterfaceLevelBody>(*lexicalGlobalObject, *callFrame, "setUseElevatedUserInterfaceLevel");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setAllowUnclampedScrollPositionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto allowUnclampedConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (allowUnclampedConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowUnclampedScrollPosition(allowUnclampedConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowUnclampedScrollPosition, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setAllowUnclampedScrollPositionBody>(*lexicalGlobalObject, *callFrame, "setAllowUnclampedScrollPosition");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setShouldDeactivateAudioSessionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldDeactivateConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldDeactivateConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldDeactivateAudioSession(shouldDeactivateConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldDeactivateAudioSession, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setShouldDeactivateAudioSessionBody>(*lexicalGlobalObject, *callFrame, "setShouldDeactivateAudioSession");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setShouldMockBoldSystemFontForAccessibilityBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto shouldMockConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument0.value());
    if (shouldMockConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setShouldMockBoldSystemFontForAccessibility(shouldMockConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setShouldMockBoldSystemFontForAccessibility, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setShouldMockBoldSystemFontForAccessibilityBody>(*lexicalGlobalObject, *callFrame, "setShouldMockBoldSystemFontForAccessibility");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setDefaultAudioContextSampleRateBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto sampleRateConversionResult = convert<IDLFloat>(*lexicalGlobalObject, argument0.value());
    if (sampleRateConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setDefaultAudioContextSampleRate(sampleRateConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setDefaultAudioContextSampleRate, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setDefaultAudioContextSampleRateBody>(*lexicalGlobalObject, *callFrame, "setDefaultAudioContextSampleRate");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setAllowedMediaContainerTypesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto typesConversionResult = convert<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, argument0.value());
    if (typesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowedMediaContainerTypes(typesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaContainerTypes, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setAllowedMediaContainerTypesBody>(*lexicalGlobalObject, *callFrame, "setAllowedMediaContainerTypes");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setAllowedMediaCodecTypesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto typesConversionResult = convert<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, argument0.value());
    if (typesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowedMediaCodecTypes(typesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaCodecTypes, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setAllowedMediaCodecTypesBody>(*lexicalGlobalObject, *callFrame, "setAllowedMediaCodecTypes");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setAllowedMediaVideoCodecIDsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto typesConversionResult = convert<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, argument0.value());
    if (typesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowedMediaVideoCodecIDs(typesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaVideoCodecIDs, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setAllowedMediaVideoCodecIDsBody>(*lexicalGlobalObject, *callFrame, "setAllowedMediaVideoCodecIDs");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setAllowedMediaAudioCodecIDsBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto typesConversionResult = convert<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, argument0.value());
    if (typesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowedMediaAudioCodecIDs(typesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaAudioCodecIDs, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setAllowedMediaAudioCodecIDsBody>(*lexicalGlobalObject, *callFrame, "setAllowedMediaAudioCodecIDs");
}

static inline JSC::EncodedJSValue jsInternalSettingsPrototypeFunction_setAllowedMediaCaptionFormatTypesBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSInternalSettings>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto typesConversionResult = convert<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, argument0.value());
    if (typesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setAllowedMediaCaptionFormatTypes(typesConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsInternalSettingsPrototypeFunction_setAllowedMediaCaptionFormatTypes, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSInternalSettings>::call<jsInternalSettingsPrototypeFunction_setAllowedMediaCaptionFormatTypesBody>(*lexicalGlobalObject, *callFrame, "setAllowedMediaCaptionFormatTypes");
}

JSC::GCClient::IsoSubspace* JSInternalSettings::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSInternalSettings, UseCustomHeapCellType::No>(vm, "JSInternalSettings"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForInternalSettings.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForInternalSettings = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForInternalSettings.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForInternalSettings = std::forward<decltype(space)>(space); }
    );
}

void JSInternalSettings::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSInternalSettings*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7InternalSettings@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16InternalSettingsE[]; }
#endif
template<std::same_as<InternalSettings> T>
static inline void verifyVTable(InternalSettings* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7InternalSettings@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore16InternalSettingsE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // InternalSettings has subclasses. If InternalSettings has subclasses that get passed
        // to toJS() we currently require InternalSettings you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<InternalSettings>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<InternalSettings>(impl.ptr());
#endif
    return createWrapper<InternalSettings>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, InternalSettings& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}


}
