/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR)

#include "JSXRWebGLLayerInit.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEBXR)

template<> ConversionResult<IDLDictionary<XRWebGLLayerInit>> convertDictionary<XRWebGLLayerInit>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    XRWebGLLayerInit result;
    JSValue alphaValue;
    if (isNullOrUndefined)
        alphaValue = jsUndefined();
    else {
        alphaValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "alpha"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto alphaConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, alphaValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { true }; });
    if (alphaConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.alpha = alphaConversionResult.releaseReturnValue();
    JSValue antialiasValue;
    if (isNullOrUndefined)
        antialiasValue = jsUndefined();
    else {
        antialiasValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "antialias"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto antialiasConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, antialiasValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { true }; });
    if (antialiasConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.antialias = antialiasConversionResult.releaseReturnValue();
    JSValue depthValue;
    if (isNullOrUndefined)
        depthValue = jsUndefined();
    else {
        depthValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "depth"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto depthConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, depthValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { true }; });
    if (depthConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.depth = depthConversionResult.releaseReturnValue();
    JSValue framebufferScaleFactorValue;
    if (isNullOrUndefined)
        framebufferScaleFactorValue = jsUndefined();
    else {
        framebufferScaleFactorValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "framebufferScaleFactor"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto framebufferScaleFactorConversionResult = convertOptionalWithDefault<IDLDouble>(lexicalGlobalObject, framebufferScaleFactorValue, [&]() -> ConversionResult<IDLDouble> { return Converter<IDLDouble>::ReturnType { 1.0 }; });
    if (framebufferScaleFactorConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.framebufferScaleFactor = framebufferScaleFactorConversionResult.releaseReturnValue();
    JSValue ignoreDepthValuesValue;
    if (isNullOrUndefined)
        ignoreDepthValuesValue = jsUndefined();
    else {
        ignoreDepthValuesValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "ignoreDepthValues"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto ignoreDepthValuesConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, ignoreDepthValuesValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (ignoreDepthValuesConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.ignoreDepthValues = ignoreDepthValuesConversionResult.releaseReturnValue();
    JSValue stencilValue;
    if (isNullOrUndefined)
        stencilValue = jsUndefined();
    else {
        stencilValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "stencil"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto stencilConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, stencilValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { false }; });
    if (stencilConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.stencil = stencilConversionResult.releaseReturnValue();
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEBXR)
