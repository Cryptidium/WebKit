/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSPublicKeyCredentialCreationOptionsJSON.h"

#include "JSAuthenticationExtensionsClientInputsJSON.h"
#include "JSAuthenticatorSelectionCriteria.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSPublicKeyCredentialDescriptorJSON.h"
#include "JSPublicKeyCredentialParameters.h"
#include "JSPublicKeyCredentialRpEntity.h"
#include "JSPublicKeyCredentialUserEntityJSON.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<PublicKeyCredentialCreationOptionsJSON>> convertDictionary<PublicKeyCredentialCreationOptionsJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    PublicKeyCredentialCreationOptionsJSON result;
    JSValue attestationValue;
    if (isNullOrUndefined)
        attestationValue = jsUndefined();
    else {
        attestationValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "attestation"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto attestationConversionResult = convertOptionalWithDefault<IDLDOMString>(lexicalGlobalObject, attestationValue, [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { "none"_s }; });
    if (attestationConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.attestation = attestationConversionResult.releaseReturnValue();
    JSValue authenticatorSelectionValue;
    if (isNullOrUndefined)
        authenticatorSelectionValue = jsUndefined();
    else {
        authenticatorSelectionValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "authenticatorSelection"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!authenticatorSelectionValue.isUndefined()) {
        auto authenticatorSelectionConversionResult = convert<IDLDictionary<AuthenticatorSelectionCriteria>>(lexicalGlobalObject, authenticatorSelectionValue);
        if (authenticatorSelectionConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.authenticatorSelection = authenticatorSelectionConversionResult.releaseReturnValue();
    }
    JSValue challengeValue;
    if (isNullOrUndefined)
        challengeValue = jsUndefined();
    else {
        challengeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "challenge"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (challengeValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "challenge"_s, "PublicKeyCredentialCreationOptionsJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto challengeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, challengeValue);
    if (challengeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.challenge = challengeConversionResult.releaseReturnValue();
    JSValue excludeCredentialsValue;
    if (isNullOrUndefined)
        excludeCredentialsValue = jsUndefined();
    else {
        excludeCredentialsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "excludeCredentials"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto excludeCredentialsConversionResult = convertOptionalWithDefault<IDLSequence<IDLDictionary<PublicKeyCredentialDescriptorJSON>>>(lexicalGlobalObject, excludeCredentialsValue, [&]() -> ConversionResult<IDLSequence<IDLDictionary<PublicKeyCredentialDescriptorJSON>>> { return Converter<IDLSequence<IDLDictionary<PublicKeyCredentialDescriptorJSON>>>::ReturnType { }; });
    if (excludeCredentialsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.excludeCredentials = excludeCredentialsConversionResult.releaseReturnValue();
    JSValue extensionsValue;
    if (isNullOrUndefined)
        extensionsValue = jsUndefined();
    else {
        extensionsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "extensions"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!extensionsValue.isUndefined()) {
        auto extensionsConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientInputsJSON>>(lexicalGlobalObject, extensionsValue);
        if (extensionsConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.extensions = extensionsConversionResult.releaseReturnValue();
    }
    JSValue pubKeyCredParamsValue;
    if (isNullOrUndefined)
        pubKeyCredParamsValue = jsUndefined();
    else {
        pubKeyCredParamsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "pubKeyCredParams"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (pubKeyCredParamsValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "pubKeyCredParams"_s, "PublicKeyCredentialCreationOptionsJSON"_s, "sequence"_s);
        return ConversionResultException { };
    }
    auto pubKeyCredParamsConversionResult = convert<IDLSequence<IDLDictionary<PublicKeyCredentialParameters>>>(lexicalGlobalObject, pubKeyCredParamsValue);
    if (pubKeyCredParamsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.pubKeyCredParams = pubKeyCredParamsConversionResult.releaseReturnValue();
    JSValue rpValue;
    if (isNullOrUndefined)
        rpValue = jsUndefined();
    else {
        rpValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "rp"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (rpValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "rp"_s, "PublicKeyCredentialCreationOptionsJSON"_s, "PublicKeyCredentialRpEntity"_s);
        return ConversionResultException { };
    }
    auto rpConversionResult = convert<IDLDictionary<PublicKeyCredentialRpEntity>>(lexicalGlobalObject, rpValue);
    if (rpConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.rp = rpConversionResult.releaseReturnValue();
    JSValue timeoutValue;
    if (isNullOrUndefined)
        timeoutValue = jsUndefined();
    else {
        timeoutValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "timeout"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!timeoutValue.isUndefined()) {
        auto timeoutConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, timeoutValue);
        if (timeoutConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.timeout = timeoutConversionResult.releaseReturnValue();
    }
    JSValue userValue;
    if (isNullOrUndefined)
        userValue = jsUndefined();
    else {
        userValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "user"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (userValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "user"_s, "PublicKeyCredentialCreationOptionsJSON"_s, "PublicKeyCredentialUserEntityJSON"_s);
        return ConversionResultException { };
    }
    auto userConversionResult = convert<IDLDictionary<PublicKeyCredentialUserEntityJSON>>(lexicalGlobalObject, userValue);
    if (userConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.user = userConversionResult.releaseReturnValue();
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
