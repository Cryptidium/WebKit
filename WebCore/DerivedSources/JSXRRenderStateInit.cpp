/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR)

#include "JSXRRenderStateInit.h"

#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertSequences.h"
#include "JSWebXRLayer.h"
#include "JSWebXRWebGLLayer.h"
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEBXR)

template<> ConversionResult<IDLDictionary<XRRenderStateInit>> convertDictionary<XRRenderStateInit>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    XRRenderStateInit result;
    JSValue baseLayerValue;
    if (isNullOrUndefined)
        baseLayerValue = jsUndefined();
    else {
        baseLayerValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "baseLayer"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!baseLayerValue.isUndefined()) {
        auto baseLayerConversionResult = convert<IDLNullable<IDLInterface<WebXRWebGLLayer>>>(lexicalGlobalObject, baseLayerValue);
        if (baseLayerConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.baseLayer = baseLayerConversionResult.releaseReturnValue();
    }
    JSValue depthFarValue;
    if (isNullOrUndefined)
        depthFarValue = jsUndefined();
    else {
        depthFarValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "depthFar"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!depthFarValue.isUndefined()) {
        auto depthFarConversionResult = convert<IDLDouble>(lexicalGlobalObject, depthFarValue);
        if (depthFarConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.depthFar = depthFarConversionResult.releaseReturnValue();
    }
    JSValue depthNearValue;
    if (isNullOrUndefined)
        depthNearValue = jsUndefined();
    else {
        depthNearValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "depthNear"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!depthNearValue.isUndefined()) {
        auto depthNearConversionResult = convert<IDLDouble>(lexicalGlobalObject, depthNearValue);
        if (depthNearConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.depthNear = depthNearConversionResult.releaseReturnValue();
    }
    JSValue inlineVerticalFieldOfViewValue;
    if (isNullOrUndefined)
        inlineVerticalFieldOfViewValue = jsUndefined();
    else {
        inlineVerticalFieldOfViewValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "inlineVerticalFieldOfView"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!inlineVerticalFieldOfViewValue.isUndefined()) {
        auto inlineVerticalFieldOfViewConversionResult = convert<IDLDouble>(lexicalGlobalObject, inlineVerticalFieldOfViewValue);
        if (inlineVerticalFieldOfViewConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.inlineVerticalFieldOfView = inlineVerticalFieldOfViewConversionResult.releaseReturnValue();
    }
    JSValue layersValue;
    if (isNullOrUndefined)
        layersValue = jsUndefined();
    else {
        layersValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "layers"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!layersValue.isUndefined()) {
        auto layersConversionResult = convert<IDLNullable<IDLSequence<IDLInterface<WebXRLayer>>>>(lexicalGlobalObject, layersValue);
        if (layersConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.layers = layersConversionResult.releaseReturnValue();
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEBXR)
