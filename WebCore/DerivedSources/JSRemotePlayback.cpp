/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WIRELESS_PLAYBACK_TARGET)

#include "JSRemotePlayback.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "Element.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertCallbacks.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSNodeCustom.h"
#include "JSRemotePlaybackAvailabilityCallback.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include "WebCoreOpaqueRootInlines.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(RemotePlayback::State enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("connecting"),
        MAKE_STATIC_STRING_IMPL("connected"),
        MAKE_STATIC_STRING_IMPL("disconnected"),
    };
    static_assert(static_cast<size_t>(RemotePlayback::State::Connecting) == 0, "RemotePlayback::State::Connecting is not 0 as expected");
    static_assert(static_cast<size_t>(RemotePlayback::State::Connected) == 1, "RemotePlayback::State::Connected is not 1 as expected");
    static_assert(static_cast<size_t>(RemotePlayback::State::Disconnected) == 2, "RemotePlayback::State::Disconnected is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, RemotePlayback::State enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<RemotePlayback::State> parseEnumerationFromString<RemotePlayback::State>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, RemotePlayback::State>, 3> mappings {
        std::pair<ComparableASCIILiteral, RemotePlayback::State> { "connected"_s, RemotePlayback::State::Connected },
        std::pair<ComparableASCIILiteral, RemotePlayback::State> { "connecting"_s, RemotePlayback::State::Connecting },
        std::pair<ComparableASCIILiteral, RemotePlayback::State> { "disconnected"_s, RemotePlayback::State::Disconnected },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<RemotePlayback::State> parseEnumeration<RemotePlayback::State>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<RemotePlayback::State>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<RemotePlayback::State>()
{
    return "\"connecting\", \"connected\", \"disconnected\""_s;
}

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRemotePlaybackPrototypeFunction_watchAvailability);
static JSC_DECLARE_HOST_FUNCTION(jsRemotePlaybackPrototypeFunction_cancelWatchAvailability);
static JSC_DECLARE_HOST_FUNCTION(jsRemotePlaybackPrototypeFunction_prompt);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRemotePlaybackConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRemotePlayback_state);
static JSC_DECLARE_CUSTOM_GETTER(jsRemotePlayback_onconnecting);
static JSC_DECLARE_CUSTOM_SETTER(setJSRemotePlayback_onconnecting);
static JSC_DECLARE_CUSTOM_GETTER(jsRemotePlayback_onconnect);
static JSC_DECLARE_CUSTOM_SETTER(setJSRemotePlayback_onconnect);
static JSC_DECLARE_CUSTOM_GETTER(jsRemotePlayback_ondisconnect);
static JSC_DECLARE_CUSTOM_SETTER(setJSRemotePlayback_ondisconnect);

class JSRemotePlaybackPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRemotePlaybackPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRemotePlaybackPrototype* ptr = new (NotNull, JSC::allocateCell<JSRemotePlaybackPrototype>(vm)) JSRemotePlaybackPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRemotePlaybackPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRemotePlaybackPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRemotePlaybackPrototype, JSRemotePlaybackPrototype::Base);

using JSRemotePlaybackDOMConstructor = JSDOMConstructorNotConstructable<JSRemotePlayback>;

template<> const ClassInfo JSRemotePlaybackDOMConstructor::s_info = { "RemotePlayback"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRemotePlaybackDOMConstructor) };

template<> JSValue JSRemotePlaybackDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSRemotePlaybackDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RemotePlayback"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRemotePlayback::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 8> JSRemotePlaybackPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRemotePlaybackConstructor, 0 } },
    HashTableValue { "state"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRemotePlayback_state, 0 } },
    HashTableValue { "onconnecting"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRemotePlayback_onconnecting, setJSRemotePlayback_onconnecting } },
    HashTableValue { "onconnect"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRemotePlayback_onconnect, setJSRemotePlayback_onconnect } },
    HashTableValue { "ondisconnect"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRemotePlayback_ondisconnect, setJSRemotePlayback_ondisconnect } },
    HashTableValue { "watchAvailability"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRemotePlaybackPrototypeFunction_watchAvailability, 1 } },
    HashTableValue { "cancelWatchAvailability"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRemotePlaybackPrototypeFunction_cancelWatchAvailability, 0 } },
    HashTableValue { "prompt"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRemotePlaybackPrototypeFunction_prompt, 0 } },
};

const ClassInfo JSRemotePlaybackPrototype::s_info = { "RemotePlayback"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRemotePlaybackPrototype) };

void JSRemotePlaybackPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRemotePlayback::info(), JSRemotePlaybackPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRemotePlayback::s_info = { "RemotePlayback"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRemotePlayback) };

JSRemotePlayback::JSRemotePlayback(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RemotePlayback>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<RemotePlayback> JSRemotePlayback::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, RemotePlayback>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSRemotePlayback::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRemotePlaybackPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSRemotePlaybackPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRemotePlayback::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRemotePlayback>(vm, globalObject);
}

JSValue JSRemotePlayback::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRemotePlaybackDOMConstructor, DOMConstructorID::RemotePlayback>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRemotePlaybackConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRemotePlaybackPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRemotePlayback::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRemotePlayback_stateGetter(JSGlobalObject& lexicalGlobalObject, JSRemotePlayback& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<RemotePlayback::State>>(lexicalGlobalObject, throwScope, impl.state())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRemotePlayback_state, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRemotePlayback>::get<jsRemotePlayback_stateGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRemotePlayback_onconnectingGetter(JSGlobalObject& lexicalGlobalObject, JSRemotePlayback& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().connectingEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRemotePlayback_onconnecting, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRemotePlayback>::get<jsRemotePlayback_onconnectingGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRemotePlayback_onconnectingSetter(JSGlobalObject& lexicalGlobalObject, JSRemotePlayback& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().connectingEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRemotePlayback_onconnecting, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRemotePlayback>::set<setJSRemotePlayback_onconnectingSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRemotePlayback_onconnectGetter(JSGlobalObject& lexicalGlobalObject, JSRemotePlayback& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().connectEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRemotePlayback_onconnect, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRemotePlayback>::get<jsRemotePlayback_onconnectGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRemotePlayback_onconnectSetter(JSGlobalObject& lexicalGlobalObject, JSRemotePlayback& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().connectEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRemotePlayback_onconnect, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRemotePlayback>::set<setJSRemotePlayback_onconnectSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsRemotePlayback_ondisconnectGetter(JSGlobalObject& lexicalGlobalObject, JSRemotePlayback& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().disconnectEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsRemotePlayback_ondisconnect, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRemotePlayback>::get<jsRemotePlayback_ondisconnectGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSRemotePlayback_ondisconnectSetter(JSGlobalObject& lexicalGlobalObject, JSRemotePlayback& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().disconnectEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSRemotePlayback_ondisconnect, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSRemotePlayback>::set<setJSRemotePlayback_ondisconnectSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsRemotePlaybackPrototypeFunction_watchAvailabilityBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRemotePlayback>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto callbackConversionResult = convert<IDLCallbackFunction<JSRemotePlaybackAvailabilityCallback>>(*lexicalGlobalObject, argument0.value(), *castedThis->globalObject(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(lexicalGlobalObject, scope, 0, "callback"_s, "RemotePlayback"_s, "watchAvailability"_s); });
    if (callbackConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLLong>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.watchAvailability(callbackConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRemotePlaybackPrototypeFunction_watchAvailability, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRemotePlayback>::call<jsRemotePlaybackPrototypeFunction_watchAvailabilityBody>(*lexicalGlobalObject, *callFrame, "watchAvailability");
}

static inline JSC::EncodedJSValue jsRemotePlaybackPrototypeFunction_cancelWatchAvailabilityBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRemotePlayback>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto idConversionResult = convert<IDLOptional<IDLLong>>(*lexicalGlobalObject, argument0.value());
    if (idConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.cancelWatchAvailability(idConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRemotePlaybackPrototypeFunction_cancelWatchAvailability, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRemotePlayback>::call<jsRemotePlaybackPrototypeFunction_cancelWatchAvailabilityBody>(*lexicalGlobalObject, *callFrame, "cancelWatchAvailability");
}

static inline JSC::EncodedJSValue jsRemotePlaybackPrototypeFunction_promptBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRemotePlayback>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.prompt(WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRemotePlaybackPrototypeFunction_prompt, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRemotePlayback>::call<jsRemotePlaybackPrototypeFunction_promptBody>(*lexicalGlobalObject, *callFrame, "prompt");
}

JSC::GCClient::IsoSubspace* JSRemotePlayback::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRemotePlayback, UseCustomHeapCellType::No>(vm, "JSRemotePlayback"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRemotePlayback.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRemotePlayback = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRemotePlayback.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRemotePlayback = std::forward<decltype(space)>(space); }
    );
}

template<typename Visitor>
void JSRemotePlayback::visitChildrenImpl(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSRemotePlayback*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    addWebCoreOpaqueRoot(visitor, thisObject->wrapped().opaqueRootConcurrently());
}

DEFINE_VISIT_CHILDREN(JSRemotePlayback);

void JSRemotePlayback::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRemotePlayback*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRemotePlaybackOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsRemotePlayback = jsCast<JSRemotePlayback*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsRemotePlayback->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    auto* owner = WTF::getPtr(jsRemotePlayback->wrapped().ownerNode());
    if (reason) [[unlikely]]
        *reason = "Reachable from RemotePlayback ownerNode"_s;
    return containsWebCoreOpaqueRoot(visitor, owner);
}

void JSRemotePlaybackOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRemotePlayback = static_cast<JSRemotePlayback*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRemotePlayback->protectedWrapped().ptr(), jsRemotePlayback);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RemotePlayback@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14RemotePlaybackE[]; }
#endif
template<std::same_as<RemotePlayback> T>
static inline void verifyVTable(RemotePlayback* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7RemotePlayback@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore14RemotePlaybackE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // RemotePlayback has subclasses. If RemotePlayback has subclasses that get passed
        // to toJS() we currently require RemotePlayback you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RemotePlayback>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<RemotePlayback>(impl.ptr());
#endif
    return createWrapper<RemotePlayback>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RemotePlayback& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RemotePlayback* JSRemotePlayback::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRemotePlayback*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WIRELESS_PLAYBACK_TARGET)
