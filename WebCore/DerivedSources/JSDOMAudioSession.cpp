/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(DOM_AUDIO_SESSION)

#include "JSDOMAudioSession.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DocumentInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/JSString.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/SortedArrayMap.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

String convertEnumerationToString(DOMAudioSession::State enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("inactive"),
        MAKE_STATIC_STRING_IMPL("active"),
        MAKE_STATIC_STRING_IMPL("interrupted"),
    };
    static_assert(static_cast<size_t>(DOMAudioSession::State::Inactive) == 0, "DOMAudioSession::State::Inactive is not 0 as expected");
    static_assert(static_cast<size_t>(DOMAudioSession::State::Active) == 1, "DOMAudioSession::State::Active is not 1 as expected");
    static_assert(static_cast<size_t>(DOMAudioSession::State::Interrupted) == 2, "DOMAudioSession::State::Interrupted is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, DOMAudioSession::State enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<DOMAudioSession::State> parseEnumerationFromString<DOMAudioSession::State>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, DOMAudioSession::State>, 3> mappings {
        std::pair<ComparableASCIILiteral, DOMAudioSession::State> { "active"_s, DOMAudioSession::State::Active },
        std::pair<ComparableASCIILiteral, DOMAudioSession::State> { "inactive"_s, DOMAudioSession::State::Inactive },
        std::pair<ComparableASCIILiteral, DOMAudioSession::State> { "interrupted"_s, DOMAudioSession::State::Interrupted },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<DOMAudioSession::State> parseEnumeration<DOMAudioSession::State>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<DOMAudioSession::State>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<DOMAudioSession::State>()
{
    return "\"inactive\", \"active\", \"interrupted\""_s;
}

String convertEnumerationToString(DOMAudioSession::Type enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 6> values {
        MAKE_STATIC_STRING_IMPL("auto"),
        MAKE_STATIC_STRING_IMPL("playback"),
        MAKE_STATIC_STRING_IMPL("transient"),
        MAKE_STATIC_STRING_IMPL("transient-solo"),
        MAKE_STATIC_STRING_IMPL("ambient"),
        MAKE_STATIC_STRING_IMPL("play-and-record"),
    };
    static_assert(static_cast<size_t>(DOMAudioSession::Type::Auto) == 0, "DOMAudioSession::Type::Auto is not 0 as expected");
    static_assert(static_cast<size_t>(DOMAudioSession::Type::Playback) == 1, "DOMAudioSession::Type::Playback is not 1 as expected");
    static_assert(static_cast<size_t>(DOMAudioSession::Type::Transient) == 2, "DOMAudioSession::Type::Transient is not 2 as expected");
    static_assert(static_cast<size_t>(DOMAudioSession::Type::TransientSolo) == 3, "DOMAudioSession::Type::TransientSolo is not 3 as expected");
    static_assert(static_cast<size_t>(DOMAudioSession::Type::Ambient) == 4, "DOMAudioSession::Type::Ambient is not 4 as expected");
    static_assert(static_cast<size_t>(DOMAudioSession::Type::PlayAndRecord) == 5, "DOMAudioSession::Type::PlayAndRecord is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, DOMAudioSession::Type enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<DOMAudioSession::Type> parseEnumerationFromString<DOMAudioSession::Type>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, DOMAudioSession::Type>, 6> mappings {
        std::pair<ComparableASCIILiteral, DOMAudioSession::Type> { "ambient"_s, DOMAudioSession::Type::Ambient },
        std::pair<ComparableASCIILiteral, DOMAudioSession::Type> { "auto"_s, DOMAudioSession::Type::Auto },
        std::pair<ComparableASCIILiteral, DOMAudioSession::Type> { "play-and-record"_s, DOMAudioSession::Type::PlayAndRecord },
        std::pair<ComparableASCIILiteral, DOMAudioSession::Type> { "playback"_s, DOMAudioSession::Type::Playback },
        std::pair<ComparableASCIILiteral, DOMAudioSession::Type> { "transient"_s, DOMAudioSession::Type::Transient },
        std::pair<ComparableASCIILiteral, DOMAudioSession::Type> { "transient-solo"_s, DOMAudioSession::Type::TransientSolo },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<DOMAudioSession::Type> parseEnumeration<DOMAudioSession::Type>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<DOMAudioSession::Type>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<DOMAudioSession::Type>()
{
    return "\"auto\", \"playback\", \"transient\", \"transient-solo\", \"ambient\", \"play-and-record\""_s;
}

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsDOMAudioSessionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMAudioSession_type);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMAudioSession_type);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMAudioSession_state);
static JSC_DECLARE_CUSTOM_GETTER(jsDOMAudioSession_onstatechange);
static JSC_DECLARE_CUSTOM_SETTER(setJSDOMAudioSession_onstatechange);

class JSDOMAudioSessionPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMAudioSessionPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMAudioSessionPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMAudioSessionPrototype>(vm)) JSDOMAudioSessionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDOMAudioSessionPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMAudioSessionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDOMAudioSessionPrototype, JSDOMAudioSessionPrototype::Base);

using JSDOMAudioSessionDOMConstructor = JSDOMConstructorNotConstructable<JSDOMAudioSession>;

template<> const ClassInfo JSDOMAudioSessionDOMConstructor::s_info = { "AudioSession"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDOMAudioSessionDOMConstructor) };

template<> JSValue JSDOMAudioSessionDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSDOMAudioSessionDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "AudioSession"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSDOMAudioSession::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 4> JSDOMAudioSessionPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMAudioSessionConstructor, 0 } },
    HashTableValue { "type"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMAudioSession_type, setJSDOMAudioSession_type } },
    HashTableValue { "state"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMAudioSession_state, 0 } },
    HashTableValue { "onstatechange"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDOMAudioSession_onstatechange, setJSDOMAudioSession_onstatechange } },
};

const ClassInfo JSDOMAudioSessionPrototype::s_info = { "AudioSession"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDOMAudioSessionPrototype) };

void JSDOMAudioSessionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMAudioSession::info(), JSDOMAudioSessionPrototypeTableValues, *this);
    bool hasDisabledRuntimeProperties = false;
    if (!downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().domAudioSessionFullEnabled) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "state"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
    if (!downcast<Document>(jsCast<JSDOMGlobalObject*>(globalObject())->scriptExecutionContext())->settingsValues().domAudioSessionFullEnabled) {
        hasDisabledRuntimeProperties = true;
        auto propertyName = Identifier::fromString(vm, "onstatechange"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, globalObject(), propertyName, slot);
    }
    if (hasDisabledRuntimeProperties && structure()->isDictionary())
        flattenDictionaryObject(vm);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSDOMAudioSession::s_info = { "AudioSession"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDOMAudioSession) };

JSDOMAudioSession::JSDOMAudioSession(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMAudioSession>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<DOMAudioSession> JSDOMAudioSession::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, DOMAudioSession>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSDOMAudioSession::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSDOMAudioSessionPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSDOMAudioSessionPrototype::create(vm, &globalObject, structure);
}

JSObject* JSDOMAudioSession::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSDOMAudioSession>(vm, globalObject);
}

JSValue JSDOMAudioSession::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMAudioSessionDOMConstructor, DOMConstructorID::DOMAudioSession>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMAudioSessionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSDOMAudioSessionPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSDOMAudioSession::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsDOMAudioSession_typeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMAudioSession& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<DOMAudioSession::Type>>(lexicalGlobalObject, throwScope, impl.type())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMAudioSession_type, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMAudioSession>::get<jsDOMAudioSession_typeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMAudioSession_typeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMAudioSession& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<DOMAudioSession::Type>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setType(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMAudioSession_type, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMAudioSession>::set<setJSDOMAudioSession_typeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsDOMAudioSession_stateGetter(JSGlobalObject& lexicalGlobalObject, JSDOMAudioSession& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<DOMAudioSession::State>>(lexicalGlobalObject, throwScope, impl.state())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMAudioSession_state, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMAudioSession>::get<jsDOMAudioSession_stateGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDOMAudioSession_onstatechangeGetter(JSGlobalObject& lexicalGlobalObject, JSDOMAudioSession& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().statechangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDOMAudioSession_onstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMAudioSession>::get<jsDOMAudioSession_onstatechangeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSDOMAudioSession_onstatechangeSetter(JSGlobalObject& lexicalGlobalObject, JSDOMAudioSession& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().statechangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSDOMAudioSession_onstatechange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSDOMAudioSession>::set<setJSDOMAudioSession_onstatechangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

JSC::GCClient::IsoSubspace* JSDOMAudioSession::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSDOMAudioSession, UseCustomHeapCellType::No>(vm, "JSDOMAudioSession"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForDOMAudioSession.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForDOMAudioSession = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForDOMAudioSession.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForDOMAudioSession = std::forward<decltype(space)>(space); }
    );
}

void JSDOMAudioSession::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSDOMAudioSession*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSDOMAudioSessionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsDOMAudioSession = jsCast<JSDOMAudioSession*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsDOMAudioSession->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSDOMAudioSessionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDOMAudioSession = static_cast<JSDOMAudioSession*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsDOMAudioSession->protectedWrapped().ptr(), jsDOMAudioSession);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7DOMAudioSession@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15DOMAudioSessionE[]; }
#endif
template<std::same_as<DOMAudioSession> T>
static inline void verifyVTable(DOMAudioSession* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7DOMAudioSession@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore15DOMAudioSessionE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // DOMAudioSession has subclasses. If DOMAudioSession has subclasses that get passed
        // to toJS() we currently require DOMAudioSession you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<DOMAudioSession>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<DOMAudioSession>(impl.ptr());
#endif
    return createWrapper<DOMAudioSession>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, DOMAudioSession& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

DOMAudioSession* JSDOMAudioSession::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSDOMAudioSession*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(DOM_AUDIO_SESSION)
