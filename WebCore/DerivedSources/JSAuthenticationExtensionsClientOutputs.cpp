/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSAuthenticationExtensionsClientOutputs.h"

#include "JSCredentialPropertiesOutput.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputs& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLBoolean::isNullValue(dictionary.appid)) {
        auto appidValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.appid));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "appid"_s), appidValue);
    }
    if (!IDLDictionary<CredentialPropertiesOutput>::isNullValue(dictionary.credProps)) {
        auto credPropsValue = toJS<IDLDictionary<CredentialPropertiesOutput>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<CredentialPropertiesOutput>::extractValueFromNullable(dictionary.credProps));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "credProps"_s), credPropsValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::isNullValue(dictionary.largeBlob)) {
        auto largeBlobValue = toJS<IDLDictionary<AuthenticationExtensionsClientOutputs::LargeBlobOutputs>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::extractValueFromNullable(dictionary.largeBlob));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "largeBlob"_s), largeBlobValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientOutputs::PRFOutputs>::isNullValue(dictionary.prf)) {
        auto prfValue = toJS<IDLDictionary<AuthenticationExtensionsClientOutputs::PRFOutputs>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientOutputs::PRFOutputs>::extractValueFromNullable(dictionary.prf));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "prf"_s), prfValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputs::LargeBlobOutputs& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLArrayBuffer::isNullValue(dictionary.blob)) {
        auto blobValue = toJS<IDLArrayBuffer>(lexicalGlobalObject, globalObject, throwScope, IDLArrayBuffer::extractValueFromNullable(dictionary.blob));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "blob"_s), blobValue);
    }
    if (!IDLBoolean::isNullValue(dictionary.supported)) {
        auto supportedValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.supported));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "supported"_s), supportedValue);
    }
    if (!IDLBoolean::isNullValue(dictionary.written)) {
        auto writtenValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.written));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "written"_s), writtenValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputs::PRFValues& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto firstValue = toJS<IDLArrayBuffer>(lexicalGlobalObject, globalObject, throwScope, dictionary.first);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "first"_s), firstValue);
    if (!IDLArrayBuffer::isNullValue(dictionary.second)) {
        auto secondValue = toJS<IDLArrayBuffer>(lexicalGlobalObject, globalObject, throwScope, IDLArrayBuffer::extractValueFromNullable(dictionary.second));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "second"_s), secondValue);
    }
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationExtensionsClientOutputs::PRFOutputs& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLBoolean::isNullValue(dictionary.enabled)) {
        auto enabledValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, IDLBoolean::extractValueFromNullable(dictionary.enabled));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "enabled"_s), enabledValue);
    }
    if (!IDLDictionary<AuthenticationExtensionsClientOutputs::PRFValues>::isNullValue(dictionary.results)) {
        auto resultsValue = toJS<IDLDictionary<AuthenticationExtensionsClientOutputs::PRFValues>>(lexicalGlobalObject, globalObject, throwScope, IDLDictionary<AuthenticationExtensionsClientOutputs::PRFValues>::extractValueFromNullable(dictionary.results));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "results"_s), resultsValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
