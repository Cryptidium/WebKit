/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA)

#include "JSMediaKeySystemMediaCapability.h"

#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include "JSMediaKeyEncryptionScheme.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(ENCRYPTED_MEDIA)

template<> ConversionResult<IDLDictionary<MediaKeySystemMediaCapability>> convertDictionary<MediaKeySystemMediaCapability>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    MediaKeySystemMediaCapability result;
    JSValue contentTypeValue;
    if (isNullOrUndefined)
        contentTypeValue = jsUndefined();
    else {
        contentTypeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "contentType"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto contentTypeConversionResult = convertOptionalWithDefault<IDLDOMString>(lexicalGlobalObject, contentTypeValue, [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (contentTypeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.contentType = contentTypeConversionResult.releaseReturnValue();
    JSValue encryptionSchemeValue;
    if (isNullOrUndefined)
        encryptionSchemeValue = jsUndefined();
    else {
        encryptionSchemeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "encryptionScheme"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto encryptionSchemeConversionResult = convertOptionalWithDefault<IDLNullable<IDLEnumeration<MediaKeyEncryptionScheme>>>(lexicalGlobalObject, encryptionSchemeValue, [&]() -> ConversionResult<IDLNullable<IDLEnumeration<MediaKeyEncryptionScheme>>> { return typename Converter<IDLNullable<IDLEnumeration<MediaKeyEncryptionScheme>>>::ReturnType { std::nullopt }; });
    if (encryptionSchemeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.encryptionScheme = encryptionSchemeConversionResult.releaseReturnValue();
    JSValue robustnessValue;
    if (isNullOrUndefined)
        robustnessValue = jsUndefined();
    else {
        robustnessValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "robustness"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto robustnessConversionResult = convertOptionalWithDefault<IDLDOMString>(lexicalGlobalObject, robustnessValue, [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (robustnessConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.robustness = robustnessConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const MediaKeySystemMediaCapability& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto contentTypeValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.contentType);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "contentType"_s), contentTypeValue);
    auto encryptionSchemeValue = toJS<IDLNullable<IDLEnumeration<MediaKeyEncryptionScheme>>>(lexicalGlobalObject, throwScope, dictionary.encryptionScheme);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "encryptionScheme"_s), encryptionSchemeValue);
    auto robustnessValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.robustness);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "robustness"_s), robustnessValue);
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(ENCRYPTED_MEDIA)
