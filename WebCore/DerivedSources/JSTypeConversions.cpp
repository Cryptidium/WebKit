/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTypeConversions.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertRecord.h"
#include "JSDOMConvertSequences.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSNode.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSArray.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/Variant.h>
#include <wtf/Vector.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

template<> ConversionResult<IDLDictionary<TypeConversions::OtherDictionary>> convertDictionary<TypeConversions::OtherDictionary>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    TypeConversions::OtherDictionary result;
    JSValue longValueValue;
    if (isNullOrUndefined)
        longValueValue = jsUndefined();
    else {
        longValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "longValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto longValueConversionResult = convertOptionalWithDefault<IDLLong>(lexicalGlobalObject, longValueValue, [&]() -> ConversionResult<IDLLong> { return Converter<IDLLong>::ReturnType { 0 }; });
    if (longValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.longValue = longValueConversionResult.releaseReturnValue();
    JSValue stringValueValue;
    if (isNullOrUndefined)
        stringValueValue = jsUndefined();
    else {
        stringValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "stringValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto stringValueConversionResult = convertOptionalWithDefault<IDLDOMString>(lexicalGlobalObject, stringValueValue, [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (stringValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.stringValue = stringValueConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const TypeConversions::OtherDictionary& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto longValueValue = toJS<IDLLong>(lexicalGlobalObject, throwScope, dictionary.longValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "longValue"_s), longValueValue);
    auto stringValueValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.stringValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "stringValue"_s), stringValueValue);
    return result;
}

template<> ConversionResult<IDLDictionary<TypeConversions::Dictionary>> convertDictionary<TypeConversions::Dictionary>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    TypeConversions::Dictionary result;
    JSValue clampLongValueValue;
    if (isNullOrUndefined)
        clampLongValueValue = jsUndefined();
    else {
        clampLongValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "clampLongValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto clampLongValueConversionResult = convertOptionalWithDefault<IDLClampAdaptor<IDLLong>>(lexicalGlobalObject, clampLongValueValue, [&]() -> ConversionResult<IDLClampAdaptor<IDLLong>> { return Converter<IDLClampAdaptor<IDLLong>>::ReturnType { 0 }; });
    if (clampLongValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.clampLongValue = clampLongValueConversionResult.releaseReturnValue();
    JSValue enforceRangeLongValueValue;
    if (isNullOrUndefined)
        enforceRangeLongValueValue = jsUndefined();
    else {
        enforceRangeLongValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "enforceRangeLongValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto enforceRangeLongValueConversionResult = convertOptionalWithDefault<IDLEnforceRangeAdaptor<IDLLong>>(lexicalGlobalObject, enforceRangeLongValueValue, [&]() -> ConversionResult<IDLEnforceRangeAdaptor<IDLLong>> { return Converter<IDLEnforceRangeAdaptor<IDLLong>>::ReturnType { 0 }; });
    if (enforceRangeLongValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.enforceRangeLongValue = enforceRangeLongValueConversionResult.releaseReturnValue();
    JSValue longValueValue;
    if (isNullOrUndefined)
        longValueValue = jsUndefined();
    else {
        longValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "longValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto longValueConversionResult = convertOptionalWithDefault<IDLLong>(lexicalGlobalObject, longValueValue, [&]() -> ConversionResult<IDLLong> { return Converter<IDLLong>::ReturnType { 0 }; });
    if (longValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.longValue = longValueConversionResult.releaseReturnValue();
    JSValue sequenceValueValue;
    if (isNullOrUndefined)
        sequenceValueValue = jsUndefined();
    else {
        sequenceValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "sequenceValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto sequenceValueConversionResult = convertOptionalWithDefault<IDLSequence<IDLDOMString>>(lexicalGlobalObject, sequenceValueValue, [&]() -> ConversionResult<IDLSequence<IDLDOMString>> { return Converter<IDLSequence<IDLDOMString>>::ReturnType { }; });
    if (sequenceValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.sequenceValue = sequenceValueConversionResult.releaseReturnValue();
    JSValue stringValueValue;
    if (isNullOrUndefined)
        stringValueValue = jsUndefined();
    else {
        stringValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "stringValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto stringValueConversionResult = convertOptionalWithDefault<IDLDOMString>(lexicalGlobalObject, stringValueValue, [&]() -> ConversionResult<IDLDOMString> { return Converter<IDLDOMString>::ReturnType { emptyString() }; });
    if (stringValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.stringValue = stringValueConversionResult.releaseReturnValue();
    JSValue treatNullAsEmptyStringValueValue;
    if (isNullOrUndefined)
        treatNullAsEmptyStringValueValue = jsUndefined();
    else {
        treatNullAsEmptyStringValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "treatNullAsEmptyStringValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto treatNullAsEmptyStringValueConversionResult = convertOptionalWithDefault<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>(lexicalGlobalObject, treatNullAsEmptyStringValueValue, [&]() -> ConversionResult<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>> { return Converter<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>::ReturnType { emptyString() }; });
    if (treatNullAsEmptyStringValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.treatNullAsEmptyStringValue = treatNullAsEmptyStringValueConversionResult.releaseReturnValue();
    JSValue unionValueValue;
    if (isNullOrUndefined)
        unionValueValue = jsUndefined();
    else {
        unionValueValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "unionValue"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto unionValueConversionResult = convertOptionalWithDefault<IDLUnion<IDLInterface<Node>, IDLSequence<IDLDOMString>, IDLDictionary<TypeConversions::OtherDictionary>>>(lexicalGlobalObject, unionValueValue, [&]() -> ConversionResult<IDLUnion<IDLInterface<Node>, IDLSequence<IDLDOMString>, IDLDictionary<TypeConversions::OtherDictionary>>> { return convert<IDLUnion<IDLInterface<Node>, IDLSequence<IDLDOMString>, IDLDictionary<TypeConversions::OtherDictionary>>>(lexicalGlobalObject, jsNull());; });
    if (unionValueConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.unionValue = unionValueConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const TypeConversions::Dictionary& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto clampLongValueValue = toJS<IDLClampAdaptor<IDLLong>>(lexicalGlobalObject, throwScope, dictionary.clampLongValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "clampLongValue"_s), clampLongValueValue);
    auto enforceRangeLongValueValue = toJS<IDLEnforceRangeAdaptor<IDLLong>>(lexicalGlobalObject, throwScope, dictionary.enforceRangeLongValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "enforceRangeLongValue"_s), enforceRangeLongValueValue);
    auto longValueValue = toJS<IDLLong>(lexicalGlobalObject, throwScope, dictionary.longValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "longValue"_s), longValueValue);
    auto sequenceValueValue = toJS<IDLSequence<IDLDOMString>>(lexicalGlobalObject, globalObject, throwScope, dictionary.sequenceValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "sequenceValue"_s), sequenceValueValue);
    auto stringValueValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.stringValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "stringValue"_s), stringValueValue);
    auto treatNullAsEmptyStringValueValue = toJS<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, dictionary.treatNullAsEmptyStringValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "treatNullAsEmptyStringValue"_s), treatNullAsEmptyStringValueValue);
    auto unionValueValue = toJS<IDLUnion<IDLInterface<Node>, IDLSequence<IDLDOMString>, IDLDictionary<TypeConversions::OtherDictionary>>>(lexicalGlobalObject, globalObject, throwScope, dictionary.unionValue);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "unionValue"_s), unionValueValue);
    return result;
}

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_setTestLongRecord);
static JSC_DECLARE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_testLongRecord);
static JSC_DECLARE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_setTestNodeRecord);
static JSC_DECLARE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_testNodeRecord);
static JSC_DECLARE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_setTestSequenceRecord);
static JSC_DECLARE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_testSequenceRecord);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testByte);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testByte);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeByte);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeByte);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampByte);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampByte);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testOctet);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testOctet);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeOctet);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeOctet);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampOctet);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampOctet);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testShort);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testShort);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeShort);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeShort);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampShort);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampShort);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testUnsignedShort);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testUnsignedShort);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnsignedShort);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnsignedShort);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampUnsignedShort);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampUnsignedShort);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testUnsignedLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testUnsignedLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnsignedLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnsignedLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampUnsignedLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampUnsignedLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testLongLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testLongLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeLongLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeLongLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampLongLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampLongLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testUnsignedLongLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testUnsignedLongLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnsignedLongLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnsignedLongLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampUnsignedLongLong);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampUnsignedLongLong);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testImpureNaNUnrestrictedDouble);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testImpureNaN2UnrestrictedDouble);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testQuietNaNUnrestrictedDouble);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testPureNaNUnrestrictedDouble);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testFloat);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testFloat);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testUnrestrictedFloat);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testUnrestrictedFloat);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testString);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testString);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testByteString);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testByteString);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testUSVString);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testUSVString);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testTreatNullAsEmptyString);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testTreatNullAsEmptyString);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testUnion);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testUnion);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testDictionary);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testDictionary);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testClampUnion);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testClampUnion);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnion);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnion);
static JSC_DECLARE_CUSTOM_GETTER(jsTypeConversions_testTreatNullAsEmptyStringUnion);
static JSC_DECLARE_CUSTOM_SETTER(setJSTypeConversions_testTreatNullAsEmptyStringUnion);

class JSTypeConversionsPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSTypeConversionsPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSTypeConversionsPrototype* ptr = new (NotNull, JSC::allocateCell<JSTypeConversionsPrototype>(vm)) JSTypeConversionsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSTypeConversionsPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSTypeConversionsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSTypeConversionsPrototype, JSTypeConversionsPrototype::Base);

/* Hash table for prototype */

static const std::array<HashTableValue, 45> JSTypeConversionsPrototypeTableValues {
    HashTableValue { "testByte"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testByte, setJSTypeConversions_testByte } },
    HashTableValue { "testEnforceRangeByte"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeByte, setJSTypeConversions_testEnforceRangeByte } },
    HashTableValue { "testClampByte"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampByte, setJSTypeConversions_testClampByte } },
    HashTableValue { "testOctet"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testOctet, setJSTypeConversions_testOctet } },
    HashTableValue { "testEnforceRangeOctet"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeOctet, setJSTypeConversions_testEnforceRangeOctet } },
    HashTableValue { "testClampOctet"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampOctet, setJSTypeConversions_testClampOctet } },
    HashTableValue { "testShort"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testShort, setJSTypeConversions_testShort } },
    HashTableValue { "testEnforceRangeShort"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeShort, setJSTypeConversions_testEnforceRangeShort } },
    HashTableValue { "testClampShort"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampShort, setJSTypeConversions_testClampShort } },
    HashTableValue { "testUnsignedShort"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testUnsignedShort, setJSTypeConversions_testUnsignedShort } },
    HashTableValue { "testEnforceRangeUnsignedShort"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeUnsignedShort, setJSTypeConversions_testEnforceRangeUnsignedShort } },
    HashTableValue { "testClampUnsignedShort"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampUnsignedShort, setJSTypeConversions_testClampUnsignedShort } },
    HashTableValue { "testLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testLong, setJSTypeConversions_testLong } },
    HashTableValue { "testEnforceRangeLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeLong, setJSTypeConversions_testEnforceRangeLong } },
    HashTableValue { "testClampLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampLong, setJSTypeConversions_testClampLong } },
    HashTableValue { "testUnsignedLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testUnsignedLong, setJSTypeConversions_testUnsignedLong } },
    HashTableValue { "testEnforceRangeUnsignedLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeUnsignedLong, setJSTypeConversions_testEnforceRangeUnsignedLong } },
    HashTableValue { "testClampUnsignedLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampUnsignedLong, setJSTypeConversions_testClampUnsignedLong } },
    HashTableValue { "testLongLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testLongLong, setJSTypeConversions_testLongLong } },
    HashTableValue { "testEnforceRangeLongLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeLongLong, setJSTypeConversions_testEnforceRangeLongLong } },
    HashTableValue { "testClampLongLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampLongLong, setJSTypeConversions_testClampLongLong } },
    HashTableValue { "testUnsignedLongLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testUnsignedLongLong, setJSTypeConversions_testUnsignedLongLong } },
    HashTableValue { "testEnforceRangeUnsignedLongLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeUnsignedLongLong, setJSTypeConversions_testEnforceRangeUnsignedLongLong } },
    HashTableValue { "testClampUnsignedLongLong"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampUnsignedLongLong, setJSTypeConversions_testClampUnsignedLongLong } },
    HashTableValue { "testImpureNaNUnrestrictedDouble"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testImpureNaNUnrestrictedDouble, 0 } },
    HashTableValue { "testImpureNaN2UnrestrictedDouble"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testImpureNaN2UnrestrictedDouble, 0 } },
    HashTableValue { "testQuietNaNUnrestrictedDouble"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testQuietNaNUnrestrictedDouble, 0 } },
    HashTableValue { "testPureNaNUnrestrictedDouble"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testPureNaNUnrestrictedDouble, 0 } },
    HashTableValue { "testFloat"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testFloat, setJSTypeConversions_testFloat } },
    HashTableValue { "testUnrestrictedFloat"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testUnrestrictedFloat, setJSTypeConversions_testUnrestrictedFloat } },
    HashTableValue { "testString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testString, setJSTypeConversions_testString } },
    HashTableValue { "testByteString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testByteString, setJSTypeConversions_testByteString } },
    HashTableValue { "testUSVString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testUSVString, setJSTypeConversions_testUSVString } },
    HashTableValue { "testTreatNullAsEmptyString"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testTreatNullAsEmptyString, setJSTypeConversions_testTreatNullAsEmptyString } },
    HashTableValue { "testUnion"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testUnion, setJSTypeConversions_testUnion } },
    HashTableValue { "testDictionary"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testDictionary, setJSTypeConversions_testDictionary } },
    HashTableValue { "testClampUnion"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testClampUnion, setJSTypeConversions_testClampUnion } },
    HashTableValue { "testEnforceRangeUnion"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testEnforceRangeUnion, setJSTypeConversions_testEnforceRangeUnion } },
    HashTableValue { "testTreatNullAsEmptyStringUnion"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTypeConversions_testTreatNullAsEmptyStringUnion, setJSTypeConversions_testTreatNullAsEmptyStringUnion } },
    HashTableValue { "setTestLongRecord"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTypeConversionsPrototypeFunction_setTestLongRecord, 1 } },
    HashTableValue { "testLongRecord"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTypeConversionsPrototypeFunction_testLongRecord, 0 } },
    HashTableValue { "setTestNodeRecord"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTypeConversionsPrototypeFunction_setTestNodeRecord, 1 } },
    HashTableValue { "testNodeRecord"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTypeConversionsPrototypeFunction_testNodeRecord, 0 } },
    HashTableValue { "setTestSequenceRecord"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTypeConversionsPrototypeFunction_setTestSequenceRecord, 1 } },
    HashTableValue { "testSequenceRecord"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsTypeConversionsPrototypeFunction_testSequenceRecord, 0 } },
};

const ClassInfo JSTypeConversionsPrototype::s_info = { "TypeConversions"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTypeConversionsPrototype) };

void JSTypeConversionsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSTypeConversions::info(), JSTypeConversionsPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSTypeConversions::s_info = { "TypeConversions"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTypeConversions) };

JSTypeConversions::JSTypeConversions(Structure* structure, JSDOMGlobalObject& globalObject, Ref<TypeConversions>&& impl)
    : JSDOMWrapper<TypeConversions>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, TypeConversions>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSTypeConversions::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSTypeConversionsPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSTypeConversionsPrototype::create(vm, &globalObject, structure);
}

JSObject* JSTypeConversions::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSTypeConversions>(vm, globalObject);
}

void JSTypeConversions::destroy(JSC::JSCell* cell)
{
    JSTypeConversions* thisObject = static_cast<JSTypeConversions*>(cell);
    thisObject->JSTypeConversions::~JSTypeConversions();
}

static inline JSValue jsTypeConversions_testByteGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLByte>(lexicalGlobalObject, throwScope, impl.testByte())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testByte, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testByteGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testByteSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLByte>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestByte(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testByte, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testByteSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeByteGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLByte>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeByte())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeByte, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeByteGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeByteSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLByte>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeByte(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeByte, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeByteSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampByteGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLByte>>(lexicalGlobalObject, throwScope, impl.testClampByte())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampByte, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampByteGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampByteSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLByte>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampByte(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampByte, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampByteSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testOctetGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLOctet>(lexicalGlobalObject, throwScope, impl.testOctet())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testOctet, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testOctetGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testOctetSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLOctet>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestOctet(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testOctet, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testOctetSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeOctetGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLOctet>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeOctet())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeOctet, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeOctetGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeOctetSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLOctet>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeOctet(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeOctet, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeOctetSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampOctetGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLOctet>>(lexicalGlobalObject, throwScope, impl.testClampOctet())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampOctet, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampOctetGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampOctetSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLOctet>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampOctet(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampOctet, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampOctetSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testShortGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLShort>(lexicalGlobalObject, throwScope, impl.testShort())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testShortGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testShortSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLShort>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestShort(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testShortSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeShortGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLShort>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeShort())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeShortGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeShortSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLShort>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeShort(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeShortSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampShortGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLShort>>(lexicalGlobalObject, throwScope, impl.testClampShort())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampShortGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampShortSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLShort>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampShort(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampShortSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testUnsignedShortGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedShort>(lexicalGlobalObject, throwScope, impl.testUnsignedShort())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testUnsignedShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testUnsignedShortGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testUnsignedShortSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnsignedShort>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestUnsignedShort(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testUnsignedShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testUnsignedShortSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeUnsignedShortGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLUnsignedShort>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeUnsignedShort())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnsignedShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeUnsignedShortGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeUnsignedShortSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLUnsignedShort>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeUnsignedShort(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnsignedShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeUnsignedShortSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampUnsignedShortGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLUnsignedShort>>(lexicalGlobalObject, throwScope, impl.testClampUnsignedShort())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampUnsignedShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampUnsignedShortGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampUnsignedShortSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLUnsignedShort>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampUnsignedShort(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampUnsignedShort, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampUnsignedShortSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.testLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLLong>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLLong>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLLong>>(lexicalGlobalObject, throwScope, impl.testClampLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testUnsignedLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.testUnsignedLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testUnsignedLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testUnsignedLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testUnsignedLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestUnsignedLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testUnsignedLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testUnsignedLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeUnsignedLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeUnsignedLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnsignedLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeUnsignedLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeUnsignedLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLUnsignedLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeUnsignedLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnsignedLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeUnsignedLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampUnsignedLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.testClampUnsignedLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampUnsignedLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampUnsignedLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampUnsignedLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLUnsignedLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampUnsignedLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampUnsignedLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampUnsignedLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testLongLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLongLong>(lexicalGlobalObject, throwScope, impl.testLongLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testLongLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testLongLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLLongLong>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestLongLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testLongLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeLongLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLLongLong>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeLongLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeLongLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeLongLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLLongLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeLongLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeLongLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampLongLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLLongLong>>(lexicalGlobalObject, throwScope, impl.testClampLongLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampLongLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampLongLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLLongLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampLongLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampLongLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testUnsignedLongLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLongLong>(lexicalGlobalObject, throwScope, impl.testUnsignedLongLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testUnsignedLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testUnsignedLongLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testUnsignedLongLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnsignedLongLong>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestUnsignedLongLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testUnsignedLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testUnsignedLongLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeUnsignedLongLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnforceRangeAdaptor<IDLUnsignedLongLong>>(lexicalGlobalObject, throwScope, impl.testEnforceRangeUnsignedLongLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnsignedLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeUnsignedLongLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeUnsignedLongLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLEnforceRangeAdaptor<IDLUnsignedLongLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeUnsignedLongLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnsignedLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeUnsignedLongLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampUnsignedLongLongGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLClampAdaptor<IDLUnsignedLongLong>>(lexicalGlobalObject, throwScope, impl.testClampUnsignedLongLong())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampUnsignedLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampUnsignedLongLongGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampUnsignedLongLongSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLClampAdaptor<IDLUnsignedLongLong>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampUnsignedLongLong(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampUnsignedLongLong, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampUnsignedLongLongSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testImpureNaNUnrestrictedDoubleGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnrestrictedDouble>(lexicalGlobalObject, throwScope, impl.testImpureNaNUnrestrictedDouble())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testImpureNaNUnrestrictedDouble, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testImpureNaNUnrestrictedDoubleGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsTypeConversions_testImpureNaN2UnrestrictedDoubleGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnrestrictedDouble>(lexicalGlobalObject, throwScope, impl.testImpureNaN2UnrestrictedDouble())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testImpureNaN2UnrestrictedDouble, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testImpureNaN2UnrestrictedDoubleGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsTypeConversions_testQuietNaNUnrestrictedDoubleGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnrestrictedDouble>(lexicalGlobalObject, throwScope, impl.testQuietNaNUnrestrictedDouble())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testQuietNaNUnrestrictedDouble, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testQuietNaNUnrestrictedDoubleGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsTypeConversions_testPureNaNUnrestrictedDoubleGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnrestrictedDouble>(lexicalGlobalObject, throwScope, impl.testPureNaNUnrestrictedDouble())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testPureNaNUnrestrictedDouble, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testPureNaNUnrestrictedDoubleGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsTypeConversions_testFloatGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLFloat>(lexicalGlobalObject, throwScope, impl.testFloat())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testFloat, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testFloatGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testFloatSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLFloat>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestFloat(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testFloat, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testFloatSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testUnrestrictedFloatGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnrestrictedFloat>(lexicalGlobalObject, throwScope, impl.testUnrestrictedFloat())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testUnrestrictedFloat, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testUnrestrictedFloatGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testUnrestrictedFloatSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnrestrictedFloat>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestUnrestrictedFloat(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testUnrestrictedFloat, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testUnrestrictedFloatSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testStringGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.testString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testStringSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLDOMString>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testByteStringGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLByteString>(lexicalGlobalObject, throwScope, impl.testByteString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testByteString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testByteStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testByteStringSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLByteString>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestByteString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testByteString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testByteStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testUSVStringGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUSVString>(lexicalGlobalObject, throwScope, impl.testUSVString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testUSVString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testUSVStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testUSVStringSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUSVString>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestUSVString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testUSVString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testUSVStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testTreatNullAsEmptyStringGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.testTreatNullAsEmptyString())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testTreatNullAsEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testTreatNullAsEmptyStringGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testTreatNullAsEmptyStringSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestTreatNullAsEmptyString(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testTreatNullAsEmptyString, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testTreatNullAsEmptyStringSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testUnionGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnion<IDLDOMString, IDLLong, IDLBoolean, IDLInterface<Node>, IDLSequence<IDLLong>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.testUnion())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testUnionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testUnionSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnion<IDLDOMString, IDLLong, IDLBoolean, IDLInterface<Node>, IDLSequence<IDLLong>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestUnion(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testUnionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testDictionaryGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDictionary<TypeConversions::Dictionary>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.testDictionary())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testDictionary, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testDictionaryGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testDictionarySetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLDictionary<TypeConversions::Dictionary>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestDictionary(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testDictionary, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testDictionarySetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testClampUnionGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnion<IDLDOMString, IDLClampAdaptor<IDLLong>, IDLSequence<IDLClampAdaptor<IDLLong>>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.testClampUnion())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testClampUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testClampUnionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testClampUnionSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnion<IDLDOMString, IDLClampAdaptor<IDLLong>, IDLSequence<IDLClampAdaptor<IDLLong>>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestClampUnion(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testClampUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testClampUnionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testEnforceRangeUnionGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnion<IDLDOMString, IDLEnforceRangeAdaptor<IDLLong>, IDLSequence<IDLEnforceRangeAdaptor<IDLLong>>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.testEnforceRangeUnion())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testEnforceRangeUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testEnforceRangeUnionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testEnforceRangeUnionSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnion<IDLDOMString, IDLEnforceRangeAdaptor<IDLLong>, IDLSequence<IDLEnforceRangeAdaptor<IDLLong>>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestEnforceRangeUnion(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testEnforceRangeUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testEnforceRangeUnionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsTypeConversions_testTreatNullAsEmptyStringUnionGetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnion<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>, IDLLong, IDLSequence<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.testTreatNullAsEmptyStringUnion())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTypeConversions_testTreatNullAsEmptyStringUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::get<jsTypeConversions_testTreatNullAsEmptyStringUnionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSTypeConversions_testTreatNullAsEmptyStringUnionSetter(JSGlobalObject& lexicalGlobalObject, JSTypeConversions& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLUnion<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>, IDLLong, IDLSequence<IDLLegacyNullToEmptyStringAdaptor<IDLDOMString>>>>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setTestTreatNullAsEmptyStringUnion(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSTypeConversions_testTreatNullAsEmptyStringUnion, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSTypeConversions>::set<setJSTypeConversions_testTreatNullAsEmptyStringUnionSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsTypeConversionsPrototypeFunction_setTestLongRecordBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTypeConversions>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto recordConversionResult = convert<IDLRecord<IDLDOMString, IDLLong>>(*lexicalGlobalObject, argument0.value());
    if (recordConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTestLongRecord(recordConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_setTestLongRecord, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTypeConversions>::call<jsTypeConversionsPrototypeFunction_setTestLongRecordBody>(*lexicalGlobalObject, *callFrame, "setTestLongRecord");
}

static inline JSC::EncodedJSValue jsTypeConversionsPrototypeFunction_testLongRecordBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTypeConversions>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLRecord<IDLDOMString, IDLLong>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.testLongRecord())));
}

JSC_DEFINE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_testLongRecord, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTypeConversions>::call<jsTypeConversionsPrototypeFunction_testLongRecordBody>(*lexicalGlobalObject, *callFrame, "testLongRecord");
}

static inline JSC::EncodedJSValue jsTypeConversionsPrototypeFunction_setTestNodeRecordBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTypeConversions>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto recordConversionResult = convert<IDLRecord<IDLUSVString, IDLInterface<Node>>>(*lexicalGlobalObject, argument0.value());
    if (recordConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTestNodeRecord(recordConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_setTestNodeRecord, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTypeConversions>::call<jsTypeConversionsPrototypeFunction_setTestNodeRecordBody>(*lexicalGlobalObject, *callFrame, "setTestNodeRecord");
}

static inline JSC::EncodedJSValue jsTypeConversionsPrototypeFunction_testNodeRecordBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTypeConversions>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLRecord<IDLUSVString, IDLInterface<Node>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.testNodeRecord())));
}

JSC_DEFINE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_testNodeRecord, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTypeConversions>::call<jsTypeConversionsPrototypeFunction_testNodeRecordBody>(*lexicalGlobalObject, *callFrame, "testNodeRecord");
}

static inline JSC::EncodedJSValue jsTypeConversionsPrototypeFunction_setTestSequenceRecordBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTypeConversions>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto recordConversionResult = convert<IDLRecord<IDLByteString, IDLSequence<IDLDOMString>>>(*lexicalGlobalObject, argument0.value());
    if (recordConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.setTestSequenceRecord(recordConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_setTestSequenceRecord, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTypeConversions>::call<jsTypeConversionsPrototypeFunction_setTestSequenceRecordBody>(*lexicalGlobalObject, *callFrame, "setTestSequenceRecord");
}

static inline JSC::EncodedJSValue jsTypeConversionsPrototypeFunction_testSequenceRecordBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSTypeConversions>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLRecord<IDLByteString, IDLSequence<IDLDOMString>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.testSequenceRecord())));
}

JSC_DEFINE_HOST_FUNCTION(jsTypeConversionsPrototypeFunction_testSequenceRecord, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSTypeConversions>::call<jsTypeConversionsPrototypeFunction_testSequenceRecordBody>(*lexicalGlobalObject, *callFrame, "testSequenceRecord");
}

JSC::GCClient::IsoSubspace* JSTypeConversions::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSTypeConversions, UseCustomHeapCellType::No>(vm, "JSTypeConversions"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForTypeConversions.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForTypeConversions = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForTypeConversions.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForTypeConversions = std::forward<decltype(space)>(space); }
    );
}

void JSTypeConversions::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSTypeConversions*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSTypeConversionsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSTypeConversionsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsTypeConversions = static_cast<JSTypeConversions*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsTypeConversions->protectedWrapped().ptr(), jsTypeConversions);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7TypeConversions@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15TypeConversionsE[]; }
#endif
template<std::same_as<TypeConversions> T>
static inline void verifyVTable(TypeConversions* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7TypeConversions@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore15TypeConversionsE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // TypeConversions has subclasses. If TypeConversions has subclasses that get passed
        // to toJS() we currently require TypeConversions you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<TypeConversions>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<TypeConversions>(impl.ptr());
#endif
    return createWrapper<TypeConversions>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, TypeConversions& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

TypeConversions* JSTypeConversions::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSTypeConversions*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
