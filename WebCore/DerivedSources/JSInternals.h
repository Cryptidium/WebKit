/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#pragma once

#include "Internals.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMWrapper.h"
#include <wtf/NeverDestroyed.h>

namespace WebCore {

class WEBCORE_TESTSUPPORT_EXPORT JSInternals : public JSDOMWrapper<Internals> {
public:
    using Base = JSDOMWrapper<Internals>;
    static JSInternals* create(JSC::Structure* structure, JSDOMGlobalObject* globalObject, Ref<Internals>&& impl)
    {
        SUPPRESS_UNCOUNTED_LOCAL auto& vm = globalObject->vm();
        JSInternals* ptr = new (NotNull, JSC::allocateCell<JSInternals>(vm)) JSInternals(structure, *globalObject, WTFMove(impl));
        ptr->finishCreation(vm);
        return ptr;
    }

    static JSC::JSObject* createPrototype(JSC::VM&, JSDOMGlobalObject&);
    static JSC::JSObject* prototype(JSC::VM&, JSDOMGlobalObject&);
    static Internals* toWrapped(JSC::VM&, JSC::JSValue);
    static void destroy(JSC::JSCell*);

    DECLARE_INFO;

    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info(), JSC::NonArray);
    }

    template<typename, JSC::SubspaceAccess mode> static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        if constexpr (mode == JSC::SubspaceAccess::Concurrently)
            return nullptr;
        return subspaceForImpl(vm);
    }
    static JSC::GCClient::IsoSubspace* subspaceForImpl(JSC::VM& vm);
    static void analyzeHeap(JSCell*, JSC::HeapAnalyzer&);
protected:
    JSInternals(JSC::Structure*, JSDOMGlobalObject&, Ref<Internals>&&);

    DECLARE_DEFAULT_FINISH_CREATION;
};

class WEBCORE_TESTSUPPORT_EXPORT JSInternalsOwner final : public JSC::WeakHandleOwner {
public:
    bool isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown>, void* context, JSC::AbstractSlotVisitor&, ASCIILiteral*) final;
    void finalize(JSC::Handle<JSC::Unknown>, void* context) final;
};

inline JSC::WeakHandleOwner* wrapperOwner(DOMWrapperWorld&, Internals*)
{
    static NeverDestroyed<JSInternalsOwner> owner;
    return &owner.get();
}

inline void* wrapperKey(Internals* wrappableObject)
{
    return wrappableObject;
}

WEBCORE_TESTSUPPORT_EXPORT JSC::JSValue toJS(JSC::JSGlobalObject*, JSDOMGlobalObject*, Internals&);
inline JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, Internals* impl) { return impl ? toJS(lexicalGlobalObject, globalObject, *impl) : JSC::jsNull(); }
JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject*, Ref<Internals>&&);
ALWAYS_INLINE JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, Internals& impl) { return toJSNewlyCreated(lexicalGlobalObject, globalObject, Ref { impl }); }
inline JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RefPtr<Internals>&& impl) { return impl ? toJSNewlyCreated(lexicalGlobalObject, globalObject, impl.releaseNonNull()) : JSC::jsNull(); }

template<> struct JSDOMWrapperConverterTraits<Internals> {
    using WrapperClass = JSInternals;
    using ToWrappedReturnType = Internals*;
};
String convertEnumerationToString(Internals::PageOverlayType);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::PageOverlayType);

template<> std::optional<Internals::PageOverlayType> parseEnumerationFromString<Internals::PageOverlayType>(const String&);
template<> std::optional<Internals::PageOverlayType> parseEnumeration<Internals::PageOverlayType>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::PageOverlayType>();

String convertEnumerationToString(Internals::CachePolicy);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::CachePolicy);

template<> std::optional<Internals::CachePolicy> parseEnumerationFromString<Internals::CachePolicy>(const String&);
template<> std::optional<Internals::CachePolicy> parseEnumeration<Internals::CachePolicy>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::CachePolicy>();

String convertEnumerationToString(Internals::ResourceLoadPriority);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::ResourceLoadPriority);

template<> std::optional<Internals::ResourceLoadPriority> parseEnumerationFromString<Internals::ResourceLoadPriority>(const String&);
template<> std::optional<Internals::ResourceLoadPriority> parseEnumeration<Internals::ResourceLoadPriority>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::ResourceLoadPriority>();

String convertEnumerationToString(Internals::AutoFillButtonType);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AutoFillButtonType);

template<> std::optional<Internals::AutoFillButtonType> parseEnumerationFromString<Internals::AutoFillButtonType>(const String&);
template<> std::optional<Internals::AutoFillButtonType> parseEnumeration<Internals::AutoFillButtonType>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AutoFillButtonType>();

String convertEnumerationToString(Internals::UserInterfaceLayoutDirection);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::UserInterfaceLayoutDirection);

template<> std::optional<Internals::UserInterfaceLayoutDirection> parseEnumerationFromString<Internals::UserInterfaceLayoutDirection>(const String&);
template<> std::optional<Internals::UserInterfaceLayoutDirection> parseEnumeration<Internals::UserInterfaceLayoutDirection>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::UserInterfaceLayoutDirection>();

String convertEnumerationToString(Internals::BaseWritingDirection);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::BaseWritingDirection);

template<> std::optional<Internals::BaseWritingDirection> parseEnumerationFromString<Internals::BaseWritingDirection>(const String&);
template<> std::optional<Internals::BaseWritingDirection> parseEnumeration<Internals::BaseWritingDirection>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::BaseWritingDirection>();

String convertEnumerationToString(Internals::EventThrottlingBehavior);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::EventThrottlingBehavior);

template<> std::optional<Internals::EventThrottlingBehavior> parseEnumerationFromString<Internals::EventThrottlingBehavior>(const String&);
template<> std::optional<Internals::EventThrottlingBehavior> parseEnumeration<Internals::EventThrottlingBehavior>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::EventThrottlingBehavior>();

String convertEnumerationToString(Internals::CompositingPolicy);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::CompositingPolicy);

template<> std::optional<Internals::CompositingPolicy> parseEnumerationFromString<Internals::CompositingPolicy>(const String&);
template<> std::optional<Internals::CompositingPolicy> parseEnumeration<Internals::CompositingPolicy>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::CompositingPolicy>();

#if ENABLE(VIDEO)

String convertEnumerationToString(Internals::PlaybackControlsPurpose);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::PlaybackControlsPurpose);

template<> std::optional<Internals::PlaybackControlsPurpose> parseEnumerationFromString<Internals::PlaybackControlsPurpose>(const String&);
template<> std::optional<Internals::PlaybackControlsPurpose> parseEnumeration<Internals::PlaybackControlsPurpose>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::PlaybackControlsPurpose>();

#endif

#if ENABLE(VIDEO)

String convertEnumerationToString(Internals::MediaSessionState);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::MediaSessionState);

template<> std::optional<Internals::MediaSessionState> parseEnumerationFromString<Internals::MediaSessionState>(const String&);
template<> std::optional<Internals::MediaSessionState> parseEnumeration<Internals::MediaSessionState>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::MediaSessionState>();

#endif

String convertEnumerationToString(Internals::ContentSizeCategory);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::ContentSizeCategory);

template<> std::optional<Internals::ContentSizeCategory> parseEnumerationFromString<Internals::ContentSizeCategory>(const String&);
template<> std::optional<Internals::ContentSizeCategory> parseEnumeration<Internals::ContentSizeCategory>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::ContentSizeCategory>();

String convertEnumerationToString(Internals::TreeType);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::TreeType);

template<> std::optional<Internals::TreeType> parseEnumerationFromString<Internals::TreeType>(const String&);
template<> std::optional<Internals::TreeType> parseEnumeration<Internals::TreeType>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::TreeType>();

#if ENABLE(WEBGL)

String convertEnumerationToString(Internals::SimulatedWebGLContextEvent);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::SimulatedWebGLContextEvent);

template<> std::optional<Internals::SimulatedWebGLContextEvent> parseEnumerationFromString<Internals::SimulatedWebGLContextEvent>(const String&);
template<> std::optional<Internals::SimulatedWebGLContextEvent> parseEnumeration<Internals::SimulatedWebGLContextEvent>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::SimulatedWebGLContextEvent>();

#endif

String convertEnumerationToString(Internals::AudioSessionCategory);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AudioSessionCategory);

template<> std::optional<Internals::AudioSessionCategory> parseEnumerationFromString<Internals::AudioSessionCategory>(const String&);
template<> std::optional<Internals::AudioSessionCategory> parseEnumeration<Internals::AudioSessionCategory>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AudioSessionCategory>();

String convertEnumerationToString(Internals::AudioSessionMode);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AudioSessionMode);

template<> std::optional<Internals::AudioSessionMode> parseEnumerationFromString<Internals::AudioSessionMode>(const String&);
template<> std::optional<Internals::AudioSessionMode> parseEnumeration<Internals::AudioSessionMode>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AudioSessionMode>();

String convertEnumerationToString(Internals::RouteSharingPolicy);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::RouteSharingPolicy);

template<> std::optional<Internals::RouteSharingPolicy> parseEnumerationFromString<Internals::RouteSharingPolicy>(const String&);
template<> std::optional<Internals::RouteSharingPolicy> parseEnumeration<Internals::RouteSharingPolicy>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::RouteSharingPolicy>();

String convertEnumerationToString(Internals::AutoplayPolicy);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AutoplayPolicy);

template<> std::optional<Internals::AutoplayPolicy> parseEnumerationFromString<Internals::AutoplayPolicy>(const String&);
template<> std::optional<Internals::AutoplayPolicy> parseEnumeration<Internals::AutoplayPolicy>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AutoplayPolicy>();

#if ENABLE(WEBGL)

String convertEnumerationToString(Internals::RequestedGPU);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::RequestedGPU);

template<> std::optional<Internals::RequestedGPU> parseEnumerationFromString<Internals::RequestedGPU>(const String&);
template<> std::optional<Internals::RequestedGPU> parseEnumeration<Internals::RequestedGPU>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::RequestedGPU>();

#endif

String convertEnumerationToString(Internals::HEVCParameterCodec);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::HEVCParameterCodec);

template<> std::optional<Internals::HEVCParameterCodec> parseEnumerationFromString<Internals::HEVCParameterCodec>(const String&);
template<> std::optional<Internals::HEVCParameterCodec> parseEnumeration<Internals::HEVCParameterCodec>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::HEVCParameterCodec>();

String convertEnumerationToString(Internals::AV1ConfigurationProfile);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AV1ConfigurationProfile);

template<> std::optional<Internals::AV1ConfigurationProfile> parseEnumerationFromString<Internals::AV1ConfigurationProfile>(const String&);
template<> std::optional<Internals::AV1ConfigurationProfile> parseEnumeration<Internals::AV1ConfigurationProfile>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AV1ConfigurationProfile>();

String convertEnumerationToString(Internals::AV1ConfigurationLevel);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AV1ConfigurationLevel);

template<> std::optional<Internals::AV1ConfigurationLevel> parseEnumerationFromString<Internals::AV1ConfigurationLevel>(const String&);
template<> std::optional<Internals::AV1ConfigurationLevel> parseEnumeration<Internals::AV1ConfigurationLevel>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AV1ConfigurationLevel>();

String convertEnumerationToString(Internals::AV1ConfigurationTier);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AV1ConfigurationTier);

template<> std::optional<Internals::AV1ConfigurationTier> parseEnumerationFromString<Internals::AV1ConfigurationTier>(const String&);
template<> std::optional<Internals::AV1ConfigurationTier> parseEnumeration<Internals::AV1ConfigurationTier>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AV1ConfigurationTier>();

String convertEnumerationToString(Internals::AV1ConfigurationRange);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::AV1ConfigurationRange);

template<> std::optional<Internals::AV1ConfigurationRange> parseEnumerationFromString<Internals::AV1ConfigurationRange>(const String&);
template<> std::optional<Internals::AV1ConfigurationRange> parseEnumeration<Internals::AV1ConfigurationRange>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::AV1ConfigurationRange>();

String convertEnumerationToString(Internals::RenderingMode);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::RenderingMode);

template<> std::optional<Internals::RenderingMode> parseEnumerationFromString<Internals::RenderingMode>(const String&);
template<> std::optional<Internals::RenderingMode> parseEnumeration<Internals::RenderingMode>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::RenderingMode>();

String convertEnumerationToString(Internals::ContentsFormat);
template<> JSC::JSString* convertEnumerationToJS(JSC::VM&, Internals::ContentsFormat);

template<> std::optional<Internals::ContentsFormat> parseEnumerationFromString<Internals::ContentsFormat>(const String&);
template<> std::optional<Internals::ContentsFormat> parseEnumeration<Internals::ContentsFormat>(JSC::JSGlobalObject&, JSC::JSValue);
template<> ASCIILiteral expectedEnumerationValues<Internals::ContentsFormat>();

#if ENABLE(VIDEO)

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::NowPlayingState&);

#endif

#if ENABLE(VIDEO)

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::NowPlayingInfoArtwork&);

#endif

#if ENABLE(VIDEO)

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::NowPlayingMetadata&);

#endif

#if ENABLE(VIDEO)

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::MediaUsageState&);

#endif

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::FullscreenInsets>> convertDictionary<Internals::FullscreenInsets>(JSC::JSGlobalObject&, JSC::JSValue);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::HEVCParameterSet>> convertDictionary<Internals::HEVCParameterSet>(JSC::JSGlobalObject&, JSC::JSValue);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::HEVCParameterSet&);

template<> ConversionResult<IDLDictionary<Internals::AV1CodecConfigurationRecord>> convertDictionary<Internals::AV1CodecConfigurationRecord>(JSC::JSGlobalObject&, JSC::JSValue);

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::AV1CodecConfigurationRecord&);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::DoViParameterSet>> convertDictionary<Internals::DoViParameterSet>(JSC::JSGlobalObject&, JSC::JSValue);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::DoViParameterSet&);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::VPCodecConfigurationRecord&);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::AcceleratedAnimation&);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::CookieData>> convertDictionary<Internals::CookieData>(JSC::JSGlobalObject&, JSC::JSValue);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::CookieData&);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::TextIndicatorInfo&);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::TextIndicatorOptions>> convertDictionary<Internals::TextIndicatorOptions>(JSC::JSGlobalObject&, JSC::JSValue);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::TextIteratorState&);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::ImageOverlayText>> convertDictionary<Internals::ImageOverlayText>(JSC::JSGlobalObject&, JSC::JSValue);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::ImageOverlayLine>> convertDictionary<Internals::ImageOverlayLine>(JSC::JSGlobalObject&, JSC::JSValue);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::ImageOverlayBlock>> convertDictionary<Internals::ImageOverlayBlock>(JSC::JSGlobalObject&, JSC::JSValue);

template<> WEBCORE_TESTSUPPORT_EXPORT ConversionResult<IDLDictionary<Internals::ImageOverlayDataDetector>> convertDictionary<Internals::ImageOverlayDataDetector>(JSC::JSGlobalObject&, JSC::JSValue);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::SelectorFilterHashCounts&);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::PDFAnnotationRect&);

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::ImageBufferResourceLimits&);

#if ENABLE(DAMAGE_TRACKING)

WEBCORE_TESTSUPPORT_EXPORT JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject&, JSDOMGlobalObject&, const Internals::FrameDamage&);

#endif


} // namespace WebCore
