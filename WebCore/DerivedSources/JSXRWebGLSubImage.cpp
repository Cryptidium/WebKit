/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR_LAYERS)

#include "JSXRWebGLSubImage.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMWrapperCache.h"
#include "JSWebGLTexture.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImageConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_colorTexture);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_depthStencilTexture);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_motionVectorTexture);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_imageIndex);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_colorTextureWidth);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_colorTextureHeight);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_depthStencilTextureWidth);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_depthStencilTextureHeight);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_motionVectorTextureWidth);
static JSC_DECLARE_CUSTOM_GETTER(jsXRWebGLSubImage_motionVectorTextureHeight);

class JSXRWebGLSubImagePrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSXRWebGLSubImagePrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSXRWebGLSubImagePrototype* ptr = new (NotNull, JSC::allocateCell<JSXRWebGLSubImagePrototype>(vm)) JSXRWebGLSubImagePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXRWebGLSubImagePrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSXRWebGLSubImagePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXRWebGLSubImagePrototype, JSXRWebGLSubImagePrototype::Base);

using JSXRWebGLSubImageDOMConstructor = JSDOMConstructorNotConstructable<JSXRWebGLSubImage>;

template<> const ClassInfo JSXRWebGLSubImageDOMConstructor::s_info = { "XRWebGLSubImage"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRWebGLSubImageDOMConstructor) };

template<> JSValue JSXRWebGLSubImageDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSXRSubImage::getConstructor(vm, &globalObject);
}

template<> void JSXRWebGLSubImageDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRWebGLSubImage"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSXRWebGLSubImage::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 11> JSXRWebGLSubImagePrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImageConstructor, 0 } },
    HashTableValue { "colorTexture"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_colorTexture, 0 } },
    HashTableValue { "depthStencilTexture"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_depthStencilTexture, 0 } },
    HashTableValue { "motionVectorTexture"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_motionVectorTexture, 0 } },
    HashTableValue { "imageIndex"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_imageIndex, 0 } },
    HashTableValue { "colorTextureWidth"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_colorTextureWidth, 0 } },
    HashTableValue { "colorTextureHeight"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_colorTextureHeight, 0 } },
    HashTableValue { "depthStencilTextureWidth"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_depthStencilTextureWidth, 0 } },
    HashTableValue { "depthStencilTextureHeight"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_depthStencilTextureHeight, 0 } },
    HashTableValue { "motionVectorTextureWidth"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_motionVectorTextureWidth, 0 } },
    HashTableValue { "motionVectorTextureHeight"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRWebGLSubImage_motionVectorTextureHeight, 0 } },
};

const ClassInfo JSXRWebGLSubImagePrototype::s_info = { "XRWebGLSubImage"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRWebGLSubImagePrototype) };

void JSXRWebGLSubImagePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSXRWebGLSubImage::info(), JSXRWebGLSubImagePrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSXRWebGLSubImage::s_info = { "XRWebGLSubImage"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRWebGLSubImage) };

JSXRWebGLSubImage::JSXRWebGLSubImage(Structure* structure, JSDOMGlobalObject& globalObject, Ref<XRWebGLSubImage>&& impl)
    : JSXRSubImage(structure, globalObject, WTFMove(impl))
{
}

Ref<XRWebGLSubImage> JSXRWebGLSubImage::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, XRWebGLSubImage>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSXRWebGLSubImage::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSXRWebGLSubImagePrototype::createStructure(vm, &globalObject, JSXRSubImage::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSXRWebGLSubImagePrototype::create(vm, &globalObject, structure);
}

JSObject* JSXRWebGLSubImage::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSXRWebGLSubImage>(vm, globalObject);
}

JSValue JSXRWebGLSubImage::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSXRWebGLSubImageDOMConstructor, DOMConstructorID::XRWebGLSubImage>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImageConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSXRWebGLSubImagePrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSXRWebGLSubImage::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsXRWebGLSubImage_colorTextureGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebGLTexture>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.colorTexture())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_colorTexture, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_colorTextureGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_depthStencilTextureGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<WebGLTexture>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.depthStencilTexture())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_depthStencilTexture, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_depthStencilTextureGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_motionVectorTextureGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<WebGLTexture>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.motionVectorTexture())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_motionVectorTexture, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_motionVectorTextureGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_imageIndexGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.imageIndex())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_imageIndex, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_imageIndexGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_colorTextureWidthGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.colorTextureWidth())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_colorTextureWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_colorTextureWidthGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_colorTextureHeightGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.colorTextureHeight())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_colorTextureHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_colorTextureHeightGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_depthStencilTextureWidthGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.depthStencilTextureWidth())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_depthStencilTextureWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_depthStencilTextureWidthGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_depthStencilTextureHeightGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.depthStencilTextureHeight())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_depthStencilTextureHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_depthStencilTextureHeightGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_motionVectorTextureWidthGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.motionVectorTextureWidth())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_motionVectorTextureWidth, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_motionVectorTextureWidthGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRWebGLSubImage_motionVectorTextureHeightGetter(JSGlobalObject& lexicalGlobalObject, JSXRWebGLSubImage& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnsignedLong>>(lexicalGlobalObject, throwScope, impl.motionVectorTextureHeight())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRWebGLSubImage_motionVectorTextureHeight, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRWebGLSubImage>::get<jsXRWebGLSubImage_motionVectorTextureHeightGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

JSC::GCClient::IsoSubspace* JSXRWebGLSubImage::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSXRWebGLSubImage, UseCustomHeapCellType::No>(vm, "JSXRWebGLSubImage"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForXRWebGLSubImage.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForXRWebGLSubImage = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForXRWebGLSubImage.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForXRWebGLSubImage = std::forward<decltype(space)>(space); }
    );
}

void JSXRWebGLSubImage::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSXRWebGLSubImage*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}


}

#endif // ENABLE(WEBXR_LAYERS)
