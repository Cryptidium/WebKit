/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtpEncodingParameters.h"

#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include "JSRTCPriorityType.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_RTC)

template<> ConversionResult<IDLDictionary<RTCRtpEncodingParameters>> convertDictionary<RTCRtpEncodingParameters>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    RTCRtpEncodingParameters result;
    JSValue ridValue;
    if (isNullOrUndefined)
        ridValue = jsUndefined();
    else {
        ridValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "rid"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!ridValue.isUndefined()) {
        auto ridConversionResult = convert<IDLDOMString>(lexicalGlobalObject, ridValue);
        if (ridConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.rid = ridConversionResult.releaseReturnValue();
    }
    JSValue activeValue;
    if (isNullOrUndefined)
        activeValue = jsUndefined();
    else {
        activeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "active"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto activeConversionResult = convertOptionalWithDefault<IDLBoolean>(lexicalGlobalObject, activeValue, [&]() -> ConversionResult<IDLBoolean> { return Converter<IDLBoolean>::ReturnType { true }; });
    if (activeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.active = activeConversionResult.releaseReturnValue();
    JSValue maxBitrateValue;
    if (isNullOrUndefined)
        maxBitrateValue = jsUndefined();
    else {
        maxBitrateValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "maxBitrate"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!maxBitrateValue.isUndefined()) {
        auto maxBitrateConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, maxBitrateValue);
        if (maxBitrateConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.maxBitrate = maxBitrateConversionResult.releaseReturnValue();
    }
    JSValue maxFramerateValue;
    if (isNullOrUndefined)
        maxFramerateValue = jsUndefined();
    else {
        maxFramerateValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "maxFramerate"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!maxFramerateValue.isUndefined()) {
        auto maxFramerateConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, maxFramerateValue);
        if (maxFramerateConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.maxFramerate = maxFramerateConversionResult.releaseReturnValue();
    }
    JSValue networkPriorityValue;
    if (isNullOrUndefined)
        networkPriorityValue = jsUndefined();
    else {
        networkPriorityValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "networkPriority"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!networkPriorityValue.isUndefined()) {
        auto networkPriorityConversionResult = convert<IDLEnumeration<RTCPriorityType>>(lexicalGlobalObject, networkPriorityValue);
        if (networkPriorityConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.networkPriority = networkPriorityConversionResult.releaseReturnValue();
    }
    JSValue priorityValue;
    if (isNullOrUndefined)
        priorityValue = jsUndefined();
    else {
        priorityValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "priority"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!priorityValue.isUndefined()) {
        auto priorityConversionResult = convert<IDLEnumeration<RTCPriorityType>>(lexicalGlobalObject, priorityValue);
        if (priorityConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.priority = priorityConversionResult.releaseReturnValue();
    }
    JSValue scaleResolutionDownByValue;
    if (isNullOrUndefined)
        scaleResolutionDownByValue = jsUndefined();
    else {
        scaleResolutionDownByValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "scaleResolutionDownBy"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!scaleResolutionDownByValue.isUndefined()) {
        auto scaleResolutionDownByConversionResult = convert<IDLDouble>(lexicalGlobalObject, scaleResolutionDownByValue);
        if (scaleResolutionDownByConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.scaleResolutionDownBy = scaleResolutionDownByConversionResult.releaseReturnValue();
    }
    JSValue ssrcValue;
    if (isNullOrUndefined)
        ssrcValue = jsUndefined();
    else {
        ssrcValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "ssrc"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!ssrcValue.isUndefined()) {
        auto ssrcConversionResult = convert<IDLUnsignedLong>(lexicalGlobalObject, ssrcValue);
        if (ssrcConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.ssrc = ssrcConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const RTCRtpEncodingParameters& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLDOMString::isNullValue(dictionary.rid)) {
        auto ridValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.rid));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "rid"_s), ridValue);
    }
    auto activeValue = toJS<IDLBoolean>(lexicalGlobalObject, throwScope, dictionary.active);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "active"_s), activeValue);
    if (!IDLUnsignedLong::isNullValue(dictionary.maxBitrate)) {
        auto maxBitrateValue = toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, IDLUnsignedLong::extractValueFromNullable(dictionary.maxBitrate));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "maxBitrate"_s), maxBitrateValue);
    }
    if (!IDLUnsignedLong::isNullValue(dictionary.maxFramerate)) {
        auto maxFramerateValue = toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, IDLUnsignedLong::extractValueFromNullable(dictionary.maxFramerate));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "maxFramerate"_s), maxFramerateValue);
    }
    if (!IDLEnumeration<RTCPriorityType>::isNullValue(dictionary.networkPriority)) {
        auto networkPriorityValue = toJS<IDLEnumeration<RTCPriorityType>>(lexicalGlobalObject, throwScope, IDLEnumeration<RTCPriorityType>::extractValueFromNullable(dictionary.networkPriority));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "networkPriority"_s), networkPriorityValue);
    }
    if (!IDLEnumeration<RTCPriorityType>::isNullValue(dictionary.priority)) {
        auto priorityValue = toJS<IDLEnumeration<RTCPriorityType>>(lexicalGlobalObject, throwScope, IDLEnumeration<RTCPriorityType>::extractValueFromNullable(dictionary.priority));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "priority"_s), priorityValue);
    }
    if (!IDLDouble::isNullValue(dictionary.scaleResolutionDownBy)) {
        auto scaleResolutionDownByValue = toJS<IDLDouble>(lexicalGlobalObject, throwScope, IDLDouble::extractValueFromNullable(dictionary.scaleResolutionDownBy));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "scaleResolutionDownBy"_s), scaleResolutionDownByValue);
    }
    if (!IDLUnsignedLong::isNullValue(dictionary.ssrc)) {
        auto ssrcValue = toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, IDLUnsignedLong::extractValueFromNullable(dictionary.ssrc));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "ssrc"_s), ssrcValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_RTC)
