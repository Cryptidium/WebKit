/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PAYMENT_REQUEST)

#include "JSPaymentResponse.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "Document.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSPaymentAddress.h"
#include "JSPaymentComplete.h"
#include "JSPaymentCompleteDetails.h"
#include "JSPaymentValidationErrors.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsPaymentResponsePrototypeFunction_toJSON);
static JSC_DECLARE_HOST_FUNCTION(jsPaymentResponsePrototypeFunction_complete);
static JSC_DECLARE_HOST_FUNCTION(jsPaymentResponsePrototypeFunction_retry);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponseConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_requestId);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_methodName);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_details);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_shippingAddress);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_shippingOption);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_payerName);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_payerEmail);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_payerPhone);
static JSC_DECLARE_CUSTOM_GETTER(jsPaymentResponse_onpayerdetailchange);
static JSC_DECLARE_CUSTOM_SETTER(setJSPaymentResponse_onpayerdetailchange);

class JSPaymentResponsePrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSPaymentResponsePrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSPaymentResponsePrototype* ptr = new (NotNull, JSC::allocateCell<JSPaymentResponsePrototype>(vm)) JSPaymentResponsePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSPaymentResponsePrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSPaymentResponsePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSPaymentResponsePrototype, JSPaymentResponsePrototype::Base);

using JSPaymentResponseDOMConstructor = JSDOMConstructorNotConstructable<JSPaymentResponse>;

template<> const ClassInfo JSPaymentResponseDOMConstructor::s_info = { "PaymentResponse"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPaymentResponseDOMConstructor) };

template<> JSValue JSPaymentResponseDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSPaymentResponseDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "PaymentResponse"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSPaymentResponse::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 13> JSPaymentResponsePrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponseConstructor, 0 } },
    HashTableValue { "requestId"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_requestId, 0 } },
    HashTableValue { "methodName"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_methodName, 0 } },
    HashTableValue { "details"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_details, 0 } },
    HashTableValue { "shippingAddress"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_shippingAddress, 0 } },
    HashTableValue { "shippingOption"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_shippingOption, 0 } },
    HashTableValue { "payerName"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_payerName, 0 } },
    HashTableValue { "payerEmail"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_payerEmail, 0 } },
    HashTableValue { "payerPhone"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_payerPhone, 0 } },
    HashTableValue { "onpayerdetailchange"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsPaymentResponse_onpayerdetailchange, setJSPaymentResponse_onpayerdetailchange } },
    HashTableValue { "toJSON"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPaymentResponsePrototypeFunction_toJSON, 0 } },
    HashTableValue { "complete"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPaymentResponsePrototypeFunction_complete, 0 } },
    HashTableValue { "retry"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsPaymentResponsePrototypeFunction_retry, 0 } },
};

const ClassInfo JSPaymentResponsePrototype::s_info = { "PaymentResponse"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPaymentResponsePrototype) };

void JSPaymentResponsePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSPaymentResponse::info(), JSPaymentResponsePrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSPaymentResponse::s_info = { "PaymentResponse"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSPaymentResponse) };

JSPaymentResponse::JSPaymentResponse(Structure* structure, JSDOMGlobalObject& globalObject, Ref<PaymentResponse>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<PaymentResponse> JSPaymentResponse::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, PaymentResponse>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSPaymentResponse::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSPaymentResponsePrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSPaymentResponsePrototype::create(vm, &globalObject, structure);
}

JSObject* JSPaymentResponse::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSPaymentResponse>(vm, globalObject);
}

JSValue JSPaymentResponse::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPaymentResponseDOMConstructor, DOMConstructorID::PaymentResponse>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponseConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSPaymentResponsePrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSPaymentResponse::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsPaymentResponse_requestIdGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.requestId())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_requestId, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_requestIdGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_methodNameGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.methodName())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_methodName, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_methodNameGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_detailsGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return thisObject.details(lexicalGlobalObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_details, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_detailsGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_shippingAddressGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLInterface<PaymentAddress>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.shippingAddress())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_shippingAddress, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_shippingAddressGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_shippingOptionGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.shippingOption())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_shippingOption, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_shippingOptionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_payerNameGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.payerName())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_payerName, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_payerNameGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_payerEmailGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.payerEmail())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_payerEmail, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_payerEmailGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_payerPhoneGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLDOMString>>(lexicalGlobalObject, throwScope, impl.payerPhone())));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_payerPhone, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_payerPhoneGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsPaymentResponse_onpayerdetailchangeGetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().payerdetailchangeEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsPaymentResponse_onpayerdetailchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::get<jsPaymentResponse_onpayerdetailchangeGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSPaymentResponse_onpayerdetailchangeSetter(JSGlobalObject& lexicalGlobalObject, JSPaymentResponse& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().payerdetailchangeEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSPaymentResponse_onpayerdetailchange, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSPaymentResponse>::set<setJSPaymentResponse_onpayerdetailchangeSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline EncodedJSValue jsPaymentResponsePrototypeFunction_toJSONBody(JSGlobalObject* lexicalGlobalObject, CallFrame*, JSPaymentResponse* castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    auto* result = constructEmptyObject(lexicalGlobalObject);
    auto requestIdValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.requestId());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "requestId"_s), requestIdValue);
    auto methodNameValue = toJS<IDLDOMString>(*lexicalGlobalObject, throwScope, impl.methodName());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "methodName"_s), methodNameValue);
    auto detailsValue = castedThis->details(*lexicalGlobalObject);
    result->putDirect(vm, Identifier::fromString(vm, "details"_s), detailsValue);
    auto shippingAddressValue = toJS<IDLNullable<IDLInterface<PaymentAddress>>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, impl.shippingAddress());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "shippingAddress"_s), shippingAddressValue);
    auto shippingOptionValue = toJS<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, throwScope, impl.shippingOption());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "shippingOption"_s), shippingOptionValue);
    auto payerNameValue = toJS<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, throwScope, impl.payerName());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "payerName"_s), payerNameValue);
    auto payerEmailValue = toJS<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, throwScope, impl.payerEmail());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "payerEmail"_s), payerEmailValue);
    auto payerPhoneValue = toJS<IDLNullable<IDLDOMString>>(*lexicalGlobalObject, throwScope, impl.payerPhone());
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, Identifier::fromString(vm, "payerPhone"_s), payerPhoneValue);
    return JSValue::encode(result);
}

JSC_DEFINE_HOST_FUNCTION(jsPaymentResponsePrototypeFunction_toJSON, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSPaymentResponse>::call<jsPaymentResponsePrototypeFunction_toJSONBody>(*lexicalGlobalObject, *callFrame, "toJSON");
}

static inline JSC::EncodedJSValue jsPaymentResponsePrototypeFunction_completeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSPaymentResponse>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto resultConversionResult = convertOptionalWithDefault<IDLEnumeration<PaymentComplete>>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLEnumeration<PaymentComplete>> { return Converter<IDLEnumeration<PaymentComplete>>::ReturnType { PaymentComplete::Unknown }; }, [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentMustBeEnumError(lexicalGlobalObject, scope, 0, "result"_s, "PaymentResponse"_s, "complete"_s, expectedEnumerationValues<PaymentComplete>()); });
    if (resultConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto detailsConversionResult = convert<IDLDictionary<PaymentCompleteDetails>>(*lexicalGlobalObject, argument1.value());
    if (detailsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJSNewlyCreated<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.complete(document.get(), resultConversionResult.releaseReturnValue(), detailsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsPaymentResponsePrototypeFunction_complete, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSPaymentResponse>::call<jsPaymentResponsePrototypeFunction_completeBody>(*lexicalGlobalObject, *callFrame, "complete");
}

static inline JSC::EncodedJSValue jsPaymentResponsePrototypeFunction_retryBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSPaymentResponse>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto errorFieldsConversionResult = convert<IDLDictionary<PaymentValidationErrors>>(*lexicalGlobalObject, argument0.value());
    if (errorFieldsConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJSNewlyCreated<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.retry(errorFieldsConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsPaymentResponsePrototypeFunction_retry, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSPaymentResponse>::call<jsPaymentResponsePrototypeFunction_retryBody>(*lexicalGlobalObject, *callFrame, "retry");
}

JSC::GCClient::IsoSubspace* JSPaymentResponse::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSPaymentResponse, UseCustomHeapCellType::No>(vm, "JSPaymentResponse"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForPaymentResponse.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForPaymentResponse = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForPaymentResponse.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForPaymentResponse = std::forward<decltype(space)>(space); }
    );
}

template<typename Visitor>
void JSPaymentResponse::visitChildrenImpl(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSPaymentResponse*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

DEFINE_VISIT_CHILDREN(JSPaymentResponse);

template<typename Visitor>
void JSPaymentResponse::visitOutputConstraints(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSPaymentResponse*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

template void JSPaymentResponse::visitOutputConstraints(JSCell*, AbstractSlotVisitor&);
template void JSPaymentResponse::visitOutputConstraints(JSCell*, SlotVisitor&);
void JSPaymentResponse::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSPaymentResponse*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSPaymentResponseOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsPaymentResponse = jsCast<JSPaymentResponse*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsPaymentResponse->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSPaymentResponseOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsPaymentResponse = static_cast<JSPaymentResponse*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsPaymentResponse->protectedWrapped().ptr(), jsPaymentResponse);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7PaymentResponse@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15PaymentResponseE[]; }
#endif
template<std::same_as<PaymentResponse> T>
static inline void verifyVTable(PaymentResponse* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7PaymentResponse@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore15PaymentResponseE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // PaymentResponse has subclasses. If PaymentResponse has subclasses that get passed
        // to toJS() we currently require PaymentResponse you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<PaymentResponse>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<PaymentResponse>(impl.ptr());
#endif
    return createWrapper<PaymentResponse>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, PaymentResponse& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

PaymentResponse* JSPaymentResponse::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSPaymentResponse*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(PAYMENT_REQUEST)
