/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCRtpScriptTransformer.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertAny.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSReadableStream.h"
#include "JSWritableStream.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpScriptTransformerPrototypeFunction_generateKeyFrame);
static JSC_DECLARE_HOST_FUNCTION(jsRTCRtpScriptTransformerPrototypeFunction_sendKeyFrameRequest);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpScriptTransformerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpScriptTransformer_readable);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpScriptTransformer_writable);
static JSC_DECLARE_CUSTOM_GETTER(jsRTCRtpScriptTransformer_options);

class JSRTCRtpScriptTransformerPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCRtpScriptTransformerPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCRtpScriptTransformerPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCRtpScriptTransformerPrototype>(vm)) JSRTCRtpScriptTransformerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCRtpScriptTransformerPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCRtpScriptTransformerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSRTCRtpScriptTransformerPrototype, JSRTCRtpScriptTransformerPrototype::Base);

using JSRTCRtpScriptTransformerDOMConstructor = JSDOMConstructorNotConstructable<JSRTCRtpScriptTransformer>;

template<> const ClassInfo JSRTCRtpScriptTransformerDOMConstructor::s_info = { "RTCRtpScriptTransformer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpScriptTransformerDOMConstructor) };

template<> JSValue JSRTCRtpScriptTransformerDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSRTCRtpScriptTransformerDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "RTCRtpScriptTransformer"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSRTCRtpScriptTransformer::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSRTCRtpScriptTransformerPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpScriptTransformerConstructor, 0 } },
    HashTableValue { "readable"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpScriptTransformer_readable, 0 } },
    HashTableValue { "writable"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpScriptTransformer_writable, 0 } },
    HashTableValue { "options"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsRTCRtpScriptTransformer_options, 0 } },
    HashTableValue { "generateKeyFrame"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpScriptTransformerPrototypeFunction_generateKeyFrame, 0 } },
    HashTableValue { "sendKeyFrameRequest"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsRTCRtpScriptTransformerPrototypeFunction_sendKeyFrameRequest, 0 } },
};

const ClassInfo JSRTCRtpScriptTransformerPrototype::s_info = { "RTCRtpScriptTransformer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpScriptTransformerPrototype) };

void JSRTCRtpScriptTransformerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCRtpScriptTransformer::info(), JSRTCRtpScriptTransformerPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSRTCRtpScriptTransformer::s_info = { "RTCRtpScriptTransformer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSRTCRtpScriptTransformer) };

JSRTCRtpScriptTransformer::JSRTCRtpScriptTransformer(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCRtpScriptTransformer>&& impl)
    : JSDOMWrapper<RTCRtpScriptTransformer>(structure, globalObject, WTFMove(impl))
{
}

static_assert(std::is_base_of<ActiveDOMObject, RTCRtpScriptTransformer>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSRTCRtpScriptTransformer::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSRTCRtpScriptTransformerPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSRTCRtpScriptTransformerPrototype::create(vm, &globalObject, structure);
}

JSObject* JSRTCRtpScriptTransformer::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSRTCRtpScriptTransformer>(vm, globalObject);
}

JSValue JSRTCRtpScriptTransformer::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCRtpScriptTransformerDOMConstructor, DOMConstructorID::RTCRtpScriptTransformer>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSRTCRtpScriptTransformer::destroy(JSC::JSCell* cell)
{
    JSRTCRtpScriptTransformer* thisObject = static_cast<JSRTCRtpScriptTransformer*>(cell);
    thisObject->JSRTCRtpScriptTransformer::~JSRTCRtpScriptTransformer();
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpScriptTransformerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSRTCRtpScriptTransformerPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSRTCRtpScriptTransformer::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsRTCRtpScriptTransformer_readableGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpScriptTransformer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<ReadableStream>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.readable())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpScriptTransformer_readable, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpScriptTransformer>::get<jsRTCRtpScriptTransformer_readableGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCRtpScriptTransformer_writableGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpScriptTransformer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WritableStream>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.writable())));
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpScriptTransformer_writable, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpScriptTransformer>::get<jsRTCRtpScriptTransformer_writableGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsRTCRtpScriptTransformer_optionsGetter(JSGlobalObject& lexicalGlobalObject, JSRTCRtpScriptTransformer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    if (JSValue cachedValue = thisObject.m_options.get())
        return cachedValue;
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLAny>(lexicalGlobalObject, throwScope, impl.options(*jsCast<JSDOMGlobalObject*>(&lexicalGlobalObject)));
    RETURN_IF_EXCEPTION(throwScope, { });
    thisObject.m_options.set(JSC::getVM(&lexicalGlobalObject), &thisObject, result);
    return result;
}

JSC_DEFINE_CUSTOM_GETTER(jsRTCRtpScriptTransformer_options, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSRTCRtpScriptTransformer>::get<jsRTCRtpScriptTransformer_optionsGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsRTCRtpScriptTransformerPrototypeFunction_generateKeyFrameBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRTCRtpScriptTransformer>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto ridConversionResult = convertOptionalWithDefault<IDLDOMString>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLDOMString> { return typename Converter<IDLDOMString>::ReturnType { String() }; });
    if (ridConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUnsignedLongLong>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.generateKeyFrame(ridConversionResult.releaseReturnValue(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpScriptTransformerPrototypeFunction_generateKeyFrame, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRTCRtpScriptTransformer>::call<jsRTCRtpScriptTransformerPrototypeFunction_generateKeyFrameBody>(*lexicalGlobalObject, *callFrame, "generateKeyFrame");
}

static inline JSC::EncodedJSValue jsRTCRtpScriptTransformerPrototypeFunction_sendKeyFrameRequestBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperationReturningPromise<JSRTCRtpScriptTransformer>::ClassParameter castedThis, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLUndefined>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, [&]() -> decltype(auto) { return impl.sendKeyFrameRequest(WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsRTCRtpScriptTransformerPrototypeFunction_sendKeyFrameRequest, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSRTCRtpScriptTransformer>::call<jsRTCRtpScriptTransformerPrototypeFunction_sendKeyFrameRequestBody>(*lexicalGlobalObject, *callFrame, "sendKeyFrameRequest");
}

JSC::GCClient::IsoSubspace* JSRTCRtpScriptTransformer::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSRTCRtpScriptTransformer, UseCustomHeapCellType::No>(vm, "JSRTCRtpScriptTransformer"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForRTCRtpScriptTransformer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForRTCRtpScriptTransformer = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForRTCRtpScriptTransformer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForRTCRtpScriptTransformer = std::forward<decltype(space)>(space); }
    );
}

template<typename Visitor>
void JSRTCRtpScriptTransformer::visitChildrenImpl(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSRTCRtpScriptTransformer*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    visitor.append(thisObject->m_options);
}

DEFINE_VISIT_CHILDREN(JSRTCRtpScriptTransformer);

void JSRTCRtpScriptTransformer::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSRTCRtpScriptTransformer*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSRTCRtpScriptTransformerOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsRTCRtpScriptTransformer = jsCast<JSRTCRtpScriptTransformer*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsRTCRtpScriptTransformer->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSRTCRtpScriptTransformerOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCRtpScriptTransformer = static_cast<JSRTCRtpScriptTransformer*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsRTCRtpScriptTransformer->protectedWrapped().ptr(), jsRTCRtpScriptTransformer);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCRtpScriptTransformer@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore23RTCRtpScriptTransformerE[]; }
#endif
template<std::same_as<RTCRtpScriptTransformer> T>
static inline void verifyVTable(RTCRtpScriptTransformer* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7RTCRtpScriptTransformer@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore23RTCRtpScriptTransformerE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // RTCRtpScriptTransformer has subclasses. If RTCRtpScriptTransformer has subclasses that get passed
        // to toJS() we currently require RTCRtpScriptTransformer you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<RTCRtpScriptTransformer>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<RTCRtpScriptTransformer>(impl.ptr());
#endif
    return createWrapper<RTCRtpScriptTransformer>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, RTCRtpScriptTransformer& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

RTCRtpScriptTransformer* JSRTCRtpScriptTransformer::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCRtpScriptTransformer*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
