/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MODEL_ELEMENT)

#include "JSHTMLModelElementCamera.h"

#include "JSDOMConvertNumbers.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(MODEL_ELEMENT)

template<> ConversionResult<IDLDictionary<HTMLModelElementCamera>> convertDictionary<HTMLModelElementCamera>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    HTMLModelElementCamera result;
    JSValue pitchValue;
    if (isNullOrUndefined)
        pitchValue = jsUndefined();
    else {
        pitchValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "pitch"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (pitchValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "pitch"_s, "HTMLModelElementCamera"_s, "double"_s);
        return ConversionResultException { };
    }
    auto pitchConversionResult = convert<IDLDouble>(lexicalGlobalObject, pitchValue);
    if (pitchConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.pitch = pitchConversionResult.releaseReturnValue();
    JSValue scaleValue;
    if (isNullOrUndefined)
        scaleValue = jsUndefined();
    else {
        scaleValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "scale"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (scaleValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "scale"_s, "HTMLModelElementCamera"_s, "double"_s);
        return ConversionResultException { };
    }
    auto scaleConversionResult = convert<IDLDouble>(lexicalGlobalObject, scaleValue);
    if (scaleConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.scale = scaleConversionResult.releaseReturnValue();
    JSValue yawValue;
    if (isNullOrUndefined)
        yawValue = jsUndefined();
    else {
        yawValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "yaw"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (yawValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "yaw"_s, "HTMLModelElementCamera"_s, "double"_s);
        return ConversionResultException { };
    }
    auto yawConversionResult = convert<IDLDouble>(lexicalGlobalObject, yawValue);
    if (yawConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.yaw = yawConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const HTMLModelElementCamera& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto pitchValue = toJS<IDLDouble>(lexicalGlobalObject, throwScope, dictionary.pitch);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "pitch"_s), pitchValue);
    auto scaleValue = toJS<IDLDouble>(lexicalGlobalObject, throwScope, dictionary.scale);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "scale"_s), scaleValue);
    auto yawValue = toJS<IDLDouble>(lexicalGlobalObject, throwScope, dictionary.yaw);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "yaw"_s), yawValue);
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(MODEL_ELEMENT)
