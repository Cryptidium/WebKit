/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(LEGACY_ENCRYPTED_MEDIA)

#include "JSWebKitMediaKeySession.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "EventNames.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBufferSource.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMConvertUnion.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSEventListener.h"
#include "JSWebKitMediaKeyError.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsWebKitMediaKeySessionPrototypeFunction_update);
static JSC_DECLARE_HOST_FUNCTION(jsWebKitMediaKeySessionPrototypeFunction_close);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeySessionConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeySession_error);
static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeySession_keySystem);
static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeySession_sessionId);
static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeySession_onwebkitkeyadded);
static JSC_DECLARE_CUSTOM_SETTER(setJSWebKitMediaKeySession_onwebkitkeyadded);
static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeySession_onwebkitkeyerror);
static JSC_DECLARE_CUSTOM_SETTER(setJSWebKitMediaKeySession_onwebkitkeyerror);
static JSC_DECLARE_CUSTOM_GETTER(jsWebKitMediaKeySession_onwebkitkeymessage);
static JSC_DECLARE_CUSTOM_SETTER(setJSWebKitMediaKeySession_onwebkitkeymessage);

class JSWebKitMediaKeySessionPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebKitMediaKeySessionPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebKitMediaKeySessionPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebKitMediaKeySessionPrototype>(vm)) JSWebKitMediaKeySessionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebKitMediaKeySessionPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebKitMediaKeySessionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebKitMediaKeySessionPrototype, JSWebKitMediaKeySessionPrototype::Base);

using JSWebKitMediaKeySessionDOMConstructor = JSDOMConstructorNotConstructable<JSWebKitMediaKeySession>;

template<> const ClassInfo JSWebKitMediaKeySessionDOMConstructor::s_info = { "WebKitMediaKeySession"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebKitMediaKeySessionDOMConstructor) };

template<> JSValue JSWebKitMediaKeySessionDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSWebKitMediaKeySessionDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "WebKitMediaKeySession"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWebKitMediaKeySession::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 9> JSWebKitMediaKeySessionPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeySessionConstructor, 0 } },
    HashTableValue { "error"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeySession_error, 0 } },
    HashTableValue { "keySystem"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeySession_keySystem, 0 } },
    HashTableValue { "sessionId"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeySession_sessionId, 0 } },
    HashTableValue { "onwebkitkeyadded"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeySession_onwebkitkeyadded, setJSWebKitMediaKeySession_onwebkitkeyadded } },
    HashTableValue { "onwebkitkeyerror"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeySession_onwebkitkeyerror, setJSWebKitMediaKeySession_onwebkitkeyerror } },
    HashTableValue { "onwebkitkeymessage"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebKitMediaKeySession_onwebkitkeymessage, setJSWebKitMediaKeySession_onwebkitkeymessage } },
    HashTableValue { "update"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebKitMediaKeySessionPrototypeFunction_update, 1 } },
    HashTableValue { "close"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWebKitMediaKeySessionPrototypeFunction_close, 0 } },
};

const ClassInfo JSWebKitMediaKeySessionPrototype::s_info = { "WebKitMediaKeySession"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebKitMediaKeySessionPrototype) };

void JSWebKitMediaKeySessionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebKitMediaKeySession::info(), JSWebKitMediaKeySessionPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWebKitMediaKeySession::s_info = { "WebKitMediaKeySession"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebKitMediaKeySession) };

JSWebKitMediaKeySession::JSWebKitMediaKeySession(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebKitMediaKeySession>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

Ref<WebKitMediaKeySession> JSWebKitMediaKeySession::protectedWrapped() const
{
    return wrapped();
}

static_assert(std::is_base_of<ActiveDOMObject, WebKitMediaKeySession>::value, "Interface is marked as [ActiveDOMObject] but implementation class does not subclass ActiveDOMObject.");

JSObject* JSWebKitMediaKeySession::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWebKitMediaKeySessionPrototype::createStructure(vm, &globalObject, JSEventTarget::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSWebKitMediaKeySessionPrototype::create(vm, &globalObject, structure);
}

JSObject* JSWebKitMediaKeySession::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWebKitMediaKeySession>(vm, globalObject);
}

JSValue JSWebKitMediaKeySession::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitMediaKeySessionDOMConstructor, DOMConstructorID::WebKitMediaKeySession>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeySessionConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWebKitMediaKeySessionPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWebKitMediaKeySession::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWebKitMediaKeySession_errorGetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebKitMediaKeyError>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.error())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeySession_error, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::get<jsWebKitMediaKeySession_errorGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebKitMediaKeySession_keySystemGetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.keySystem())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeySession_keySystem, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::get<jsWebKitMediaKeySession_keySystemGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebKitMediaKeySession_sessionIdGetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLDOMString>(lexicalGlobalObject, throwScope, impl.sessionId())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeySession_sessionId, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::get<jsWebKitMediaKeySession_sessionIdGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebKitMediaKeySession_onwebkitkeyaddedGetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitkeyaddedEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeySession_onwebkitkeyadded, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::get<jsWebKitMediaKeySession_onwebkitkeyaddedGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWebKitMediaKeySession_onwebkitkeyaddedSetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitkeyaddedEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWebKitMediaKeySession_onwebkitkeyadded, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::set<setJSWebKitMediaKeySession_onwebkitkeyaddedSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWebKitMediaKeySession_onwebkitkeyerrorGetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitkeyerrorEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeySession_onwebkitkeyerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::get<jsWebKitMediaKeySession_onwebkitkeyerrorGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWebKitMediaKeySession_onwebkitkeyerrorSetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitkeyerrorEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWebKitMediaKeySession_onwebkitkeyerror, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::set<setJSWebKitMediaKeySession_onwebkitkeyerrorSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsWebKitMediaKeySession_onwebkitkeymessageGetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return eventHandlerAttribute(thisObject.protectedWrapped(), eventNames().webkitkeymessageEvent, worldForDOMObject(thisObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebKitMediaKeySession_onwebkitkeymessage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::get<jsWebKitMediaKeySession_onwebkitkeymessageGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSWebKitMediaKeySession_onwebkitkeymessageSetter(JSGlobalObject& lexicalGlobalObject, JSWebKitMediaKeySession& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    setEventHandlerAttribute<JSEventListener>(thisObject.protectedWrapped(), eventNames().webkitkeymessageEvent, value, thisObject);
    vm.writeBarrier(&thisObject, value);
    ensureStillAliveHere(value);

    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSWebKitMediaKeySession_onwebkitkeymessage, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebKitMediaKeySession>::set<setJSWebKitMediaKeySession_onwebkitkeymessageSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSC::EncodedJSValue jsWebKitMediaKeySessionPrototypeFunction_updateBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebKitMediaKeySession>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    if (callFrame->argumentCount() < 1) [[unlikely]]
        return throwVMError(lexicalGlobalObject, throwScope, createNotEnoughArgumentsError(lexicalGlobalObject));
    EnsureStillAliveScope argument0 = callFrame->uncheckedArgument(0);
    auto keyConversionResult = convert<IDLUint8Array>(*lexicalGlobalObject, argument0.value(), [](JSC::JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope) { throwArgumentTypeError(lexicalGlobalObject, scope, 0, "key"_s, "WebKitMediaKeySession"_s, "update"_s, "Uint8Array"_s); });
    if (keyConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.update(keyConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsWebKitMediaKeySessionPrototypeFunction_update, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebKitMediaKeySession>::call<jsWebKitMediaKeySessionPrototypeFunction_updateBody>(*lexicalGlobalObject, *callFrame, "update");
}

static inline JSC::EncodedJSValue jsWebKitMediaKeySessionPrototypeFunction_closeBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSWebKitMediaKeySession>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.close(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsWebKitMediaKeySessionPrototypeFunction_close, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSWebKitMediaKeySession>::call<jsWebKitMediaKeySessionPrototypeFunction_closeBody>(*lexicalGlobalObject, *callFrame, "close");
}

JSC::GCClient::IsoSubspace* JSWebKitMediaKeySession::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWebKitMediaKeySession, UseCustomHeapCellType::No>(vm, "JSWebKitMediaKeySession"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWebKitMediaKeySession.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebKitMediaKeySession = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWebKitMediaKeySession.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebKitMediaKeySession = std::forward<decltype(space)>(space); }
    );
}

void JSWebKitMediaKeySession::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWebKitMediaKeySession*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSWebKitMediaKeySessionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    SUPPRESS_UNCOUNTED_LOCAL auto* jsWebKitMediaKeySession = jsCast<JSWebKitMediaKeySession*>(handle.slot()->asCell());
    SUPPRESS_UNCOUNTED_LOCAL auto& wrapped = jsWebKitMediaKeySession->wrapped();
    if (!wrapped.isContextStopped() && wrapped.hasPendingActivity()) {
        if (reason) [[unlikely]]
            *reason = "ActiveDOMObject with pending activity"_s;
        return true;
     }
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSWebKitMediaKeySessionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebKitMediaKeySession = static_cast<JSWebKitMediaKeySession*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebKitMediaKeySession->protectedWrapped().ptr(), jsWebKitMediaKeySession);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebKitMediaKeySession@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore21WebKitMediaKeySessionE[]; }
#endif
template<std::same_as<WebKitMediaKeySession> T>
static inline void verifyVTable(WebKitMediaKeySession* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7WebKitMediaKeySession@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore21WebKitMediaKeySessionE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // WebKitMediaKeySession has subclasses. If WebKitMediaKeySession has subclasses that get passed
        // to toJS() we currently require WebKitMediaKeySession you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<WebKitMediaKeySession>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<WebKitMediaKeySession>(impl.ptr());
#endif
    return createWrapper<WebKitMediaKeySession>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, WebKitMediaKeySession& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

WebKitMediaKeySession* JSWebKitMediaKeySession::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebKitMediaKeySession*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(LEGACY_ENCRYPTED_MEDIA)
