/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR_LAYERS)

#include "JSXRCompositionLayer.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMWrapperCache.h"
#include "JSXRLayerLayout.h"
#include "JSXRLayerQuality.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsXRCompositionLayerPrototypeFunction_destroy);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayerConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayer_layout);
static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayer_blendTextureSourceAlpha);
static JSC_DECLARE_CUSTOM_SETTER(setJSXRCompositionLayer_blendTextureSourceAlpha);
static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayer_forceMonoPresentation);
static JSC_DECLARE_CUSTOM_SETTER(setJSXRCompositionLayer_forceMonoPresentation);
static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayer_opacity);
static JSC_DECLARE_CUSTOM_SETTER(setJSXRCompositionLayer_opacity);
static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayer_mipLevels);
static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayer_quality);
static JSC_DECLARE_CUSTOM_SETTER(setJSXRCompositionLayer_quality);
static JSC_DECLARE_CUSTOM_GETTER(jsXRCompositionLayer_needsRedraw);

class JSXRCompositionLayerPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSXRCompositionLayerPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSXRCompositionLayerPrototype* ptr = new (NotNull, JSC::allocateCell<JSXRCompositionLayerPrototype>(vm)) JSXRCompositionLayerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXRCompositionLayerPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSXRCompositionLayerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSXRCompositionLayerPrototype, JSXRCompositionLayerPrototype::Base);

using JSXRCompositionLayerDOMConstructor = JSDOMConstructorNotConstructable<JSXRCompositionLayer>;

template<> const ClassInfo JSXRCompositionLayerDOMConstructor::s_info = { "XRCompositionLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRCompositionLayerDOMConstructor) };

template<> JSValue JSXRCompositionLayerDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSWebXRLayer::getConstructor(vm, &globalObject);
}

template<> void JSXRCompositionLayerDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRCompositionLayer"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSXRCompositionLayer::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 9> JSXRCompositionLayerPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayerConstructor, 0 } },
    HashTableValue { "layout"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayer_layout, 0 } },
    HashTableValue { "blendTextureSourceAlpha"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayer_blendTextureSourceAlpha, setJSXRCompositionLayer_blendTextureSourceAlpha } },
    HashTableValue { "forceMonoPresentation"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayer_forceMonoPresentation, setJSXRCompositionLayer_forceMonoPresentation } },
    HashTableValue { "opacity"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayer_opacity, setJSXRCompositionLayer_opacity } },
    HashTableValue { "mipLevels"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayer_mipLevels, 0 } },
    HashTableValue { "quality"_s, JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayer_quality, setJSXRCompositionLayer_quality } },
    HashTableValue { "needsRedraw"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsXRCompositionLayer_needsRedraw, 0 } },
    HashTableValue { "destroy"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsXRCompositionLayerPrototypeFunction_destroy, 0 } },
};

const ClassInfo JSXRCompositionLayerPrototype::s_info = { "XRCompositionLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRCompositionLayerPrototype) };

void JSXRCompositionLayerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSXRCompositionLayer::info(), JSXRCompositionLayerPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSXRCompositionLayer::s_info = { "XRCompositionLayer"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSXRCompositionLayer) };

JSXRCompositionLayer::JSXRCompositionLayer(Structure* structure, JSDOMGlobalObject& globalObject, Ref<XRCompositionLayer>&& impl)
    : JSWebXRLayer(structure, globalObject, WTFMove(impl))
{
}

Ref<XRCompositionLayer> JSXRCompositionLayer::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, XRCompositionLayer>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSXRCompositionLayer::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSXRCompositionLayerPrototype::createStructure(vm, &globalObject, JSWebXRLayer::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSXRCompositionLayerPrototype::create(vm, &globalObject, structure);
}

JSObject* JSXRCompositionLayer::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSXRCompositionLayer>(vm, globalObject);
}

JSValue JSXRCompositionLayer::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSXRCompositionLayerDOMConstructor, DOMConstructorID::XRCompositionLayer>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayerConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSXRCompositionLayerPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSXRCompositionLayer::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsXRCompositionLayer_layoutGetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<XRLayerLayout>>(lexicalGlobalObject, throwScope, impl.layout())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayer_layout, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::get<jsXRCompositionLayer_layoutGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRCompositionLayer_blendTextureSourceAlphaGetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.blendTextureSourceAlpha())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayer_blendTextureSourceAlpha, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::get<jsXRCompositionLayer_blendTextureSourceAlphaGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXRCompositionLayer_blendTextureSourceAlphaSetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLBoolean>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setBlendTextureSourceAlpha(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXRCompositionLayer_blendTextureSourceAlpha, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::set<setJSXRCompositionLayer_blendTextureSourceAlphaSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXRCompositionLayer_forceMonoPresentationGetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.forceMonoPresentation())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayer_forceMonoPresentation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::get<jsXRCompositionLayer_forceMonoPresentationGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXRCompositionLayer_forceMonoPresentationSetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLBoolean>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setForceMonoPresentation(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXRCompositionLayer_forceMonoPresentation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::set<setJSXRCompositionLayer_forceMonoPresentationSetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXRCompositionLayer_opacityGetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLFloat>(lexicalGlobalObject, throwScope, impl.opacity())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayer_opacity, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::get<jsXRCompositionLayer_opacityGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXRCompositionLayer_opacitySetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto nativeValueConversionResult = convert<IDLFloat>(lexicalGlobalObject, value);
    if (nativeValueConversionResult.hasException(throwScope)) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setOpacity(nativeValueConversionResult.releaseReturnValue());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXRCompositionLayer_opacity, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::set<setJSXRCompositionLayer_opacitySetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXRCompositionLayer_mipLevelsGetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLUnsignedLong>(lexicalGlobalObject, throwScope, impl.mipLevels())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayer_mipLevels, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::get<jsXRCompositionLayer_mipLevelsGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsXRCompositionLayer_qualityGetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLEnumeration<XRLayerQuality>>(lexicalGlobalObject, throwScope, impl.quality())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayer_quality, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::get<jsXRCompositionLayer_qualityGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline bool setJSXRCompositionLayer_qualitySetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    UNUSED_PARAM(vm);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    auto optionalNativeValue = parseEnumeration<XRLayerQuality>(lexicalGlobalObject, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (!optionalNativeValue) [[unlikely]]
        return false;
    invokeFunctorPropagatingExceptionIfNecessary(lexicalGlobalObject, throwScope, [&] {
        return impl.setQuality(optionalNativeValue.value());
    });
    return true;
}

JSC_DEFINE_CUSTOM_SETTER(setJSXRCompositionLayer_quality, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, EncodedJSValue encodedValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::set<setJSXRCompositionLayer_qualitySetter>(*lexicalGlobalObject, thisValue, encodedValue, attributeName);
}

static inline JSValue jsXRCompositionLayer_needsRedrawGetter(JSGlobalObject& lexicalGlobalObject, JSXRCompositionLayer& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLBoolean>(lexicalGlobalObject, throwScope, impl.needsRedraw())));
}

JSC_DEFINE_CUSTOM_GETTER(jsXRCompositionLayer_needsRedraw, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSXRCompositionLayer>::get<jsXRCompositionLayer_needsRedrawGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsXRCompositionLayerPrototypeFunction_destroyBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSXRCompositionLayer>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.destroy(); })));
}

JSC_DEFINE_HOST_FUNCTION(jsXRCompositionLayerPrototypeFunction_destroy, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSXRCompositionLayer>::call<jsXRCompositionLayerPrototypeFunction_destroyBody>(*lexicalGlobalObject, *callFrame, "destroy");
}

JSC::GCClient::IsoSubspace* JSXRCompositionLayer::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSXRCompositionLayer, UseCustomHeapCellType::No>(vm, "JSXRCompositionLayer"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForXRCompositionLayer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForXRCompositionLayer = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForXRCompositionLayer.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForXRCompositionLayer = std::forward<decltype(space)>(space); }
    );
}

void JSXRCompositionLayer::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSXRCompositionLayer*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7XRCompositionLayer@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore18XRCompositionLayerE[]; }
#endif
template<std::same_as<XRCompositionLayer> T>
static inline void verifyVTable(XRCompositionLayer* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7XRCompositionLayer@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore18XRCompositionLayerE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // XRCompositionLayer has subclasses. If XRCompositionLayer has subclasses that get passed
        // to toJS() we currently require XRCompositionLayer you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<XRCompositionLayer>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<XRCompositionLayer>(impl.ptr());
#endif
    return createWrapper<XRCompositionLayer>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, XRCompositionLayer& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

XRCompositionLayer* JSXRCompositionLayer::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSXRCompositionLayer*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBXR_LAYERS)
