/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR)

#include "JSWebXRRigidTransform.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvertDictionary.h"
#include "JSDOMConvertInterface.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMPointInit.h"
#include "JSDOMPointReadOnly.h"
#include "JSDOMWrapperCache.h"
#include "JSWebXRRigidTransform.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsWebXRRigidTransformConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRRigidTransform_position);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRRigidTransform_orientation);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRRigidTransform_matrix);
static JSC_DECLARE_CUSTOM_GETTER(jsWebXRRigidTransform_inverse);

class JSWebXRRigidTransformPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebXRRigidTransformPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebXRRigidTransformPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebXRRigidTransformPrototype>(vm)) JSWebXRRigidTransformPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRRigidTransformPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebXRRigidTransformPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebXRRigidTransformPrototype, JSWebXRRigidTransformPrototype::Base);

using JSWebXRRigidTransformDOMConstructor = JSDOMConstructor<JSWebXRRigidTransform>;

template<> EncodedJSValue JSC_HOST_CALL_ATTRIBUTES JSWebXRRigidTransformDOMConstructor::construct(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = lexicalGlobalObject->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* castedThis = jsCast<JSWebXRRigidTransformDOMConstructor*>(callFrame->jsCallee());
    ASSERT(castedThis);
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto positionConversionResult = convert<IDLDictionary<DOMPointInit>>(*lexicalGlobalObject, argument0.value());
    if (positionConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto orientationConversionResult = convert<IDLDictionary<DOMPointInit>>(*lexicalGlobalObject, argument1.value());
    if (orientationConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    auto object = WebXRRigidTransform::create(positionConversionResult.releaseReturnValue(), orientationConversionResult.releaseReturnValue());
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    static_assert(TypeOrExceptionOrUnderlyingType<decltype(object)>::isRef);
    auto jsValue = toJSNewlyCreated<IDLInterface<WebXRRigidTransform>>(*lexicalGlobalObject, *castedThis->globalObject(), throwScope, WTFMove(object));
    if constexpr (IsExceptionOr<decltype(object)>)
        RETURN_IF_EXCEPTION(throwScope, { });
    setSubclassStructureIfNeeded<WebXRRigidTransform>(lexicalGlobalObject, callFrame, asObject(jsValue));
    RETURN_IF_EXCEPTION(throwScope, { });
    return JSValue::encode(jsValue);
}
JSC_ANNOTATE_HOST_FUNCTION(JSWebXRRigidTransformDOMConstructorConstruct, JSWebXRRigidTransformDOMConstructor::construct);

template<> const ClassInfo JSWebXRRigidTransformDOMConstructor::s_info = { "XRRigidTransform"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRRigidTransformDOMConstructor) };

template<> JSValue JSWebXRRigidTransformDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebXRRigidTransformDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "XRRigidTransform"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSWebXRRigidTransform::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 5> JSWebXRRigidTransformPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRRigidTransformConstructor, 0 } },
    HashTableValue { "position"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRRigidTransform_position, 0 } },
    HashTableValue { "orientation"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRRigidTransform_orientation, 0 } },
    HashTableValue { "matrix"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRRigidTransform_matrix, 0 } },
    HashTableValue { "inverse"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsWebXRRigidTransform_inverse, 0 } },
};

const ClassInfo JSWebXRRigidTransformPrototype::s_info = { "XRRigidTransform"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRRigidTransformPrototype) };

void JSWebXRRigidTransformPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebXRRigidTransform::info(), JSWebXRRigidTransformPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSWebXRRigidTransform::s_info = { "XRRigidTransform"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebXRRigidTransform) };

JSWebXRRigidTransform::JSWebXRRigidTransform(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebXRRigidTransform>&& impl)
    : JSDOMWrapper<WebXRRigidTransform>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, WebXRRigidTransform>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSWebXRRigidTransform::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSWebXRRigidTransformPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSWebXRRigidTransformPrototype::create(vm, &globalObject, structure);
}

JSObject* JSWebXRRigidTransform::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSWebXRRigidTransform>(vm, globalObject);
}

JSValue JSWebXRRigidTransform::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebXRRigidTransformDOMConstructor, DOMConstructorID::WebXRRigidTransform>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSWebXRRigidTransform::destroy(JSC::JSCell* cell)
{
    JSWebXRRigidTransform* thisObject = static_cast<JSWebXRRigidTransform*>(cell);
    thisObject->JSWebXRRigidTransform::~JSWebXRRigidTransform();
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRRigidTransformConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSWebXRRigidTransformPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSWebXRRigidTransform::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsWebXRRigidTransform_positionGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRRigidTransform& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<DOMPointReadOnly>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.position())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRRigidTransform_position, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRRigidTransform>::get<jsWebXRRigidTransform_positionGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRRigidTransform_orientationGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRRigidTransform& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<DOMPointReadOnly>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.orientation())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRRigidTransform_orientation, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRRigidTransform>::get<jsWebXRRigidTransform_orientationGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRRigidTransform_matrixGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRRigidTransform& thisObject)
{
    UNUSED_PARAM(lexicalGlobalObject);
    return thisObject.matrix(lexicalGlobalObject);
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRRigidTransform_matrix, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRRigidTransform>::get<jsWebXRRigidTransform_matrixGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsWebXRRigidTransform_inverseGetter(JSGlobalObject& lexicalGlobalObject, JSWebXRRigidTransform& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<WebXRRigidTransform>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.inverse())));
}

JSC_DEFINE_CUSTOM_GETTER(jsWebXRRigidTransform_inverse, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSWebXRRigidTransform>::get<jsWebXRRigidTransform_inverseGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

JSC::GCClient::IsoSubspace* JSWebXRRigidTransform::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSWebXRRigidTransform, UseCustomHeapCellType::No>(vm, "JSWebXRRigidTransform"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForWebXRRigidTransform.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForWebXRRigidTransform = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForWebXRRigidTransform.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForWebXRRigidTransform = std::forward<decltype(space)>(space); }
    );
}

template<typename Visitor>
void JSWebXRRigidTransform::visitChildrenImpl(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSWebXRRigidTransform*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

DEFINE_VISIT_CHILDREN(JSWebXRRigidTransform);

template<typename Visitor>
void JSWebXRRigidTransform::visitOutputConstraints(JSCell* cell, Visitor& visitor)
{
    auto* thisObject = jsCast<JSWebXRRigidTransform*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

template void JSWebXRRigidTransform::visitOutputConstraints(JSCell*, AbstractSlotVisitor&);
template void JSWebXRRigidTransform::visitOutputConstraints(JSCell*, SlotVisitor&);
void JSWebXRRigidTransform::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSWebXRRigidTransform*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSWebXRRigidTransformOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSWebXRRigidTransformOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebXRRigidTransform = static_cast<JSWebXRRigidTransform*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebXRRigidTransform->protectedWrapped().ptr(), jsWebXRRigidTransform);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebXRRigidTransform@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore19WebXRRigidTransformE[]; }
#endif
template<std::same_as<WebXRRigidTransform> T>
static inline void verifyVTable(WebXRRigidTransform* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7WebXRRigidTransform@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore19WebXRRigidTransformE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // WebXRRigidTransform has subclasses. If WebXRRigidTransform has subclasses that get passed
        // to toJS() we currently require WebXRRigidTransform you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<WebXRRigidTransform>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<WebXRRigidTransform>(impl.ptr());
#endif
    return createWrapper<WebXRRigidTransform>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, WebXRRigidTransform& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

WebXRRigidTransform* JSWebXRRigidTransform::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSWebXRRigidTransform*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBXR)
