/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include "JSHTMLElementWrapperFactory.h"

#include "JSHTMLAnchorElement.h"
#include "JSHTMLUnknownElement.h"
#include "JSHTMLAreaElement.h"
#include "JSHTMLBaseElement.h"
#include "JSHTMLQuoteElement.h"
#include "JSHTMLBodyElement.h"
#include "JSHTMLBRElement.h"
#include "JSHTMLButtonElement.h"
#include "JSHTMLCanvasElement.h"
#include "JSHTMLTableCaptionElement.h"
#include "JSHTMLTableColElement.h"
#include "JSHTMLDataElement.h"
#include "JSHTMLDataListElement.h"
#include "JSHTMLModElement.h"
#include "JSHTMLDetailsElement.h"
#include "JSHTMLDialogElement.h"
#include "JSHTMLDirectoryElement.h"
#include "JSHTMLDivElement.h"
#include "JSHTMLDListElement.h"
#include "JSHTMLEmbedElement.h"
#include "JSHTMLFieldSetElement.h"
#include "JSHTMLFontElement.h"
#include "JSHTMLFormElement.h"
#include "JSHTMLFrameElement.h"
#include "JSHTMLFrameSetElement.h"
#include "JSHTMLHeadingElement.h"
#include "JSHTMLHeadElement.h"
#include "JSHTMLHRElement.h"
#include "JSHTMLHtmlElement.h"
#include "JSHTMLIFrameElement.h"
#include "JSHTMLImageElement.h"
#include "JSHTMLInputElement.h"
#include "JSHTMLLabelElement.h"
#include "JSHTMLLegendElement.h"
#include "JSHTMLLIElement.h"
#include "JSHTMLLinkElement.h"
#include "JSHTMLPreElement.h"
#include "JSHTMLMapElement.h"
#include "JSHTMLMarqueeElement.h"
#include "JSHTMLMenuElement.h"
#include "JSHTMLMetaElement.h"
#include "JSHTMLMeterElement.h"
#include "JSHTMLObjectElement.h"
#include "JSHTMLOListElement.h"
#include "JSHTMLOptGroupElement.h"
#include "JSHTMLOptionElement.h"
#include "JSHTMLOutputElement.h"
#include "JSHTMLParagraphElement.h"
#include "JSHTMLParamElement.h"
#include "JSHTMLPictureElement.h"
#include "JSHTMLProgressElement.h"
#include "JSHTMLScriptElement.h"
#include "JSHTMLSelectElement.h"
#include "JSHTMLSlotElement.h"
#include "JSHTMLSourceElement.h"
#include "JSHTMLSpanElement.h"
#include "JSHTMLStyleElement.h"
#include "JSHTMLTableElement.h"
#include "JSHTMLTableSectionElement.h"
#include "JSHTMLTableCellElement.h"
#include "JSHTMLTemplateElement.h"
#include "JSHTMLTextAreaElement.h"
#include "JSHTMLTimeElement.h"
#include "JSHTMLTitleElement.h"
#include "JSHTMLTableRowElement.h"
#include "JSHTMLUListElement.h"
#include "JSHTMLUnknownElement.h"
#include "HTMLAnchorElement.h"
#include "HTMLElement.h"
#include "HTMLUnknownElement.h"
#include "HTMLAreaElement.h"
#include "HTMLArticleElement.h"
#include "HTMLBaseElement.h"
#include "HTMLBDIElement.h"
#include "HTMLQuoteElement.h"
#include "HTMLBodyElement.h"
#include "HTMLBRElement.h"
#include "HTMLButtonElement.h"
#include "HTMLCanvasElement.h"
#include "HTMLTableCaptionElement.h"
#include "HTMLTableColElement.h"
#include "HTMLDataElement.h"
#include "HTMLDataListElement.h"
#include "HTMLModElement.h"
#include "HTMLDetailsElement.h"
#include "HTMLDialogElement.h"
#include "HTMLDirectoryElement.h"
#include "HTMLDivElement.h"
#include "HTMLDListElement.h"
#include "HTMLEmbedElement.h"
#include "HTMLFieldSetElement.h"
#include "HTMLFontElement.h"
#include "HTMLFormElement.h"
#include "HTMLFrameElement.h"
#include "HTMLFrameSetElement.h"
#include "HTMLHeadingElement.h"
#include "HTMLHeadElement.h"
#include "HTMLHRElement.h"
#include "HTMLHtmlElement.h"
#include "HTMLIFrameElement.h"
#include "HTMLImageElement.h"
#include "HTMLInputElement.h"
#include "HTMLLabelElement.h"
#include "HTMLLegendElement.h"
#include "HTMLLIElement.h"
#include "HTMLLinkElement.h"
#include "HTMLPreElement.h"
#include "HTMLMapElement.h"
#include "HTMLMarqueeElement.h"
#include "HTMLMenuElement.h"
#include "HTMLMetaElement.h"
#include "HTMLMeterElement.h"
#include "HTMLObjectElement.h"
#include "HTMLOListElement.h"
#include "HTMLOptGroupElement.h"
#include "HTMLOptionElement.h"
#include "HTMLOutputElement.h"
#include "HTMLParagraphElement.h"
#include "HTMLParamElement.h"
#include "HTMLPictureElement.h"
#include "HTMLProgressElement.h"
#include "HTMLScriptElement.h"
#include "HTMLSelectElement.h"
#include "HTMLSlotElement.h"
#include "HTMLSourceElement.h"
#include "HTMLSpanElement.h"
#include "HTMLStyleElement.h"
#include "HTMLSummaryElement.h"
#include "HTMLTableElement.h"
#include "HTMLTableSectionElement.h"
#include "HTMLTableCellElement.h"
#include "HTMLTemplateElement.h"
#include "HTMLTextAreaElement.h"
#include "HTMLTimeElement.h"
#include "HTMLTitleElement.h"
#include "HTMLTableRowElement.h"
#include "HTMLUListElement.h"
#include "HTMLWBRElement.h"
#include "HTMLUnknownElement.h"

#include "HTMLNames.h"

#include "DeprecatedGlobalSettings.h"
#include "Document.h"
#include "NodeName.h"
#include "Settings.h"
#include <wtf/NeverDestroyed.h>
#include <wtf/StdLibExtras.h>

#if ENABLE(ATTACHMENT_ELEMENT)
#include "HTMLAttachmentElement.h"
#include "JSHTMLAttachmentElement.h"
#endif

#if ENABLE(MODEL_ELEMENT)
#include "HTMLModelElement.h"
#include "JSHTMLModelElement.h"
#endif

#if ENABLE(VIDEO)
#include "HTMLAudioElement.h"
#include "HTMLTrackElement.h"
#include "HTMLVideoElement.h"
#include "JSHTMLAudioElement.h"
#include "JSHTMLTrackElement.h"
#include "JSHTMLVideoElement.h"
#endif

using namespace JSC;

namespace WebCore {

static JSDOMObject* createHTMLAnchorElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLAnchorElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLUnknownElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLAreaElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLAreaElement>(globalObject, WTFMove(element));
}

#if ENABLE(ATTACHMENT_ELEMENT)

static JSDOMObject* createHTMLAttachmentElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    if (element->isHTMLUnknownElement())
        return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLAttachmentElement>(globalObject, WTFMove(element));
}
#endif

#if ENABLE(VIDEO)

static JSDOMObject* createHTMLAudioElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    if (element->isHTMLUnknownElement())
        return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLAudioElement>(globalObject, WTFMove(element));
}

#endif

static JSDOMObject* createHTMLBaseElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLBaseElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLQuoteElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLQuoteElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLBodyElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLBodyElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLBRElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLBRElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLButtonElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLButtonElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLCanvasElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLCanvasElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTableCaptionElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTableCaptionElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTableColElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTableColElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLDataElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLDataElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLDataListElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    if (element->isHTMLUnknownElement())
        return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLDataListElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLModElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLModElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLDetailsElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLDetailsElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLDialogElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLDialogElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLDirectoryElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLDirectoryElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLDivElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLDivElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLDListElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLDListElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLEmbedElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    if (element->isHTMLUnknownElement())
        return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLEmbedElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLFieldSetElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLFieldSetElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLFontElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLFontElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLFormElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLFormElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLFrameElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLFrameElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLFrameSetElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLFrameSetElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLHeadingElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLHeadingElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLHeadElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLHeadElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLHRElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLHRElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLHtmlElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLHtmlElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLIFrameElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLIFrameElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLImageElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLImageElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLInputElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLInputElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLLabelElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLLabelElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLLegendElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLLegendElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLLIElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLLIElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLLinkElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLLinkElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLPreElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLPreElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLMapElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLMapElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLMarqueeElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLMarqueeElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLMenuElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLMenuElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLMetaElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLMetaElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLMeterElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLMeterElement>(globalObject, WTFMove(element));
}

#if ENABLE(MODEL_ELEMENT)

static JSDOMObject* createHTMLModelElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    if (element->isHTMLUnknownElement())
        return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLModelElement>(globalObject, WTFMove(element));
}

#endif

static JSDOMObject* createHTMLObjectElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLObjectElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLOListElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLOListElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLOptGroupElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLOptGroupElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLOptionElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLOptionElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLOutputElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLOutputElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLParagraphElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLParagraphElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLParamElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLParamElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLPictureElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLPictureElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLProgressElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLProgressElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLScriptElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLScriptElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLSelectElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLSelectElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLSlotElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLSlotElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLSourceElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLSourceElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLSpanElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLSpanElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLStyleElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLStyleElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTableElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTableElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTableSectionElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTableSectionElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTableCellElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTableCellElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTemplateElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTemplateElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTextAreaElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTextAreaElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTimeElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTimeElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTitleElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTitleElement>(globalObject, WTFMove(element));
}

static JSDOMObject* createHTMLTableRowElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLTableRowElement>(globalObject, WTFMove(element));
}

#if ENABLE(VIDEO)

static JSDOMObject* createHTMLTrackElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    if (element->isHTMLUnknownElement())
        return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLTrackElement>(globalObject, WTFMove(element));
}

#endif

static JSDOMObject* createHTMLUListElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    return createWrapper<HTMLUListElement>(globalObject, WTFMove(element));
}

#if ENABLE(VIDEO)

static JSDOMObject* createHTMLVideoElementWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    if (element->isHTMLUnknownElement())
        return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLVideoElement>(globalObject, WTFMove(element));
}

#endif


JSDOMObject* createJSHTMLWrapper(JSDOMGlobalObject* globalObject, Ref<HTMLElement>&& element)
{
    switch (element->elementName()) {
    case NodeName::HTML_a:
        return createHTMLAnchorElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_abbr:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_acronym:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_address:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_annotation_xml:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_applet:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_area:
        return createHTMLAreaElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_article:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_aside:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
#if ENABLE(ATTACHMENT_ELEMENT)
    case NodeName::HTML_attachment:
        return createHTMLAttachmentElementWrapper(globalObject, WTFMove(element));
#endif
#if ENABLE(VIDEO)
    case NodeName::HTML_audio:
        return createHTMLAudioElementWrapper(globalObject, WTFMove(element));
#endif
    case NodeName::HTML_b:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_base:
        return createHTMLBaseElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_basefont:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_bdi:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_bdo:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_bgsound:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_big:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_blockquote:
        return createHTMLQuoteElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_body:
        return createHTMLBodyElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_br:
        return createHTMLBRElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_button:
        return createHTMLButtonElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_canvas:
        return createHTMLCanvasElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_caption:
        return createHTMLTableCaptionElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_center:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_cite:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_code:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_col:
        return createHTMLTableColElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_colgroup:
        return createHTMLTableColElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_color_profile:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_data:
        return createHTMLDataElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_datalist:
        return createHTMLDataListElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_dd:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_del:
        return createHTMLModElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_details:
        return createHTMLDetailsElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_dfn:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_dialog:
        return createHTMLDialogElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_dir:
        return createHTMLDirectoryElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_div:
        return createHTMLDivElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_dl:
        return createHTMLDListElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_dt:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_em:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_embed:
        return createHTMLEmbedElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_fieldset:
        return createHTMLFieldSetElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_figcaption:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_figure:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_font:
        return createHTMLFontElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_font_face:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_font_face_format:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_font_face_name:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_font_face_src:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_font_face_uri:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_footer:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_form:
        return createHTMLFormElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_frame:
        return createHTMLFrameElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_frameset:
        return createHTMLFrameSetElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_h1:
        return createHTMLHeadingElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_h2:
        return createHTMLHeadingElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_h3:
        return createHTMLHeadingElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_h4:
        return createHTMLHeadingElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_h5:
        return createHTMLHeadingElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_h6:
        return createHTMLHeadingElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_head:
        return createHTMLHeadElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_header:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_hgroup:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_hr:
        return createHTMLHRElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_html:
        return createHTMLHtmlElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_i:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_iframe:
        return createHTMLIFrameElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_image:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_img:
        return createHTMLImageElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_input:
        return createHTMLInputElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_ins:
        return createHTMLModElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_kbd:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_keygen:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_label:
        return createHTMLLabelElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_legend:
        return createHTMLLegendElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_li:
        return createHTMLLIElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_link:
        return createHTMLLinkElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_listing:
        return createHTMLPreElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_main:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_map:
        return createHTMLMapElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_mark:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_marquee:
        return createHTMLMarqueeElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_menu:
        return createHTMLMenuElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_meta:
        return createHTMLMetaElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_meter:
        return createHTMLMeterElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_missing_glyph:
        return createHTMLUnknownElementWrapper(globalObject, WTFMove(element));
#if ENABLE(MODEL_ELEMENT)
    case NodeName::HTML_model:
        return createHTMLModelElementWrapper(globalObject, WTFMove(element));
#endif
    case NodeName::HTML_nav:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_nobr:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_noembed:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_noframes:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_noscript:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_object:
        return createHTMLObjectElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_ol:
        return createHTMLOListElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_optgroup:
        return createHTMLOptGroupElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_option:
        return createHTMLOptionElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_output:
        return createHTMLOutputElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_p:
        return createHTMLParagraphElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_param:
        return createHTMLParamElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_picture:
        return createHTMLPictureElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_plaintext:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_pre:
        return createHTMLPreElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_progress:
        return createHTMLProgressElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_q:
        return createHTMLQuoteElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_rb:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_rp:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_rt:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_rtc:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_ruby:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_s:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_samp:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_script:
        return createHTMLScriptElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_search:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_section:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_select:
        return createHTMLSelectElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_slot:
        return createHTMLSlotElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_small:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_source:
        return createHTMLSourceElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_span:
        return createHTMLSpanElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_strike:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_strong:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_style:
        return createHTMLStyleElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_sub:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_summary:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_sup:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_table:
        return createHTMLTableElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_tbody:
        return createHTMLTableSectionElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_td:
        return createHTMLTableCellElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_template:
        return createHTMLTemplateElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_textarea:
        return createHTMLTextAreaElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_tfoot:
        return createHTMLTableSectionElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_th:
        return createHTMLTableCellElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_thead:
        return createHTMLTableSectionElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_time:
        return createHTMLTimeElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_title:
        return createHTMLTitleElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_tr:
        return createHTMLTableRowElementWrapper(globalObject, WTFMove(element));
#if ENABLE(VIDEO)
    case NodeName::HTML_track:
        return createHTMLTrackElementWrapper(globalObject, WTFMove(element));
#endif
    case NodeName::HTML_tt:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_u:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_ul:
        return createHTMLUListElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_var:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
#if ENABLE(VIDEO)
    case NodeName::HTML_video:
        return createHTMLVideoElementWrapper(globalObject, WTFMove(element));
#endif
    case NodeName::HTML_wbr:
        return createHTMLElementWrapper(globalObject, WTFMove(element));
    case NodeName::HTML_xmp:
        return createHTMLPreElementWrapper(globalObject, WTFMove(element));
    default:
        break;
    }
    if (!element->isUnknownElement())
        return createWrapper<HTMLElement>(globalObject, WTFMove(element));
    return createWrapper<HTMLUnknownElement>(globalObject, WTFMove(element));
}

}
