/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBXR_LAYERS)

#include "JSXRGPUProjectionLayerInit.h"

#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSGPUTextureFormat.h"
#include <JavaScriptCore/JSCInlines.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEBXR_LAYERS)

template<> ConversionResult<IDLDictionary<XRGPUProjectionLayerInit>> convertDictionary<XRGPUProjectionLayerInit>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    XRGPUProjectionLayerInit result;
    JSValue colorFormatValue;
    if (isNullOrUndefined)
        colorFormatValue = jsUndefined();
    else {
        colorFormatValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "colorFormat"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (colorFormatValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "colorFormat"_s, "XRGPUProjectionLayerInit"_s, "GPUTextureFormat"_s);
        return ConversionResultException { };
    }
    auto colorFormatConversionResult = convert<IDLEnumeration<GPUTextureFormat>>(lexicalGlobalObject, colorFormatValue);
    if (colorFormatConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.colorFormat = colorFormatConversionResult.releaseReturnValue();
    JSValue depthStencilFormatValue;
    if (isNullOrUndefined)
        depthStencilFormatValue = jsUndefined();
    else {
        depthStencilFormatValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "depthStencilFormat"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!depthStencilFormatValue.isUndefined()) {
        auto depthStencilFormatConversionResult = convert<IDLNullable<IDLEnumeration<GPUTextureFormat>>>(lexicalGlobalObject, depthStencilFormatValue);
        if (depthStencilFormatConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.depthStencilFormat = depthStencilFormatConversionResult.releaseReturnValue();
    }
    JSValue scaleFactorValue;
    if (isNullOrUndefined)
        scaleFactorValue = jsUndefined();
    else {
        scaleFactorValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "scaleFactor"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto scaleFactorConversionResult = convertOptionalWithDefault<IDLDouble>(lexicalGlobalObject, scaleFactorValue, [&]() -> ConversionResult<IDLDouble> { return Converter<IDLDouble>::ReturnType { 1.0 }; });
    if (scaleFactorConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.scaleFactor = scaleFactorConversionResult.releaseReturnValue();
    JSValue textureUsageValue;
    if (isNullOrUndefined)
        textureUsageValue = jsUndefined();
    else {
        textureUsageValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "textureUsage"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    auto textureUsageConversionResult = convertOptionalWithDefault<IDLEnforceRangeAdaptor<IDLUnsignedLong>>(lexicalGlobalObject, textureUsageValue, [&]() -> ConversionResult<IDLEnforceRangeAdaptor<IDLUnsignedLong>> { return Converter<IDLEnforceRangeAdaptor<IDLUnsignedLong>>::ReturnType { 0x10 }; });
    if (textureUsageConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.textureUsage = textureUsageConversionResult.releaseReturnValue();
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEBXR_LAYERS)
