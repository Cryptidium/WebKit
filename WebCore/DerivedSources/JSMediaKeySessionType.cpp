/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA)

#include "JSMediaKeySessionType.h"

#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSString.h>
#include <wtf/NeverDestroyed.h>
#include <wtf/SortedArrayMap.h>



namespace WebCore {
using namespace JSC;

String convertEnumerationToString(MediaKeySessionType enumerationValue)
{
    static const std::array<NeverDestroyed<String>, 3> values {
        MAKE_STATIC_STRING_IMPL("temporary"),
        MAKE_STATIC_STRING_IMPL("persistent-usage-record"),
        MAKE_STATIC_STRING_IMPL("persistent-license"),
    };
    static_assert(static_cast<size_t>(MediaKeySessionType::Temporary) == 0, "MediaKeySessionType::Temporary is not 0 as expected");
    static_assert(static_cast<size_t>(MediaKeySessionType::PersistentUsageRecord) == 1, "MediaKeySessionType::PersistentUsageRecord is not 1 as expected");
    static_assert(static_cast<size_t>(MediaKeySessionType::PersistentLicense) == 2, "MediaKeySessionType::PersistentLicense is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < std::size(values));
    return values[static_cast<size_t>(enumerationValue)];
}

template<> JSString* convertEnumerationToJS(VM& vm, MediaKeySessionType enumerationValue)
{
    return jsStringWithCache(vm, convertEnumerationToString(enumerationValue));
}

template<> std::optional<MediaKeySessionType> parseEnumerationFromString<MediaKeySessionType>(const String& stringValue)
{
    static constexpr std::array<std::pair<ComparableASCIILiteral, MediaKeySessionType>, 3> mappings {
        std::pair<ComparableASCIILiteral, MediaKeySessionType> { "persistent-license"_s, MediaKeySessionType::PersistentLicense },
        std::pair<ComparableASCIILiteral, MediaKeySessionType> { "persistent-usage-record"_s, MediaKeySessionType::PersistentUsageRecord },
        std::pair<ComparableASCIILiteral, MediaKeySessionType> { "temporary"_s, MediaKeySessionType::Temporary },
    };
    static constexpr SortedArrayMap enumerationMapping { mappings };
    if (auto* enumerationValue = enumerationMapping.tryGet(stringValue); enumerationValue) [[likely]]
        return *enumerationValue;
    return std::nullopt;
}

template<> std::optional<MediaKeySessionType> parseEnumeration<MediaKeySessionType>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    return parseEnumerationFromString<MediaKeySessionType>(value.toWTFString(&lexicalGlobalObject));
}

template<> ASCIILiteral expectedEnumerationValues<MediaKeySessionType>()
{
    return "\"temporary\", \"persistent-usage-record\", \"persistent-license\""_s;
}

} // namespace WebCore


#endif // ENABLE(ENCRYPTED_MEDIA)
