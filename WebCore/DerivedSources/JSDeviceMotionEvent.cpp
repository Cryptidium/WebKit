/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(DEVICE_ORIENTATION)

#include "JSDeviceMotionEvent.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "DOMPromiseProxy.h"
#include "Document.h"
#include "DocumentInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "IDLTypes.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMConvertBase.h"
#include "JSDOMConvertBoolean.h"
#include "JSDOMConvertEnumeration.h"
#include "JSDOMConvertNullable.h"
#include "JSDOMConvertNumbers.h"
#include "JSDOMConvertOptional.h"
#include "JSDOMConvertPromise.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObject.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMOperation.h"
#include "JSDOMOperationReturningPromise.h"
#include "JSDOMWrapperCache.h"
#include "JSDeviceOrientationOrMotionPermissionState.h"
#include "ScriptExecutionContext.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/ObjectConstructor.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

namespace WebCore {
using namespace JSC;

#if ENABLE(DEVICE_ORIENTATION)

template<> ConversionResult<IDLDictionary<DeviceMotionEvent::Acceleration>> convertDictionary<DeviceMotionEvent::Acceleration>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    DeviceMotionEvent::Acceleration result;
    JSValue xValue;
    if (isNullOrUndefined)
        xValue = jsUndefined();
    else {
        xValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "x"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!xValue.isUndefined()) {
        auto xConversionResult = convert<IDLNullable<IDLDouble>>(lexicalGlobalObject, xValue);
        if (xConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.x = xConversionResult.releaseReturnValue();
    }
    JSValue yValue;
    if (isNullOrUndefined)
        yValue = jsUndefined();
    else {
        yValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "y"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!yValue.isUndefined()) {
        auto yConversionResult = convert<IDLNullable<IDLDouble>>(lexicalGlobalObject, yValue);
        if (yConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.y = yConversionResult.releaseReturnValue();
    }
    JSValue zValue;
    if (isNullOrUndefined)
        zValue = jsUndefined();
    else {
        zValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "z"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!zValue.isUndefined()) {
        auto zConversionResult = convert<IDLNullable<IDLDouble>>(lexicalGlobalObject, zValue);
        if (zConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.z = zConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const DeviceMotionEvent::Acceleration& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLNullable<IDLDouble>::isNullValue(dictionary.x)) {
        auto xValue = toJS<IDLNullable<IDLDouble>>(lexicalGlobalObject, throwScope, IDLNullable<IDLDouble>::extractValueFromNullable(dictionary.x));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "x"_s), xValue);
    }
    if (!IDLNullable<IDLDouble>::isNullValue(dictionary.y)) {
        auto yValue = toJS<IDLNullable<IDLDouble>>(lexicalGlobalObject, throwScope, IDLNullable<IDLDouble>::extractValueFromNullable(dictionary.y));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "y"_s), yValue);
    }
    if (!IDLNullable<IDLDouble>::isNullValue(dictionary.z)) {
        auto zValue = toJS<IDLNullable<IDLDouble>>(lexicalGlobalObject, throwScope, IDLNullable<IDLDouble>::extractValueFromNullable(dictionary.z));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "z"_s), zValue);
    }
    return result;
}

#endif

#if ENABLE(DEVICE_ORIENTATION)

template<> ConversionResult<IDLDictionary<DeviceMotionEvent::RotationRate>> convertDictionary<DeviceMotionEvent::RotationRate>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    DeviceMotionEvent::RotationRate result;
    JSValue alphaValue;
    if (isNullOrUndefined)
        alphaValue = jsUndefined();
    else {
        alphaValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "alpha"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!alphaValue.isUndefined()) {
        auto alphaConversionResult = convert<IDLNullable<IDLDouble>>(lexicalGlobalObject, alphaValue);
        if (alphaConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.alpha = alphaConversionResult.releaseReturnValue();
    }
    JSValue betaValue;
    if (isNullOrUndefined)
        betaValue = jsUndefined();
    else {
        betaValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "beta"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!betaValue.isUndefined()) {
        auto betaConversionResult = convert<IDLNullable<IDLDouble>>(lexicalGlobalObject, betaValue);
        if (betaConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.beta = betaConversionResult.releaseReturnValue();
    }
    JSValue gammaValue;
    if (isNullOrUndefined)
        gammaValue = jsUndefined();
    else {
        gammaValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "gamma"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!gammaValue.isUndefined()) {
        auto gammaConversionResult = convert<IDLNullable<IDLDouble>>(lexicalGlobalObject, gammaValue);
        if (gammaConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.gamma = gammaConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const DeviceMotionEvent::RotationRate& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLNullable<IDLDouble>::isNullValue(dictionary.alpha)) {
        auto alphaValue = toJS<IDLNullable<IDLDouble>>(lexicalGlobalObject, throwScope, IDLNullable<IDLDouble>::extractValueFromNullable(dictionary.alpha));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "alpha"_s), alphaValue);
    }
    if (!IDLNullable<IDLDouble>::isNullValue(dictionary.beta)) {
        auto betaValue = toJS<IDLNullable<IDLDouble>>(lexicalGlobalObject, throwScope, IDLNullable<IDLDouble>::extractValueFromNullable(dictionary.beta));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "beta"_s), betaValue);
    }
    if (!IDLNullable<IDLDouble>::isNullValue(dictionary.gamma)) {
        auto gammaValue = toJS<IDLNullable<IDLDouble>>(lexicalGlobalObject, throwScope, IDLNullable<IDLDouble>::extractValueFromNullable(dictionary.gamma));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "gamma"_s), gammaValue);
    }
    return result;
}

#endif

// Functions

static JSC_DECLARE_HOST_FUNCTION(jsDeviceMotionEventConstructorFunction_requestPermission);
static JSC_DECLARE_HOST_FUNCTION(jsDeviceMotionEventPrototypeFunction_initDeviceMotionEvent);

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsDeviceMotionEventConstructor);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceMotionEvent_acceleration);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceMotionEvent_accelerationIncludingGravity);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceMotionEvent_rotationRate);
static JSC_DECLARE_CUSTOM_GETTER(jsDeviceMotionEvent_interval);

class JSDeviceMotionEventPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDeviceMotionEventPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDeviceMotionEventPrototype* ptr = new (NotNull, JSC::allocateCell<JSDeviceMotionEventPrototype>(vm)) JSDeviceMotionEventPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDeviceMotionEventPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDeviceMotionEventPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSDeviceMotionEventPrototype, JSDeviceMotionEventPrototype::Base);

using JSDeviceMotionEventDOMConstructor = JSDOMConstructorNotConstructable<JSDeviceMotionEvent>;

/* Hash table for constructor */

static const std::array<HashTableValue, 1> JSDeviceMotionEventConstructorTableValues {
    HashTableValue { "requestPermission"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDeviceMotionEventConstructorFunction_requestPermission, 0 } },
};

template<> const ClassInfo JSDeviceMotionEventDOMConstructor::s_info = { "DeviceMotionEvent"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDeviceMotionEventDOMConstructor) };

template<> JSValue JSDeviceMotionEventDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEvent::getConstructor(vm, &globalObject);
}

template<> void JSDeviceMotionEventDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "DeviceMotionEvent"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSDeviceMotionEvent::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
    reifyStaticProperties(vm, JSDeviceMotionEvent::info(), JSDeviceMotionEventConstructorTableValues, *this);
    if (!downcast<Document>(jsCast<JSDOMGlobalObject*>(&globalObject)->scriptExecutionContext())->settingsValues().deviceOrientationPermissionAPIEnabled) {
        auto propertyName = Identifier::fromString(vm, "requestPermission"_s);
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        DeletePropertySlot slot;
        JSObject::deleteProperty(this, &globalObject, propertyName, slot);
    }
}

/* Hash table for prototype */

static const std::array<HashTableValue, 6> JSDeviceMotionEventPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceMotionEventConstructor, 0 } },
    HashTableValue { "acceleration"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceMotionEvent_acceleration, 0 } },
    HashTableValue { "accelerationIncludingGravity"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceMotionEvent_accelerationIncludingGravity, 0 } },
    HashTableValue { "rotationRate"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceMotionEvent_rotationRate, 0 } },
    HashTableValue { "interval"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsDeviceMotionEvent_interval, 0 } },
    HashTableValue { "initDeviceMotionEvent"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsDeviceMotionEventPrototypeFunction_initDeviceMotionEvent, 0 } },
};

const ClassInfo JSDeviceMotionEventPrototype::s_info = { "DeviceMotionEvent"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDeviceMotionEventPrototype) };

void JSDeviceMotionEventPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDeviceMotionEvent::info(), JSDeviceMotionEventPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSDeviceMotionEvent::s_info = { "DeviceMotionEvent"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSDeviceMotionEvent) };

JSDeviceMotionEvent::JSDeviceMotionEvent(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DeviceMotionEvent>&& impl)
    : JSEvent(structure, globalObject, WTFMove(impl))
{
}

Ref<DeviceMotionEvent> JSDeviceMotionEvent::protectedWrapped() const
{
    return wrapped();
}

static_assert(!std::is_base_of<ActiveDOMObject, DeviceMotionEvent>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSDeviceMotionEvent::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSDeviceMotionEventPrototype::createStructure(vm, &globalObject, JSEvent::prototype(vm, globalObject));
    structure->setMayBePrototype(true);
    return JSDeviceMotionEventPrototype::create(vm, &globalObject, structure);
}

JSObject* JSDeviceMotionEvent::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSDeviceMotionEvent>(vm, globalObject);
}

JSValue JSDeviceMotionEvent::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDeviceMotionEventDOMConstructor, DOMConstructorID::DeviceMotionEvent>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceMotionEventConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSDeviceMotionEventPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSDeviceMotionEvent::getConstructor(vm, prototype->globalObject()));
}

static inline JSValue jsDeviceMotionEvent_accelerationGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceMotionEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.acceleration())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceMotionEvent_acceleration, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceMotionEvent>::get<jsDeviceMotionEvent_accelerationGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDeviceMotionEvent_accelerationIncludingGravityGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceMotionEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.accelerationIncludingGravity())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceMotionEvent_accelerationIncludingGravity, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceMotionEvent>::get<jsDeviceMotionEvent_accelerationIncludingGravityGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDeviceMotionEvent_rotationRateGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceMotionEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLDictionary<DeviceMotionEvent::RotationRate>>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.rotationRate())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceMotionEvent_rotationRate, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceMotionEvent>::get<jsDeviceMotionEvent_rotationRateGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSValue jsDeviceMotionEvent_intervalGetter(JSGlobalObject& lexicalGlobalObject, JSDeviceMotionEvent& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLNullable<IDLUnrestrictedDouble>>(lexicalGlobalObject, throwScope, impl.interval())));
}

JSC_DEFINE_CUSTOM_GETTER(jsDeviceMotionEvent_interval, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSDeviceMotionEvent>::get<jsDeviceMotionEvent_intervalGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

static inline JSC::EncodedJSValue jsDeviceMotionEventConstructorFunction_requestPermissionBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, Ref<DeferredPromise>&& promise)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    RefPtr context = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject)->scriptExecutionContext();
    if (!context) [[unlikely]]
        return JSValue::encode(jsUndefined());
    Ref document = downcast<Document>(*context);
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLPromise<IDLEnumeration<DeviceOrientationOrMotionPermissionState>>>(*lexicalGlobalObject, *jsCast<JSDOMGlobalObject*>(lexicalGlobalObject), throwScope, [&]() -> decltype(auto) { return DeviceMotionEvent::requestPermission(document.get(), WTFMove(promise)); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDeviceMotionEventConstructorFunction_requestPermission, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperationReturningPromise<JSDeviceMotionEvent>::callStatic<jsDeviceMotionEventConstructorFunction_requestPermissionBody>(*lexicalGlobalObject, *callFrame, "requestPermission");
}

static inline JSC::EncodedJSValue jsDeviceMotionEventPrototypeFunction_initDeviceMotionEventBody(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame, typename IDLOperation<JSDeviceMotionEvent>::ClassParameter castedThis)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(callFrame);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = castedThis->wrapped();
    EnsureStillAliveScope argument0 = callFrame->argument(0);
    auto typeConversionResult = convertOptionalWithDefault<IDLAtomStringAdaptor<IDLDOMString>>(*lexicalGlobalObject, argument0.value(), [&]() -> ConversionResult<IDLAtomStringAdaptor<IDLDOMString>> { return Converter<IDLAtomStringAdaptor<IDLDOMString>>::ReturnType { emptyAtom() }; });
    if (typeConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument1 = callFrame->argument(1);
    auto bubblesConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument1.value());
    if (bubblesConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument2 = callFrame->argument(2);
    auto cancelableConversionResult = convert<IDLBoolean>(*lexicalGlobalObject, argument2.value());
    if (cancelableConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument3 = callFrame->argument(3);
    auto accelerationConversionResult = convertOptionalWithDefault<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>>(*lexicalGlobalObject, argument3.value(), [&]() -> ConversionResult<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>> { return typename Converter<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>>::ReturnType { std::nullopt }; });
    if (accelerationConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument4 = callFrame->argument(4);
    auto accelerationIncludingGravityConversionResult = convertOptionalWithDefault<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>>(*lexicalGlobalObject, argument4.value(), [&]() -> ConversionResult<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>> { return typename Converter<IDLNullable<IDLDictionary<DeviceMotionEvent::Acceleration>>>::ReturnType { std::nullopt }; });
    if (accelerationIncludingGravityConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument5 = callFrame->argument(5);
    auto rotationRateConversionResult = convertOptionalWithDefault<IDLNullable<IDLDictionary<DeviceMotionEvent::RotationRate>>>(*lexicalGlobalObject, argument5.value(), [&]() -> ConversionResult<IDLNullable<IDLDictionary<DeviceMotionEvent::RotationRate>>> { return typename Converter<IDLNullable<IDLDictionary<DeviceMotionEvent::RotationRate>>>::ReturnType { std::nullopt }; });
    if (rotationRateConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    EnsureStillAliveScope argument6 = callFrame->argument(6);
    auto intervalConversionResult = convertOptionalWithDefault<IDLNullable<IDLUnrestrictedDouble>>(*lexicalGlobalObject, argument6.value(), [&]() -> ConversionResult<IDLNullable<IDLUnrestrictedDouble>> { return typename Converter<IDLNullable<IDLUnrestrictedDouble>>::ReturnType { std::nullopt }; });
    if (intervalConversionResult.hasException(throwScope)) [[unlikely]]
       return encodedJSValue();
    RELEASE_AND_RETURN(throwScope, JSValue::encode(toJS<IDLUndefined>(*lexicalGlobalObject, throwScope, [&]() -> decltype(auto) { return impl.initDeviceMotionEvent(typeConversionResult.releaseReturnValue(), bubblesConversionResult.releaseReturnValue(), cancelableConversionResult.releaseReturnValue(), accelerationConversionResult.releaseReturnValue(), accelerationIncludingGravityConversionResult.releaseReturnValue(), rotationRateConversionResult.releaseReturnValue(), intervalConversionResult.releaseReturnValue()); })));
}

JSC_DEFINE_HOST_FUNCTION(jsDeviceMotionEventPrototypeFunction_initDeviceMotionEvent, (JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame))
{
    return IDLOperation<JSDeviceMotionEvent>::call<jsDeviceMotionEventPrototypeFunction_initDeviceMotionEventBody>(*lexicalGlobalObject, *callFrame, "initDeviceMotionEvent");
}

JSC::GCClient::IsoSubspace* JSDeviceMotionEvent::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSDeviceMotionEvent, UseCustomHeapCellType::No>(vm, "JSDeviceMotionEvent"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForDeviceMotionEvent.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForDeviceMotionEvent = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForDeviceMotionEvent.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForDeviceMotionEvent = std::forward<decltype(space)>(space); }
    );
}

void JSDeviceMotionEvent::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSDeviceMotionEvent*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}


}

#endif // ENABLE(DEVICE_ORIENTATION)
