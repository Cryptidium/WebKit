/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUTHN)

#include "JSAuthenticationResponseJSON.h"

#include "JSAuthenticationExtensionsClientOutputsJSON.h"
#include "JSDOMConvertStrings.h"
#include "JSDOMGlobalObject.h"
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/ObjectConstructor.h>



namespace WebCore {
using namespace JSC;

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationResponseJSON>> convertDictionary<AuthenticationResponseJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationResponseJSON result;
    JSValue authenticatorAttachmentValue;
    if (isNullOrUndefined)
        authenticatorAttachmentValue = jsUndefined();
    else {
        authenticatorAttachmentValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "authenticatorAttachment"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!authenticatorAttachmentValue.isUndefined()) {
        auto authenticatorAttachmentConversionResult = convert<IDLDOMString>(lexicalGlobalObject, authenticatorAttachmentValue);
        if (authenticatorAttachmentConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.authenticatorAttachment = authenticatorAttachmentConversionResult.releaseReturnValue();
    }
    JSValue clientExtensionResultsValue;
    if (isNullOrUndefined)
        clientExtensionResultsValue = jsUndefined();
    else {
        clientExtensionResultsValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "clientExtensionResults"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (clientExtensionResultsValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "clientExtensionResults"_s, "AuthenticationResponseJSON"_s, "AuthenticationExtensionsClientOutputsJSON"_s);
        return ConversionResultException { };
    }
    auto clientExtensionResultsConversionResult = convert<IDLDictionary<AuthenticationExtensionsClientOutputsJSON>>(lexicalGlobalObject, clientExtensionResultsValue);
    if (clientExtensionResultsConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.clientExtensionResults = clientExtensionResultsConversionResult.releaseReturnValue();
    JSValue idValue;
    if (isNullOrUndefined)
        idValue = jsUndefined();
    else {
        idValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "id"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (idValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "id"_s, "AuthenticationResponseJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto idConversionResult = convert<IDLDOMString>(lexicalGlobalObject, idValue);
    if (idConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.id = idConversionResult.releaseReturnValue();
    JSValue rawIdValue;
    if (isNullOrUndefined)
        rawIdValue = jsUndefined();
    else {
        rawIdValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "rawId"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (rawIdValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "rawId"_s, "AuthenticationResponseJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto rawIdConversionResult = convert<IDLDOMString>(lexicalGlobalObject, rawIdValue);
    if (rawIdConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.rawId = rawIdConversionResult.releaseReturnValue();
    JSValue responseValue;
    if (isNullOrUndefined)
        responseValue = jsUndefined();
    else {
        responseValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "response"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (responseValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "response"_s, "AuthenticationResponseJSON"_s, "AuthenticatorAssertionResponseJSON"_s);
        return ConversionResultException { };
    }
    auto responseConversionResult = convert<IDLDictionary<AuthenticationResponseJSON::AuthenticatorAssertionResponseJSON>>(lexicalGlobalObject, responseValue);
    if (responseConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.response = responseConversionResult.releaseReturnValue();
    JSValue typeValue;
    if (isNullOrUndefined)
        typeValue = jsUndefined();
    else {
        typeValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "type"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (typeValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "type"_s, "AuthenticationResponseJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto typeConversionResult = convert<IDLDOMString>(lexicalGlobalObject, typeValue);
    if (typeConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.type = typeConversionResult.releaseReturnValue();
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationResponseJSON& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    if (!IDLDOMString::isNullValue(dictionary.authenticatorAttachment)) {
        auto authenticatorAttachmentValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.authenticatorAttachment));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "authenticatorAttachment"_s), authenticatorAttachmentValue);
    }
    auto clientExtensionResultsValue = toJS<IDLDictionary<AuthenticationExtensionsClientOutputsJSON>>(lexicalGlobalObject, globalObject, throwScope, dictionary.clientExtensionResults);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "clientExtensionResults"_s), clientExtensionResultsValue);
    auto idValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.id);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "id"_s), idValue);
    auto rawIdValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.rawId);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "rawId"_s), rawIdValue);
    auto responseValue = toJS<IDLDictionary<AuthenticationResponseJSON::AuthenticatorAssertionResponseJSON>>(lexicalGlobalObject, globalObject, throwScope, dictionary.response);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "response"_s), responseValue);
    auto typeValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.type);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "type"_s), typeValue);
    return result;
}

#endif

#if ENABLE(WEB_AUTHN)

template<> ConversionResult<IDLDictionary<AuthenticationResponseJSON::AuthenticatorAssertionResponseJSON>> convertDictionary<AuthenticationResponseJSON::AuthenticatorAssertionResponseJSON>(JSGlobalObject& lexicalGlobalObject, JSValue value)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (!isNullOrUndefined && !object) [[unlikely]] {
        throwTypeError(&lexicalGlobalObject, throwScope);
        return ConversionResultException { };
    }
    AuthenticationResponseJSON::AuthenticatorAssertionResponseJSON result;
    JSValue authenticatorDataValue;
    if (isNullOrUndefined)
        authenticatorDataValue = jsUndefined();
    else {
        authenticatorDataValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "authenticatorData"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (authenticatorDataValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "authenticatorData"_s, "AuthenticatorAssertionResponseJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto authenticatorDataConversionResult = convert<IDLDOMString>(lexicalGlobalObject, authenticatorDataValue);
    if (authenticatorDataConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.authenticatorData = authenticatorDataConversionResult.releaseReturnValue();
    JSValue clientDataJSONValue;
    if (isNullOrUndefined)
        clientDataJSONValue = jsUndefined();
    else {
        clientDataJSONValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "clientDataJSON"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (clientDataJSONValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "clientDataJSON"_s, "AuthenticatorAssertionResponseJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto clientDataJSONConversionResult = convert<IDLDOMString>(lexicalGlobalObject, clientDataJSONValue);
    if (clientDataJSONConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.clientDataJSON = clientDataJSONConversionResult.releaseReturnValue();
    JSValue signatureValue;
    if (isNullOrUndefined)
        signatureValue = jsUndefined();
    else {
        signatureValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "signature"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (signatureValue.isUndefined()) {
        throwRequiredMemberTypeError(lexicalGlobalObject, throwScope, "signature"_s, "AuthenticatorAssertionResponseJSON"_s, "DOMString"_s);
        return ConversionResultException { };
    }
    auto signatureConversionResult = convert<IDLDOMString>(lexicalGlobalObject, signatureValue);
    if (signatureConversionResult.hasException(throwScope)) [[unlikely]]
        return ConversionResultException { };
    result.signature = signatureConversionResult.releaseReturnValue();
    JSValue userHandleValue;
    if (isNullOrUndefined)
        userHandleValue = jsUndefined();
    else {
        userHandleValue = object->get(&lexicalGlobalObject, Identifier::fromString(vm, "userHandle"_s));
        RETURN_IF_EXCEPTION(throwScope, ConversionResultException { });
    }
    if (!userHandleValue.isUndefined()) {
        auto userHandleConversionResult = convert<IDLDOMString>(lexicalGlobalObject, userHandleValue);
        if (userHandleConversionResult.hasException(throwScope)) [[unlikely]]
            return ConversionResultException { };
        result.userHandle = userHandleConversionResult.releaseReturnValue();
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, const AuthenticationResponseJSON::AuthenticatorAssertionResponseJSON& dictionary)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);

    auto result = constructEmptyObject(&lexicalGlobalObject, globalObject.objectPrototype());

    auto authenticatorDataValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.authenticatorData);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "authenticatorData"_s), authenticatorDataValue);
    auto clientDataJSONValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.clientDataJSON);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "clientDataJSON"_s), clientDataJSONValue);
    auto signatureValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, dictionary.signature);
    RETURN_IF_EXCEPTION(throwScope, { });
    result->putDirect(vm, JSC::Identifier::fromString(vm, "signature"_s), signatureValue);
    if (!IDLDOMString::isNullValue(dictionary.userHandle)) {
        auto userHandleValue = toJS<IDLDOMString>(lexicalGlobalObject, throwScope, IDLDOMString::extractValueFromNullable(dictionary.userHandle));
        RETURN_IF_EXCEPTION(throwScope, { });
        result->putDirect(vm, JSC::Identifier::fromString(vm, "userHandle"_s), userHandleValue);
    }
    return result;
}

#endif

} // namespace WebCore


#endif // ENABLE(WEB_AUTHN)
