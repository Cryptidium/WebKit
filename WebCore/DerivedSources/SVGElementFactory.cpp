/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include "SVGElementFactory.h"

#include "SVGNames.h"

#include "SVGAElement.h"
#include "SVGAltGlyphElement.h"
#include "SVGAltGlyphDefElement.h"
#include "SVGAltGlyphItemElement.h"
#include "SVGAnimateElement.h"
#include "SVGUnknownElement.h"
#include "SVGAnimateMotionElement.h"
#include "SVGAnimateTransformElement.h"
#include "SVGCircleElement.h"
#include "SVGClipPathElement.h"
#include "SVGCursorElement.h"
#include "SVGDefsElement.h"
#include "SVGDescElement.h"
#include "SVGEllipseElement.h"
#include "SVGFEBlendElement.h"
#include "SVGFEColorMatrixElement.h"
#include "SVGFEComponentTransferElement.h"
#include "SVGFECompositeElement.h"
#include "SVGFEConvolveMatrixElement.h"
#include "SVGFEDiffuseLightingElement.h"
#include "SVGFEDisplacementMapElement.h"
#include "SVGFEDistantLightElement.h"
#include "SVGFEDropShadowElement.h"
#include "SVGFEFloodElement.h"
#include "SVGFEFuncAElement.h"
#include "SVGFEFuncBElement.h"
#include "SVGFEFuncGElement.h"
#include "SVGFEFuncRElement.h"
#include "SVGFEGaussianBlurElement.h"
#include "SVGFEImageElement.h"
#include "SVGFEMergeElement.h"
#include "SVGFEMergeNodeElement.h"
#include "SVGFEMorphologyElement.h"
#include "SVGFEOffsetElement.h"
#include "SVGFEPointLightElement.h"
#include "SVGFESpecularLightingElement.h"
#include "SVGFESpotLightElement.h"
#include "SVGFETileElement.h"
#include "SVGFETurbulenceElement.h"
#include "SVGFilterElement.h"
#include "SVGFontElement.h"
#include "SVGFontFaceElement.h"
#include "SVGFontFaceFormatElement.h"
#include "SVGFontFaceNameElement.h"
#include "SVGFontFaceSrcElement.h"
#include "SVGFontFaceUriElement.h"
#include "SVGForeignObjectElement.h"
#include "SVGGElement.h"
#include "SVGGlyphElement.h"
#include "SVGGlyphRefElement.h"
#include "SVGHKernElement.h"
#include "SVGImageElement.h"
#include "SVGLineElement.h"
#include "SVGLinearGradientElement.h"
#include "SVGMarkerElement.h"
#include "SVGMaskElement.h"
#include "SVGMetadataElement.h"
#include "SVGMissingGlyphElement.h"
#include "SVGMPathElement.h"
#include "SVGPathElement.h"
#include "SVGPatternElement.h"
#include "SVGPolygonElement.h"
#include "SVGPolylineElement.h"
#include "SVGRadialGradientElement.h"
#include "SVGRectElement.h"
#include "SVGScriptElement.h"
#include "SVGSetElement.h"
#include "SVGStopElement.h"
#include "SVGStyleElement.h"
#include "SVGSVGElement.h"
#include "SVGSwitchElement.h"
#include "SVGSymbolElement.h"
#include "SVGTextElement.h"
#include "SVGTextPathElement.h"
#include "SVGTitleElement.h"
#include "SVGTRefElement.h"
#include "SVGTSpanElement.h"
#include "SVGUseElement.h"
#include "SVGViewElement.h"
#include "SVGVKernElement.h"
#include "SVGUnknownElement.h"

#include "DeprecatedGlobalSettings.h"
#include "Document.h"
#include "NodeName.h"
#include "Settings.h"
#include "TagName.h"

namespace WebCore {

static Ref<SVGElement> aConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGAElement::create(tagName, document);
}

static Ref<SVGElement> altglyphConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGAltGlyphElement::create(tagName, document);
}

static Ref<SVGElement> altglyphdefConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGAltGlyphDefElement::create(tagName, document);
}

static Ref<SVGElement> altglyphitemConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGAltGlyphItemElement::create(tagName, document);
}

static Ref<SVGElement> animateConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGAnimateElement::create(tagName, document);
}

static Ref<SVGElement> animatemotionConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGAnimateMotionElement::create(tagName, document);
}

static Ref<SVGElement> animatetransformConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGAnimateTransformElement::create(tagName, document);
}

static Ref<SVGElement> circleConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGCircleElement::create(tagName, document);
}

static Ref<SVGElement> clippathConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGClipPathElement::create(tagName, document);
}

static Ref<SVGElement> cursorConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGCursorElement::create(tagName, document);
}

static Ref<SVGElement> defsConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGDefsElement::create(tagName, document);
}

static Ref<SVGElement> descConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGDescElement::create(tagName, document);
}

static Ref<SVGElement> ellipseConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGEllipseElement::create(tagName, document);
}

static Ref<SVGElement> feblendConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEBlendElement::create(tagName, document);
}

static Ref<SVGElement> fecolormatrixConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEColorMatrixElement::create(tagName, document);
}

static Ref<SVGElement> fecomponenttransferConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEComponentTransferElement::create(tagName, document);
}

static Ref<SVGElement> fecompositeConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFECompositeElement::create(tagName, document);
}

static Ref<SVGElement> feconvolvematrixConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEConvolveMatrixElement::create(tagName, document);
}

static Ref<SVGElement> fediffuselightingConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEDiffuseLightingElement::create(tagName, document);
}

static Ref<SVGElement> fedisplacementmapConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEDisplacementMapElement::create(tagName, document);
}

static Ref<SVGElement> fedistantlightConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEDistantLightElement::create(tagName, document);
}

static Ref<SVGElement> fedropshadowConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEDropShadowElement::create(tagName, document);
}

static Ref<SVGElement> fefloodConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEFloodElement::create(tagName, document);
}

static Ref<SVGElement> fefuncaConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEFuncAElement::create(tagName, document);
}

static Ref<SVGElement> fefuncbConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEFuncBElement::create(tagName, document);
}

static Ref<SVGElement> fefuncgConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEFuncGElement::create(tagName, document);
}

static Ref<SVGElement> fefuncrConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEFuncRElement::create(tagName, document);
}

static Ref<SVGElement> fegaussianblurConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEGaussianBlurElement::create(tagName, document);
}

static Ref<SVGElement> feimageConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEImageElement::create(tagName, document);
}

static Ref<SVGElement> femergeConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEMergeElement::create(tagName, document);
}

static Ref<SVGElement> femergenodeConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEMergeNodeElement::create(tagName, document);
}

static Ref<SVGElement> femorphologyConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEMorphologyElement::create(tagName, document);
}

static Ref<SVGElement> feoffsetConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEOffsetElement::create(tagName, document);
}

static Ref<SVGElement> fepointlightConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFEPointLightElement::create(tagName, document);
}

static Ref<SVGElement> fespecularlightingConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFESpecularLightingElement::create(tagName, document);
}

static Ref<SVGElement> fespotlightConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFESpotLightElement::create(tagName, document);
}

static Ref<SVGElement> fetileConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFETileElement::create(tagName, document);
}

static Ref<SVGElement> feturbulenceConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFETurbulenceElement::create(tagName, document);
}

static Ref<SVGElement> filterConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFilterElement::create(tagName, document);
}

static Ref<SVGElement> fontConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFontElement::create(tagName, document);
}

static Ref<SVGElement> fontfaceConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFontFaceElement::create(tagName, document);
}

static Ref<SVGElement> fontfaceformatConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFontFaceFormatElement::create(tagName, document);
}

static Ref<SVGElement> fontfacenameConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFontFaceNameElement::create(tagName, document);
}

static Ref<SVGElement> fontfacesrcConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFontFaceSrcElement::create(tagName, document);
}

static Ref<SVGElement> fontfaceuriConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGFontFaceUriElement::create(tagName, document);
}

static Ref<SVGElement> foreignobjectConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGForeignObjectElement::create(tagName, document);
}

static Ref<SVGElement> gConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGGElement::create(tagName, document);
}

static Ref<SVGElement> glyphConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGGlyphElement::create(tagName, document);
}

static Ref<SVGElement> glyphrefConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGGlyphRefElement::create(tagName, document);
}

static Ref<SVGElement> hkernConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGHKernElement::create(tagName, document);
}

static Ref<SVGElement> imageConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGImageElement::create(tagName, document);
}

static Ref<SVGElement> lineConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGLineElement::create(tagName, document);
}

static Ref<SVGElement> lineargradientConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGLinearGradientElement::create(tagName, document);
}

static Ref<SVGElement> markerConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGMarkerElement::create(tagName, document);
}

static Ref<SVGElement> maskConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGMaskElement::create(tagName, document);
}

static Ref<SVGElement> metadataConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGMetadataElement::create(tagName, document);
}

static Ref<SVGElement> missingglyphConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGMissingGlyphElement::create(tagName, document);
}

static Ref<SVGElement> mpathConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGMPathElement::create(tagName, document);
}

static Ref<SVGElement> pathConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGPathElement::create(tagName, document);
}

static Ref<SVGElement> patternConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGPatternElement::create(tagName, document);
}

static Ref<SVGElement> polygonConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGPolygonElement::create(tagName, document);
}

static Ref<SVGElement> polylineConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGPolylineElement::create(tagName, document);
}

static Ref<SVGElement> radialgradientConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGRadialGradientElement::create(tagName, document);
}

static Ref<SVGElement> rectConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGRectElement::create(tagName, document);
}

static Ref<SVGElement> scriptConstructor(const QualifiedName& tagName, Document& document, bool createdByParser)
{
    return SVGScriptElement::create(tagName, document, createdByParser);
}

static Ref<SVGElement> setConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGSetElement::create(tagName, document);
}

static Ref<SVGElement> stopConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGStopElement::create(tagName, document);
}

static Ref<SVGElement> styleConstructor(const QualifiedName& tagName, Document& document, bool createdByParser)
{
    return SVGStyleElement::create(tagName, document, createdByParser);
}

static Ref<SVGElement> svgConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGSVGElement::create(tagName, document);
}

static Ref<SVGElement> switchConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGSwitchElement::create(tagName, document);
}

static Ref<SVGElement> symbolConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGSymbolElement::create(tagName, document);
}

static Ref<SVGElement> textConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGTextElement::create(tagName, document);
}

static Ref<SVGElement> textpathConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGTextPathElement::create(tagName, document);
}

static Ref<SVGElement> titleConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGTitleElement::create(tagName, document);
}

static Ref<SVGElement> trefConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGTRefElement::create(tagName, document);
}

static Ref<SVGElement> tspanConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGTSpanElement::create(tagName, document);
}

static Ref<SVGElement> useConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGUseElement::create(tagName, document);
}

static Ref<SVGElement> viewConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGViewElement::create(tagName, document);
}

static Ref<SVGElement> vkernConstructor(const QualifiedName& tagName, Document& document, bool)
{
    return SVGVKernElement::create(tagName, document);
}


RefPtr<SVGElement> SVGElementFactory::createKnownElement(TagName tagName, Document& document, bool createdByParser)
{
    switch (tagName) {
    case TagName::a:
        return aConstructor(SVGNames::aTag, document, createdByParser);
    case TagName::altGlyph:
        return altglyphConstructor(SVGNames::altGlyphTag, document, createdByParser);
    case TagName::altGlyphDef:
        return altglyphdefConstructor(SVGNames::altGlyphDefTag, document, createdByParser);
    case TagName::altGlyphItem:
        return altglyphitemConstructor(SVGNames::altGlyphItemTag, document, createdByParser);
    case TagName::animate:
        return animateConstructor(SVGNames::animateTag, document, createdByParser);
    case TagName::animateMotion:
        return animatemotionConstructor(SVGNames::animateMotionTag, document, createdByParser);
    case TagName::animateTransform:
        return animatetransformConstructor(SVGNames::animateTransformTag, document, createdByParser);
    case TagName::circle:
        return circleConstructor(SVGNames::circleTag, document, createdByParser);
    case TagName::clipPath:
        return clippathConstructor(SVGNames::clipPathTag, document, createdByParser);
    case TagName::cursor:
        return cursorConstructor(SVGNames::cursorTag, document, createdByParser);
    case TagName::defs:
        return defsConstructor(SVGNames::defsTag, document, createdByParser);
    case TagName::desc:
        return descConstructor(SVGNames::descTag, document, createdByParser);
    case TagName::ellipse:
        return ellipseConstructor(SVGNames::ellipseTag, document, createdByParser);
    case TagName::feBlend:
        return feblendConstructor(SVGNames::feBlendTag, document, createdByParser);
    case TagName::feColorMatrix:
        return fecolormatrixConstructor(SVGNames::feColorMatrixTag, document, createdByParser);
    case TagName::feComponentTransfer:
        return fecomponenttransferConstructor(SVGNames::feComponentTransferTag, document, createdByParser);
    case TagName::feComposite:
        return fecompositeConstructor(SVGNames::feCompositeTag, document, createdByParser);
    case TagName::feConvolveMatrix:
        return feconvolvematrixConstructor(SVGNames::feConvolveMatrixTag, document, createdByParser);
    case TagName::feDiffuseLighting:
        return fediffuselightingConstructor(SVGNames::feDiffuseLightingTag, document, createdByParser);
    case TagName::feDisplacementMap:
        return fedisplacementmapConstructor(SVGNames::feDisplacementMapTag, document, createdByParser);
    case TagName::feDistantLight:
        return fedistantlightConstructor(SVGNames::feDistantLightTag, document, createdByParser);
    case TagName::feDropShadow:
        return fedropshadowConstructor(SVGNames::feDropShadowTag, document, createdByParser);
    case TagName::feFlood:
        return fefloodConstructor(SVGNames::feFloodTag, document, createdByParser);
    case TagName::feFuncA:
        return fefuncaConstructor(SVGNames::feFuncATag, document, createdByParser);
    case TagName::feFuncB:
        return fefuncbConstructor(SVGNames::feFuncBTag, document, createdByParser);
    case TagName::feFuncG:
        return fefuncgConstructor(SVGNames::feFuncGTag, document, createdByParser);
    case TagName::feFuncR:
        return fefuncrConstructor(SVGNames::feFuncRTag, document, createdByParser);
    case TagName::feGaussianBlur:
        return fegaussianblurConstructor(SVGNames::feGaussianBlurTag, document, createdByParser);
    case TagName::feImage:
        return feimageConstructor(SVGNames::feImageTag, document, createdByParser);
    case TagName::feMerge:
        return femergeConstructor(SVGNames::feMergeTag, document, createdByParser);
    case TagName::feMergeNode:
        return femergenodeConstructor(SVGNames::feMergeNodeTag, document, createdByParser);
    case TagName::feMorphology:
        return femorphologyConstructor(SVGNames::feMorphologyTag, document, createdByParser);
    case TagName::feOffset:
        return feoffsetConstructor(SVGNames::feOffsetTag, document, createdByParser);
    case TagName::fePointLight:
        return fepointlightConstructor(SVGNames::fePointLightTag, document, createdByParser);
    case TagName::feSpecularLighting:
        return fespecularlightingConstructor(SVGNames::feSpecularLightingTag, document, createdByParser);
    case TagName::feSpotLight:
        return fespotlightConstructor(SVGNames::feSpotLightTag, document, createdByParser);
    case TagName::feTile:
        return fetileConstructor(SVGNames::feTileTag, document, createdByParser);
    case TagName::feTurbulence:
        return feturbulenceConstructor(SVGNames::feTurbulenceTag, document, createdByParser);
    case TagName::filter:
        return filterConstructor(SVGNames::filterTag, document, createdByParser);
    case TagName::font:
        return fontConstructor(SVGNames::fontTag, document, createdByParser);
    case TagName::font_face:
        return fontfaceConstructor(SVGNames::font_faceTag, document, createdByParser);
    case TagName::font_face_format:
        return fontfaceformatConstructor(SVGNames::font_face_formatTag, document, createdByParser);
    case TagName::font_face_name:
        return fontfacenameConstructor(SVGNames::font_face_nameTag, document, createdByParser);
    case TagName::font_face_src:
        return fontfacesrcConstructor(SVGNames::font_face_srcTag, document, createdByParser);
    case TagName::font_face_uri:
        return fontfaceuriConstructor(SVGNames::font_face_uriTag, document, createdByParser);
    case TagName::foreignObject:
        return foreignobjectConstructor(SVGNames::foreignObjectTag, document, createdByParser);
    case TagName::g:
        return gConstructor(SVGNames::gTag, document, createdByParser);
    case TagName::glyph:
        return glyphConstructor(SVGNames::glyphTag, document, createdByParser);
    case TagName::glyphRef:
        return glyphrefConstructor(SVGNames::glyphRefTag, document, createdByParser);
    case TagName::hkern:
        return hkernConstructor(SVGNames::hkernTag, document, createdByParser);
    case TagName::image:
        return imageConstructor(SVGNames::imageTag, document, createdByParser);
    case TagName::line:
        return lineConstructor(SVGNames::lineTag, document, createdByParser);
    case TagName::linearGradient:
        return lineargradientConstructor(SVGNames::linearGradientTag, document, createdByParser);
    case TagName::marker:
        return markerConstructor(SVGNames::markerTag, document, createdByParser);
    case TagName::mask:
        return maskConstructor(SVGNames::maskTag, document, createdByParser);
    case TagName::metadata:
        return metadataConstructor(SVGNames::metadataTag, document, createdByParser);
    case TagName::missing_glyph:
        return missingglyphConstructor(SVGNames::missing_glyphTag, document, createdByParser);
    case TagName::mpath:
        return mpathConstructor(SVGNames::mpathTag, document, createdByParser);
    case TagName::path:
        return pathConstructor(SVGNames::pathTag, document, createdByParser);
    case TagName::pattern:
        return patternConstructor(SVGNames::patternTag, document, createdByParser);
    case TagName::polygon:
        return polygonConstructor(SVGNames::polygonTag, document, createdByParser);
    case TagName::polyline:
        return polylineConstructor(SVGNames::polylineTag, document, createdByParser);
    case TagName::radialGradient:
        return radialgradientConstructor(SVGNames::radialGradientTag, document, createdByParser);
    case TagName::rect:
        return rectConstructor(SVGNames::rectTag, document, createdByParser);
    case TagName::script:
        return scriptConstructor(SVGNames::scriptTag, document, createdByParser);
    case TagName::set:
        return setConstructor(SVGNames::setTag, document, createdByParser);
    case TagName::stop:
        return stopConstructor(SVGNames::stopTag, document, createdByParser);
    case TagName::style:
        return styleConstructor(SVGNames::styleTag, document, createdByParser);
    case TagName::svg:
        return svgConstructor(SVGNames::svgTag, document, createdByParser);
    case TagName::switch_:
        return switchConstructor(SVGNames::switchTag, document, createdByParser);
    case TagName::symbol:
        return symbolConstructor(SVGNames::symbolTag, document, createdByParser);
    case TagName::text:
        return textConstructor(SVGNames::textTag, document, createdByParser);
    case TagName::textPath:
        return textpathConstructor(SVGNames::textPathTag, document, createdByParser);
    case TagName::title:
        return titleConstructor(SVGNames::titleTag, document, createdByParser);
    case TagName::tref:
        return trefConstructor(SVGNames::trefTag, document, createdByParser);
    case TagName::tspan:
        return tspanConstructor(SVGNames::tspanTag, document, createdByParser);
    case TagName::use:
        return useConstructor(SVGNames::useTag, document, createdByParser);
    case TagName::view:
        return viewConstructor(SVGNames::viewTag, document, createdByParser);
    case TagName::vkern:
        return vkernConstructor(SVGNames::vkernTag, document, createdByParser);
    default:
        return nullptr;
    }
}

RefPtr<SVGElement> SVGElementFactory::createKnownElementWithName(TagName tagName, const QualifiedName& name, Document& document, bool createdByParser)
{
    switch (tagName) {
    case TagName::a:
        return aConstructor(name, document, createdByParser);
    case TagName::altGlyph:
        return altglyphConstructor(name, document, createdByParser);
    case TagName::altGlyphDef:
        return altglyphdefConstructor(name, document, createdByParser);
    case TagName::altGlyphItem:
        return altglyphitemConstructor(name, document, createdByParser);
    case TagName::animate:
        return animateConstructor(name, document, createdByParser);
    case TagName::animateMotion:
        return animatemotionConstructor(name, document, createdByParser);
    case TagName::animateTransform:
        return animatetransformConstructor(name, document, createdByParser);
    case TagName::circle:
        return circleConstructor(name, document, createdByParser);
    case TagName::clipPath:
        return clippathConstructor(name, document, createdByParser);
    case TagName::cursor:
        return cursorConstructor(name, document, createdByParser);
    case TagName::defs:
        return defsConstructor(name, document, createdByParser);
    case TagName::desc:
        return descConstructor(name, document, createdByParser);
    case TagName::ellipse:
        return ellipseConstructor(name, document, createdByParser);
    case TagName::feBlend:
        return feblendConstructor(name, document, createdByParser);
    case TagName::feColorMatrix:
        return fecolormatrixConstructor(name, document, createdByParser);
    case TagName::feComponentTransfer:
        return fecomponenttransferConstructor(name, document, createdByParser);
    case TagName::feComposite:
        return fecompositeConstructor(name, document, createdByParser);
    case TagName::feConvolveMatrix:
        return feconvolvematrixConstructor(name, document, createdByParser);
    case TagName::feDiffuseLighting:
        return fediffuselightingConstructor(name, document, createdByParser);
    case TagName::feDisplacementMap:
        return fedisplacementmapConstructor(name, document, createdByParser);
    case TagName::feDistantLight:
        return fedistantlightConstructor(name, document, createdByParser);
    case TagName::feDropShadow:
        return fedropshadowConstructor(name, document, createdByParser);
    case TagName::feFlood:
        return fefloodConstructor(name, document, createdByParser);
    case TagName::feFuncA:
        return fefuncaConstructor(name, document, createdByParser);
    case TagName::feFuncB:
        return fefuncbConstructor(name, document, createdByParser);
    case TagName::feFuncG:
        return fefuncgConstructor(name, document, createdByParser);
    case TagName::feFuncR:
        return fefuncrConstructor(name, document, createdByParser);
    case TagName::feGaussianBlur:
        return fegaussianblurConstructor(name, document, createdByParser);
    case TagName::feImage:
        return feimageConstructor(name, document, createdByParser);
    case TagName::feMerge:
        return femergeConstructor(name, document, createdByParser);
    case TagName::feMergeNode:
        return femergenodeConstructor(name, document, createdByParser);
    case TagName::feMorphology:
        return femorphologyConstructor(name, document, createdByParser);
    case TagName::feOffset:
        return feoffsetConstructor(name, document, createdByParser);
    case TagName::fePointLight:
        return fepointlightConstructor(name, document, createdByParser);
    case TagName::feSpecularLighting:
        return fespecularlightingConstructor(name, document, createdByParser);
    case TagName::feSpotLight:
        return fespotlightConstructor(name, document, createdByParser);
    case TagName::feTile:
        return fetileConstructor(name, document, createdByParser);
    case TagName::feTurbulence:
        return feturbulenceConstructor(name, document, createdByParser);
    case TagName::filter:
        return filterConstructor(name, document, createdByParser);
    case TagName::font:
        return fontConstructor(name, document, createdByParser);
    case TagName::font_face:
        return fontfaceConstructor(name, document, createdByParser);
    case TagName::font_face_format:
        return fontfaceformatConstructor(name, document, createdByParser);
    case TagName::font_face_name:
        return fontfacenameConstructor(name, document, createdByParser);
    case TagName::font_face_src:
        return fontfacesrcConstructor(name, document, createdByParser);
    case TagName::font_face_uri:
        return fontfaceuriConstructor(name, document, createdByParser);
    case TagName::foreignObject:
        return foreignobjectConstructor(name, document, createdByParser);
    case TagName::g:
        return gConstructor(name, document, createdByParser);
    case TagName::glyph:
        return glyphConstructor(name, document, createdByParser);
    case TagName::glyphRef:
        return glyphrefConstructor(name, document, createdByParser);
    case TagName::hkern:
        return hkernConstructor(name, document, createdByParser);
    case TagName::image:
        return imageConstructor(name, document, createdByParser);
    case TagName::line:
        return lineConstructor(name, document, createdByParser);
    case TagName::linearGradient:
        return lineargradientConstructor(name, document, createdByParser);
    case TagName::marker:
        return markerConstructor(name, document, createdByParser);
    case TagName::mask:
        return maskConstructor(name, document, createdByParser);
    case TagName::metadata:
        return metadataConstructor(name, document, createdByParser);
    case TagName::missing_glyph:
        return missingglyphConstructor(name, document, createdByParser);
    case TagName::mpath:
        return mpathConstructor(name, document, createdByParser);
    case TagName::path:
        return pathConstructor(name, document, createdByParser);
    case TagName::pattern:
        return patternConstructor(name, document, createdByParser);
    case TagName::polygon:
        return polygonConstructor(name, document, createdByParser);
    case TagName::polyline:
        return polylineConstructor(name, document, createdByParser);
    case TagName::radialGradient:
        return radialgradientConstructor(name, document, createdByParser);
    case TagName::rect:
        return rectConstructor(name, document, createdByParser);
    case TagName::script:
        return scriptConstructor(name, document, createdByParser);
    case TagName::set:
        return setConstructor(name, document, createdByParser);
    case TagName::stop:
        return stopConstructor(name, document, createdByParser);
    case TagName::style:
        return styleConstructor(name, document, createdByParser);
    case TagName::svg:
        return svgConstructor(name, document, createdByParser);
    case TagName::switch_:
        return switchConstructor(name, document, createdByParser);
    case TagName::symbol:
        return symbolConstructor(name, document, createdByParser);
    case TagName::text:
        return textConstructor(name, document, createdByParser);
    case TagName::textPath:
        return textpathConstructor(name, document, createdByParser);
    case TagName::title:
        return titleConstructor(name, document, createdByParser);
    case TagName::tref:
        return trefConstructor(name, document, createdByParser);
    case TagName::tspan:
        return tspanConstructor(name, document, createdByParser);
    case TagName::use:
        return useConstructor(name, document, createdByParser);
    case TagName::view:
        return viewConstructor(name, document, createdByParser);
    case TagName::vkern:
        return vkernConstructor(name, document, createdByParser);
    default:
        return nullptr;
    }
}

RefPtr<SVGElement> SVGElementFactory::createKnownElement(const AtomString& localName, Document& document, bool createdByParser)
{
    return createKnownElement(tagNameForElementName(findSVGElementName(localName)), document, createdByParser);
}

RefPtr<SVGElement> SVGElementFactory::createKnownElement(const QualifiedName& name, Document& document, bool createdByParser)
{
    return createKnownElementWithName(tagNameForElementName(name.nodeName()), name, document, createdByParser);
}

Ref<SVGElement> SVGElementFactory::createElement(const AtomString& localName, Document& document, bool createdByParser)
{
    auto elementName = findSVGElementName(localName);
    if (elementName != ElementName::Unknown)
        return createKnownElement(tagNameForElementName(elementName), document, createdByParser).releaseNonNull();
    return SVGUnknownElement::create(QualifiedName(nullAtom(), localName, SVGNames::svgNamespaceURI), document);
}

Ref<SVGElement> SVGElementFactory::createElement(const QualifiedName& name, Document& document, bool createdByParser)
{
    auto elementName = name.nodeName();
    if (elementName != ElementName::Unknown) {
        if (auto result = createKnownElementWithName(tagNameForElementName(elementName), name, document, createdByParser))
            return result.releaseNonNull();
    }
    return SVGUnknownElement::create(name, document);
}

} // namespace WebCore

