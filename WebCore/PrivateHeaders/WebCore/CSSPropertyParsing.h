// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#pragma once

#include "CSSPropertyNames.h"
#include "CSSValueKeywords.h"

namespace WebCore {

class CSSParserTokenRange;
class CSSValue;

namespace CSS {

struct PropertyParserResult;
struct PropertyParserState;

} // namespace CSS

struct CSSPropertyParsing {
    // Parse and return a single longhand style property.
    static RefPtr<CSSValue> parseStylePropertyLonghand(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&);
    // Parse a shorthand style property, adding longhands to the provided result collection. Returns true on success, false on failure.
    static bool parseStylePropertyShorthand(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&, CSS::PropertyParserResult&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForStyleProperty(CSSPropertyID, CSSValueID, CSS::PropertyParserState&);
    static bool isKeywordFastPathEligibleStyleProperty(CSSPropertyID);

    // Parse and return a single @counter-style descriptor.
    static RefPtr<CSSValue> parseCounterStyleDescriptor(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForCounterStyleDescriptor(CSSPropertyID, CSSValueID, CSS::PropertyParserState&);
    static bool isKeywordFastPathEligibleCounterStyleDescriptor(CSSPropertyID);

    // Parse and return a single @font-face descriptor.
    static RefPtr<CSSValue> parseFontFaceDescriptor(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForFontFaceDescriptor(CSSPropertyID, CSSValueID, CSS::PropertyParserState&);
    static bool isKeywordFastPathEligibleFontFaceDescriptor(CSSPropertyID);

    // Parse and return a single @font-palette-values descriptor.
    static RefPtr<CSSValue> parseFontPaletteValuesDescriptor(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForFontPaletteValuesDescriptor(CSSPropertyID, CSSValueID, CSS::PropertyParserState&);
    static bool isKeywordFastPathEligibleFontPaletteValuesDescriptor(CSSPropertyID);

    // Parse and return a single @page descriptor.
    static RefPtr<CSSValue> parsePageDescriptor(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForPageDescriptor(CSSPropertyID, CSSValueID, CSS::PropertyParserState&);
    static bool isKeywordFastPathEligiblePageDescriptor(CSSPropertyID);

    // Parse and return a single @property descriptor.
    static RefPtr<CSSValue> parsePropertyDescriptor(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForPropertyDescriptor(CSSPropertyID, CSSValueID, CSS::PropertyParserState&);
    static bool isKeywordFastPathEligiblePropertyDescriptor(CSSPropertyID);

    // Parse and return a single @view-transition descriptor.
    static RefPtr<CSSValue> parseViewTransitionDescriptor(CSSParserTokenRange&, CSSPropertyID, CSS::PropertyParserState&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForViewTransitionDescriptor(CSSPropertyID, CSSValueID, CSS::PropertyParserState&);
    static bool isKeywordFastPathEligibleViewTransitionDescriptor(CSSPropertyID);

    // Direct consumers.

    // Exported style property consumers.
    static RefPtr<CSSValue> consumeFontFeatureSettings(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeFontSize(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeFontVariantAlternates(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontVariantCaps(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontVariantEastAsian(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontVariantEmoji(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontVariantPosition(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontWeight(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeBlockEllipsis(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeBlockStepAlign(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeBlockStepInsert(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeBlockStepRound(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeBlockStepSize(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeBorderImageOutset(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeBorderImageRepeat(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeColumnCount(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeColumnGap(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeColumnWidth(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeContinue(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeLineHeight(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeListStyleType(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeMaxLines(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumePerspective(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeRowGap(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeScrollTimelineAxis(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeScrollTimelineName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTextBoxTrim(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTextDecorationLine(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTextWrapMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTextWrapStyle(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeTransform(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeViewTimelineAxis(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeViewTimelineName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeWhiteSpaceCollapse(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeContainIntrinsicHeight(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeContainIntrinsicWidth(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeOverscrollBehaviorX(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeOverscrollBehaviorY(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeCornerStartEndShape(CSSParserTokenRange&, CSS::PropertyParserState&);

    // Exported @font-face descriptor consumers.
    static RefPtr<CSSValue> consumeFontFaceFontDisplay(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontFaceFontFamily(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeFontFaceFontFeatureSettings(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeFontFaceFontWeight(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeFontFaceFontWidth(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeFontFaceSizeAdjust(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeFontFaceUnicodeRange(CSSParserTokenRange&);

    // Exported @view-transition descriptor consumers.
    static RefPtr<CSSValue> consumeViewTransitionNavigation(CSSParserTokenRange&);

    // Exported shared consumers.
    static RefPtr<CSSValue> consumeAxis(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeBlendMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontWidthAbsolute(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeGeometryBox(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeLineWidth(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeScroller(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeShapeBox(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationComposition(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationDirection(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationDuration(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleAnimationFillMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationIterationCount(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleAnimationName(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleAnimationPlayState(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundAttachment(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundBlendMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundClip(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleBackgroundImage(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleBackgroundOrigin(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundPositionX(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleBackgroundPositionY(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleBackgroundRepeat(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleContainerName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskClip(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskComposite(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskImage(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleMaskMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskOrigin(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskRepeat(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleScrollTimelineName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleViewTimelineInset(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleWebkitBackgroundClip(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitBackgroundOrigin(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskClip(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskComposite(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskPositionX(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskPositionY(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskSourceType(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSymbol(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeTimelineRangeName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTransformFunction(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeTransformList(CSSParserTokenRange&, CSS::PropertyParserState&);
    static RefPtr<CSSValue> consumeTransitionBehaviorValue(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeWidthOrHeight(CSSParserTokenRange&, CSS::PropertyParserState&);
};

} // namespace WebCore

